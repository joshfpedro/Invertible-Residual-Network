(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1250667,      23093]
NotebookOptionsPosition[   1243659,      22971]
NotebookOutlinePosition[   1244002,      22986]
CellTagsIndexPosition[   1243959,      22983]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Training Net", "Section",
 CellChangeTimes->{{3.7712451283911304`*^9, 3.7712451316814165`*^9}, {
  3.771429487828245*^9, 
  3.7714294883105803`*^9}},ExpressionUUID->"2224c134-276d-45c7-94ea-\
4dd0ffa2d06b"],

Cell[CellGroupData[{

Cell["Jacobian", "Subsection",
 CellChangeTimes->{{3.774349302424162*^9, 
  3.7743493042569532`*^9}},ExpressionUUID->"05f03502-7a93-439f-b1ec-\
147fe6302be3"],

Cell["Helpers to compute the Jacobian (of a function at a point)", "Text",
 CellChangeTimes->{{3.771430193599156*^9, 3.771430214330559*^9}, {
  3.771430871152418*^9, 3.771430891146223*^9}, {3.7743493162634497`*^9, 
  3.774349316550748*^9}},ExpressionUUID->"5f016171-0170-4547-bb4e-\
08190d5bca0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Takes", " ", "input", " ", "of", " ", "and", " ", "outputs", " ", "a", 
    " ", "Jacobian", " ", "and", " ", "a", " ", "corresponding", " ", 
    "function"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"JacobianNet", "[", 
      RowBox[{"func_", ",", " ", 
       RowBox[{"epsilon_:", "1*^-3"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "lin", ",", " ", "net1", ",", " ", 
         RowBox[{"sharedFunc", " ", "=", " ", 
          RowBox[{"NetInsertSharedArrays", "[", "func", "]"}]}]}], "}"}], ",",
        " ", "\[IndentingNewLine]", "\t", 
       RowBox[{
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"NetExtract", "[", 
          RowBox[{"sharedFunc", ",", " ", "\"\<Input\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"net1", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", "n", "]"}], ",", " ", 
             RowBox[{"ConstantArrayLayer", "[", 
              RowBox[{"\"\<Array\>\"", " ", "\[Rule]", " ", 
               RowBox[{
                RowBox[{"N", "[", "epsilon", "]"}], "*", 
                RowBox[{"IdentityMatrix", "[", "n", "]"}]}]}], "]"}], ",", 
             " ", 
             RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}],
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
        RowBox[{"NetGraph", "[", 
         RowBox[{
          RowBox[{"<|", "\n", "\t\t", 
           RowBox[{
            RowBox[{"\"\<addEpsilon\>\"", "\[Rule]", " ", "net1"}], ",", "\n",
             "\t\t", 
            RowBox[{"\"\<MapFunction\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapOperator", "[", "sharedFunc", "]"}]}], ",", "\n", 
            "\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "sharedFunc"}], 
            ",", "\n", "\t\t", 
            RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapThreadOperator", "[", "\n", "\t\t\t", 
              RowBox[{
               RowBox[{"ThreadingLayer", "[", 
                RowBox[{"Subtract", ",", 
                 RowBox[{"\"\<Inputs\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
               RowBox[{"<|", 
                RowBox[{"\"\<1\>\"", "\[Rule]", "1"}], "|>"}]}], "]"}]}], ",",
             "\n", "\t\t\t", 
            RowBox[{"\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
             RowBox[{"ElementwiseLayer", "[", 
              RowBox[{
               RowBox[{"#", " ", "/", " ", "epsilon"}], " ", "&"}], "]"}]}], 
            ",", "\n", "\t\t\t", 
            RowBox[{"\"\<transpose\>\"", " ", "\[Rule]", " ", 
             RowBox[{"TransposeLayer", "[", "]"}]}]}], "\n", "\t\t", "|>"}], 
          ",", "\n", "\t\t", 
          RowBox[{"{", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{
            "\"\<addEpsilon\>\"", " ", "\[Rule]", " ", 
             "\"\<MapFunction\>\""}], ",", "\n", "\t\t\t", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<MapFunction\>\"", ",", "\"\<Function\>\""}], "}"}],
              "\[Rule]", 
             RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
              RowBox[{
              "\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
               "\"\<transpose\>\""}]}]}], ",", "\n", "\t\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetPort", "[", "\"\<z\>\"", "]"}]}]}], "\n", "\t\t", 
           "}"}]}], "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\n", "\n", "\n", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<JacobianNet Sanity Check:\>\"", ",", "\"\<Text\>\""}], 
      "]"}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"W", " ", "=", " ", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {"1", "2", "3"},
         {"4", "5", "6"},
         {"7", "8", "9"}
        }], ")"}], "/", "10."}]}], ";", " ", 
    RowBox[{"b", " ", "=", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "5"}], "}"}], "/", "10."}]}], ";"}], "\n", 
   RowBox[{"<|", "\n", "\t", 
    RowBox[{
     RowBox[{"\"\<JacobianNet\>\"", " ", "\[Rule]", " ", 
      RowBox[{"MatrixForm", " ", "@", " ", 
       RowBox[{
        RowBox[{"Echo", "[", 
         RowBox[{"JacobianNet", "[", 
          RowBox[{"NetChain", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"LinearLayer", "[", 
              RowBox[{"3", ",", 
               RowBox[{"\"\<Input\>\"", "\[Rule]", "3"}], ",", " ", 
               RowBox[{"\"\<Weights\>\"", "\[Rule]", "W"}], ",", 
               RowBox[{"\"\<Biases\>\"", "\[Rule]", "b"}]}], "]"}], ",", " ", 
             "Tanh"}], "}"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"-", "2"}], ",", 
           RowBox[{"-", "3"}]}], "}"}], ",", " ", "\"\<Output\>\""}], 
        "]"}]}]}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<Reference\>\"", " ", "\[Rule]", " ", 
       RowBox[{"MatrixForm", " ", "@", " ", 
        RowBox[{"N", " ", "@", " ", 
         RowBox[{"D", "[", 
          RowBox[{
           RowBox[{"Tanh", "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"W", ".", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "+", "b"}], ")"}],
             "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "z"}], "}"}], "}"}]}], "]"}]}]}]}], 
      " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "\[Rule]", 
         RowBox[{"-", "1"}]}], ",", " ", 
        RowBox[{"y", "\[Rule]", 
         RowBox[{"-", "2"}]}], ",", " ", 
        RowBox[{"z", "\[Rule]", 
         RowBox[{"-", "3"}]}]}], "}"}]}]}], "\n", "|>"}]}]}]], "Code",
 CellChangeTimes->{{3.7712449742491846`*^9, 3.771245006366479*^9}, {
   3.7712451508831515`*^9, 3.7712451557841234`*^9}, {3.7712453144685216`*^9, 
   3.7712453285817113`*^9}, {3.7712457304715033`*^9, 
   3.7712457308931007`*^9}, {3.7712458259602227`*^9, 3.771245850404341*^9}, {
   3.7712459191204967`*^9, 3.7712459291404824`*^9}, {3.7712461153774204`*^9, 
   3.771246153338872*^9}, {3.7712462382690597`*^9, 3.7712462393199034`*^9}, {
   3.771246330313553*^9, 3.7712464063691993`*^9}, {3.7712464726031733`*^9, 
   3.7712464860937243`*^9}, {3.771246540718958*^9, 3.771246555169996*^9}, {
   3.7712466800239964`*^9, 3.7712466865206413`*^9}, {3.771252682820319*^9, 
   3.7712526886540747`*^9}, {3.771252902567024*^9, 3.771252978293189*^9}, {
   3.7712530384354324`*^9, 3.771253079399975*^9}, {3.771253116220532*^9, 
   3.771253123793268*^9}, {3.771253380719039*^9, 3.7712533889277287`*^9}, {
   3.7712534698197002`*^9, 3.771253554009178*^9}, 3.7712536853326907`*^9, {
   3.7712541530167217`*^9, 3.7712542144035273`*^9}, 3.771254424797951*^9, 
   3.771254598201507*^9, {3.7712546714725294`*^9, 3.7712547071027145`*^9}, 
   3.77125474946239*^9, {3.7712548842551365`*^9, 3.771254932131669*^9}, {
   3.7712558131951303`*^9, 3.7712558710050125`*^9}, {3.771255915368943*^9, 
   3.7712559808829327`*^9}, {3.771256068624137*^9, 3.771256118081049*^9}, {
   3.77125616620991*^9, 3.771256171259182*^9}, 3.7712564488714848`*^9, {
   3.7712565465180397`*^9, 3.771256552092588*^9}, {3.7712571653739414`*^9, 
   3.771257172429468*^9}, {3.7712573877926216`*^9, 3.7712574037348146`*^9}, {
   3.7713244660005426`*^9, 3.7713244910245776`*^9}, {3.7713245243790855`*^9, 
   3.771324531988117*^9}, {3.7713245908646317`*^9, 3.7713245959189453`*^9}, {
   3.7713249191158295`*^9, 3.771324946301439*^9}, 3.771325843479694*^9, {
   3.771335643376546*^9, 3.7713356487496405`*^9}, {3.7713356846427784`*^9, 
   3.7713357320037837`*^9}, {3.7713358479249325`*^9, 
   3.7713358505109787`*^9}, {3.7713359320692725`*^9, 3.771335959998743*^9}, {
   3.771336024185506*^9, 3.771336025487505*^9}, {3.771337124879886*^9, 
   3.7713371679068193`*^9}, {3.771337926772975*^9, 3.7713379470355263`*^9}, {
   3.7713380138964157`*^9, 3.7713380192122517`*^9}, {3.7713381625833273`*^9, 
   3.771338195343887*^9}, {3.771338382620248*^9, 3.7713383831857405`*^9}, {
   3.7713397317904825`*^9, 3.7713397656696844`*^9}, {3.7713397970856915`*^9, 
   3.7713397999350233`*^9}, {3.7713400425678825`*^9, 3.771340053186591*^9}, {
   3.7713401150641637`*^9, 3.7713402533748283`*^9}, {3.771340556522333*^9, 
   3.771340558227483*^9}, {3.771341022932105*^9, 3.7713410414968033`*^9}, {
   3.771341611078085*^9, 3.7713416137232957`*^9}, {3.7713417798994308`*^9, 
   3.771341837020052*^9}, {3.771341869097454*^9, 3.7713418781499043`*^9}, {
   3.771341928760856*^9, 3.771342024010883*^9}, {3.7713420669509897`*^9, 
   3.7713420734470963`*^9}, {3.771342137535701*^9, 3.771342226986998*^9}, 
   3.771342354281867*^9, {3.771342426565675*^9, 3.7713424279424815`*^9}, {
   3.771344621792909*^9, 3.771344631136168*^9}, {3.7713453428098526`*^9, 
   3.7713453451538863`*^9}, {3.7713463119730854`*^9, 
   3.7713463362949605`*^9}, {3.771348354959154*^9, 3.7713483590829926`*^9}, {
   3.771348749417597*^9, 3.7713487597311993`*^9}, {3.7713511952321477`*^9, 
   3.7713511997695894`*^9}, {3.771426249219207*^9, 3.771426252651078*^9}, 
   3.7714294811167603`*^9, {3.771429539535887*^9, 3.771429565927732*^9}, {
   3.771429713837861*^9, 3.771429715245688*^9}, {3.771429886985057*^9, 
   3.771429902583715*^9}, {3.771429956155987*^9, 3.771429962712124*^9}, {
   3.7715268930376472`*^9, 3.771526907093895*^9}, 3.77152714212579*^9, {
   3.771527318409111*^9, 3.771527319922534*^9}, {3.7715399434494057`*^9, 
   3.7715399443750134`*^9}, {3.7715404209072847`*^9, 3.771540423197483*^9}, {
   3.7715408380531435`*^9, 3.771540871034897*^9}, {3.7715415857666063`*^9, 
   3.77154158949069*^9}, {3.7715436241335382`*^9, 3.771543651514549*^9}, {
   3.77154368863717*^9, 3.7715436900327816`*^9}, 3.7715437406552467`*^9, 
   3.771543914348199*^9, {3.7715439448118973`*^9, 3.7715440275125427`*^9}, 
   3.772881423114967*^9, {3.774332671590641*^9, 3.774332685356101*^9}, {
   3.774332724472166*^9, 3.774332774762607*^9}, {3.774332827864274*^9, 
   3.774332828009109*^9}, {3.774332872454357*^9, 3.774332874415681*^9}, {
   3.774332936741726*^9, 3.774332937902575*^9}, {3.7743330369858017`*^9, 
   3.7743330660906897`*^9}, {3.774333104855508*^9, 3.774333271328895*^9}, {
   3.7743388528515673`*^9, 3.774338957000124*^9}, {3.774346914272501*^9, 
   3.774347298340797*^9}, {3.774347363100333*^9, 3.774347367310162*^9}, {
   3.774347461229594*^9, 3.7743475436071863`*^9}, {3.774347573809621*^9, 
   3.7743476325636377`*^9}, {3.774347711932683*^9, 3.774347745262836*^9}, {
   3.774347831998953*^9, 3.774347839971089*^9}, {3.7743480075468597`*^9, 
   3.774348045152628*^9}, {3.774348107913321*^9, 3.7743483302577353`*^9}, 
   3.774349338058784*^9, {3.774349368197481*^9, 3.774349369088551*^9}, {
   3.7743507930112667`*^9, 3.774350809894742*^9}, {3.77435098599223*^9, 
   3.7743509985836763`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"JacobianNet Sanity Check:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.77438126760188*^9, 3.7746375021385365`*^9, 
  3.7746375360817194`*^9, 3.7746393281862364`*^9, 3.7746393666049*^9},
 CellLabel->
  "During evaluation of \
In[47]:=",ExpressionUUID->"5cb741fb-0026-454a-9993-98f4120fbdd1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQESB7i65vlYVu6yeTJx6s6qc+IHzvGamy4+tMLe
xXfjtA9TxA9YrF8TfOvwLntZo+DpicHiB9r2zBQ9O/mofb5D9e6znOIHjD9N
n+Bx7Jy9TYUms+kOsQOBNRln19dcsW+6GZs3PU7swMt0JalOsVv2TikSf7/8
ET3w8a6NeITEA/taicj1vpNFD8jbmLdOSn1sb/BNvnWhouiBGj+G658/PbOf
qdQ5+eR9kQORk0NF7W++sC9f7OL/e5bIgYstoT4hba/sz1QE7TALFjnwWImh
xvjXa/tpizadq+YQOTAhN3TJHZO39lcUUied2iV84EZK6FF/s3f2HZ8zmZWz
hA/s4mC43/Pvnf0mqYOKrWLCBywiQz9O7n1vHzQt6+2H/UIHAsJC/6Q8fm+f
BgZCBxjB4fTB3qTs46/nvAj+3w0ekhW7BOH8Q2I5B8VyEPym5dGfDysh+HbJ
4uvr7wnA+V885wMRgr8CpDwVwQ+bISzLZYDgQ+ILwQcAeJy5Dw==
                    "]], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.812820711494877, 
                    0.9773027452952469}, {-0.25, 0}, 
                    Offset[8], {0.08165695756016156, 0.01745942669596423}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    0.40000000000000024`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6., 3.6739403974420594`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 3.061616997868383*^-16}], 
                    Offset[{12, 12}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-5., 3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"addEpsilon\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["addEpsilon", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-4., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Function\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Function", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"M\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MapFunction\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["MapFunction", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    NetChain[
                    Skeleton[2]], "Input" -> {3, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"MT\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapThreadOperator", "[", 
                    RowBox[{
                    RowBox[{"ThreadingLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"\"1\"", "\[Rule]", "1"}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\"1\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], ",", 
                    RowBox[{"\"2\"", "\[Rule]", "3"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    NetMapThreadOperator[
                    ThreadingLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], 
                    Association["1" -> 1], "1" -> {3, 3}, "2" -> 3]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.0000000000000002`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"z\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["z", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1bEKwjAQBuCgDo6ujm7Ourg6qZCpxQdoMS0uEdqi+Ea+pSaFSAS1bXKX
yw/X0g7HR2jvFvklKUaMsXqqLkl221ZVdk9n6uEo63MpxekgG1GKapOP1cu5
qqWqCQMP921QiMfTLgiUFS8fosvEyYd8ZnYG+QK6THr7CGw6nT4il8lfH6HL
5KuP+MzsfPgicpm8fRHadHikrva89rsrhov7lnbpWq/S9g7Rk+Hscu+eUPnx
jZH7Or5/Ml/P/5LEN2BmBPU5zLJgPscZi+7znP9oPqC9hOID3JfgPuBdjuID
bAfuewEbHvns
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"divideByEps\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1000", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["divideByEps", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[1000 #& , {4, 3}], "Input" -> {3, 3}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    FormBox["\"T\"", TraditionalForm], 
                    Offset[{0, -1}, {-1., 6.123233995736766*^-17}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {3, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-6., 3.6739403974420594`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"addEpsilon\"", TraditionalForm], 
                    Offset[{0, -15}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Function\"", TraditionalForm], 
                    Offset[{0, -15}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"MapFuncti..\"", "\"MapFunction\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MapFunction", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"subtract\"", TraditionalForm], 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"z\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"divideByE..\"", "\"divideByEps\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "divideByEps", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"transpose\"", TraditionalForm], 
                    Offset[{0, -13}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}]}}, 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
                    3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736762*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.1499858073915776`, 
                    5.378432173300872}, {-4.812820711494877, 
                    0.9773027452952469}], {0., -0.17}, Automatic, {
                    0.9778967587819768, 0.20908832861665047`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.40000000000000024`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}, {-4., 1.0000000000000002`}, {-4.,
                     2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {386., 102.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28.999999999999982`, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "addEpsilon"], 
                    NeuralNetworks`NetPath["Nodes", "Function"], 
                    NeuralNetworks`NetPath["Nodes", "MapFunction"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "z"], 
                    NeuralNetworks`NetPath["Nodes", "divideByEps"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]], 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[3], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{3, 3}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {3, 3}, "$ArrayDimensions" -> {3, 3}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/Weights"], 
                    "Biases" -> NetSharedArray["1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 3, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]], 
                    "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray["1/Weights"], "Biases" -> 
                    NetSharedArray["1/Biases"]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {3}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]], 
                    "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {3, 3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]], 
                    "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/Biases" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3, 3}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"z\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Echo",
 CellChangeTimes->{
  3.7746393667679787`*^9},ExpressionUUID->"62f18741-62a5-4d57-8129-\
146bf3978dc7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"JacobianNet\"\>", "\[Rule]", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0.02574920654296875`", "0.0514984130859375`", 
         "0.07724761962890625`"},
        {"0.005841255187988281`", "0.007331371307373047`", 
         "0.008761882781982422`"},
        {"0.00035762786865234375`", "0.0004172325134277344`", 
         "0.000476837158203125`"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], ",", 
   RowBox[{"\<\"Reference\"\>", "\[Rule]", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0.025743319670309385`", "0.05148663934061877`", 
         "0.07722995901092816`"},
        {"0.005873066041279025`", "0.007341332551598781`", 
         "0.00880959906191854`"},
        {"0.0003454621793415763`", "0.0003948139192475157`", 
         "0.0004441656591534552`"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.774381275603286*^9, 3.7746375032851963`*^9, 
  3.7746375364205394`*^9, 3.7746393312862234`*^9, 3.7746393668936405`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"c531a0d9-8221-4bda-a976-ae758f841e6e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["LogDet", "Subsection",
 CellChangeTimes->{{3.7743803589092216`*^9, 
  3.7743803598708763`*^9}},ExpressionUUID->"5fc1a659-7ea2-45be-9d2a-\
2ee30cfa2795"],

Cell["Helper to compute the LogDet (of a matrix):", "Text",
 CellChangeTimes->{{3.774349321972266*^9, 
  3.77434932949515*^9}},ExpressionUUID->"b4441762-f85f-4ec0-876e-\
fdad329a009b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\n", 
   RowBox[{"Input", ":", "\n", "n", ":", " ", 
    RowBox[{"dimension", " ", 
     RowBox[{"(", 
      RowBox[{"Jacobian", " ", "is", " ", "nxn"}], ")"}], "\n", 
     RowBox[{"k", ":", " ", 
      RowBox[{
      "number", " ", "of", " ", "power", " ", "series", "\n", "Output"}], 
      ":"}]}]}], "\n", "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"LogDetNet", "[", 
      RowBox[{"n_", ",", "  ", 
       RowBox[{"k_:", "5"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "powers", ",", " ", "parts", ",", " ", "elementwise", ",", " ", 
         "chains", ",", " ", "diagonalElements", ",", " ", "trace"}], "}"}], 
       ",", "\n", "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"(", "1", ")"}], " ", "Find", " ", "the", " ", "power", " ", 
         "series", " ", "expansion", " ", "of", " ", "log", " ", "of", " ", 
         "the", " ", "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Create", " ", "k", " ", "powers", " ", "of", " ", "the", " ", 
         "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", 
              RowBox[{"k", "-", "1"}], "]"}], ",", " ", 
             RowBox[{"NetFoldOperator", "[", 
              RowBox[{
               RowBox[{"DotLayer", "[", 
                RowBox[{"\"\<Inputs\>\"", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}]}], "}"}]}], "]"}], 
               ",", " ", 
               RowBox[{"{", 
                RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<1\>\""}], 
                "}"}]}], "]"}], ",", 
             RowBox[{"PrependLayer", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", " ", "\[Rule]", " ", "2"}], ",", " ", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "\"\<1\>\""}], "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"2", ",", " ", 
                RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], "}"}], " ", 
              "\[Rule]", " ", "3"}]}], "}"}]}], "\n", "\t", "]"}]}], ";", 
        "\n", "\t", 
        RowBox[{"parts", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", "i", "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Combine", " ", "powers", " ", "of", " ", "Jacobian", " ", "with", 
          " ", "the", " ", "coefficients", " ", "of", " ", "power", " ", 
          "series", " ", "of", " ", "log"}], "*)"}], "\n", "\t", 
        RowBox[{"elementwise", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ElementwiseLayer", "[", 
            RowBox[{
             RowBox[{"#", "/", 
              RowBox[{"(", 
               RowBox[{"i", "*", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"i", "+", "1"}], ")"}]}]}], ")"}]}], " ", "&"}], 
            "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"chains", " ", "=", " ", 
         RowBox[{"NetChain", " ", "/@", " ", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"parts", ",", " ", "elementwise"}], "}"}], "]"}]}]}], ";",
         "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Sum", " ", "the", " ", "powers", " ", "and", " ", "combine", " ", 
          "with", " ", "the", " ", "corresponding", " ", "coefficients", " ", 
          "to", " ", "get", " ", "the", " ", "power", " ", "series", " ", 
          "expansion"}], " ", "*)"}], "\n", "\t", 
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"chains", ",", " ", 
             RowBox[{"{", 
              RowBox[{"powers", ",", " ", 
               RowBox[{"TotalLayer", "[", "]"}]}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"k", " ", "+", " ", "1"}], " ", "\[Rule]", " ", 
              RowBox[{"Range", "[", "k", "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"Range", "[", "k", "]"}], " ", "\[Rule]", " ", 
              RowBox[{"k", "+", "2"}]}]}], "}"}]}], "]"}]}], ";", "\n", "\t", 
        "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"(", "2", ")"}], " ", "Take", " ", "the", " ", "trace", " ",
           "of", " ", "the", " ", "power", " ", "series"}], "*)"}], "\n", 
        "\t", 
        RowBox[{"diagonalElements", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "i"}], "}"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"diagonalElements", ",", " ", 
             RowBox[{"{", 
              RowBox[{"TotalLayer", "[", "]"}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Range", "[", "n", "]"}], " ", "\[Rule]", " ", 
             RowBox[{"n", "+", "1"}]}], "}"}], ",", " ", 
           RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "n"}], "}"}]}]}], "]"}]}], ";", "\n", 
        "\t", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ConstantPlusLayer", "[", 
            RowBox[{"\"\<Biases\>\"", " ", "\[Rule]", " ", 
             RowBox[{"-", 
              RowBox[{"IdentityMatrix", "[", "n", "]"}]}]}], "]"}], ",", 
           "powers", ",", "trace"}], "}"}], "]"}]}]}], "\n", "]"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"ExactLogDetNet", "[", "2", "]"}], " ", ":=", " ", 
     RowBox[{"NetGraph", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "1"}], "}"}], "]"}], ",", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "2"}], "}"}], "]"}], ",", "  ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "2"}], "}"}], "]"}], ",", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "1"}], "}"}], "]"}], ",", "\n", "\t", 
         RowBox[{"ThreadingLayer", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#1", "*", "#2"}], " ", "-", " ", 
            RowBox[{"#3", "*", "#4"}]}], " ", "&"}], "]"}], ",", " ", "\n", 
         "\t", 
         RowBox[{"ElementwiseLayer", "[", 
          RowBox[{"Log", "@*", "Abs"}], "]"}]}], "}"}], ",", "\n", "\t", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", " ", "2", ",", " ", "3", ",", " ", "4"}], "}"}], 
         " ", "->", " ", 
         RowBox[{"5", " ", "\[Rule]", " ", "6"}]}], "}"}], ",", "\n", "\t", 
       RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{"2", ",", " ", "2"}], "}"}]}]}], "\n", "]"}]}], ";"}], "\n", 
   "\n", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<LogDetNet Sanity Check:\>\"", ",", "\"\<Text\>\""}], "]"}],
      "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"jacob", " ", "=", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", 
          RowBox[{"-", "2"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "/", "100."}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Echo", "[", 
     RowBox[{"LogDetNet", "[", 
      RowBox[{"2", ",", "3"}], "]"}], "]"}], ";"}], "\n", 
   RowBox[{"<|", "\n", "\t", 
    RowBox[{
     RowBox[{"\"\<Reference (LogDet)\>\"", " ", "\[Rule]", " ", 
      RowBox[{"N", " ", "@", " ", 
       RowBox[{"Log", " ", "@", " ", 
        RowBox[{"Det", " ", "@", " ", "jacob"}]}]}]}], ",", " ", 
     RowBox[{"\"\<Reference (TraceLog)\>\"", " ", "\[Rule]", " ", 
      RowBox[{"N", " ", "@", " ", 
       RowBox[{"Tr", " ", "@", " ", 
        RowBox[{"MatrixLog", "[", "jacob", "]"}]}]}]}], ",", "\n", "\t", 
     RowBox[{"\"\<ExactLogDetNet\>\"", " ", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"ExactLogDetNet", "[", "2", "]"}], "[", "jacob", "]"}]}], ",", 
     "\n", "\t", 
     RowBox[{"Sequence", " ", "@@", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"\"\<LogDetNet[\>\"", "<>", 
           RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<]\>\""}], " ", 
          "\[Rule]", " ", 
          RowBox[{
           RowBox[{"LogDetNet", "[", 
            RowBox[{"2", ",", "#"}], "]"}], "[", "jacob", "]"}]}], "&"}], ",",
         " ", 
        RowBox[{"{", 
         RowBox[{"15", ",", " ", "5", ",", " ", "3"}], "}"}]}], "]"}]}]}], 
    "\n", "|>"}], "\n"}]}]], "Code",
 CellChangeTimes->{{3.77434933949854*^9, 3.7743493829567003`*^9}, {
  3.774351675384377*^9, 3.774351694143609*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"0fdd1362-68fa-4a31-a308-0d922c18858c"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"LogDetNet Sanity Check:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.774381276550026*^9, 3.7746375038032246`*^9, 
  3.7746393319115763`*^9},
 CellLabel->
  "During evaluation of \
In[5]:=",ExpressionUUID->"c6774987-2c84-41ba-82bb-e50fccbd78a5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  InterpretationBox[
                  "\"\\!\\(\\*TemplateBox[List[\\\"\\\\[Times]\\\", \
\\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\"2\\\", \\\"2\\\"], \
\\\"RowWithSeparators\\\"]\\) matrix\"", 
                   StringForm["`` ``", 
                    Row[{2, 2}, "\[Times]"], "matrix"], Editable -> False], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantPlus", "Arrays" -> 
                    Association[
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    "\"\\!\\(\\*TemplateBox[List[\\\"\\\\[Times]\\\", \
\\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\"2\\\", \\\"2\\\"], \
\\\"RowWithSeparators\\\"]\\) matrix\"", 
                    StringForm["`` ``", 
                    Row[{2, 2}, "\[Times]"], "matrix"], Editable -> False], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConstantPlusLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Echo",
 CellChangeTimes->{
  3.7746393321089478`*^9},ExpressionUUID->"5af9064a-21dc-4b50-bac7-\
af6c8fa06cb9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Reference (LogDet)\"\>", "\[Rule]", 
    RowBox[{"-", "6.907755278982137`"}]}], ",", 
   RowBox[{"\<\"Reference (TraceLog)\"\>", "\[Rule]", 
    RowBox[{"-", "6.907755278982138`"}]}], ",", 
   RowBox[{"\<\"ExactLogDetNet\"\>", "\[Rule]", 
    RowBox[{"-", "6.907755374908447`"}]}], ",", 
   RowBox[{"\<\"LogDetNet[15]\"\>", "\[Rule]", 
    RowBox[{"-", "5.547641754150391`"}]}], ",", 
   RowBox[{"\<\"LogDetNet[5]\"\>", "\[Rule]", 
    RowBox[{"-", "4.1456804275512695`"}]}], ",", 
   RowBox[{"\<\"LogDetNet[3]\"\>", "\[Rule]", 
    RowBox[{"-", "3.4056637287139893`"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.774381278719904*^9, 3.774637504692216*^9, 
  3.774639332916822*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"00142a78-66d9-4628-b68a-61d8057affcc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loss Function", "Subsection",
 CellChangeTimes->{{3.77434938900718*^9, 
  3.774349390591318*^9}},ExpressionUUID->"4c78c069-2755-405f-b87e-\
88df1552e418"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztvT3Ms060H+jsRvJ23s6llYrSJZsKbYVSId3VihIlyl20SnSRbjZCSRlF
oVhpKSkSiZIiBUWuhJJbULJKg27F7diOkpLy7DkD2BgPMGDs18/7zk/y//0/
NjAzZ87HfHF+/+ifOX/xf/wPh8PhX/1P+J+/+Kfu//rXf/1P/83/9j/jH//7
X/2r/9P+q7/85//kr/6vv7T/8q//l3/2P+KX/xk//+kfHA7/EP8FCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJiTqDwLjAxc5+dU0kJCQkJH5zpLYCZtz86mr8
NqiLHMrV4mygKjJI0wyK6of1RV1AVtQfKAhllBfw08TzFnxM5u/HOntZoQN1
CXmafkRO22z+56HKYoii6PkTJyjnCmZF0NCvBXhXHcLqbTWELDBBOR7gcDiB
5kSQY/eXiQ/W9QSU7vN4tSBIiltd6ywEW8XfzirYUTHfhm9CmYCnX7BNCriF
+G1NEYFtuRCjHeWRhbI6gRH9HF+SWNhXRxPeOWSpsgBspi8aBG/T1Z+DT8j8
7VhpL2t0oEocsFz0gbH9XnvaaPM/FU2ZQezoYAYZxnIXDMOHJEshRh9/VTQw
TAv8bCTrOgXPdiFMEog8HZSrB+8VVQOZfWHxxkoGBlJ4cKV4o0cw1obC00B/
XxB8H1Ibzqt0j+L9Fdz8/k2VRZCWb6jbu1DlkOXv76sm0uH4R8abGopi1OgP
yfztWGkvQjrQpGBfruB1z6zyFN46xVlt85z+/ElIHXAS/LfwwQ7K7ssGv7Yh
rmv8F+cP/ddQQqir4GSt328iA5RP7N1UAWg4xzmZ8SC2VFiXI47TtNH8qoLA
wLHbzxni37FW9yjmHv9EH7oeTWz8kfGmDA242umvrsZ7sDbeiOhA4eKc5h5v
3o6VbfiK/qxziFwLTNPAOcr9Q+tJi+DGG2xX4IBPt+ceOGHnvHPsC8WFfjj9
ub2bPrboEA7iSDvvOYDq3+sNpQ+6ldzW0ao0BA9jp+36EBfLdW2KGALfA9d1
wY+Lx7lTU0Ia+u3vXjCYR+CYI8FywgyauoDYd8B2cK4osChb5215nh9CElpc
3eO1ocZ5jGdd0X4uYLge+L4Pvof1outwvnovWaxuq+Q0KYcJVBlEfgBhGOIn
gmxg7zTHjvwI8qaraxqBH6T4fxVkIeqeg3Pp7gYmK5fq2F9/ewqUdF+UQ4Nl
hV7bxji/996Ur1mrH31/uSjzIM6gKCuo6/t90897tR8aNndt25iiHBwIaO1h
pi/KyITLsV1z9nwq61nmVRq0uoP9E/XyIn8S4HdBAv3jxOW0tQ+737Bcj2wv
yoAXFpbsZa6eS/GG1uk9S4XT4Qy6QzYVQlqJ1G2ib6YktGTzE3061Z+r7ZHd
U2E/pZB3m1mkE2m6vLfVZD6YhgNhvnFAPxFvCt9m85omwb7rY0pmw8WIOl+W
g3ulvsO2Ju8fDNQR6coR1L6OTQK2poF2PsBhEAMLTwc7pRri3Mw1wYlLrG8D
RaDDCcctbjYlULrGQD1LWl1ic6ojXL3bk8FXT6B1ylrHJpzPFtASX5n6YFyo
HgY4qOdhHIJDe0iKA/lEaQTSH9UM271C1JnIOI/Wcmfa0KCOhyQTFccFNfq8
CsoCZaK0a4x9K5frtlZO03LgA/VENaBdAm9w+IL9k7S/VP1eG44joqb7+4rj
irMOjkd1TSByMKYeVbAwlnpBDEkSgIntOd/GFFjnyAH11LbRttEfBF67vzdo
x7OvWdtuWkq2QdH8dv24RP3AMo+KznxnsfC81/qhvrdRRV+D/szSLqA40Xxf
NBm4SiurummYvMYypzULX0WZnyxIB23NHHWTHW3rQ2DPVc2ojW9kC+YFTlcH
0oFbm7eX5Xouzm9QRnVsYbzBZ2K8aDqZzddtqm/46z7LNj9jX5z+XG+PwPaN
AuyHvCwgNDWwcazhxzmkngqXQZ88oUb/oj/2yWrw4k2N7TIsHL/5YFkB3IYJ
TQ6+Zbd7NxhPbc0AN6Jx0Qvli6KJwaQ+7faLSK46TsAyV8H+One2kYGD8mA9
TXOxqwsZjj+rCj9FCAaNDYyYL09sv3oZ9lMDmWeCFXaKQH2tXsFJuwvYWpbS
7Z00EBtoY1f/Nh5sEhP1FmNBCXxUERjn0bw97XS9/26pDRwfGmr0ezRo40Ld
1sppVg68dgagkt33g9k6hSQb/qwNfB/5OZyzXro+ZNeHoNEcduAkcurzyzCW
V6zdBy28z0dr1Jczxd6QjR+efM3adtM6rXaE820to2n33fv9y8XnvdoP2Lf6
Xf/F+oL29w6DOvNl3mAcvdxsiDUGXKur52o5bejDEm3vNLKFGu0D7Z3etWDl
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
7r0cFs99S0hISEhIbAXtd3tgWxZYlgNekCzulUlISEhISEhISEhISEhISEhI
SEhISEhISEhIvIzduc4bqPICHo6j1wVkxegsOZZbFOUL5/5G5UyU8St43Osi
34+bpS4hT9PntknsK+c5iOgRT/++EOtkxrHlfSvza2T2ab/wi/zQd2F/rvMq
C8AmvoZRHjuWY/PY5ypveXE0et93Jh/e2nIey/hFPO5lAp5+mee/WYEqccBy
E8hiG5TjCYzo+/3ZR7CznKchrkeP+veFWCmzKVveE5+X2af9wi/yQ1+D93Od
N5H+zLlZ5ZDlj0qbmMfN8YZbzlMZv4jHfS8+acZhdc9XV+Up/IDh8+fwNt7u
jTbC0fGvw0qZcW15T3xMZsM+/bRf+EV+6AvwCa7zKY7nMdjY5pV4s1jOL+Jx
38sPFi7OaZ7z00p0eFO8+YSN/DKsjTeCtvzteOzTT/fnb6Q/K/AervNn8HS0
KTOI/Ogh9/VDvCFO8ZA4uAMI4+y2XjxX5ric5zLE2jbNPy5+Dfvd91CuISSh
JWTTc88sE/zeUuF0OIOOde554Z+wmbO9aXmM/VbmUZ9YlK7DOhHn+qyLob23
NIW86yiSfZpOrfMvc66L8suLyJmvMw0rs+WFTyFwHQiy58niKzbypH8V/R10
3FbRTO7WLTz3A3mI6O6MzNbY2CNE+nVeDo8yE9OBYZtc14MA/UVRVpOc4M99
ur/PY20p+jphX1BO0PtTlsvbbMfrZLKmPS/jDVzn3GJGOsp4vCkH6oh35yHe
NDn4LA9qf35gucxhOfwylts2xz/eY+ka0mfVDNs9WPrdOC+ukS+Wi/1Txx3/
M/rFhptr81XO9pYn46C4MKxq7mrzXAplgj4uhrwsIDTxWvQlfpxD6qlw6XiJ
njHPuS7CL78s5ymdqe688Cr6HIw1lnYBhZd0eaONPOtfDq5qdNwaDeSeDvYE
fcF6nvsWIro7L7N1NsbHfL/OyWEsMxEdYLXGOZqi+a3OUp59xhmgs3jMNbmn
Pt3b59HvBo4LO07yjuf06vW1XirvVTsWkck6H74P3sF1/gyejjJum4l4U+B4
07c9eEi5LVDmU1x7KmOhbQL844vXVPj/59HvaRcnpuKNSLnjuvKwA2d7jTKk
ujq3e9A/GN6DfT+iYuPRvqtyR4ET49Ij7giL6TMfS5yEC3UVkfOsznQ8TEN+
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
EhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIS
EhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIS
EhISEhISEhISEhISEhISEhISEhISEhISEhI/DRWUZfPG639HrJHBT5NXBXle
/epKvBl76vyfIC+Jn4amSCAMfPD9BMpfXZkeTQGB40FWr7utCB3w1960EV8n
tw0y+5S8dpFVE4FpJYIXV5BFIQS+D+E721flkMQxxEkCCX3w/9OtMXxvnV8l
r98ETQNj6ddVAUVZP37PuU7iQ8D+SH0dzmcL0l9dF4YGMtcEL9+iERVEtg3x
J0LOV8ltq8w+JK89ZLXKfzZQZjHY1yOofileRF2v80NNBUWRQ+qqcDhcwY5z
KDfJ8g06/4fFmzoLwQsyuImhxP5XL3BRLnA6HuCkOpB2PzZFBK4Xf8c48U9E
4cH1K/wmsLroVgybXWDugm6nnxm/fIvcXpHZJnlVkETZuvJeldUG/5mYp1Xx
JsH5UL6yWoTcVeB49aDYcC/DO3T+D4o3deaC6aQD+RUQusFtrtgUAWinAyju
oHfLEGwnBrni+AvwLX4TLSa1VXCyV6JFCb5mQPSJOc5XyO1VmW2RVw6uFawb
H359vMnA0d0N8Qblpx7hbGer72zxJp3/U+JNnYClmo/zu7qA4kGfKwi042O8
QRQ459aD8gOVlHjA2BfUJeRZCmlasDFDXaSQJBkU1YxNYB9nWdmNMRqocrw/
r1aOm1OwFdQd3k20dpGmkHd1aMqM1Y9XpcxRwPhEwPkKuc3IjD0+g2xgfFX1
LJf18nox3myRk5D/RPkVpBc56kXDjzco7zSOIMbyblst+F1sX+F4sSAuSihL
7A/RDqgj0I8nMKc6YBFv0vk/JN4U3hXO1sL8nGKShn07nswwnTQh+cyWr0SP
kd9sihh8E+1PsSGIAoizCqoyBut6BZc3DmsyCP0UitAABf1QFESQlmgrgQm6
l4v7TqyHqvnPfqxMIAhiyEucJ5sa2H4AfpxD6qlwQZsaP7+JDLjY6fgpj9fU
NdRCn5naf4PcpmSGKCMTlIsCl7MCZphBnvjgJ88rCCLyesRr8Wa1nNpKzvtP
Wq83LGwf+mPaLwo9MEf7N1Vsg24GQNskTRmhDzIhwp+rLILIUeF41sGL8P8j
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
QkJCYn/8/6wkDFs=
    "], {{0, 171}, {412, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{412, 171},
  PlotRange->{{0, 412}, {0, 171}}]], "Text",
 CellChangeTimes->{
  3.774338768495008*^9},ExpressionUUID->"adefcd5f-97dc-4869-b34e-\
f816c3af1db0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"iResNetTrainingNet", "[", "forward_", "]"}], " ", ":=", " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t", 
      RowBox[{"n", " ", "=", " ", 
       RowBox[{"Length", "[", 
        RowBox[{"NetExtract", "[", 
         RowBox[{
          RowBox[{"JacobianNet", "[", "forward", "]"}], ",", 
          "\"\<Output\>\""}], "]"}], "]"}]}], "\n", "\t", "}"}], ",", "\n", 
     "\t", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"<|", "\n", "\t\t", 
        RowBox[{
         RowBox[{"\"\<Jacobian\>\"", " ", "\[Rule]", " ", 
          RowBox[{"JacobianNet", "[", "forward", "]"}]}], ",", "\n", "\t\t", 
         RowBox[{"\"\<LogDet\>\"", " ", "\[Rule]", " ", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"n", " ", "\[Equal]", " ", "2"}], ",", " ", 
            RowBox[{"ExactLogDetNet", "[", "n", "]"}], ",", " ", 
            RowBox[{"LogDetNet", "[", "n", "]"}]}], "]"}]}], ",", "\n", 
         "\t\t", 
         RowBox[{"\"\<norm\>\"", " ", "\[Rule]", " ", 
          RowBox[{"DotLayer", "[", "]"}]}], ",", "\n", "\t\t", 
         RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
          RowBox[{"ThreadingLayer", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"0.5", " ", "*", " ", "#1"}], " ", "-", " ", "#2"}], 
            "&"}], "]"}]}]}], "\n", "\t", "|>"}], ",", "\n", "\t\t", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NetPort", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Output\>\""}], "}"}], 
           "]"}], " ", "\[Rule]", " ", "\"\<LogDet\>\""}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NetPort", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], 
             "]"}], ",", " ", 
            RowBox[{"NetPort", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], 
             "]"}]}], "}"}], " ", "\[Rule]", " ", "\"\<norm\>\""}], ",", "\n",
          "\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<norm\>\"", ",", " ", "\"\<LogDet\>\""}], "}"}], " ", 
          "\[Rule]", " ", 
          RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
           RowBox[{"NetPort", "[", "\"\<Loss\>\"", "]"}]}]}]}], "}"}]}], "\n",
       "\t", "]"}]}], "\n", "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Example:\>\"", ",", "\"\<Text\>\""}], "]"}], "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"wrapInResidual", "[", "net_", "]"}], " ", ":=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"net", ",", 
      RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], "}"}], 
      "\[Rule]", "2"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"wrapInResidual", "[", 
      RowBox[{"NetChain", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", 
         RowBox[{"ElementwiseLayer", "[", "\"\<ELU\>\"", "]"}], ",", 
         RowBox[{"DropoutLayer", "[", "]"}]}], "}"}], "]"}], "]"}], ",", " ", 
     "3"}], "]"}], "]"}]}], "\n", 
 RowBox[{"iResNetTrainingNet", "[", "forward", "]"}]}], "Code",
 CellChangeTimes->{{3.7712461733785934`*^9, 3.7712462797517805`*^9}, {
   3.7712467282968006`*^9, 3.771246971234892*^9}, {3.771247012593236*^9, 
   3.771247062931487*^9}, {3.7713355124382553`*^9, 3.771335514947486*^9}, {
   3.7713424860170774`*^9, 3.771342490632975*^9}, 3.771342643255226*^9, {
   3.771342720801722*^9, 3.7713427421698256`*^9}, {3.771342801133519*^9, 
   3.771342816975562*^9}, {3.7713443832768326`*^9, 3.7713443923025727`*^9}, {
   3.771346168774109*^9, 3.7713462368048964`*^9}, 3.7713463000914755`*^9, {
   3.7713482181981363`*^9, 3.771348242679274*^9}, {3.7713482945794554`*^9, 
   3.7713482997207875`*^9}, 3.7714292407229433`*^9, {3.771429902587538*^9, 
   3.7714299025891314`*^9}, {3.771429983803138*^9, 3.771429991742524*^9}, {
   3.7714351480099382`*^9, 3.771435149900608*^9}, {3.771436277291979*^9, 
   3.771436277422518*^9}, {3.7715245505834303`*^9, 3.771524557743154*^9}, {
   3.771524602084203*^9, 3.771524638035481*^9}, {3.7715246845227213`*^9, 
   3.771524695107903*^9}, {3.7715248127492228`*^9, 3.771524816425106*^9}, {
   3.7715359964987326`*^9, 3.7715360027931323`*^9}, {3.771536212303712*^9, 
   3.771536219846096*^9}, {3.771536307109409*^9, 3.771536319602399*^9}, 
   3.7715402363173018`*^9, {3.7726603773808994`*^9, 3.7726604141110134`*^9}, {
   3.7726605470423756`*^9, 3.7726605477045527`*^9}, {3.772660653609005*^9, 
   3.77266068264157*^9}, {3.77266073243651*^9, 3.772660776353501*^9}, {
   3.7726608525124454`*^9, 3.772660938848506*^9}, {3.7726610100581665`*^9, 
   3.772661079510709*^9}, {3.7726612610250435`*^9, 3.772661261544655*^9}, {
   3.7726613028474483`*^9, 3.7726613115890985`*^9}, {3.7726613570646467`*^9, 
   3.772661358987563*^9}, {3.7726614035043325`*^9, 3.7726614261171007`*^9}, 
   3.7726616848702292`*^9, {3.7728812875393124`*^9, 3.772881472843192*^9}, {
   3.7729802699003105`*^9, 3.7729802800262637`*^9}, {3.7729803334982634`*^9, 
   3.7729803350411654`*^9}, {3.7729803758679733`*^9, 3.772980415652627*^9}, {
   3.7729805358123164`*^9, 3.772980563818876*^9}, {3.772981168706562*^9, 
   3.772981174352434*^9}, {3.7729812350551567`*^9, 3.772981258276066*^9}, 
   3.7729828113925467`*^9, {3.7743333774450483`*^9, 3.774333514094322*^9}, 
   3.774347056902504*^9, {3.774348347675708*^9, 3.7743483736116743`*^9}, {
   3.7743488574769793`*^9, 3.77434889855902*^9}, {3.774349611433282*^9, 
   3.774349614821385*^9}, {3.774350827302779*^9, 3.774350835180683*^9}, {
   3.774350973666121*^9, 3.774350974592297*^9}, {3.774351010141726*^9, 
   3.774351020965646*^9}, {3.774352428726531*^9, 3.7743524346085377`*^9}, {
   3.774352962042448*^9, 3.774352973544826*^9}, {3.7743811283690233`*^9, 
   3.774381146882728*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],

Cell[BoxData[
 StyleBox["\<\"Example:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.774381278922164*^9, 3.7746375048567753`*^9, 
  3.7746393331612306`*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"8bbff5aa-c63c-4965-9816-bf0e28351d0b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.774381279166358*^9, 3.774637504996402*^9, 
  3.7746393332844143`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"06c21daf-72c1-405b-a476-c53a407c55f6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.5999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.5999999999999999}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.9999999999999998}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000001, -1.}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -0.9999999999999999}], 
                    Offset[{12, 12}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[
                    0.4]], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LogDet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["LogDet", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[10]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[CenterDot]\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], "-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Shallow[Subtract[0.5 #, #2]& , {4, 3}], 
                    "Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Jacobian\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LogDet\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"norm\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"subtract\"", TraditionalForm], 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, \
-0.5999999999999998}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}, \
{-2., 1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {276., 102.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28.99999999999999, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "LogDet"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, 
                    "$ArrayDimensions" -> {2, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], "norm" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "LogDet" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 2}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Abs, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Log, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}], "subtract" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "2/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "3/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.774381279166358*^9, 3.774637504996402*^9, 
  3.7746393336940312`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"b386e943-85e7-4b89-ac9e-370b0f97c80b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Normalization of the weights to satisfy Lipschitz constraint", \
"Subsection",
 CellChangeTimes->{{3.774353997619336*^9, 
  3.774354033547255*^9}},ExpressionUUID->"97e011af-ca93-4cfc-a73b-\
844ec84d1c77"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
37Jm5702rKf7Pb5lU343OM+0z6IM96oDSVsthvkuzgXurad8S5V6YJmuWK9v
xLjoWd9CY+Z531K4Jxz34Pz5JgNqOa9uxxUij9T5tQ/hW1QbHG2Pz+EccGjb
TP5NsZj+V4XTYy1tW/Ln1e3t1xviXMqPR3zLejrv9y1b8m6Lb1kqo9fYvd23
zNWrtXrUpA6oqnr9Zyd39fGz0Dk7egdgcB5ZnlG+XcMg/3dZK7sGgH4ylWv4
E7xr3hJqyqWfmpq3LNn5yLxlOd3vm7csxovjje5oYp358h0kIxblNR77ndv5
aS+kFd8i4u98S0Fz+TNclq9e4lvoPIkyuyZG4x5lcK6k+01np0jXqG/GPMoL
kQ/XNbEIjAP+zuq1m4X8G7GU/leFM2AtbVvy59XtbUuc99TLLb5lPc77fcum
dGzwLUtlVL3E7o2+ZaFerdWj99FAamH9O7m3+4liXZbqYC92sVZI4xAXEtrf
qunsiQ1Wtz45QRXczgun6vpZrP9e7Zms6/313yoA7YD9T1d/w0GftmLn3Tas
pruRa4uj8TfWERmAmAfvTblvVddTJdrWmX6ftBYvfu/08p7m4Nc2PJiPd2vm
WCer1ubclf5GBtHGj/2w+LPdd+zOETaindC7Y434beHTOZBeXZ4qhxu6NtKr
ZWTTqb8OPAwDf3NWME3R1R/QvtGx52/FPtJOrB1GOJevqwIS3wa3PSDQ38uv
UxuOWM5a0Laphfwbspj+V4UzZCVtW/Ln9e1tQ5ncUy8n2sb4mbU419rfFBvS
EZtYNtN+H/q/mS2jV9g9zJ9y3E/ASr1arUfvo8E2p48qdwG+ftvuxfnEyILz
Xr6/v1OO+Ltsdv4kzoXQuiud4/Ni+PWvAjBpfX2vgUtn8XB8EzuqmDcfDR+S
sr6enTjo4Cd0Tq7duzrpYNku+AHO+wwT/PZAYJ1HYr3jcsdAvWwnvft9vw3L
6aa5KI3N6HkPn6/LBNyLTXK9Oac1T2zTZ8OFeHRum86JOeL8x+6AdoXZpf9f
zG8aqxw1cMIU0iQEx7QgLMb53m2plrGNYWFdp/0HwwLPxnQfVDDdSDxTJ7Z4
d145nEA1fXFGWXzvY5xVDNZRnk8/aTaEsS981f5sijiny+E2jZmnw+mkge0F
EGA52liemF3XJ6bCqCgvT6BZPoRRAK5lQzA4DFolmHeHLo9OYIaFOFdXxNdy
9ERZY1tXKQ17nPcHkP56Ov+mK/NC+v/zReFM/GY6bTcPzObPY3V9ub2txflI
vey3jX/793+dfGYxnRva33RZLISJddGlsdUO59VWAPHCAeTFMnqB3df8ceCf
/+VvJvqJ9Xq1Wo/eRgNTR+yWzt3RuaX3ez3iOkdvmhrjvSdHXm3nc+HVVf1g
ea7ES/lSbr0zq7naMXUeuqmueTz6fpD/GO/kFGzNAkzLXcXY2bUYGaXrwXvD
NuffSvpfFc7YwPW0rebPVu5ob2tx3lEvN7eNl6Xz1WGulNGTcWzLn7V69UQb
+Y1kem+RYZh3wO2N+bEg95gVPWJ/yzBvh9sb82Oghjz0wLYssGwHvDD9orvi
GObHALc3hmEYhmEYhmEYhmEYhmEYhmEYhvlIPk2n+mla7fVuP/JT0rfVjq+w
t3dfx11MagcwzItpKsjnKuiH1MG6yDecgRj0TfKHn9E/vYHE2i/fS/0dQe8k
26S93rsP6FPSt9WOr7C3SUK4V9ahySPw/GT2Trmvoow9MEUdIJ0YFQzDwH8a
qKoOlpfccQaKdE1cDEuRYZ30Ce249jmM01JlnLujJrTWy8v3FaSBAxq9H33U
b9+rvtsGDUzTbP8ZoKtH2O9O4OafYOs7kNoydEfF3B3ATRmD194x8SWUCXg6
3cOI5TB3LwNM903Ep/RPzzOhwUw61S+6X/kTEPe+9cvvU9I3acdnlEcWhiO9
vyWa3AfTjr+431kgoTuhpF5EB9msCX0l7760RoYIS1sTuU0tebf4jH4z3QG6
GsaaDeF4fFt4BrjZ59g6WaefQmrlzt8vj1QROHb0deOc1IbDim8hRn0T8Sn9
05OUoQFnO/1qM96KvL/t6/Wut/AZ5VFAGKTb1xXqFMdfxrSu1aeQWBctoisN
upy9HF/Oy9qNiWV/rU/06zeI/uVW86xPFehgzl3Q+4wNtJ5Zb3juG9n6+jrd
3Rmw4FsoXrRZ8+8ZNbyQrb7lO+qb7qHTYFbOFni+f7kvsCkziEgXuqF71KR+
utAW7+5pI01n0hsPbtc/qlZ323Z9iFcnpK1GNM6xG7o7zyeNaH+kxy2jiyHA
+DzXBT/qz8m3hTEsv3767glnMX2kQ37RqCY9+8sXQidb6FpXKQSuc9HSHdqx
pTw22VLR851GeQTZPfWW1rETBywHy3bjkm/hq3Awp+/7va9OwK2Wd5xBUVYz
90XfyaRv6TTxTqP7hxftflV/HWJ//ejCx5wNZQJJseG5b2TrXJ2eby9b2uLV
tzRY10OhL+9NtIMA56VDbYoZnrKnfbKtu54fQhJaD/uWT+mfnqLJWn3Z5KLf
frmj9KIdIHUGhnpSmaNedCgp7alL2pjyruACxwt75XzV1ZygrxHtYF6EcQgO
xXtybu74p7BUs53bks6QeYT92YG03h5Gv/zG6dsSzlr6pL5et2ZA+tqHA2l3
Yp3o7jVWLaFrbWlHODnZpB3bymPNFrrj12jv5m4gJ73QLVdC4XghxHrpBjGk
6MeDnO7ftsDy5++3vsR3UkAdDbzurxN09/1J8+X6FN27v5f7BDatnW9IwiIj
34JlE2K/t+vrDWy0+4N8C43L6f5SoXVdYJ9kaXAzRfhqWyfq9Hx72dqm2zua
z6Z4JoojeW/wcXhfe1s3Fy/Hf4U90oeqZij37qifMg6r+y0iewa+5VP6p+eR
dwYdBvNVocnTS1sj9C4OPV+CZWb51zkLabycXchaPfeqCMFQxtoCt7R6Eedr
OI3Q4OnpJJBuyX6gaVFHYGBeHO1M5ONqGDBRfoP0rdqylj5qP+oZnC5/SJda
6dZZWk3F83hNf2zHhvJYswXHaqQN5HaDnjqFZK2q1AnWZwOCdqxz3Wup0PYT
OAv+gDQhNEUZ9zt31wnSjVF6aW/knuZEvj1E61v2ZwMMXYXTYQ9H3QE/Lm59
5xa7v7q/7tlw0CywbVv+sww4H46f5Vum6vRie9nSptt5S1+fN6V5wlD/Btue
NtCgmeJZe4Te3CBusX/12LzlU/qn55jpy8Jh2uTchXR9qCxJ+9LqTTSlnrs1
1nMnrYiF2IU+al9jc7BGKbWBhhpTrRbo0YFsQxjEyLeM0rcczvb0NTjGiHBe
qaMv7vQ7ZdnRnX/DvBjbsV4e67YU2EfvhcaLsekMVIVjrCOOacqLDbTXcs2G
A5yXxn1UT0ljKh1+fG+daPdne/2FDMN/zX5sb97SFFJrTaH2OMifTXZ/eX89
b0OTuOCm6899O1un63Rr7UR72dKmJ/ZbcucmjC580SerW+vQY/aQL1D2Vk9D
c8rmmRinfMuH9E/PsdW3SB20vUJ5UEPiOBD3DCHd4yUd5jnWykxo6U7scwl9
zFZj91v4li3pI81Wy3QgzCrsu2hc8B7fsi2vy4v2k3KyIFpyMO2a9EXfDsdg
waVwK+Gn9HnRvla/EOctg3W3R+pEldDZUhxf0Xov6V0aZ7DiF21yDtbEqsgQ
fekBx7T9GDbZvbW/zhyx5jZ39or2mq1k8qt1Zm0YaHV8ua3TdXq+vbzDt6zX
w2fsyd3TRZcVZp6Z4xW+5V3903Ns9y04IALrgOMa2wXbzW7mmFKHeewD6iy9
2X8eslZmTUzzvj2Ol/qplvWlG99+C9+ymj6hOdw7a/RG37JqS1+jPA/APGJe
LY3byNajfdlLa5Lg+l4LzrXPpDW8VOmaCOffyqjveqxO1JB6tBfpgR+EkLzy
BYXRfkuDbfKE9UKBc68+b7J7sb9uIKc9a7FZFoK2u+rQDskcY1rDeAsrNmSB
L/cevtzWiTq92F5e6Vuo7SmzaXqVPaTVPDoP8g19y7v6p+do1yHa9cjuPI5Y
79uNNaaFf57S9G412EnPPc7RL9JZoxh9kJctlOnEmCJtz1Zchk5UL6UfuTxD
Pu7Y7SdsCaM74z/Yb7lJ30o4K+mT9eOA4zqxYgilGBMf2nXvdj2zvzYMc3Zs
KI+1vMbv7d65S5H2xTUB2vvHvGkfyLBPF1lXpeBoOvhLgwNpHYSaAidnMN5d
sZPeZ3T823f5SNubtJrndPmmfrOVJpbvt9yu+bTrh1hWRudQN9Tl+XdL6D1E
C86X+krrjXuhJTzMx6ZAv28GN+8oJuhXnWDbu4lL77eI+Z8u6/J7bL3H3nGd
Xm4vW9p0F2ZvDyyb8i1yL39tzva0PW2dORjhJY9oDVHo1qfL7WfYN4nffkj/
9Cx0fpTGbicd50t5I84piDMIGLfmRnAjD41p0I1wsi5JDfZOhxl/68SLa5wV
nX04dBreBdRVBr5xlLrUdl8fOwVPJ912D8IoBM+ywEuqzWGQ9rqrHYQ2OqXn
v/5jnL4t4Symr05ajeo9HFUT/CQEk844Hf8Y/vYf/0qcd9rtVaEb3i1PzeXz
lvJYtAXHKJrQKE8gSzHtJtqztBcP1HfQe2YuhEkMruOJ8+Wui+PejZ14g3OC
44T/mrdT+iM6e3hdR8CxtifX8XbdP0XmZyD6uqnfbKNMMQ+17r1zHdz+++lV
jHO7ndBl1921spbvsF/e8T+csT3Id+INXcP53370fiadvwusM+z3R9AM7Isd
G0x8VsP6fJO/7brAbtQ/jnJ7ZIOGNljYLui9fO18aH3o/77P1rvsHdfp+fai
wz/4/7TSFin97dmmA5ZlUopzyIF5Euk8meG1z6Lx+nFDfXnKnjYqYZMiy0M3
sR3pcDicQLeD2XcAhn1TXk33C1/RP72Ke7STm+UDFyKsV8tYy6CrZc3ub8JS
+kijuueIH9SQFyFtKo+VvL5Do/zykxx9Slg+cBdTBbGlgze5VD9n5zB/apwz
4fghp3IuocgzyNDXRYELhtWNqR7P0/t5cV2m8ihyyOnuqNkBYg05zgVWj8y+
m022EtvtHdfp17WXaRpIHRXMzRcXvcKeng79l9xp9m36J4a5l5u9lrt/jGMp
nPM8+tqV2FvXJublzZ13BHzH1FmAc6r8u0nrJ9tbJS5Y3tq7WQzDfAvuvUNs
BN3X4D92R6B4nwvn7GfTAS+III4iCHwXXDd82F99b9CY83viU+2lO1OD5JH5
N8Mw74DW0L4SujPDdx2wbQdcP4Q4/5E4FYZhGIZhGIZhGIZhGIZhGIZhGIZh
mO+B32C9aIZhGOYraOTdOQf7Ri+GYRiGYZ6C9KJ53sIwDMMwDMMwjKCGIg3B
DzOoSU85cMGhuwrz9r7MVn/ZCQZ3z+KzyUV7efjetPyd0F8uUwhIy9oNetrO
a9+D+Dzy49474q1eNP2G3v0W+tjB6P48uvtNaq37ECY5lNVAa71KIbzoyCfA
r+YxDMO8Hrpz0zrR3bAG+ogAoiSB0DzCbq+D43nY/yeQRPJ+T/2iMym1l7t7
q0lrYH/2Wt3mBorIFneUKmcD/ZQLvu+CcVJEmGG59n2rF31WpNZOG2NfL9oV
+tgB2q2Aol3vnK4TC066vAe8Id0Rcee0Ke5kl5Zm4ODfcasjn5IexbQMEsMw
DPMkpFl7o5VM2sukUXu5mFrq6yidsGCTgnNWwe3ubc9sOCgaXCWOW92evkZ1
qy9wFJdxr31Pf6o3vuWiX9DzJVI/B32FFC3BMJXL77v72G/jIH0cFbzusiuc
w6RPXZ7FMAzDzDHyLdQHk45M2n3Q9usj7Ri5ThU4OG/Zqb17tjtNuL4AKmnj
7lptm7XvW22cKd/Ss6GJdFAu2mwl+OdbrSBK1412UDvf2iknMB/Ul2IYhmG2
8YhvqVIPLNMV+zKNmLes+ZZWk1Ob8y397x/xLSTxZMFpj/MSoT2Ug6v15laX
YEqI7LPQn9qrDiTsYBiGYd7C3b6loLWlnq7xJt/S6t4KAc617x/zLZ3Wutgn
CiJIhwJqfR35zAf9gP7lZl7DMAzDvIop33IW+y3dB7f9utRePoKdSb160jhX
dj1fM7WfUgWgHYxWd2rte/pTlXspFysbiAa+pUbfslOumtK5p4Hh57Na65Qu
pxOFF3+qF99COuxuwDpCDMMwr6DKAjBPnQ5zDjWO7WNHapYfDR+Ssr6e0Tro
4Att6rjVXj7ASbMhjH2xD78/mxAK/yJ9x+6kg2W7OIfwwDJM8C8Hfpe/F+fE
hF70EQxPakHTGhzNM8gGD22oywRcTWpK6x7tnTSQueeB1jrZ50B8Od5G2tma
0IROkxAc07raSzrsRxtWZL8ZhmGYt1LfatffaC9f17yapp7QuF/7/jF7SGs9
Iq31Umqtp6S17lugu+nto1M68qwdzTAM8+FM79Vv//6BGEMdDno0XtOqEwhC
PmjMMAzz/VOAR+eB9Whmn3zt+/upIgMOygHUi9Z6CIHnguvH4l1KhmEY5num
hjz0wLYssGzs58MUbo9rrX3/OFUege/aQmud/EtS8CIXwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM85vD
/wNRR4qH
    "], {{0, 75}, {407, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{407, 75},
  PlotRange->{{0, 407}, {0, 75}}]], "Text",
 CellChangeTimes->{
  3.7743556194427233`*^9},ExpressionUUID->"103a692b-3600-4012-a7e7-\
fa38f8df8b3e"],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
zNNJ4Gka3GR4+hyXiCND8+4rX1fbqMt+HLpk6G8bTXXB4sB6kvch2O+yDs9m
PpiPURLmexU2vtkNsYbUU0ccWajQpWy+ozrVkSGCqy3Z+Iqfk1DgHB1MUlYm
1l+RC3MUqcvGTSfMG9w2uvZr5UhdPjadQHaLz2RjWD4uSM4UR4QPH9ftIAn8
fL0xxcaUofubrG8w11AKJXxcWxyrXyiOcJvb9lmz+tm3v/4ynA83EUf6dd/g
K+3LjEdGo8qcBfj22I0oa7+cA+sm9aCw8e5C1aHqxfmq/vSz53riSK1u+uPI
0Lw7y9fTNuqyH4cuGfrbRnNdpJ6CKZ9TMtVsfMh0JE/ZGEVTIRcMYlg9dcUR
1k9JPLEmM2XPRyUhQ2y3Iycbvo7K0lweu5aRjXuXxaDB62l22jpmMzawFblw
NrDjo7lHr81ke8ZHu/W3ZnD9jstzSby9zbbzhfmcY8Gmj0LEx7Cs3S11uHz/
Qhpj47L2bGTtOQ10rLVsPCueZeNbvkZWnpueQvHErAQiNnacivnu7Pfa+sg2
jhTKns3HluNIaX1kV+692NkZnLx99JSBj189Q4Vm1ff6HAoxhz6SsB8K5/PT
pXasZO34aAMdoPtVPt8slMT6bAqr59GysE/jDPYRO5AmWT/QDiIkSYTAVqHa
20z65BxeN2K8WYtZfennXznlPRf9dcN9yr6vsl3rLOt2SN7d5etrG3XZj0FP
Hfe2jea6YC1X7FcYzbbzQCkCdZbFpKiY/5B6arZFMVedj3fTDY+xYyw0f/8M
k101CzGL19XRcSSTfx9HIibT5AJrIzeBbF+i2Bcixmlr6HaHb4v5Hq45lrIB
27FhKAoMsRiVYMPPg/I9EGxcptn+SXOHkatiwdNiMo3GU6zyGBn7JqTZjPU1
tp2CAPqCPzeFtJ2vTLjN8PP5E8yWMkzPhsx9z0zC63/3d1Dm7LfxEqrD+rCs
TXsG3//F7VoTez35vkKxv4TZvczrIs39wGwFRdVgWiZUsY+jsJuUvaOvpiLP
Fd8zHLeXIav2rL87qsxNHwq+pyeTdZrlm2R1tOZpT1bQ873R5pr7LdYm1OI+
3EMza9N9Xge+hvmY58vaxpr5CJvvBZqz/iIrd3o++4h9HavpOK/XGdN7UI5L
HXIeVDfMZ0jrhvW3vnposIXuusneC/naD5NjLmmwN2mjbvvy7i1f3N42DD9p
lP1w/fTXcWfbaKiLnUrMFaTSBlIDK7lhfNtZT022yEbUbr7PjMvNfQPro1jS
RMg9Z+mIvclsPLdifkCzPQQ+qyvWfzdP2YOZMDmZT7Ecl9mEBWUxvrtrI8cg
5XstLh01U2aDMY7bhpYw+YobMZMj08nS2s1rpZV0e9FVBmbPbExy5+ZCu3Qv
6me7fzO9aL+q1zbOYKPpOdMfUDe8TINSPKls52wbp6C7fTfXRfWb9Lw6Ggqu
y+jMZz3u+toIoQfN6yMnpxpY0K3NHRzDEgiEU5Gw8abpRvu/+Vmeo+fICNeP
bL521LHf9Bjw/haBQHgake0/m4t13jQ7u7lSKuepCU8O+FyqAVVRoCgaDMs7
fn2BQCAQtuB7RHwXjuPA8+t3+xAIBAKBQCAQCAQCgUAgEAiEpxUxojPcc345
3IR8XXlce/0QCISnCzEC14XrefA89n/Xz3mrOFfH9nuPfe8V7tqPCu94x93B
X7hjoIQ0hKUZ2FNT3IJ8bbLV5LusbKGtwWzh6Oj67cbBzyTfAn9dP27JtgkD
cZd57DlOkf9MZb8apIg2tuDcGC81uMF270DK1ONDX2Z8Haa3KZQ5QeTpWM2W
UK3jzianng2n1kZTBLoMo3QJ1c3L1yxbk3yXli2Go6pwG5tI1283Bc7Pkp1N
HsvubQrSgtuxbUI/7jKPPccp8p+z7NcFfl9xMz+Gr04xmut1zoiNxdrf8U4s
sO16mqEBSXEb9sDdrHyNsrXKd2HZNjok1W8+r9j1240hvw/pKuMIx83bNmEY
jueCr/C33wKPPccpXPanvHu9yO9WW1XuE+K8N4syz0aGCI7pnnAuL4RtVf1f
ytr1suXe/5uUr0m2LvkuLRvz06s1mq/d6frtpsD89FXHkZu2bcJQHHu38JPA
ZX+Oe5WvEeJ+/go/WOhYsI1lbcyYeOz7I+8gF3PpngZF8xCV/J8Pdd4+Nr0R
+Vpl65bv0rIF2hzrlmDR9dsx4LzZh/Fh7+PInr/eqPHRt3PVt/O2n4vf/sZs
uwmdfOiXL/s1c9mXfenxXPZNPPZ9ed82l33t3da8+Hl3e1/X2wU7LrOoa39X
roPb2AW45rdcsrvrZ2OmAzfOx19SiUvasoLD51KYjdmsjLrlwmfltzYhPFOB
Yub3tYYGlh28xBeVr0+2HvkuXXf8fupZS/+r67ejcDAfdhZHRgtZ8HE7Lr8z
dlK437uLj7uNK/v/Piu//cVtuxVdfOiXLvv1c9nX/fDhXPZRA4/9kLxvm8u+
ylHTnVfGyVKdg93oq7yuj2ljf39+rnnk+uK+IisJi41OJrOnYDJa7O6h5P24
g6eOOS8Mk9nKY+R+/SGGLeWchpynpoO//GLyDZEtz6dNvovWnRBKxayNt6Pr
tyNxEB/2djxSlEHwTeTcHb183A1c2Wfmt7+4ftrQy4d+wbLfAS77uh8+jjuy
xGM/MG/0le/CXPaldwfklbDnJ5z/dfcdq+u1kcW8Y9rY2bnm82SEvjLOnHRj
7+/9D3IfwgXO+3G1Ogk9cU+Mw8ZlRmGclQsMZz1jsTbK/87WH7bga50Lpjhe
r9OC/ZxbPttiY2ZDF+PYvasYJptIo0O+U2QT73PeB91pv+uT2cmi7S7Qrt+O
xQF82I3rI4W408/HXeemOze//an6QcT0c9I4pY0P/XJlvwtc9meLIxVO0LvA
Zd/8bnteIm6wcdiOgzXQIee+6Zg2dm6u+R12sTiCaxc4wHhsHE0Eh5pvNe1j
Cth4UMn7cSnr4nGOr8JT3CdNCnx9Maun3WbVPa+98NNyx8DqWPkSF4YZ7OKy
p8yx0PP72gfKJkrWJd/RdZeKOVrH5ftMC/MuVTB/N2/zCV2/HY3hfNh9caSf
j7tu42fntz9aP1sRjz+f0M2Hfrmy3wUu+0vFkbvAZV99ty+vrJwSxmwMYYYp
fE3Blgr8mDaW4Vxc8wXkfTPFsFDqliU2ViPOg2zCapyjTbBx/dxeUzGXXuIc
5nUy2+su9az92Qzel56r2ZwlHyN3cXwcKx/PY2HsOY+5T9mO74bKhh75jq67
/XPSvCOO+Ep73l2/nYChfNh9caSfj7tu42fntz9RP51cSV3o5UO/XNnvApf9
oDgygMu+GkfuApd96d0BeWUvZWuXUxZvVPUQm2mII2flmi9A9M34OlzF8DhP
13gk1ga6qiuJAniWBpmVr7y9hI3HlnsO5YD1+0R1xT60lQRz2zj42GDRsJf/
TPLtk1mIden0ENn65DtVtp44wud/Fy3k6uXfzsf7PpwPe8unXZi/DwrrKb18
3A1c2b3vHIhj9ZPy/UcOTEWC0Vz9nejnQ79g2e8Al32dC/44Lvsyj/2wvPvK
d2ku++K7Q/LalZ6VdcxjZHHB/8g21sU1H7kGNLO6RjEA3E/Otz6jCB4DV718
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
YFtsfGnoYh6iaxQYWyuMJ8xXFb8srI8MKa8rM/+ytPbj/8L7scX6ImPWVy81
qgSONC74jrLd9+cZMnvm/foZ1obXsz+5o50ebRv1PJrlSUQcGa+dgk9hbU9m
z05Z37KnrH9h/bjxykK7KbTHkardbvPm82yWLpX7Xxg2Z326nptl28aRXYxI
HeG7VvZemMjkfciKnQ5BKY7wtFnb4boaTVn8iBAX4shlbLVXwIPts4wmnQ6P
I4f5t3z9vxDfsufNwvm1I+JIZ1la7DkJ4fv+/rOJDxirMp2uJ3nbYvLKOjxm
BxM+RklY3Sssju4S69YFt93xsquNttt893tVHBZHksCEolo9c8EdabL+rmHu
+3+eMsdCr+553EP080pzgyj5hyHl7fIvYgzZYDO+Mt350qrdD6vjCK62FPMU
47kCpzWYHN5OD9dxmzxNcSSvc1b2oKes4rdSGx1Stma7FXYla2LdIRX9vfPG
kWF6voI4IsTwoPA5OjaGVJXVLo5czlY7BTw6jrTr9Pg40lee2ON7ktnYQay5
sf7TegGltA/uuDjSXpZmOVNfx3K53H8U56Cz2KnHxnd8DsFU2fg+5l9AnrIx
iqZCLg1Iu3Uh7HJct5kk8HMf3ix//3tV3PC8FhuXLhb738DnHjrGhNnc5bwy
r7X3D0PK2+VfUpfPfUwguyUrEHMk+35N2e5782R9ke2WxmTD585ZWss2f3t4
Oz1Yx63yNMcRPhcwWbui7F15PfjXXDeVeRYu/WaT1/XAOMLna4rzWBeII8P0
fEtxpMGfphuD1clIzHFJeRy5iK32C3hcHOnU6fFxZIhf9A2+/m7AtGx4tT0F
DXHE7okjnWXpGl+fgkCs4+zXnFIE6iwre1R8Lh+DFecpg4Iu+BoRs6PJUofL
x0T8/KirQzUqc7nFOUoMea+K210f4X2smeq3j/ny8kzX+7XH2Ob7u2dQeQX3
ljefNy/5l3y/126udrxfDxCv8P5gYT1hp6vM3yZ/+TfdeTKZVHPvXFNn3RFH
KmmLfSWn2ka9DpvlSerrI7uyl+u/Ma/YEftV+fjGDlhqSYTAZm3Y3pa0qWx1
u83a7RSK2KiUImLyTdnfRTcjZB6yPnKSnpvbVG19ZBtHCsJka6P7OBK5BjRz
wNnBQMVcbl6riPl6biGOXMRWWUoe87uaVd27hub0htgn+nTalGYVx/m30FxB
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
scsyNI7wNOev1/nL9rw67Xd+DuWH7ucAbJprybiCON+hqP9Ah9x7gXIzV2AX
7/d/YD55XOV1qs11d7eLPr7vbt7xLl76ZtR5M4+PI306/KSnbIWUGznHh6+P
HKPv7rz77C4epPs6+t4b0i7ObRP9Ze2TaagN5evGBb+YlaXoJ3riyA7Nemtr
x93v9NVBvXzdOuj/vRktcaSFA3SIHMcifnAf2ie/1b5PG9dHHme89ketj/wM
/YW3oNXmtERudX62CobyQx8XR7i/lDBm/TIzTOFryoC1mmb76+L9FhzvE7nQ
367L19cu+vi++3nH23jpm3HOONKnw7/rKRtHF+f4Ievsh+v7NL7zYbqvo++9
Ie3i3DbRV9Z+mYbbUOzxvaxsbCDWLFjMWy+guMWE++NIl97a2nH3O4fHkT4d
9OuoCYfHkePy6Ub86WfQqzGEc6mI/2f7tZRPy/u19BeG79cqQcxp3W+ZO+C6
HGMit/NqDuWHPjaOIPWhzphOZH43cVPfpEnmuv118X4/+NdLMa9dnqMYEEfs
8niki++7k3c87uKlb8Y540ifDv/SU7Y+zvGD9msdqu8T+c4zvfXpvinb7veG
tItz20R/G+uTabgNifl8g68HGzAtG15tTbi7vfTprbEd975zeBzp1EHa/3sz
Do8jx+XTjuSL+1i/9iW83bmOH+Dzs4avf5PXzSPBczx9rbBfhsWCBT9v+FM5
rYyDuDuObF5vm9MSv4p1dsnuas1D+KH7eae7eM0jPofA7d8bUqEt3OVdvN/5
b9O1vWunol/M9Lxf4815ffl8bb6u6ir83NkSghK8j++7J/92XvpmVHm/m7nQ
m1Gv6x4d9pStj7e+Sbfn0vfJfOeDdN+A3vcGtIuz2sQQbvc+mYbbUGiuBA9x
3PpMd3vps5mmdtz/Tl8dNJSvSwfilZ7fG1HN5z/kfxfWOoJyHDkun2akX7N4
8GzTOfPKeZGH2Xl2+Z3v4H/6JZSX34f+RXEd5RE2D76CKumCg1ji596/bbo/
5UdofE7r67bqqK6vtqCPH7qHk/z//aceXvPUwXpe3NvQhnbuclGcDt7vSPCG
szY2XWAlydA1CdPpHJJq7fZbJr6G+ZinPcNyzfRty9kzPJ20m/+9M/9OXvqG
6m7i/UaVC735/VYO+V4ddpStg3P8X/7b/7OWXy+P/WB9d+c9lO98iO6b0Pte
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
8+zxF/l+LeZ/ZfsHlFwW9/cvf1Xu4/7yDeQ/8POOb7Df7sP55D7mz7A48dKf
4ed5bd58i+XDfn/1M3h8rf6n76C99DZWr38J56PPob52H27rPSysPB99iDmL
JaPt2fuPft3bXjXtA2Tje9M0idUTGx/JvPzpbzClmzzLv5+LSNMYcdIRvRL+
e1da9djSnloq9r8Mi5VDwVp33HSv2AF5pQl7Ni38mVT8Q1seDeitrwNxtvQO
KEPhnf46HGBLvfXblPUR7/SirTxnsKFzoLPMx+jv3DIUn7l7d/klDxwonzSc
HU8fIf5lHwfSh48qZWZjhV8e1cv78HfETWc+GvFY7Neq11lL2oNlqz/f5c7P
i6Y5bQLhGJAtEe4CfoX56n080dcP3jiyddaJ7N25PgXh2kC2RLhexB+9j/Gz
f8Ts+bew/qS+Dk44Fgk2tgFVUaDwuxna7kcgEHpBtkS4cvzyA8zX78N48Cv1
cwgEAoFAIBAIBAKBQCAQCAQCgUC4k0gRbfbnLZJwU+MueLLyJdw40vK5jeSX
XxH90s1RnP7yW+8zeNi+t5m/H/5U2ROddp0feUIQh1fBOXd7yPzKja2pJ5xL
/tqsKkV8k3UgEMJUjN0ZM1+Tsb+mKEbgunA9D57H/u/6+R0mnB9m+73HvvcQ
7N6JCu8Uvz8k3wNxp9rO+XTM70QIfB+beKAdpxE20c3WUxJYYq+MOLn7/TfZ
WdBnsvOT4uxj9Zzkwx9hvvIu5Pe+g/fJZ5Bf/hhu7Szlj7Bffxez56v3C0Cc
51RfdWB+EsJ78DmUl97P79fn17g50I06x9OTgxSuXOd4eFoQM1sTZ5X5PZIX
zy1BYGXnyuf6zZzQHYJ0e/6/eofhxdHlz3lst8U5+vFSgxts7+1I2fjBh87v
t5hKML0N9q4sQeTpWM2WUIt3MxyU7yG4O23nnDqOHBWq6cO3OOdMzgPTnjNC
RxH3TdzkmazE1yHrOd9R+iP0V+/D/Z6NIdLfEXz0oeDbmrzyXeEM5CN4r76B
2b0fduMGzhUzffHP+/th0t8QfP0DrFfeaLin5jdY0huQHxTOWH7qYFo8ix/Z
UDXvDOePrxQ3woHN+pHhde6i5Xc63kwc4cjuoL+mOMKR1cE1xREhFawViyNr
tzYn4KvTZi6JjcViS58tn3M8cu62c7l2chYdJy7k6SqvLxbrgwD1IUm1DDk/
0E3FkcSDstzz1KWffg7r++IDj+G99kaZB/6nL7F89g2oXxQee/gN1s/+EesH
5TsDwnfeaogjIZTndEgfFZ79+j5mledCQ8K6iSyNMAiRJWF5Zb5zi8SWbjCO
bK4zjtjXGEdYf5/fz1q9JzUNBJ9m9f5GPq/lmO6AeZszxpEz45Lt5Cw65pxu
FU66KupliGDeYBzhvJezYl4N3Iz87svx8/d3NpDw853P/GnPDSawvT+/fGda
cxz5HfbLnLfyAxazHou/3dfexvKdyh2T/A7qmdJ9D0Ea7bmgjSI/OBtvC85v
Jk+05Q+3ClzvQ57hsd/Jfg9dmJq+u6+yxHvuhqVxU43PmqVtCz5rbzfuTyMf
juXmfbuMn5zPK6a8PJYOTTMFf4MYo3oWDE2Fblfu9GstOx8Hy8z2cs7UHcd9
xhduaBn/uV9txyXebK+VF6K7/JxHm5WF353H7xY0NFando2bfR9HuEy2qCvT
LPBcsXcdyxRpt98b1F7+MvZxhMtt8vKb9efby8R04Fq5PrNKE3YjdOrv+X0H
lFvkYfz/7L1NyNTY1y9asxrWpKEGDgp6UtCTokflHVXPMrNmZiSZCBnchgzk
ErDhINKcNOfSt2y4x4jnYDhXjhnIa4Sr5L4HJcc/YnEUrPevg3oRIQpCdCDR
iQEn6+61d1K1k+x81VPPh/b+QaFPVbI/1l57rf25fhblSPetZhtTp2dt88yj
2Z4HGpl3TPJcEmuX6IU1ZeXlGiQm+uQI44F3z7ct8n2HlqJZDhW6vVM/adC7
fbZx6C/A0iaUA2JuYh8h+RU6hLgOWz8Sc7ZtWRgz1NazNVjcacWtU7yv4J3/
DcYX322+WdHYyddzsYcpX/EvyBPzKLevIfYjQDmJ9dMmjV05P3cTjPsinnvk
yxiAWsG1TnVzOtyUHzkAB9MFrFPOb4xlinzOOrH/GENWGeG6KmnTLB5r7TMp
fzX+TvmrDVAnI1CcEFZEN6Z6yjOfrGAxG8Jo7uTrbSOf9YjFMSbzUk0xN3pN
Yynj/kDK1bHh4h7NGfe0T9p9PqJ8QcjFvXB98CmXdsYVWVf3FAlbyxkhPzs9
t4B84SqYAeMeWZLxQ5/nI6K82WrKrUye1ecVfAFJTf0ZjzbytKNMDRN5tG1Q
x/0Sj01uPpIwfi2eQ5bxFig1tqah/jkwPzKckPmtZlKuG9quG/73ujplWFLe
jW2M84St84wMknq7eq+dOcw0b5OHhfsNlTamqUztZV2SW4M9p3y1fDz2iIyL
SKdJXIXYM2U7LiY6Y9vLlmdi9uNHin2nlRzqdLtrP2nQu/22MdAzRzGNxY98
ATH5UxTDtFgHWjLqRwbTVCZkHKQRmWz5OJrq2QGRDdP+EGqnPsjdcjrllE8R
XLhU4mbEOYV9hviRXx7mxzFVfgSBMZhPmZRbZnJRdKahzJWUA/KzTaewoTr0
NRj0ldS/RYxbQeXWeXF+0+PXN5qeYb/nuFBSnp5cH6DvDIiP4b8MwVEG0J8S
/6SrsCgYuCLvbWkMSPnJ+bZBvehvZVFbdwSzzZu6Ur5wa8sXvjRpPSdZh0Le
bOQfyvgByJiPTKXKaKx/QvmGcF0kMzcijt/iuhblM+M5mmIXNK2CK6lV/Xmk
fgTjCW9eZ3zplHunVZuuSnwrmb1lEm6oN/LCDWa5PChfS5WNaVWmdrIuJNxo
z1kaarqOHUPguEwvUca9yaaNcI4ippNxwSz5l/p8kzWZs9tkzmeZm/M+VSjX
sUEOtbrdsZ/U6d2htDHmoRI/Mqvxu4U6sEoyP8LFrMv2auhQtKmeXbAyYdzL
+NFFwHj9N8B6kV/rWl0uc6HQ+YiC85EnOX9Q5UeSV09BPXsXgvcfSR7IAUDK
cuF1QX/SPT+1vOeXRwxrXBvRp8QWZeuIkYCjh8m2p2T61vQMyx/5lTa/Lphe
+MCDtWN/XuBRDW2YDfL2a1Mzu+BHcGw7WWzHIeti22Sy8Aspieq+LVOmW8gJ
1J/qJb5wZzOZxXHWgJRpDOqiOsZVc/0Tyn+GnLJZUURrxKX9kQTnnsxOUwYk
RwPdr2/1+vrny1feH2FjONxP/vdWbdrCj9TUG9u7XzhjVLd23k7P2sk6j2Y/
EpN5R4/MO3DInayIjmQLKXRsQ3SSDrHYHEWIWHQutyZfMl+3FpnfIeNkbQwT
c1XZ54t9p1kOdbrdtZ9sKlnSu8NpYziQH8lxjVNuSubz2tezBYjvG/eq5iPI
nXIXrMflWPvxHdwfuXqA/RF89hKoDzL/9AWWl9GX/AlWbo8/AkdoO7knAuSC
Zjw+CR0b1PkRNm7Z8mY3PVP2I4z3XCnwpbLntv4pSwr3JvuU78cOC+Xegx+p
rjsir1uML9ypHechb7ZL12JxPrzl4OLRXP8d/QimvSB5Uy5a0u6a0Rifu77+
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
K/faKowXiu9f+5PuCyu3vpR+i188B+v8XzD6+XcYkzG/c+f/g8mpwpj62V0y
J8B1++x9ZhvH3FrTEm2owI9Eb5+TOcZTqA3LTdIfn3kEq7dkTvT+M4SPyd+k
vDPnszCvEpLXYPxyFazsnMD9m9Dn/EZnPxIiJziZfzct7bx9ArNf7m7WvoIL
lwT5fCA+7gL0zjzJrRlX+hGsDsrjFO7l/wbTy68Fc0jmB8Y7r4E0+5Ehx8uW
0786/S6hqe9CYz9bFXjTkLsK7Ui2lpL4ZMyd+YPasgnsRA3yfU4g713yqrOJ
FW2aK0ejXetuG9rgwHzlewGZ23pk7qlNoN+fg0e/WxM5Ez87mIBmN8WhYm2S
5yBkMu+r2AIR2Kir2vZ35j+LHFoB6EP+ufp0m9MQ14GOMaZ6iUMbuT+Q57pf
aNM2+yP5ZxgvNn9+oikNus9M7PK0aj7y4h612/h7eO0vYgvdQr3Z2szg19fp
3+38SO/0XzD9+XrlnkwGOn9QboN96yk43Md91tKPbPAF1vefwuLXP6FP5gVe
Vv+ufoTaulEN/xLiM7i/3gSbm2Nl85H8mcbtfIT/usqP4Hkw9ew9WL7/QNIn
87IfTJhcflMYT6b2WWtdowLarWtloLyDqb2r0+8ymvpui75Kbecw5WHCmIcT
GgeVjelj8HRj48fry1a2E6xyawiCYPtJ97Tzfaps43fKawORTazyI9tyNNuk
7rahFQ7KV96Jm76MKLBA0yzwSNskpCxbmQGL1ayRuSBdE7Qa47jmdTFrJ7Ef
WeN6Hskrv77A+kemv03ptkpDUIelPsyNB3hQLsGUK3xTuyPwI2w+QfzA+Yp4
o68ewgT9CBn/r9G+ldZm2Ji6fz7TlJZ+5MxdMBSTrjGFNfVbknF80c5u0c6P
RI8fgvbrQ3aW6sHNg/kR0j/Qj1TPR77CyrkL1rP8/I6tH14FJ7eHk+2P5Msv
9iO4hncJtM15rS/gXyC+pDg/bLRTTdjdj9TpdxlNfbdNX0UOqD6bH8Ue5aj2
aBkcMg/As2vbctaXTSwznM9Mp9PNZ2ay35v8yC550V8qbWKzH2mW1SH5kQPy
lbflpheCjiOmW44wj5MZci6nyUaBSTncqs+HVI1p+ikneLnN4pSfMs8lyda8
p5sC1afbmEZFHRin7Jzj+kQksA6W8E+co/by89Ij8SPEDywUXHOvmBtwfiS+
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
1wbtmvW+sl5v/Mjc3cwzs/6YyapUtrb2p0l/K9MRlfMo+qAg3136YBskjKuG
8lHin2RMoHJBsCnHGVdXHK/3J1qJb9hJx3dFP4Ky6g+0/Hpwaf+AjOFn6JvH
MCdjj+ZpVkLnyLaB/AicD9ysS3O6V7tX0cGPVKTZVL8meVFOmeKebFzggl4x
u1efVp0MBfV0BDqMfL68Dqd8mHNuESZ7Jj98qWqPfL7NsigCOQlGlNeZ/24x
GZbX6NtyOydreu5oPidzEm/X/fpmex677LwJdv9kReqY2ZaUe9Sgg2M2RxFC
WJ/6fJM1Gb/aNiwsE6xdz7N1mo9U61xZv5r6Zmr/la39xzldf0c/ktsfCXRS
p8mG26Jctnb2p1l/q9Kp8COH3gfL+Xbvg+1BbWGfjPFIxX1dy3FAFutK+YZr
2rboR+j8vni2TWTbkxA8fULPivQnOnj8b3xZlwvQVIPuISTU9x6vH2mqX5O8
RH4kCfJc0FPNpe83plUpw/37keyZ+vbI59ssiwIwvVFxTzoAbTgp8910PYtP
158NtkeS7gW2R4t5wUYHSJs4XBxgyj06oL4xsJ2K9VaoqE9NvrEH1mK5GZv4
2hgmZlveQw5LnfqRqvNaK3MOOUrXCp3r7kfweLcO48GEjK1j6u8XypT4rLo2
3Zcfqa5HXjQt9FeYzuH4keY+WM63cx/sgsQnfRN5XA3QdD+ne6L5SI/6nHwS
GDcei170I3R+3yv0+6JtRw7zbJt/adN11L7ilMdTdM10vNXjE+BHmurXJC/h
fKQCtWnVyvCQ/Ehje5TnI/WyyCPx5jCY5fUgIXZuLNjv2j1WKO5R4ZnfLme2
WviRdN6hWXaewzOVqWIswK7Z2xHXpyZf5KGdbH+jOli5L1gD5EbtsXWOchFI
X9DU7Rpxjc7t4kfo+p+F+8gWLIiPbd7/3ZMfaWl/GvW3Mp1D9CO1fVA8H+nS
B7sC7SFyw2tBvu02a3jJ5sF0/8sAb418wyEsHR3UBatIXNwfCdP1t7m7WRdl
eXF1J7LQOUMfE/kOBO2YUP76UVrGhCStED1M1wjYE+AKdLX6Lkdqw7M1WzKW
cNUR40LeiKEhzab6NcgL14WZH3Gbx451adXKMFszZr4Kz7+U2hUEa7OZDruJ
8Jnm9ijk+8//1CCLAtA28nqQrMCasTMgwH13YG5nlhCEPpHhfA5W4959Cz9C
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
m4H7CsxJOhfKvoocUEaZTU79yDzPhybyIxO6P7LNm/cjGYexvmR75Lh21+9N
crylsVP0I8U1t5DxVnPrWZQrwnZg1UkueRnRuvD7UZkYCvm3qYOEhITEcWJl
zkD1tiszsa/BrETSK+D2tcSc8LgGs+VjDiEOfTBnGR8xdyY3wu/HMNMW4Lg2
mJqecnAz7vJpyl1uOkvGl760QcXzWgPynZdyGBtTyus8mi/AD+PtWTGS94Jy
NGccxkMYz3RwvAXdJx9MVHDWjFfemG25kv/xPzLu5BHMkTsZz3ARH8jyMMGy
LPIxwVCnMFJw/a29XEpYWzBTvdyzW+7mbf7QUAcJCQmJ40fxvkNSQ2+Q0HNJ
e72+gBzp+yEvr0C85WCn+e2B172E3eTSvhhHUQcJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQmJ4wdy2FumA5IKXkJCQkKiG2JYLhQYDsaguesOXPISEhIS
EhIJrKwpDAZTsFbSg0hISEhIdEOyNGDUG4DiRMddFAkJCQmJbw4ROEofeiMd
lnIqIiEhISHRFYkH834PBpr/be2JREtYhsddiBMAKQcJCYnjRriAaa8HY2sf
J7QiWHoeeL4Pvk/+9QJYx/h9DOsg+94n3/uw3Cyhhdw7/Pf1WJpz2EuRDwPx
Gpas4oLfSH2DAFbhfrz2iZaDhITE3wOpH5nsxRglEK4cUEc96E8N8JZriNPv
43UA5rQPvaECC38F0caMxhD6JsxGU9DtANqZ1yUY8wXxQBwiH8y5ArPpFBR9
AY5tgeksocKaHyIS8FSspw5B4ZfQM0Bf+BA4Kgx7I9CXB83rJMshA2n7aA2B
rcN0asLq2MohISFxaNirH0FEYM+IH5l7pXWyQB9Cb2yW76asbOJb2lu6JNBB
tcPcd/F667OipQeuvz4+2xmtyvORxAd1OAObzreIv10uW/rMapx4ORBEAWlb
x4PAmkF/ZEg/IiHxPWLvfoSMx+dkPD5zILdElSzBnAwE4/QQ3IUH7U+KJeDr
KnxzR8tWBoz6mR/ZB45fDvHKA0tTwQqaHWLiKtKPSEh8r+jsR8g4dx2AH/Br
U3kEGpl3TKzcvGPt2uBYU+j1VfC492KffN/FhcUeaKpbPcZOIgjDkPtERz4e
T8KA+sasWqG/IPZ2Av3eCOamBYuFC6vGQjXI+djkgPMcB4y5AqrhtN7Pkn5E
QuI7Rgc/Eq9sYrsMcII1RKEPpmoJ7cLKHEOP2IzN8n/kge1FzJb0FHAyg0bm
KLa97HROLHZV0LyyRUxCF/TZGEajIQz6PeKvhjCeTGAymYF5hAea0cbqEzIf
G6jgbwqXELOvwqA3hcU6Jn/Wl6eNnI9eDgmsiT/UFAU0y4OqYwSVb0s/IiHx
/aKlH0lWFkzGZC6Rjj9jtAtDDXyBaQoXU86OxhA4Lhub+xqxpRNYhOw5nKOU
tkWIHTQrfUsEjqrl5jMsIRtmkznY2SA/ckAZVqwh1aa/H4T2NO9HED76keZ1
rXZyPko5xLByTVCVeYdzEGVIPyIh8R2jlR9Zg0XG2NPMAVAkUDWsRtvXI/MO
N0a76ICTxVqh9+ZHYKAxSeco5ZdrzsxGNqh68Z5LCPZsBFrOIYWwmAxBD0SF
q0l/T4js2Y5+pKWcj0gOkW+AMpuD4Sw77F+JIf2IhMQOOHHnLyvQxo/QPeJJ
+3sKfrqGE4bgOcG2zmsy1u4NqK0LbHFM4boln3BBbFpxT3dlwnhU3LsPQBuK
y9uwpLQX7OxHWsr5qOSA+zwLfQ6KZoHXvKFTn5b0IxISnXHSzl9Woo0fwfWo
gVpeR6lCOu/QLBtyU47YgVmvD4qxALu4Vp/8/+2dK6y8zpLHxyFHIkeOHIkk
WYNEIpFcs0GSbLJrkah/EPcmSCTi3gSJWEFWkauQSCQS+d1qmJkDMzzncebx
q08yyTnM0F1d3V3VL4oMoR/CMzW4g8aGxup6Z8/ldFukY6sGPd3WqYX9xT7/
fPqP42Y/skjPL9BDmSKwDWiUb5CWN60Jsh9hmC9miR8pfajypX0rEXsBBsMD
N/MO6TrNYwwWWb8+51unMZJKrM0ow+NxGm/rzoAVousHrWM/yU66qgrnQrCx
9KvEhWF6D40tVvrHc2ndi5EBqZmjTd44r+cn6WERVY7INcmfmPDide8WOPmR
ux+9ZJiv5PdigTyFRfsjNfLAhOFESLMUcRQgCEKkYxMsYQ/3Fq4fK0hg7dRx
W0r+R1F9DH09Hv+jQkK2zQ4TpHEI17J/9pkXpF8EGmR5BysevmUtzXktZYuN
OOMrzjXV4rHEEI4m0zXyraY/sUY0r+dn6WEVddE8n65rBpwwm5xn1+K9aLYF
Q5EhbffQTBuOF9+eN9Onrq/8eV3mKC4Piw/8jnknfisWyJMgP3JY+vxIXTXP
IcyLK55dGPpV3dw/RmYfmtj1ZRL31z/q5Dr+xyUV5VlNSzaafiXWHSdv/V3G
9PxsPayGxlChe71GyfwKFY1ZXP9nz7XOQ5jiWV/qz+KzJXsUlz/fOTSuKV4l
LLOA58cCeRpif5banPK4B61vpEZqqzD9AH7UXzMZiv/xyPQrGr/Hry7+Ap6t
B+ZzqFIHht05wyLiRRgWoub5pBIZzWv3Io631okrUdBc2V4TO4L5XZ4dC+R5
1M26/cjZ0BdwfY6oRmw+Lv7HVfpViiDMPsCePlkPzOdQxTAVA93HUOvYg9ef
xNMYdoeNpPf223JPg3b3WIR5Fk+NBfI0yDYZ2/bZ83e1K3UEayr+x93pf8i6
8bP1wHwMuXuAbCb9djvQjsV5D+lyDCvOwMjG9fO/zFvwzFggJ+qqQrXosyz1
5tlpSYYxEF/jfRh/3vHPgvXACDI4OwlaMNdn62Zsu7Mu/A1ZKEum+8N37vN/
LnfFAmkSmItTkSO0LVjWgo8bz6+ZVQms/RaH7horwzDvjTgLKW1B05FpqhB6
J77ODyLGgXj/6VwCzCu4KxZIk8Dz43WcELH8zMMemvuGz9czDDNOcy6G7Mnk
gzgVYlsfictZIRBngrTwM9Zz/zTuiAUi+M01i9xVsNP85tkGhmE+iMaeyJPz
kTyw4YweQCQ/oomzpexH3pJbYoEIFsepyBCYBgxjwceeOydeI/M17GjeG7Az
YZjPoQqhSRL0keA5ZeTAuVjzqMvus0gFPEXC7v6XOjPP4IZYIM3X98SpuAvy
Jc4B0s7ksxvMW/GMWDXfQwlfGbAzaOMz61aAJE2RNp8EcejCcrv7rgkseQtj
6IUPzOu5NRaI4N44FbdSpyQb+TjzMgY5w7yOR8eq+TbEO9Hkbiw1tM8lHqTN
+Vn2n88eTu9hBPF+mzc+5//Hc1ssEMHj4lSsp/AO2Dz0veEM8wDeLVbNW1Ei
NHSsf5ywQmyqF++oYb6DF8epaPZ15s6jf3gsyrejRpnlbxHP4F35lFg1L6NK
4Nr+cLztEcS6l+V/QuwG5lZe9ozZojiNHx6L8o0oU7+NpSfpCFknw3xMrJoX
I/S0MHayiLvsxwXrlHkOC9/P/tGxKN+MKlDZj0zxKbFqGIZpWexHPjcW5bvR
PLPKfoRhmG9hsR/51FiUr6BGkfjN+5tsx0dysah35UfKBIFH+grEe6ti9F8/
NZ0WwzDMy1nhR34jFuXnUyGxjeZ54pr+zsjHSlvSTdH5Rc+PpLDPMcBrulfv
PI86nxbDMMzLWeFH7opFORuH8kvIbOwVF1lRoixLFJnb6Hdn/5zo7vkRoX9J
PIN61AzNTZJ8eVoMwzAvZ4UfuSsW5S/GoXwl4t0Q0sGC36xRdT5Jcf5Nfz6S
wxPvc5f2MLykt5+0JC2GYZiXs8KP3BOL8k95d0ZqyZDUYDKO8tX+SF0gtA6k
2/47tZekxTAM83LW+JFbYlEujkP5HYg5xEbSLt5/WyOPk/M5/54foXlafvxt
lXrQZPIlx7PVS9JiGIZ5OWv8yA2xKKfiUH5lPL5mv0PMKxzEeYWayp74FsxO
EIsq6O+P2J3vxB7UyY8sSYthGOblrPEjt8aiHIlD+Z3x+GoUoYnD9hgnT9r1
3hdWZSFsdUvfyXQ9Qv5/pH/SnR0kSOIAtmF2zktPp8UwDPMWrPEjN8ainIxD
+bXx+OrmjNVim19XKIty5DzbyrQYhmF+k1V+5Bam41ByPD6GYZgPp9kj32Dv
PHcTfPC8FsfjYxiG+QJS2CKOr/aC86Ucj49hGOYraM+Xqje8F4dhGIZhcIzZ
K2FLc5Li1bIwDMMwn0kRQN9tsTcj9iUMwzDMbVQZfH0PWfUHY5swDMMwzBLq
suL9b4ZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGOY26hJZ
Xr5aimGeIds7l5f586hypHn1aikeQI0yy1F2X7D5NWXrUBXIkuSiXFT2PEWS
pMjLlW8Y/Xgd1chDC4ftBpIRvVqYC54h2zuXl/l8alRljsS3oCgOsoV3xeYW
G8lA9MEvOC5TH9aByrFR4XeGaN9Qti5lbMN0YqSRhb20hR5WqPMQlukgIh+a
heb5+lK+Q0cFPOVd7GqFvDdPeIZs71TeP43L+v0uysSHF0RIXBXSzl7sR2gQ
jzT7fL3UoQbpwo98S9ka6gTW7gA3b/8tswQ5zSXcwwFOp7LLNERSrEj34Tp6
RT8r4b+JXS0CHQcr6Vx5hmzvU94/jev6fX+qLIJrGnCT5YPFxp6u8SNfQh3p
137km8gdmmv8+JH2mouD9F5lfkQ/K5MAnufRJ0BSin4Qwm/+9+DHOZreUKYI
zv//2NVaXHdtWLaLKK+v0nVtC5bjXXxXN/7XCzO6P4Hv2PDTasF9F2UPDewk
kuNgwiXZ4qK5e5Fsa/KZT7NGcdahjzA9NhAad0Q+XfMTSkH85lTmUxqUb3Y9
lx2Wa1pnfRbmVRdIAqpTz4Xj+p3x0EReo/fQeEbkSWWtqLRp4MK2HQRHXQjb
6juiTCGyC1WP1cNw/T5KR319lXmCOMmwdpm6l0YawNY1GHaAdKWNWOtH6iJF
6HV0WYr/fQRBQJ9wPv/RepxgIo86j9q0HAdelKOn9Ym8hvzIVdlE24qpvoMU
tehTXtue46JfWU0ba2Rw4Ucp8qJEVc1X6KTsp3SpH7vi+zDFpWpH229M95gK
thsZGtkLYV//+a+Qrh2ozDvojtvaDJfyFvf7KXpWckKuax1N2bNp/U31s1U0
cy9KRwuP5agQGzI2WwPxWZwakaEe/WprVzcHAzbJHEYhHHWLzc5COwSrkDj0
XVTQXTVyX8OWfLKT1m2ZQhvKlu5XSG7q66a6w95OZ+4bkjuFs99ANmNUdX2U
fU62OfmGWJKmmKvSb/YOukOPzFFhJZ0y73VYFrUL34Up1oZ7+Y7JVU7o7Eop
C/PK4SlbqMcOXEUGZNmk+p6qn7F70NhQ6yBhI2uwXQ9BFCO0qb9ICkzqJ64f
IY59GLu2vurJ8tYT9fsIHf1QZT5Mw0aQ5CiLGI7hrpwTkAxkL0xNo3JGuHXr
c40faXStiPrUEDZKyeAoOtrl9RqZq8GKp1IYr8dxxvIQdaCTnYxb+1r6UCUJ
B/dUkum8Lv3IddnIziUe9F3bnkX/CyLy1+I3+x99VYmFveq1fa8gGcR+5l5r
xi3d/thnTnY07UsxQhTNzwuExg7bg42k0cNc+62pvCb5kT1dq+jfuvmUgSiz
Ao8aS1WVKPIY1r5rf6flutbRtByz+hvsZ7eRu4fGb5z3bTIbO/KZ525Ivsa2
wqMvPo7PteDHRyYm5M1x/pbRXO7gIKXxQFnSJw+gC3+nR2dbEGjCLrv9Op69
70rqxnbLQ+taY7LdlM+CNEWpqE+INmOfmyH1Pf1kl0oEKpVZ7aRRRTDkNt1y
Vq4RnY3IO5uXaDvKAfbJETZz7f1xzXYkr8l7gNTekW+1cbbcVQB1s4HSGWxm
zr75TbaoHgbq92E6ouJkJP+e2vxp+ihs+aw9PRcOWejA0MhX0xysuKfzYf18
pPTVHztCdkYRduM0OK1objXlPmfqcSTD4TxyD8rO7I03U9eAGeSL8hqaj/TK
dkwz0mmMcvBaey6uxAb1NbLFzQXqn6rUaSd1uw891w7mZC/o++3FmlQVQicf
tbNobL/EjgzYCVyVuWr6q6Qf/cicXJc6mpVjTn9DdvRGjj5PO54ZKMVcZ0t1
YyaNLFVE86VzwQb2Czp+R/gkMUfym/lv5xNlR7vW9nfhf7vDt/n7LpnwIyOy
3ZbPfJrHi41f31L9NemkZGfaisJVW2mg9m5Qe5dpXjMr14DOaI6aJMnPJyt/
/PRMXuhcF2tgvqN1yjNcP9P3/PiRszmqw6Y9q8GPkSg8MV6hPrKoHq7rd7WO
RhFpS1DO9dOWq17gD8T5G02lsV1wvcZxK6v9SNC1tTnZUTE+3UF34xU+bbge
hxnOo/AUSKq/QA/DeQ36keDSj5DpNcgOKp18aP4hi3F+OwFpz8F0xnltO/mx
m0PMyV76Csmh9+QQfSPUpKadh0vsyA1+ZIlOuzpaYs+m9fdAPyL0o2+P8lO6
hoOY5l9bMUehuZdvkr8763Pargp7IilTehju7/P3XXKbH1mfz1I/IuqX7AGN
27y8RmKbCEbayjkZMT4n257OynWtszpxoCjKz8c8zr8X5NX8KvXaNZ2U/E8z
Tpz3I+P3rPcj8/VwXb9rdTSKqL/L/c+F1EUCz9Khme7g/tYt3OdHBAUiW6zF
i/UcE+GMM5mqx3Gu82jqY8ZeT+X1GD8ifLs4m0/zHrEfVpPP0w8wo+kePid7
s0YzcAYgMeWmH/21xI7c4EeW6LSroyX27Pf8iJjrUJnF3NWzaA5VigswZJqj
2BaMniKm7WpjKwbOI1RpctwXGu7v8/ddcpsfWZ/Pcj9y2muSqd9YVrd8w7Zd
zL9P85dpudaMtefzaubs3bWMJX5k8p71fmS+Hq7r92E6ora+3d55/l6cYbAN
aPrRRt6R1F1+hOalpyObYr/H2ElkVybs0Ew9DjKSx//S2HlzaSeFfFnW2qyZ
vB7lR5o9AlfsMbvw/ADx5LmZkxqmZa8jsfazhRH1nx0Ua0Ri7vPvJXbkxvnI
pE4vdLTEnv2mHyFLAFvsx5z3j2m8Ye1aGYvu747zyO46YNqxq2Kfi+zHVhHP
2VD/Es+CRw4sN/1ZdxHr2N39Biy575KTHK3+27MZM7Ldlc9Emr1iqNROqP31
Ftqr6z0L8tPmrnOOfFKuEZ0NMp9X239lmLH4RY0i1KldyWib0nBe0/cM7I+c
/Eingbf7cK0fma+Hgfp9lI7EOq586UdKxF4wMpaYQJyBcU3yJya80/nGlZz8
yOyU4EizPr7R2n1v0onl/Ridmuplyo/M1eMgY3mUIbRtOz8J0oLqqEAakD0P
ikV5NekM7Y+cytb+ql3f79lBs7WDx/aceyo0agPlgvNZPxlNy35a+zzvKTai
nPrRXFs8Eh/32Ts+odWJ0imz2N/p7LPPynVd/9NyzOlvyI7S1ciF7SU3rd0W
oj66ToPGD6rRHd/VyKPjuRhZgxMXzdlS39hTuTbYG9QPKyFD+wy4uLaRZKh2
dF5zyUK7OU+x2Sqwg/4e5fh9w+RiLXEjYa/RmJAyXiLbunyWlbd/C9nPffcs
V1vuxrbvVJiWTWMmD5auU3r9WhqWa1pn1yzIqxL9gdoW+budYpD9C2CItrv7
D/znf/9tOK/RezT8119/wdzTd5ICKxTnZwvErkZtVbRvGyEpSZwnb86JUPs1
xN5CPV8P/fo9te9H6IjqNTBhOBHSLEUcHc+y3rNMJc63+hZ0zYATju21XdxC
OhFnNQ1FhrTdQzNtOF48vaaRHs/bkD1WxTnqf3tQqa7tIEaahHAMqpvRs4eY
rEc3GZG6GM+jTBzyydKxPnaNPa8W5PU/f/8HHFVuvmvKUQ6UrRLpe9BlUa8q
HHH+lfqfp9OYhdrFwYqQ12Iful1v25w+UpufPzMomJS9/QFcbQ/FcBGEAVzT
hNvpR1PttxR1q7Vy7g2veR6gLuKj7FsotiifsFlO225ltbUvM3IN6WhSjln9
DfUzcVZHasd8N020L29atvc4llZVllgzRLjlPvHb20S8Vb4ZMhf61eGXzty1
rlCWU1bmXrmW5nXxHf12Ps9b7pljurzD9fuguiP5i+K+NalrSqShC3/Klj8D
UdeLy3JjPU7kMV4fz2gz/fRTn+x8Js4rFchpXJDGEULfgW4umb9PyX6kFmmP
/eBJdmSJXA+U47qfPbqemOVUiEzjYh2wvT60Z/EsGX4vL4Z5LaVYK1MH/EWd
I/AT7gPMxyCePdiKufRuB8XNBtpuuwa5WXRG8l5+My+GeS3Ns42bLQ6GDdcP
EYUiHocDxwnuW6dkmN/mGIfDCdKBebRYu3dhmSZMU7T1GAuOk9zIb+bFMO+B
iF3iOeKMpNhfCh52HpthGIZhGIZhGIZhGIZhmO/j/wH5zJEc
     "], {{0, 506}, {402, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{399.802371541502, Automatic},
   ImageSizeRaw->{402, 506},
   PlotRange->{{0, 402}, {0, 506}}], 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3V2IJGd+53udF8y5MeqbvRypT8FAXhilLpbkXGy2+kD54kwNUlPDMadY
I+V6z57iYLJbeAoO3sJqUexNDTtq4YspDKvs8UXiXShJ66mB3YQZdXoxW/Yu
WxKYMgObq/a4MAMFUlNjw+SAV/8Tv8h6qp+MjJcnIqOy3r4fCKk6M+PtiSci
nn88L/G//taD1f/nf3zhhRe+/b9E/1n9J//f//47v/NPfvdbt6J//J/3v/3/
rt//Z//3/3F/45+t/7Pf+d9+63+KPvy//ocXXngj+uN/jv42AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHN59uyZvfvuu/bpp5/a
06dP47+///3vx999/PHH8b/1OQAAAADcZA8fPoxjpNu3b9vjx4/jWKrZbNob
b7xhT548iadXX331ojcTAAAAAC6UYqNHjx7FsZKj2EnxlPv+tddeu6CtAwAA
AIDLQ3HTe++9F//95Zdf2gsvvHD23YMHD+z+/fsXtWkAAAAAcGm8+OKLcX8n
UX2TX8/08ssv28HBQVw3BQAAAAA3lWImxUeO6pnUB8pRXPVv/+2/PWvDBwAA
AAA3kcaGcHVOojH19Jn/b/97AAAAAAAAAAAAAAAAAACQ76uvvqp9AgAAAIDr
RGOQa9xxN925c2dm0th6/t/+5M/rT3fv3r3oXQMAAACA2nz++efxeHku5un1
eqXmd/VMn3zyiX33u9+N353rlqVlAwAAAMB1oXjJxTu3bt2K39k0jw8++CCO
x958882athAAAAC4vvx3/mgca39s63k9efJk6u86l31TKc5x8dOrr746d5oq
/tK7ofKW4x/H80QeAQAAwGWlNlzqC+Pofapq01XGW2+9lVr/oWX772etsmzM
+vLLL+NYx8VP9+/fn3uZH3300dSx8iXzyHl65513FhanAQAAAGUky8Vly66u
Ddl7772Xumwtr+qykU2xqj/eg2KfeWWNuUfsBAAAAKTHTqF1Q6r/UJ8bld39
GMlfdjJ2ot6pPopX/b5P5zXeA7ETAAAAMF/s9ODBg7O+N1mxk98OjHJx/fxx
y89rrHFiJwAAAKB67KQ6Ds2ncq7K7a+//nrqsql3Ol+q+/PHLU+LYedF7AQA
AABUj500j/rcaH6V2dPK1lepv5PGF1S9jSb14VIa3Lt3L/53p9OJx37TtrvP
ND5Gcjw47Z/GbVBaqD7I74Pk0kL1cJrefffd+HOty332+PHjStuubfX7PtUd
n+bFTtp+t79Kw6r74FzmPAIAAICbrco4e4oJ3NhuRbHTeYyzp34+Lt4ImULG
vNZvNFa7G/db69D2q15HnylmUrzkPlNdjx8XuvjF7a8by8EfQ0O/efToUfy5
liX6t5al383zriZti4udbt++HW9jXbJiJ7XXdDGkX/81D2InAAAAXFZl6530
+2azOVU2d2X25DhtoW32nj59Wqq8rBjjxz/+8cykZadNZd4XpP3Q/vmUPhoT
PPmZn25ah6t7yfqNo3hDYztov/W9P888tN3uWCjWq0ta7KRjqVjJzwf6TTLt
RPGh9jXt87S6O2InAAAAXEZlxyjX9/q9X6+jeo6s2Ck5VoQfO6k8rfEmVN7O
erfQoqXVoenfd+7cmfksLS5SXKeYwKVL2m8Ub7zyyitx/JQ2tntV6oPm932a
t/2ck8wjOm5avuqdfFnvmtK8abFT2ufETgAAALisytQ7ufEh9Bt/cu9prVrv
5GKwstsdOpWRFTsVfab6E/WDUlqoD5BLq6x+QoprzmNsB7WndHVnZerb8iTz
iFvHhx9+ePaZa6M473umiJ0AAABwWZWJndQmLa1cq/nTxig4r9hJ2+HikpAp
rc4jS9XYyY0V/sUXX8z8RjGM/+4l/VuxjeujVFebPVHclmxLN6+0PKLt9vfJ
vWtK61W/Me2j9kv1ivq3T//W8U5+7pZN7AQAAIDLKDR2cuOppXFl6ZDYKa1c
fNnqnULa5yU/UyykMSZ8qoPSZ0oXlw6ufsrFSxrbXW376qgjUt2P4qZ5xpxI
k8wjygt+PaO2XfupNNBnao+o/ytu0vH251VaqM4t+bmTzCNattLn7bffrnWf
AAAAgLKKxtlzY3W78dv8PjSuv5Lr76SYwI297ZYdMs6ePj+P9xKV4fbF7ae2
yX2mfkma9JnK9fq//5l+5+IJ7b9+o/kUF+kzjXGutmx+Wrk6F1df5a+zCsVL
2p5528ylSRsrwvVR075qHzT+heIn5Q8dS1fvpM/9Y+viItVTJftLSTJ20jJc
/y2/ngsAAABYtKJ6J5Vd/THr/LK9ysf6zB/jzi/3lmmzd9Gxk9sXfz+Sn7n9
13dp4/ipbK/9UFzg0kmxjKsH0nxuXve9+7f7rkr9k9rJKfZS/HYe0mInbafW
p8m1D9TfGifDp3qwtHhQ8Vba9qbVTSr9FGfxXmUAAABcpKrvxg1d9lWJna4q
115OdVrnJe/duHlUB6UYSbFTcsy/rJgqq12nex8WAAAAcFHS2uzV1Vc/bYxy
f9kqO6uNm8r+muZps3ZTKTZJa/tWlmKwrPZ+88ROaq+YjHtUj5R8X5aTVe9E
7AQAAIDLYFGxU53LrptihzritkXun2KmKjFNGsUsWW3+qsZOkjaGoNr1ZcVC
abGT6tTqGm8dAAAAmIff3kt1BXWOme231dLfl61eSeV0lePVhiwk7lEZXmX/
ZL8e0b5ltUVzVLdTR/3aBx98EI9nV8dY5G5c87wxCetoE6h1aIwMjTORlcfq
zn8AAAAA6qV6lbzYSbHO/fv343EgqtSBKCZQjFZHvVQd73BSnKSxLdw4f3W0
+yui/Vf6ERsBAAAAV1dW7KT4QnUubtztLK7vVnIcwu9///u573tVHPH+++/H
f+s3yWUkubHIFYP44/Mlx+tLm/S95tP+qH+ZG/tbU93vhAIAAABwPaXFTm4c
7aJ6JsU/7n2vmkfUNk1/572TSMtV+z39Tu3YXIyj8cbTuLjJj3nqmF566aXS
7xAGAAAAcDOlxU6unV5RnZObT7/T70W/d++JzRrzXcvXpLjJvStXy9K/06iv
lJZX96T3cwEAAABAiLz+Topv1M6tqK+TlpE2zrfqrtTXJy2G0vJU9+PqfbQe
F38BAAAAwGVTNFaEaGwGxU+KbZJ9khT7KAbKi60UQyXHaVd9kz/+t957pLZ5
yXfJAgAAAMBFUgyksRrUx0jvcdXYDkUUH7k2dk5eW7sk1T+52EuxlP8OLDeO
d0jsNM87qep6nxUAAACAm0HxQ3I8uioU/1R5B5LW79dV6d+hY3irHWDZdWr/
FCOqfsuP2QAAAACgqrzxFdz4e3fv3o3jHcUiftylv/Pmv+g6H7UTJHYCAAAA
UBf1Y0qbRLGTxhdX3U+yDV/evHWMB671pa0zFLETAAAAgOtOMZPrX+Xa97lx
KLImfe8jdgIAAABw3T169Chu86dxJXzJeq28ei7FTmo7CAAAAADXWdWxKRxi
JwAAAAA3QfI9UGqTVzS2hY/YCQAAAMBNoPfwqq9T2fEiNL7FcDiM32d17969
+G8AAAAAuK6qvotKsVMd77MCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAABX0YntrjWsvX2Y85ux7a03rLW5X+My513HRS93UeuqkpaX3SKPySIt
4lhd9bS76tt/yYxHtttdsVZjyZaW2rYVlPWu4zXFRx4DAJynsNjpoL9hW3uj
Gpc57zouernp65rvnn1ie50o3bYOpj67fuWcRR6TRbqssVNavroolGvrNB6s
W7O5brujEzsZj6PUTbou15Qyefi6Xl8AAJfDedxHr+K9uQ7ETjcbsVMxYqc6
HfVWrLHSs6PMX1yXa8plysMAgOtmPNywVrNrQ/cQcrRjK0tLU+WVw+1la6zt
2rG7j24NbLDdseVmwxrNtq1F/z5+vsSU8s6JHfQ2bK3dtMZSw5qt5Wie4ek8
Icuc2eqZdRwNt62z3IqWv2RLjaa1VzdsL6OQkP3b5HLdtu3Z3taateNtW7b1
/qGNxyPb21w9+6yrz7z9jefb6Fuvu2rL7ZY1o990toeZ6XS827FGa8P2px4G
n9ig27Tm+l7017ThRtOWtP1n04rtjELTUseja6vueLRXbaN/MLMO//fV0iFK
68GWra+2rdVoxGm9vLZpeyPvF8cD67YatrLzfL7xYZQHGy1bHxzXeExGtrPS
sNXedKYYdKP935h32bMK99uta3PPW247kUcK8vX4yAZb0XFuaR1RGq10bWff
nzuZdsVpkJ6vJttbLs+4ebLO+/PZ/rnP2c1d292M5ms1A65DecdnsfktPy3H
NojSceq4Lm9bMhq6LteU3P3Y7Ft/43TZa/1oHxJ5rPB6BAC48U72rNNom3tE
d6IyfDMqr5/dW4+tv6p7iQpQk/vPpIw3sMPRyA4Hm9F9pWnre+4umSzvjKPY
ayWaZ9W29g5sdHRko4Oh7fb3p2Kn/GUmJdZxshvtQ8s6vX0bHR/b8dGh7e/t
2n7arS73t+nldN2/OzvDeNsO+uvWWorKDmtrtt6LPjsa2X6vE93HV6x31uxD
86ks1bbu4GhyDz6K7sltl45p+xB9H6V7d3Ays60bw7RSU/Yz4qLjo+PRXO5a
f39kR8dHdhiV/9aismJnN6tsUDUdohLk3o71Bzrux3Y02rd+N4rDl7dsaquj
+L3dWI7yYLSf4wPbXlbcOTwtd9V1TMLLslX2M6l4v0/XFeWRtSheUl4c6Tg0
vTxSkFf3N9u21OrYzjA6jtF3g61VazZcrJOWdmFpMJuvquSZovP+/LZ/vnN2
xTZOz9nxqG+dZs51KPf4LDK/haTlfPVOV+uakrUfOr5RLLY3mhzfcfzfmedw
+dej6KO96B65tGZ9QikAuKGOrHcWG41t2G3ayvaOrUdlnvjeEMVW61H5bjO+
DU3uP5M6KGfyTLMZ3Vvcv5MxwXpUHlzLvYcWLTMpsQ7VlSXKCZlyf5tWTo+2
reNv22F0L40+m6oLOrDNKC7q7J5Mzze1T6pbWrNGa9P2U9el8k/Lmp3nyz3u
R79vb9pB6gPn7PJBblqOFaO1bHO6gitKlqhctdrPeMZeNR1SjCf5abo5TbTv
W1H5p9217W473uf9k+ff1XNMQsuyNe1n4X6fluVWp8uyR73V53kkL6/Gzzyi
bZgq10fn8srSVJ6qJXaqkmeKzvtz3P7q52wj8ZvxpN436zqUey1ZYH4LSst5
Yqerdk3J2Y9ofdNLSmsnkXc9ir7d37LV1U0blDj9AQDXy+FW+/SecmBbbd2D
jqy/NnmuON6ftOkbxLdF185iuh25yvy6303unIl70eG2Leu5YeYNO2SZScn7
3ZHtdlq21GjZ6vqGbfcHdnCc1cIl77dZ7cP8bZvUwy1Ptf9PlpPS98kOtqzd
cM8rU+7Zh1tRWrnvJ8tczuxnkNM3IS8tdTym2rN4U3trph3PfOmg9i67trm2
fDq2l5sa1k0WR8dR3lvWd6fPe59/UdMxKdOGqvx+JhXv92Rdrc28PJKTVw/1
u9nz6kDH+qy8WlPsVCXPFJ3357j9852z03uTfx3Ku5YsML8FpeWc/Z2u1DUl
fD8y+9RlXo8AAJj0eWoqPlK77tZG3PdptL1irY2hHZz1dZL0fsO1xE65y5zZ
4tRnhccHA+vvbNr6ajRvtM7tzHte1m8zyulT23Z6f5962JxeDpstF2/mx06n
y1Ed4DhOt9XcdAvt1z1dzpmUs4Lq6HKXG5AO433bVN+BzYEdnpUph9ZtRuWc
QWIVo56txmWhVhSz5/V5qXpM0sqf7vn5vMtOCNrvkNhpso2pebW22GM2DWZj
pwp5ZmGxU13HsMp1aLL+9GvJAvPbImKnK3VNKTPmRUbslHk9AgDATtt8tKzb
XbOma9OwH5Xzl7vWXfX76FSInYLa7NURO/km9+Cw8bn839YZO0X33ZWc9lgZ
+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
vqw0SYs76qJ6HNf3qc7YLBk7ad+0v/44Isov+mwe1yEvAQAA4OoJjZ1Uhk8r
r6bFDo7/7qis8q7K8eor5Mcj4vr/lBkfQWM0aB2hk+p/ykiLndxnfvu8tNhJ
dSqKGfw2ci520r7675t1479rUj1f1rtoq3L1h3W8K9eXjJ20f+oj5lMauLo2
1xZPaaj6pSQd+/fff3/mc2InAAAAXITQ2Em/S7azkrz6k6J6J5WXXXzk+vio
XO/GZVDZWpNiolBaT+hUVtnYyX2mfUqrh9Jnii/1O3+Zro+TGxuvznZ1ov5H
yf5ZdfBjJ9fXyU8X7ZP2WfVuisUVuyluVD7Q8fZjWf1Gv1eclYyr0vKSfqv8
U2ffMAAAAMCXFzu5saXV70Zl3mQZ1o3J7cYd0Pf+2HVFsZNfrta6VDejdSXr
KlSmvugysdbv9lX/d3Gd+0zldjd2n+vLpM9cPKB9Uxrpe8VEms/tr/7+D//h
P8Tz6d/++Htu3D39pmw9WRrFTK+88srcy0mT1t9J+6P99d8Fpv5iOsau75co
RvTzjp9ufv8yycpL5/nuKgAAACAvdlJZ1u/b5Mc6kjaunR/j5MVOrn7J5+ol
kuuRtDZdi6Rt9fdT/3bplfeZX/ekupTXX389rkfTvuoz/ca988ifz8UR7n1P
aelf1gcffBDHInWOredLG6NceUR1R26McsVEipv8eEifpY0T4ermktubFju5
tJxn7HMAAAAgj18GDX2/U5llh9Y7uX+7sSf8uEp/X3S901WnGCZZt1O3rHfj
FlEspe1LxtKKr9Jiqqz+TvSDAgAAwHlaVOyUXJeovkH1ScPh0N5+++2zfk0q
Q6ucr880jkSZ/k6Ypb5F6ntUx5h9ecuoGjtp25T3krG0jnvasc+KkRR/nceY
7gAAAICcd+yU929RfZJipWR9iP6teocqZfG61T3O3SIp1lH/qWSfoSrUdi6t
HsipGjvpWKf15dK6kuMvSlabPeqcAAAAcJ6S5c06Y6fkWG7JMSAuMzdOhsZ7
CO1npLEPVE/ix4GuD1cRxQhlxmMPoVinrvfrKj20rLz8oe/SYp0yFEO5/mBZ
74FS7HSV8hIAAABwnSlWUPldcVNR7KS6Hf1GMUpaHVVeXy03lkLd9Wsu1qnj
HU7aNjfWYto49XVyY0m4+AkAAADA1ZAXO6mORXFPVn2R4hf15UqjmEn1cln1
NIobXP2VYjM/jtA8Re0I3Tuc/LE6/Pdapb3ryv2t+Mj1P3IxE+N/AwAAAMiT
FjsprlC9SFFbOMVV/vjcbnmqC8qrv3Ht9zRehqvPUl2Mxs7Q8vS9vsuimMnF
O3VOjMMAAAAAIIt7v5KvqL5J3Ltz9Tv/3VTuPVF5bfTcO4b9McUVq/l9fBTL
pI03rjoq1Q/50507d6Ym91nyd0XTeb0XCgAAAMDVlxY7OW5cwrw2e4px0trX
FfVz0jL9WEmxixsrz405DgAAAACXRV7s5Kj9ndrh6Xd+nKT4R+3nVD+U9U5a
xVBaRzKGStZX+TGY1qVJ9VpXefx0AAAAANeHYphOpxMUo7gYysVJqityY24X
Uezkx0qqV3LjQ6h+y3+vkpbr+lwBAAAAwEVS/OPqnDTp76y6oyxujPMqY237
cZHiJP/dsfq7zPaEvmPKp2Wr3kzvt5r3nU0AAAAAbibFIoonsqa8OirVL2XN
d17vM3LvqipDsZO2ydVxAQAAAEBZikMUA2VNRbFT1qQxIM5re6sidgIAAABw
3anuSG3//HEn8uq9NCXbARI7AQAAALjuXJ8p//2+ybouxUX+v9Nip7x3UQEA
AADAdeG/G6rKvMROAAAAAK67L7/8curdUG7cwKwp2T6P2AkAAADATaDxzP13
Q5Wlef3x0QEAAADgOtK7ejWVpfon934rv78UAAAAAFwXap/3/e9/P/5b9UaM
kwcAAAAAsxQr3bp1y95+++2zsfYAAAAAALP0PtzkeOMAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAOCmO7HdtYa1tw9zfjO2vfWGtTb3a1zmvOu4
6OUual1V0vKyW+QxWaRFHKvrmnbXyHhku90VazWWbGmpbVtB2eE6nuc+8i0A
4LoIi50O+hu2tTeqcZnzruOil5u+rvnKBye214nSbetg6rPrV6Za5DFZpMsa
O6XlK5yX8WDdms112x2d2Ml4HB2xpOtynpfJV9f1nAcA3Dzncc++iuWAOhA7
3WzETjA76q1YY6VnR5m/uC7nOfkKAHA9jIcb1mp2begeeI52bGVpaaq8dbi9
bI21XTt29+ytgQ22O7bcbFij2ba16N/Hz5eYUl47sYPehq21m9ZYaliztRzN
MzydJ2SZM1s9s46j4bZ1llvR8pdsqdG09uqG7WUUSLJ/m1yu27Y929tas3a8
bcu23j+08Xhke5urZ5919Zm3v/F8G33rdVdtud2yZvSbzvYwM52OdzvWaG3Y
/tSD5xMbdJvWXN+L/po23Gjakrb/bFqxnVFoWup4dG3VHY/2qm30D2bW4f++
WjpEaT3YsvXVtrUajTitl9c2bW/k/eJ4YN1Ww1Z2ns83PozyYKNl64PjGo/J
yHZWGrbam84Ug260/xvzLntW4X67dW3uecttJ/JIQb4eH9lgKzrOLa0jSqOV
ru3s+3Mn0644DdLz1WR7K+WZzb71N073b60/2beC7S53TUpJ+8w0W2weyN/P
sQ2iYzOV1svbloyGrst5nrsfM3kkkW8LrxEAACzQyZ51Gm1zjwNPVIZvRuX1
s/v4sfVXdd9SAWpyr5uU8QZ2OBrZ4WAzuoc1bX3P3ZGT5bVxVM5ZieZZta29
AxsdHdnoYGi7/f2p2Cl/mUmJdZzsRvvQsk5v30bHx3Z8dGj7e7u2n3Zbzf1t
ejldZYXOzjDetoP+urWWonLK2pqt96LPjka23+tEZYYV6501MdF8Kre1rTs4
mtzvj6L7f9ulY9o+RN9H6d4dnMxs68YwrYSW/Ty66PjoeDSXu9bfH9nR8ZEd
RmXNtVbTOrtZ5ZCq6RCVVvd2rD/QcT+2o9G+9btRmXd5y6a2OiortxvLUR6M
9nN8YNvLijuHp2W8uo5JeLm5yn4mFe/36bqiPLIWxUvKiyMdh6aXRwry6v5m
25ZaHdsZRscx+m6wtWrNhot10tIuLA1m81XVPKNzICpn743ic2A8Hodtd6lr
UnK1eWm2yDwQcnzmq3e6Wud51n6k55Hks7H8a0T00V6UR5bWrE8oBQA4d0fW
OyuHjG3YbdrK9o6tR7FOfB+KyjHrUTlmM77lTe510897J89Pm9F9zP07GROs
R+XBtYIyVv4ykxLr0HPpRJkkU+5v08rp0bZ1/G07jO7b0WdTdUEHthnFRZ3d
k+n5Es/Fj3fXrNHatP3Udams1bJm5/lyj/vR79ubdpD6cDu7LJKblmPFaC3b
nK7gipIlKsOt9jPq+qqmQ4rxJD9NN92J9n0rKmu1u7bdbcf7vH/y/Lt6jklo
ubmm/Szc79Ny4+p0ufmot/o8j+Tl1Ti+iLZh6vlCdC6vLE3lqVpipznzzFQq
BW13mWtSQu75vcA8ELSf88ROV+08z9mPZB5JbbuQd42Ivt3fstXVTRuUOCUB
AKjqcKt9ev86sK227ndH1l+bPMMc70/azwziW7Br0zFdaFGZX/fWyV06cd87
3LZlPaPMLByELDMpeW89st1Oy5YaLVtd37Dt/sAOjrNa0+T9Nqt9mL9tk2fe
y1N9DZJlsvR9soMtazfcs9GU8sHhVpRW7vvJMpcz+zTk9IPIS0sdj6m2M97U
3pppMzRfOqhtza5tri2fjiPmpoZ1k2HxOMp7y/ru9Nny8y9qOiZl2muV38+k
4v2erKuVDACm8khOXj3U72bPqwMd67OycU2xU215JnS7y1yTkvLO7wXmgcD9
nKu/05U6z8P3I7OfXuY1AgCAxVL/gqbKImpD3tqI+xmMtlestTG0g6l+Bel9
lGuJnXKXObPFqc8ljw8G1t/ZtPXVaN5onduZ99es32aU06e27bQsMfVgOz12
mi0Xb+bHTqfL0fP2cZxuq7npFtqHfLpMNSnTBdXR5S43IB3G+7apfgqbAzs8
K78OrduMylSDxCpGPVuNy12tqHyc12en6jFJK+u6Z/XzLjshaL9DYqfJNqbm
1dpip9k0mI2d6sozFhxThF+T0mSd3wvMA4uIna7UeV5mzIuM2CnzGgEAwILF
7Uta1u2uWdO1n9iPyvnLXetO9SuoEDsFtdmrI3byTe73YeOL+b+tM3aK7vEr
Oe2xMvYhbqe3vGW9zfbzvvWpxnFZJDkmR2Fanh6PvDqTWRXT4ahnK8n4L+73
n4idxofxfK3unu33ojzY7Nju2Tx1HZPoN2vJ5+dqG7ZUf7k5aL8D2uzN8PJq
3G6tWbLNXkgapOSr2vKMBW63lbgmFfHP7wXmgcD9LI6drst5Hr4fqdfG3GsE
AACLNik/qI3F82eJ0b339H2Nm1N9NErGTomxIo6Oj+3ocGi7u/sl6rKSkv2d
dm1rJ7qnHo7sWMvf71mnFe1LP+Xmmvvbeuud0scBcMvKiP9U5moq3fPGypiY
PMPetoPjEzs5OYmWGHZ8DtXnobFiG9ExmPTtPrBhf8s2+9ntA6s9j56Mf9Hp
j07Lc4fWU3uqRJkqrkdob9gw3l21uWpaM4obR6npVL1sG/f1WHb9JMZRVli3
9tI5lJuD9jsgjxTkVTcWQW9/FI+JUDxWREgapOWruvKMBW63hF6TEgquBQvL
A4H7WRw7XZfzPHw/0u4h+dcIfTS0fj86j2jKBwBYkMPtduK99npGG5VTpvoV
VImdJsva98fKbfnjddcQOx0NbKuzYu2ojKRxiRutFVuPlp9aHsn9bb2xk8af
3tW4virvnY4h7PUQyKg7m/SNX/LHaM5ytGcbK6djMftj/ham5Ykd9Ddt7XQc
50azZctrXdsZlqkbDCtPHiseiI57s9W29vKabe72ptryjPc3bVn9/v2O38dR
/Kjy7ulYAXXFTnp23e+uWCsq57XaUR6MjkfvPNprBex3UB4pytf+GNhLGgN7
vWCM8pA0sJR8Ndne+fNM6HZPhF2TEgrTbHF5IGQ/Q2Kn63Cel9mPZL4tvkY8
H2evzPAtAADgspjn3ZWTdkXtqNzAI1QAKKaxRZqdvD5wAADg8qoWO41Pjm00
2KjQxxsAbiq172TsPQAArq4qsZPGYp68T7fTO6TOCQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABw5bzxxhtnfz98+NCePn1aav4nT56kfq5l5f0b2T799NNS6aXf
P3v2bOqzjz76yHq9Xs1bBgAAANxcr7322tnfKq9nxUJp3nvvPXvhhRfsq6++
mvlOy1KZ3vFjNGQ7ODiwZrM5Ewtl+fzzz+3WrVupcdKbb75J/AQAAADUxI+d
3nnnneDY6csvv4zL7Hmxk78sfz3IpnT65JNPgn+v+EjHQMcuScfo5ZdfjuMr
AAAAANUp5qkaO6nMrvoRldvTyvpalvs8uR6kU3q98sorpX6v2CgrdpL79+9n
fgcAAAAgjGKaO3funP3bj3fyqF3Z66+/Hv8+L3ZycVhyPUjn0jSU4lH1a9Ix
UCybRsdG9YNpdYMAAAAAwqTVO4XETppH7cBc7KTye9JVip3Utk3bqn13/9cU
2ueoDkojpWVovZ/6MSmN3XxZ9Xru+zLtAAEAAABMq9Jmz5XZxdV5pNWVJGOn
utrsaVmhUxHFRp1OJ96HtGmR4yyoLk/rVBxXRNut9pJuP/NiJ9F3tNsDAAAA
qisbO6lcr/ojV75XXcY8sZPiBU2htEytPzlp2e5vtXv7vd/7vXjKG29d8cer
r756NjaD6tE0FqA+C4296uTSMmS96sPk1yO9+OKLue3yiJ0AAACA+ZSNnfT9
gwcP4t9oev/99+Pyvsryab/Ni520nEePHtlbb71Vakzuumj7NM6Cv15Xj3YR
fYNUxxWybsWaiu/cMdCkf+fN62JKAAAAANWUiZ1UL6NYI1nnk9VeLK+/k+pM
VN53cYtiJ8VSi+LauX33u9+d2eaLip1C4za/js1NqnfKm1dx02XubwYAAABc
dmViJ/0u2b4ur69NXuyktnRqH+diJ9U9hfSHcn2tQqesNnuub1Fy/ARtk/8O
X23fcDiM90PLUj2be9/vxx9/HE9+vZV+p/da6Xfuc83n6of0t+bXMv33BktI
mz3FV2lt7xQb5Y0HobTNGocPAAAAQLHQ2EkxQlrZ28VOt2/fninzlxkrQvVZ
jx8/Ltxe1X25MfBCpiwudvLjnrR4St8rFtL+afv0b22r6sgU+6jNoWsLp7hI
8+tzpZfq0tzn+p0bQ0/zKj5Lxk76d95YEW58iLS2jXljxUtafyf9W9sJAAAA
oFjRGOUqz6usr3L5vXv3pupx9LfiCY1RoO9VDve/D42dFJtcRJ2Itufdd9+N
/9Z2Ki5JG2td3yle8ud77733zr7z98vtr/7v4ihH+6k0zGqbqDRS27tk7KpY
SbGX2jgqhvO/13dK97t378bre/vtt2fmd/Gtv29u+5LxIwAAAIB0Re/GTbaR
82MBlb+TbeT8cntI7KTYS3GB5I2Jdx4UMygGUh2QtlV1WmmS8ZH+9mMk950b
71ztDxXPpL2rSTGY2980ae/GTaazXz+nNEseg+TyXVvAZH2Wjq0bYxAAAABA
vqrvxg3hLystdlJM4McBijkuo9DYSTGLa6cnilf0mYs39bdiKsVPyfZ6jtLL
X0YdNAZiVr2e0px6JwAAAKDYecdOfr2Lvx7Vl7i2fm66jO8fUlyhdnBqK+fG
htDfql9S/KP/az8UA7q4yMWEioH0/b/+1//6bBmieEXt7zSeRBrVA9Z1DFTX
pG1Kq9NTPdtljVcBAACAyyYZO6lPTt77ncpItvHz2wYqJkmO67DoNnshtJ1u
jDztiyZtqxszz/9O3Gf6vxtTz/+d6DP/30kasyJkzMEQqm9yfbOSFDddxjQH
AAAALit/TG7FTnWVp5P1SIt8f9NVp/hp3vTS2BCkOQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICr
6NmzZ/bo0aO5l/HgwYOatggAAAAALhfFPK+99pp9/vnnwfO89dZb9uabb858
/t5778XfAQAW59NPP7WHDx9e9GYAAHDtvf7669br9YJ//8knn9gLL7wQx1tp
9PmHH35Y09YBAPJ89dVX9vLLL2dekwEAl5vK1mq7pfoHtQPTdX1xTmx3rWHt
7cMFrvPqevLkSXzPLaPZbObGTjr+L7300oKPO84v749tb71hrc39mpd7WV3k
/l72tL5k2zce2W53xVqNJVtaatvWpb3sn2+6vfPOO/E1+dVXXz2H6+5lvKde
snwYu4zbdBldh3RK7sM57dPCr2+X8Vy/GXQNv3//flx+Vl3Giy++aLdv347b
hS0Gx74M1TmV6aOkY+ru07du3cq8Tyu+KlOXdfOc2F4nyqdbBzXOT+w0MW/a
ju2gv2Fbe6Natyp03Zc7rS/X9o0H69G1Zt12Ryd2Mh5HW7dIZfLZ+eWpL7/8
Mr7e6hmYrsvBsdPJrnWWVCbLnibH+TLeUy/yHM1yGbcpzbzXx3mXfVXSKc9s
7DS9T/Wk8fle3xZZhkAe9ZdRefrg4PmxUPlZ1/PF9YHh2IfSPVbHRnFuCHeP
Vhzs6p6y7tPqC5XWHwoOsdP5Oc+ywXm77Gl9ubbvqLdijZWeHV3I2i9HPtN1
VtdwtQMoFTtF2380OrTDw8m0v71iS42O9Q/dZyMbHY+Ne+p1c9Gx03VQdB2s
Jx3O9/pG7HRZpPWDceXzvDqKIuPhhrWaXRu6oHu0Yytnz8QmDreXrbG2a8fu
2G8NbLDdseVmwxrNtq1F/z6eWuqJHfS6ttpuWmOpYc32qm30D6JPn38fL2ez
b/2NVWtrOWv902UUzZufRooj7969ezYpvTQ9fvy4UvpU5Y5X6HFRfeLHH38c
/110n1bMrPrG7GXPk76n8270rdddteV2K4rllq2zPfSO8XzH72i4bZ3lVvT9
UlSeaFp7dcP2jp4vOyzv7Nru5pq1W82ZPDjcaCae8a7Yzqhovc+lz19X3k+a
vU8cDbZsfbVtrUYj3s7ltU3bG/lPxXLSX+0Qos80byM+bgPrd6Pt2Nifmr/q
McpK26TstE7ub/HxtKD9GtnOSsNWe9MHdDD1m5rT2nO8u2aN1qbtTz28HEfr
b1qzsxenbfG6ktsXsk+TbSx9zRwf2WArysctbUu0zpWu7ey7vYq2O9qOqeO8
vG2zd3x3TuzZ3tbaJG2iY7PeP7RxdLz2NlfPPuvqM2/OorTIPQdnjkUi3Y4H
1o32a2Xn+TrHh9F9rdGy9UHyyGXTNfyNN96I/75z5058TdYzriqO+2vRfkb3
2ZlvLuM9NeU8Cbx2xr8NPqcKzvncbaqa90Lub1ZwfmSn9x9n3XtqSJOwa2/F
62tIHqnlGlzlOjj977R0+Jff60TX343E9fdkcv1d30vk9ZzrW8Xjnsy3iy1D
uHk2bM3N01qOlvs8Txen+bzlsnQq02qMnadPn8b//uijj+J/h9Yp1EH1EWnj
Duh6Xu55WMLJnnUabXPh8clulAebUX47u1ceW39V9yGdpJNjr+Ot8+ZwNLLD
wWZ0T2ra+p5LxXEUa61E83etvz+yo+MjO4yOyVp0znZ23ZHUcnR8ouva3ii+
ro3H48B506mtm9ow6jmh4hD9rXYW+lzT4to1TmhMvNDjorpEPyZ2sZNfx+gr
jsvmSV83b9u6g6PJPecoKou0XR6Yc/lqyxKVYTq9fRsdH9vx0aHt7+3a5PJU
ZvtWbON0+8ajvnWafh5MeeaTu97Z9Mt6ZjR/3k+aLaeM9nasPziw0dGxHY32
o/vTsjWWt+z51mSl/0l0zY6ufe1o/QdH8T6qDKH23H78MN8xCnjmV3CMZ+/t
xcezeL+qxU7V0zp9nzeG3ncnA1vXfgxOAtdVJXaqluf2N9u21OrYzjCaJ0rP
wdaqNRvTZbHi57LunIjKUTvD+Jw46K9baykqD6yt2Xov+uxoZPu9TnSsVqzn
LTsk3dPPwfTrTvK4ngw3rB39busg+n58YNvLKi8Pg57BObrfuvFRdU/RNVd9
WKsoip0u1z01kZ6lrp1lzqm8c75gmyrnvZD7W8j5kX0NTrs+1pMmYW32yl9f
Q/LIJE0a7fWpa3Cz9DW4ynVwdp9m7+/RMYz2qTvw8k/aNdkze32b57gnLbYM
oXkazVXb2lO6HtnoYGi7/f2z2Kkwzecul83StdKNGa1n/bqeqg5D5VeVzxVH
ZdF1V/OHTmXL964M7bfZG+9Fsc/SmvWDH68dWe8sNhrbMIrTV7Z3onv+6mQZ
UWy1Hl1nNuNEnuSbSR3U2RrjGL65cXpXGCsPt2xz+gGAjXaiY7v6/DlYvJzO
buK5Rsi8s1zfr//yX/7L2WdlYpfzoHhNzypD1p8cw1x9pPLa+7njnhVbzZe+
acfYe64+7/JVr9lIr6sI377o+jP1LOn0+b7Lg2nXrbz1zsgut82f92d2urid
1nhyDj7fnIz0j5+DJO4f0dVxq+3d3+Y9RiH379z5M8pAecczZL8qxk6zmxeY
1jOidFmPtrk7PHvGfbKn9vRdG2Q1pJ9ZV4XYqUqei9OzYZ2pcmp0H1iZbm8Q
FjtN0ub5eg6jOGUpcTwPbDMqm3Z2c1IwJd0zz8GZY5F2XKNy0NZyHG9vd1Xm
i65dJQIn1/fUcf1Qqz4vzY+dLts9NZGepa6daYtLO6eKruEF21Q57wXc34LO
j6y8GNierFKaVI2dCpYbkkdOr8Hr/jV4rLQtHzsVp0WF2CmOe1pndfyic07n
/UHG9Xfm+jbXcU9aYBkifkbXsLWC+oUpyTSfu1w2S3GJyrWqZ9K1U+95cFx7
sCy6/v7e7/1e8FT2mZbWrZjBL3eP97dsdXXTBiXuE4db7dO8oPKI0vPI+muT
WHi8P2nTN7n/uzrH6XNXeVbnZvyTw21bzuof2946rctKX07YvNMUb6rNYnJM
BtcX7KJiJ+WXkDFtFXtr+/Vb185QMXrefVr5JP8Z6DzpmzHvwZa1Gy4mn2f5
R7bbaUXliJatrm/Ydn9gB8fjCts3nRum8mDqdStnvSnpl9lWee68nzRb7hsf
7trm2vLp+D9ualj3rFiRlf46Rqs2fety1+b9Emmcl1Yh9++8+bPa3uQcz5D9
qhg7VU7rFCeD7iRWOjmdL0qn1sbzWKp4XRVipyp5Lk7PlUR6Rqe40ty7F4bW
O02nzaSdwvJUm/7Z/QhJ99BzMDMmjsp2W8ta7mn9UyDdU3QN1vVX11j9v9Pp
xNfcqmP0FLfZuzz31Nn0LHPtLHNO5V3Di7apat4LuL8FnR9ZeTH9+lhPmlSP
nfKvrwF5pLZrcJXrYEjsNNnG5bMyymRblnP6Fs1c3+Y67kkLLENonpTt9hWn
+bzlsll+HxT14ffps7JjUNdF45MrbvJjuarU5ym+56tNeGsj7vs02l6J7/sH
Z32dJL2v22w5p+gZVUafuaB5p/34xz9OrYNx7fYuc72TGx9C92bth5tUx6l9
8p97+ly9U/Yz0HnSdzJvazN5b9mcjZ0qH7+xHR8MrL+zaeurUd6J5tlW2WaO
vBN2j8lYb8o6Qvt5ls/7SYn7wnjfNtVXY3Ngh2flk6F1m9F1bpC/LWGx05zH
KPS5aub8Gff2wnStct9O/qbGtE7d5WHcbiRuf3G8a2sN71ld0LpCYqeqx9NT
d+w0lTan5depDUrsR2C6h/e1zoidRj1bjcsKreiYhD+T1b1Dk2vvrUnPUPOu
yUUKY6dLdE/NqscLunbOcU5Vip3K5r2Q+1uZMvRMXkzJt7WlyRyx07z5q65r
cKXrYGDsdLp+taEax/FEcnunzRU7Fd4PFliGKIqdgtI8/uEc5bJ0bkyGZN1G
3nt4zpOefbkx2WoR11W2rNtds6ari9yPriXLXeuuJvu5FBz70/rD5LOHxArT
81/QvNM++OCD1PolxbS6//lc3Y7rv6Z+wHquqL91bN9+++2z36pdpu6X7l1a
Lq31b1c/5C8zORZFSL2X7sNpzzFVFxUSO2X3W54nfU/b8ybKTEe91USbvXqO
n7vfxdfFOfLO9D1mHF+38scr89Y7I23+uvJ+yrr8+8JRz1aS1/x4/JaA8nxI
27Z5j1FQ2hbMX/beHtRmL1rHWvI5o9ojL2XHTvOkdarxpF9WdA09jNuLeO3J
g9aVTJuAfapyPON22M2a2uxVKL+GpkXgOZha1h8fxutsdfdsvxfd15od2w1I
omTfU8ddcy8kdlrwPbW4bWvOtXOOc2pxsVPB/S3o/MjJi8l8W1uahFx7q1xf
A/JIUJu9gOtVpetgyr8z0iFup7e8ZT31zUoZw8GX1mav+nFPWmAZoqjNXlCa
J5Utl6Vz102/b5P7TP1qsqhcrHJ56BTSZs9d2/24qcw7hNJN8rfq8J4/G4zS
6/SdYc8f0YSd34dqB6m+ibv7p33TDmzY37LN/mHucsLmnaY+Tsk4Qve3tNhS
//bbuinN/XpDv02m0lTfu7/9PmWKvdzyFX+lxbA6Tnmxk/JPVp2ly1vJ2M9x
/bsKx9mrlL6n7aMbbVvbHsb9BkfqF9icjFs19/JHu7a1E5VnDkd2HC37aL9n
nVaU7/pHpbav6L47eVa0bQfHJ3ZycmLj3PXOmpm/tryflKwLmfR57fRHp9fS
Q+upLj2oPJ8YU+E4Y6yIuY5RWtokFBzj0vf2oP06bX+97Pq1jKPNWLf2Uk7s
NFdapxvvb0bbtWzL7UQ7maB1pYxlEbBPVfKc6xPd2x/F/YLnGSuifL1TSFqE
n4NpZau4vUR7w4Zxuqk9StOaUVkq79GpruN6DpbWlsNdk9Xf2Xe027W1Ti+z
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
Dg4uelMwJ7XVU9tJ2u0BAAAA9XLj6/lj4uFqU1tFYmEAAACgXhrPWuXskHcv
6Td3796N/+/+dlPad+7voum73/3upVzvRVN/MddvS+/HCuXGKqcNJgAAAFAf
Nzb5O++8U/hbxRv6rabbt2/bj3/845lJZXz3/+SkflVaj8akUD2XW5bal6mf
znmtVzFElfVeJDdGoP7vxikMHf9B+6z9u2nvtwIAAADOk2KK0Pc6Kc7wY4+Q
eCuL2goqFlDfnKL1X9R6L5LGLdT2KW4SxVEhdYOO5n311VfPaesAAACAm0fv
A1I5O7RNmKunclOZtmRpFMsoLtB7bfPGNrio9V6U5Luw1G4vNHbS/rh0uoz7
BgAAylEbfvc8Vaq0LfHf5eLTcv0yh9aF8qq8VzTtmCSP9UXQdvl5okp+0z5k
vSvITyeta95y/aKoXP3KK6/EZewybdf0rqa6270phitKN3+9aru3iPUuqt2b
i+XSKN8pncu8s8m1c2S8CAAArj6Vp/1ydpm2KOKeQaufe5KW68dL+ptnr+Wo
TKpj4r/btIhr+5VMay3rzp07F1qGS+YJ7VuZPKF8prJrVvsuP/8m39F6mVWt
n/Bjrrr61Sg+KIoNFr1erU95dxHXD60j6zqomKps20IXO12VOB4AAGSbN3ZS
O5uscoGW6/eHIHYqT+/7KdOnRPGRYousMriOk45ZnRTXdTqduF9IkWSeKBs7
ufcfZaWJn3/1m+seO4liYb8P0qLGdFvkei9D7KTr1+PHj+O/qzzLuKz9uQAA
QDi/fJn3vDVrXld2Comd9DexUzjVsSh9y7SHUmzhjklW/ZL65tdRjtP2uX7z
oc/U9buqsZPmdfuWFjsl869+c1We9bvx2FSXU+Uc0fH0+yAtqm5xUeu96NhJ
zwXcdbJsG1oXO80zrgYAALgc/PJlmdhJ5Wb9Nu+ZarKcTOxUjuIgTaGU3mo7
5d7HmRU3qH5gnnG/tFyVHbVtZftPzRM7qezsyupp6XIdYqey9b4+N9aEG9ct
q09Y3Rax3ouMndw4e/6kcywUsRMAANdH1TZ7Kru698RklQuuYn+n5Pbp3xex
zVrnSy+9VKp+SMdOMa0rq2XFDaobKDsmgWh5et+pjn1a/7YQVfs7ffDBB/F+
Fb0/1v9c69F7hq6COmInxSyuDa2msuOLXOb1FsVOystV82TauvzjoPZ5yfdU
VWmzp/E1AADA1Val3knlXz1rFlfmS4udrlq9k7bPvWsmOS16jECVBcv0L3fv
OpWQ59z6PnSsMC1b9Vkq+81bPq1S76SyuY6L/u/6BakcnZRW73RV+jspxps3
dhIXF7upzHhwl3m9WbGT8oT62rn8qbj+3r17QX3v8tY173HwufF00vIsAAC4
WpLly6IygyvDuDK05lW5wMVSvvOKnRTHaDvTJm1bcvLHxE6j8pfqU1Q+1zaq
TZv61ejf7jnzoto/OS4mDakb0m+0re63rqyWFTvpGKieIKQNkcqkWvYXX3xR
bgcyVBkrQmVivyzuxuNOqyPMa7On8r3WnzaF1COoPF4m35Wpf1GeqyN2Ehc7
u3QqU0dyWdebFjvpnFQbQb/9pmuvOk/MXHfsVFdcDAAALl7ZeieV8fyyr8pH
WeWCothJZR+VdVQ+1/xlnhW7tnT+lPd5HpXNFUv48VHWON+L4mKn0O33Y4u8
ukDH9VUrojTR71xfo3nf41O23knxTjJvufZhZWMnjZHmxotW/K3v9X8tL7Re
sc5853P5ra66CS3H74O0KOe13rTYyaWZH6O52ClJz0/SYlnlieTnxE4AACBL
mf5Obvxr/Ub1NG7Ki52S/Z38sQX8MX9d/dWinpE72p60sS6uSuzk+v/4x0Nl
1qKyWmjs5Gg7lEYaB07HrWoMVba/k77X/vj758ZgT9vGZH+nZJtHd1x9ig8X
9d7VLHXHTjo+/vjhi2q7eJ7r9fOKa7uZzONKv7R8r+1IG9ck7fO6Y6c6+rIB
AIDLoUy9k6vf8J+t//f//t8z21Cl1Tv5ZSlX3+SE9itK67udN+XFY26si2Sb
PG1b3e9BKiM0dlL6qW7GPyZqX5dXVnPHucq4Xy6GUju+KjFUmXonrUd5Llmf
4+qOkuNhp9U7JceKSMZOLu+H5DvlkTL5rsx43XXHTuLGh1v0e4XOY73u2Lq8
kla36uKpecezqzt2+vDDD4mdAAC4JkL7O6W1nRLXdyatHiCt3slfl8qiLmbR
/7UMVw+Vx42LEDrl9Vt376jyuXEa/Hd9Kv5y40io/Y9r66Vyov5WWyE/fbQf
Lr7Q5+7ZtmsjpNhMy9T/NSX325UN88Zm0H5ljdWd12ZK32uf5y1jujHRtT+h
Y0gk80RW7JTsw+Vz78dN1iml1TvlxU5l39Pj+mqFTmXeFeti+LrK12l9gRbh
vNabFTv5ecDVXesz/a001Tnmzk3/+YjOR53HymPJZyt1x04uzy06dtL+ln2H
AAAAyBdS76SyhcpDWf2RXD1Asu4m7d24WW14XIyxaK4M5m+7i22SXPs+Vx7R
Nqvs5ehvt3/6zsUIiov85Sk9FXdpOVpX2jgULv7JGmdP86quL61s5OZNi2dD
ll2WlhPaXy1krAjFSxo7LesdOq4smhYTJ+udkvnNL8e66TKou0+MYpdFjVG+
iPUmYyfXz9LlARezuXPZjaPvzkE9K3AxkutnKf45m1xXXc6jTjGEjsNF1DsC
AHCdFdU7+e9t8eMGUUzg+p64dnt+eTfZPitZ7+Tos6wYYhHcc2lt3+3btwvH
9naS8Z7+9vfPtTnTviXTVWU+lefynguntatTeVDbmDWembYpeUyS4wyWGcOv
bkX1Tq685yZ/25VW/r67fl5Olf5OZd5xep7cMamjfK24wY3pvkjnud5k7CR+
21E9m1DsrnPq7bffPjuuOjfc7xxX3+3ql4vGHJnXRb0b142bcdF9+QAAuE78
2CmrzFA0bljW9yH1TioPu3KOyjMhbfbOg8pRKr/mxROuXaGTFzvpb/f8XZ8l
09WNd51Xdlebr6xyT+gxSfuN1pk2pvwihNQ75e1b0Xeh9U7OoscmyVLXeAJ6
h3BWW8fzdN7rTYud3Od+e1Gdo8ljrnPItd/z6flF1vXuOsROon25qHMdAIDr
KNlmr852JUVjRbh6hHfffTee1E5rnndanjfXn8LJi538Mcbc2NiuvsVvq+f6
TKVxY5bVWb53/dNC2+upn1vo2Agh9Q1V3o0bqmiMcvdZVlvGi+TeLatjUzU9
FB8ov5QZo6IOi1hvVuwUwrXjSz6n0L/T4pnrFDspPizT7w4AAOTz29HVXWZI
q3fy26jp336/E39MhcvG73Pu0swf58HFR4qJ9FvXx0ltzvzYKRlHubEGs8Z5
U7mnzn732p4ybXjKjMsRMh51lXfjlpEXO7lj4h/Dy8Lvo1YlPRS3KO6qI35R
PU5oOX9R650ndlJ9mM7d5DOItL5O/rrq4vqD5o1Zcx4ULybHyAAAAPNJli/r
LDOk9Xe6qPclXWWKneood7mxEi+yLBU6zl4VyTKv6vPqGg9jEarGToo51K+t
rjEBFF+G5Dflp0Wtd57Yyae8rxgq2f42bV11cbHTovOinkNd1mdRAABcVSpf
+s9jk+MKzEPL9dujXVRfpusg5P1DRXRsL/oZdDJP1Jnfksu7amVHV8YuU4ej
dp0aX079jeqgetOQdoNuvXXFTSHrrSOvuDH1NeVdj+rKl9qfl1566cLGZgEA
AACuo6z3VuVRu7N523S69x27MQxDxh68qPXOS7G0nkMsMqbWvqk/GHXuAAAA
QD3Kjimg2EV1P+5dsG7MjuTf7t/6v+pa3LvHVPeiMd79Md9D6r0uar1XkRsD
5LK8RwwAAAC4Dtw4jnonWBH9Jhl71DH570G6TOu9qtR/a1F1agAAAMBN4d7V
GlJHofoclctDx0AsmrSsH//4x1PvSrpM672qXF3iosfYAwAAAK471b9UHacc
l4/GpmCcCAAAAKB+rk3cVRpbHekU/2qMiOvaHhEAAAC4SG5sAb0TuQz1lao6
/rzmm+c9wZo3+d7ZMvNeV+5YhvRfAwAAAFCO6ir0niONY1eG6jf892aF0O/V
pkzzzvP+MPXPKrturVfTdR5/zvV1uo7jBwIAAACXgWu3t6jxExS/1PHu5bJU
53SdYye11VMcDAAAAOB8KGZS7KT3xhZRe7v3339/rrZvVWOnedd9nWMndwzL
tr0EAAAAUI7eP3v79u3C8fYU8ygGuXXr1tlnyXHA3Ttp3aT31PqqxE6Km9w8
ihFE25G33uQ6rnPspP1XW0jG1wMAAADOl8bZCxlvT3GQJvUd8inmclORKrGT
+jdpfIhPP/10ql1acr1567+usZMbX0/xEwAAAIDzd+fOHbt7927h79SvpuxY
Db55+js9evQoriOr4rrGTh988AF1TgAAAMACqc+MyuB5dU9+vY9ri5dss5ec
knHWPLGT6rvcepNt9tIm33WMndSWUW0tQ/qqAQAAAKiP4o288cpdez3V/5R9
x5J+PxwO47J+p9OJ/y5LsV2Vdzspbnr33XfjdWu9Vd8PddnoeKm+EAAAAMDi
qW4mb7w2xU2qfypL8YpiGNVr6f9lx8tL9nUqw63Prfs6xE56j5NiyUWNLQ8A
AABgmvrNqEx+Wd6x+uDBg7jdn9r56W9MqN/ZRx99dNGbAQAAANxoiptU/6T+
NBdNMcK9e/eImzx6nzHvcgIAAAAuB7WRuwyxE2bN825iAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMDV8cYbb5z9/ejRI/vkk09Kzf/kyZPUz7Us/zt/PQAAYNann35qDx8+
vOjNAABkeO21187+1vU6KxZKozjrhRdesIODg5nvksvy1wMAAKZ99dVX9vLL
L3O/BIBLbJ7YSdd4xU5pdVXETgAAhHvnnXfie+qrr74ax1EAcDOd2O5aw9rb
hxe9Iamqxk66xufFTvr+fGKnse2tN6y1uV/T8i738Zn1S/vDb39sX/9Xzxaw
rr+3f/PwY/va+8cLWBeqS54TdZ8jUtd5ErZtw27TmhtVtj9l+eOR7XZXrNVY
sqWltm0t+FSvvi9lzHvM60q3q3Y9Les8zq2JL7/80prN5tl9NT92Or/tuBjX
Pd+cl+uWD3AxxzTk/Fv0dl3ea4KuzX5Mo3gnpL+TrvGar9frxdf49957b+Y3
/rKS65nP2A76G7a1N6ow74ntdaJjsXUw9dl5HZ9//50f2K/8+oeJ6Yf22385
z1IXGzv92d5/tt958vMFrOtqGW40o/Lk0uy0smNVcuZ8ZmOn6XMkLd+XdXVi
p+T1YTxYj8qk67Y7OrGT8Tj6xWJdldipfLot9np6fsqcH/Pcf/K9+eab8T1T
98qQ2Om8tuNiXMV8c14uR35EnS7omJ7sWietnOJNk3tGWOy02Lx2ua8JVWIn
d413/Z00X5Jf71Rv7DSPC4id1v/ChqNn9pmbfvpz+9kv51nqImMnZIljp5Vt
2z88tENvGh2dLLxsXlxuvkmx06yj3oo1Vnp2VMvSyrsasdOs4nS7ibHT+dC9
1I2ndOfOnfi+qmeUN8dVzDfn5eLzI+p2Ucf0xI5Gz8sn+9srttToWP+szDKy
0fHYFnX+jYcb1mp2begKSaMdWzmL3yYOt5etsbZrx26btgY22O7YcrNhjWbb
1qJ/T7eEOrGDXtdW201rLDWs2V61jf5B9Onz7+PlbPatv7FqbS1nrX+6jKJ5
01Wpd9L3ip3c33mx03nVOyXLCEfDbesst6J9j+LoRtPaqxu2l3LDn60rWLGd
UV3HZ1YcO337v9nPZr45jX/e/2/2B9/5xL5+72P7Vfe7X/6d/fH3/tR+7Tc+
tl/5xsf2tfU/t+989ouUef/a/s37p/Pe+3f2zX/1s8R6fml/9uGf2z/6zR/Y
r/76x/YPfvMT+6d7X9izmeX8lf3h+39iX/+NH8TLWf7e33jLSbbZ+7l9Z/1j
+0cf/t3Umv74X0TL/87z1Hr6n/7CvvlbP4zW+2G0Dz+wr3f/s/2b2UQI3IYy
aZJMz9PPvxel1ff+5DStBvatvWf2i1/+3Eu/gf1jfZa2iRnivHR2/mVQm6fo
XG01lKeWrbM9sH634ZWjR7az0rDV3nRmHUz9Jsrfgy1bX23Hy1H+Xl7btL2R
H6Hlt9lLy/f/8nsda7Q2bH8q0DuJ1h2V89f3UvJ14HkyPrLBVvR9S9sabcNK
13b2/V9ktA3LTafwc3x6+WMbRH9P7fvytqXdHYrT2F1/d213c83arWbG/hfv
y+wmF6VZyLqn0/V4t+zxLZ9ui72euuXu2d7W2uT+F6Xvev/QxlGa722unn3W
1WfenEXHNnc/Zu63ifx7PLBudNxWdp6vc3wYlQcaLVsfhLd1fv311+3zzz+P
/75//358X81vP1/9PhiSJrOyyx/1nDuzZbfj4aatRL/rZu1EnAx1nDuT393Y
/Bichmllz2ml89XBprXS6kOCy7Y521a4X0nX6JhmOO6vRdsXxS6Z+5533Z7v
mjNZzZ51Gm1zIeSJ7lPN6J50dn85tv6q9nV0tk3aDt1HD0cjOxxE14RoPet7
LgeMo1hrJZq/a/39kR0dH9lhtE1r0Xne2XVbruVo+6LjtjeK03A8HgfOm65K
7KTfu2u8/q9rvJ6TJeXFTronqG9V2lRc75U4fqqTjPJQp7cfxc/HdnwUxdZ7
u5Z+imQ/J53/+MzKj50UV0Rl9ic/j8vsv/jl35tileH7/85+5Tf+1L7zn35u
T3/2LIoZPrF/8I0f2Xd+6s8blfe/EcUYUbz0ky9+YT+JYpXlKAb4h3/k2tb9
vX32r35k/+C3/tz+4LNoOV/8nX2m30SxyTcHv0hsw4/sn/7p30224af/zb55
7wf2rSe/PFtO6djpb//KvvmNH9o3PzyOt+1n0T4Mn/yVDb9IS6GwbQhLk7T0
PE2rKDb65h/9LK7z+7O9/2hf+/Uo7b79J/atD6PPfvZzG374p/a1aHm//9O0
bUxXHDuNbX+zbY32uvUPjuJ8qWtvs7FUOnYa7e1Yf3Bgo6NjOxrtR2XxZWss
b9mBt678/k4p+f4kuh5H16zuwCsdnJ5LG8O0e13YeaJ9Xmp1bGcYnSfRPg+2
tM+6T2Rv62SeKJ32T9NpY2U6nUqd4ynX94B6p+I0dtffFdsYHE2uv6O+dZpp
+5+zLynbW5xmYeuevi6WPb5V0m2R11O33Cge3RnGyz3or0flruj+vrZm673o
s6OR7fc6UfllxXpes5KQY5u+H+n322Q6nQw3rB39busg+n58YNvL0bI2hoXP
Lh21ffefP7rxIvLvhfPcB0PSJCkrPeo6d6Zjp6O9blSWXLbNYV4Zpr5z5+bm
xzJpOHvsk8rnq8k2aHnxFB2btajcvhrHCfOVi4v3K+m6HNNsRbFT0XV7nmvO
xJH1zmKjcdwmY2V7x9abq9bXfFFstR7FVpsHz9NnUgflTJ7rNTdO92Cs+1zL
NqcfEtpoJ7p3rT6Pv+PldHan0yto3nRlYydd49WuQLGPpuFwGF/j0+qU8mKn
p0+fxu9/0rzuPVCa9Hdx/VTi+KnOL/d88GXn3/mPz6zU/k7r/9Wenpb1f/V3
/8qmWt797V9HccfH9s0nfqO+v7PfX//Qi19O44SulvPc0w8/sV/9jYPJOfHL
v7F/fO+H9tuf/f3U9vzkj35kv9p1sdxpXPHwr71t+PsoDvpBFAf97OzfpWOn
n/7E/uFUXJMnYBtKpMlMenqfP49fn9k//60PE+v8wn77N6N1DMIbU2b1d3pe
3tfzlei645ddo2veZrt87DRjPLm+PM/GFWKn+N7SsmbneR2ErquN9qYdpN4W
A86TeJ8b1tnzr1DRtXJlKXvbXDr584z3bbPlpVOpc7xa7DS7mGQan95bpups
xpN6nKn9L9iXpKA0C1h3akxa5vjWGTudx/X0+f3v+feHURliKZEuOsei9NzN
KVWkHNvM/Ujeb1PbRkZpvRWVldpd2+624zTeDyzUPHv2zG7fvh3fK3UP1P87
nU58b9T9Nmcn5rgPpi0umSZJWekRsqyQ/Ouee+/bYT8qm0Zlqe2iRKzr3LnJ
+TE4DQOPfeG+5f32wLai+2ErSr9JvdEc5eKg/Uq6Jsc0R37sVHDdrumac7jV
Pt3n6Hi3lUZH1l+b3DfH+5M2fYOx26bZdo66r+l4xD853LblrL5c7a3Tuqz0
5YTNm65M7KS21xr/R3VM/lQldhLdJ9LaJTx48CBniyWZr45st9OK8kPLVtc3
bLs/sIPjrDrinPb5cx+fWWn9nX4Sd3ZybckSlTGjz+zrqv9IVFT92fs/nIl5
vvZ+Yt6/1Lx/Yn+gj0d/Yb82M0bF6fSbn9ln3nK+/r3paGOodUVxxaR2qkqb
vb+zP/zdH9qvfOOH9o8e/mf753t/Y3/2xXQM91zANpRIk5n0TP38F/YH3Y/t
16b6i6XvV570/k6u7bDpAmHtxqpNh0XuWlQudhof7trm2vLpeGdualh3+Hy5
5WOnyTYuN9Ymz3tOt2U5s71zyHmifV5J7LOaZbS8e11i2zLSaW8qncqc49Vi
p+I0dvs/nT6z+1+0LwlBaRaw7rT7banjW2+9U/3X07TlTtp3TO/T7DkVcmxD
9yOzX5nKfcta7umz4UBqn6dJ90s3vfXWW5lt4bO3o8w5EpImSVnpUdO542Kc
VhTvR+fQzmFi24dda3rLjsvEdZ07Nzk/lkrD4gCofL5yjqP9iNYZ3VPPNneu
cnHIfiVdk2Oao7jNXs51e85rztluDDesqfhI7Q5bG3Hfp9H2irWiGO3grK+T
t03bRffcovgtoy9X0LzpysROur4nv3Pv8UsbE6hs7KT7hTx+/Lhgq9Nj8uOD
gfV3Nm19NUrXKD22U/NWeN/m8sdnVmF/p+R4D7XFTpPl5Nf9pG9D+djp7+2P
H073d9JnP/vLv7E/+KMD+1Y3Wl60Lf/8L9Pip4BtKBM7zYyfkfb5aez0R/7Y
gRVjp7w2e5Vjp8Rv4nqLhq1sDuzw7Lo0tG4zui4Pns9TKXY6Xb/qz8e6T81s
ry/8PKkSO/WnOw0l0mnyWdg5XiEGCErj0P0P2RdPmbJL3rpTr4tljm/NsVPt
19O05Z6Wa6YWlDinAo9t+JgXGeWaUc9W43JTy9b3wvog6J3yac8d8/oR529H
4DkSlCZJGelR17lz+ptWZ8M68fIS7ZHGx3Z0NLLRSNORxauq69y5yflxjjSc
USlfTfbhUHVJrXXb9bejhnJxpdjpqh/THIWxU+l7TOh92V/VXtzWr9tds6ar
c9vftPZy17pn7fkCt+lkYOvN2efPIfsWNm86xTR+X6Ws2OnTTz/NbEuXNZ5q
aOyk9gnvvvuu3bp1K3Cri8aTmuT19O/Hcf6d/q6u4zOrdOz0t39t3/rGD+Zv
s/e3f2PfulcUC1SJnaK449vJOpto+7ofJmIn3yRWSX9HVMA2BKfJJYudgtrs
RXl1LflMS+2Bvd8c9WwlWeaNx6YpEzul5fvTLVA7ruUt66lvVm7/rZDzRO0U
mhXa7LVsY6pdxqSdRHa7xYJzvGwMEJTGYftfel+C0qzqfa3M8a0SOy3yelqx
XBN6/gTuR2o6jw/jdba6e7bfi8oDzc50GTCF2urdvXs3vrcmudhJ40dkm+M+
GJQmSRnpUde54/0m7o+ksujWfn4bsbrOnZucH+dIwxmV8pWGQuhO+vIkG6HN
VS4O2a+QZV3BY5qj/thpauk592XfpIyjernn8Wd0rE/fI7iZaOtbtE1x3K3+
jLv7p/3NonJwf8s2+4e5ywmbN11R7KR+SRq/QXGNrvP6t6Nrv+qI1FZb13n9
7d8HisYod7GT6++k+qswyTaXu7a1E+Wnw5EdH0f7vt+Lr7ur/fSMNXnusG0H
xyd2cqLxpOs6PrNKx07euAi//9nP43EWyo0V8exsOZ+pb5PGYBgc209+9gt7
+tMv7N/vfWa/vfcsdxvyY6fTPlO/Fe37306+/8ngP9rXf92LnX76V/Y7f/TX
NhxF2x9t29PP/qt98zeiuGQvLS4J24bQNKkzdjra7dpap5fZHjNzjPLR8VlZ
YLhRNFbEadvtZdd2eRxl53Vr+/2mxpM+/53+6PQ+f2g91ZOXip3S8v0p3WOa
umYl+unMCDtPXP/c3v4o3ufisSIm6dTUtrk0UH8HPw1KneNV6p1C0jis/Fe4
LynbW5xmc9zXgo9vtbaOi7ueVn0mHHJsw/cj7VyL25m0N2wYJ6/asTStGcWp
WY/LdW90981kG3X1cbp37178nX6j+69/383cjjLnSGCaTMuqd6rv3PF/ExY/
1Xfu3Nz8WD0NZxdVIV+pLiWaZ03zjJ+PGeG2bZ5ycfF+JV3dY1pUXjnbmzpj
p5Jlb9/hdjvxvnU9R47uU2d9nUK3afK7g/6mrZ2O99dotmx5rWs7Z+PM5OXf
onnTFbXZUzzkt8P2+ya5sfL87/32dmXb7CmGCpM4fkcD2+qsWDs6ZvG+t1Zs
fXuY84x5zzZWTsdU9MeJnPv4zCofO9n0eNy/rvG4/2PmGOV/qDG2v/Gh/crp
uN5PE+v4s70DWz4dK/xX7/3Qfu3bf27f+U+/mF5OydjJfvnM/uBf/Mi+du8H
9rXfHNg3o/X+vt9m72d/Y7/zuz+yr0fbH6/3N35k34pivOlty0+H6W0okSY1
xk6jneXoPN6wrBJv5rtxo3med0Ny41UvZY9XPT6MPluxVnTtbbWj32wNrJdo
43WssYXa0bWy1bb28ppt7vb+//buGI1gGArg+F3co5tL2GzWDjZ36GpzAhdw
AiewOYHNZos+vhJpyEsa/ar+v+/zGSiaNJpX8V7kmj3jOe6f20qum4ldc8FL
OU7svLATyQu70Ocor8dUUbfBbLU1a7sNosZ4WgwQbmPt/gf2xfuRQ23W5Zqg
tn8Tc2z09n2aOK8xmr7V74fbTpf9ykwlL5R9zfxUx6syh/BM0uSaY1MbsbnZ
ZB2f+7hs09btPKhqkxfv5x95xk77Oar4KcvYuT/vH4/HLm3oE3tcSY5q73nU
zlGeOi8O7lfr0/xsn4bmK4/NcsZOsXPvkbFjGomFPteU0HNjLW2uCGDM+qmT
GuO+brCovw/T/n2KYaN/AQDIxf09qK/YSdYglGV5i53k3rfmGxijIcVOl/PJ
HHfL5FwzGDb6FwCA/L4VO7mv5cZOTU0nuRE74V8MJ3aS2gpSl68w882B3yRG
h/4FAOAbpNZtQ/5z9LmWuV5VVS+xk/0+AAAAAAAAAAAAAAAAAACEXAGZf8hT

     "], {{0, 344}, {847, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{836., Automatic},
   ImageSizeRaw->{847, 344},
   PlotRange->{{0, 847}, {0, 344}}]}]], "Text",
 CellChangeTimes->{
  3.774355619444229*^9, {3.774357106185348*^9, 
   3.7743571175841637`*^9}},ExpressionUUID->"98671d82-36d8-4748-9dcd-\
91367c7f2e50"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"normalizeWeights", "[", 
     RowBox[{"inputshape_", ",", " ", "constant_"}], "]"}], " ", ":=", " ", 
    RowBox[{"NetGraph", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"<|", "\n", "\t\t", 
       RowBox[{
        RowBox[{"\"\<square\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ElementwiseLayer", "[", 
          RowBox[{
           RowBox[{"#", "^", "2"}], "&"}], "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<sum\>\"", " ", "\[Rule]", " ", 
         RowBox[{"SummationLayer", "[", "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<replicate\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ReplicateLayer", "[", "inputshape", "]"}]}], ",", "\n", 
        "\t\t", 
        RowBox[{"\"\<divide\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ThreadingLayer", "[", 
          RowBox[{
           RowBox[{"#1", "*", 
            RowBox[{"constant", "/", 
             RowBox[{"Sqrt", "[", "#2", "]"}]}]}], "&"}], "]"}]}]}], "\n", 
       "\t", "|>"}], ",", "\n", "\t", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", " ", 
          RowBox[{
           RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
           " ", 
           RowBox[{"\"\<square\>\"", " ", "\[Rule]", " ", 
            RowBox[{
            "\"\<sum\>\"", " ", "\[Rule]", " ", "\"\<replicate\>\""}]}]}]}], 
         "}"}], " ", "\[Rule]", " ", "\"\<divide\>\""}], "}"}], ",", "\n", 
      "\t", 
      RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", "inputshape"}]}], "\n", 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"constrainedLinearLayer", "[", 
     RowBox[{"inputsize_", ",", " ", "outputsize_", ",", " ", 
      RowBox[{"constant_:", "0.5"}]}], "]"}], " ", ":=", " ", 
    RowBox[{"NetGraph", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"<|", "\n", "\t\t", 
       RowBox[{
        RowBox[{"\"\<Weights&Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ConstantArrayLayer", "[", 
          RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"inputsize", "+", "1"}], ",", "outputsize"}], "}"}]}], 
          "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<normalize\>\"", " ", "\[Rule]", " ", 
         RowBox[{"normalizeWeights", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"inputsize", "+", "1"}], ",", "outputsize"}], "}"}], ",",
            " ", "constant"}], "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<Weights\>\"", " ", "\[Rule]", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", ";;", "inputsize"}], ",", " ", "All"}], "}"}], 
          "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "All"}], "}"}], "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<dot\>\"", " ", "\[Rule]", " ", 
         RowBox[{"DotLayer", "[", "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<plus\>\"", " ", "\[Rule]", " ", "Plus"}]}], "\n", "\t", 
       "|>"}], ",", "\n", "\t", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Weights&Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"\"\<normalize\>\"", " ", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<Weights\>\"", ",", " ", "\"\<Biases\>\""}], "}"}]}]}],
         ",", "\n", "\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", " ", 
              "\"\<Weights\>\""}], "}"}], " ", "\[Rule]", " ", 
            "\"\<dot\>\""}], ",", " ", "\"\<Biases\>\""}], "}"}], " ", 
         "\[Rule]", " ", "\"\<plus\>\""}]}], "}"}], ",", "\n", "\t", 
      RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", "inputsize"}]}], "\n", 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"constrainedLinearLayer", "[", 
  RowBox[{"2", ",", "2"}], "]"}]}], "Code",
 CellChangeTimes->{{3.774355684469912*^9, 3.774355760855195*^9}, {
   3.77435579647886*^9, 3.774355829007532*^9}, {3.7743558841119423`*^9, 
   3.774356074408409*^9}, {3.774356145979809*^9, 3.774356154305274*^9}, {
   3.7743562088716927`*^9, 3.774356218947102*^9}, {3.774356295903295*^9, 
   3.774356313803196*^9}, {3.7743563973417377`*^9, 3.774356404588377*^9}, {
   3.774356440222047*^9, 3.774356526828714*^9}, {3.774356595902669*^9, 
   3.7743566203254843`*^9}, {3.774357215081335*^9, 3.7743572936578627`*^9}, {
   3.774357327194303*^9, 3.774357409148704*^9}, {3.774360429690557*^9, 
   3.774360429895699*^9}, {3.774360520125143*^9, 3.7743606223190603`*^9}, {
   3.7743606563954144`*^9, 3.7743606631195602`*^9}, {3.774360694531502*^9, 
   3.774360720671668*^9}, 3.7743607976076736`*^9, {3.774372596228669*^9, 
   3.774372597071803*^9}, {3.7743760608026114`*^9, 3.774376069169498*^9}, {
   3.774380063863546*^9, 3.774380075215539*^9}, {3.7743810016720247`*^9, 
   3.774381009899993*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"6e3d5d87-15b2-4853-bd86-59dcefef4488"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 2.}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     2.}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEcB6AMh5DzN46+ns8O52/ykKzYZYrgi+ccFMs5
yHaAEcpvs7y4kMGZDS7/ZwNIAyucX3tJHYgQfLZ5eWf5u1ng/BnCslwGT5jh
fCNjEEDwL4K01zLB+YUyx4GIEc4XEAQBRrh7NrBGAxEDXH7eF8/5Xzz/74fx
79wFgb9wvhTIuMI/cH4U2IDfcP6MmSDwE84/Cwoe8x9w/qfDSqkPXn6D89lA
1m/4uh/mHoh/v8Dlv/TE7vlX+RnOBwdP7Sc4fy5I+ZSPcH5Eol+JxoEPcP5/
MHgP5wMA8Q17ag==
                    "]], 
                    
                    LineBox[{{-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.7777777777777775`, 2.}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777776, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 2.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.8369701987210297`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[CenterDot]\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-2., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dot\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dot", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"CA\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Weights&Biases\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Weights&Biases", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{3, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-4., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-4., 
                    2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"normalize\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["normalize", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[4], 
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 2.}], 
                    Offset[{10, 10}, {-3., 2.}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 2.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Biases\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PartLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"1", ";;", 
                    RowBox[{"-", "1"}]}]}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Biases", Bold], 
                    Style[
                    HoldForm[
                    PartLayer[{1, 
                    Span[1, -1]}, "Input" -> {3, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PartLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", ";;", "2"}], ",", 
                    RowBox[{"1", ";;", 
                    RowBox[{"-", "1"}]}]}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    HoldForm[
                    PartLayer[{
                    Span[1, 2], 
                    Span[1, -1]}, "Input" -> {3, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 2.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999999999999, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.2246467991473532`*^-16, 2.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., 1.8369701987210297`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dot\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox["\"Weights&B..\"", "\"Weights&Biases\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "Weights&Biases", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"normalize\"", TraditionalForm], 
                    Offset[{0, -15}, {-4., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Biases\"", TraditionalForm], 
                    Offset[{0, -13}, {-3., 2.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"plus\"", TraditionalForm], 
                    Offset[{0, -13}, {-0.9999999999999999, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -7}, {1.2246467991473532`*^-16, 2.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-4.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-3.4, 2.}], {
                    0., -0.17}, Automatic, {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-3.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    1.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-1.7777777777777775`, 2.}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 2.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}, {-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}, {-3., 2.}, {-3., 
                    1.0000000000000002`}, {-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {331., 156.00000000000003`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28.000000000000007`, 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "dot"], 
                    NeuralNetworks`NetPath["Nodes", "Weights&Biases"], 
                    NeuralNetworks`NetPath["Nodes", "normalize"], 
                    NeuralNetworks`NetPath["Nodes", "Biases"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Weights&Biases" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association[
                    "Dimensions" -> {3, 2}, "$ArrayDimensions" -> {3, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]]], 
                    "normalize" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "dot" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Biases" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "plus" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.774381280669306*^9, 3.7746375055404882`*^9, 
  3.7746393339737997`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"a5e659ef-5483-405b-a12e-a9c923471763"]
}, Open  ]],

Cell["This helps to invert, but do not train well (underfit).", "Text",
 CellChangeTimes->{{3.774381019904428*^9, 
  3.774381039768523*^9}},ExpressionUUID->"85f22e9b-a0d9-4472-822a-\
3b3507d5968f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inversion of ResNet", "Subsection",
 CellChangeTimes->{{3.7743496365613813`*^9, 3.774349644569553*^9}, {
  3.7743519499663973`*^9, 3.774351954926311*^9}, {3.7743812437109013`*^9, 
  3.774381246371936*^9}},ExpressionUUID->"c9883fe2-2bb7-4987-b0cc-\
5be716d0bab2"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
LX9ra9QLF7V1hbK6/aGt6/vnQ0XYG46H/94fKLOwh7dhERvVsOt8V9s2w33v
CvNJ7KXzZbRiv8uiPUQe3ZvWdsiXpb3UO3nKy9rEHg1rvd+VHfeF12YurNUJ
qI28uQvZB22qitmWz4OcZ/NTMp6Z597Mw8zDaep63Q7vLDv3lee9/NyO4711
Zv2a99rijnA+rLw/u6x/VZbWT34SS+snxK9LhchysPjqznsR6wEKrFQ2FPyd
JFUPb+b8mzxk/eLy+f0TgvhsmgxOtzZy5Hu1v/VYawm5VnY0Y6q/vzDy3RMF
5/MZxnQh+Xk0CVw7QtXK9wptfkbE0lzd0sCeIH4A/ByKMAyHz835Dd+ZBkXk
w7Ft2I4LP8p+zhmNxGPUmThrx4tfXL6bElmSIM3n61oEQRAEQRAEQRAEQRAE
QRAEQRAEQXxLmgrFwjsfAy/QJm5r8S7Kj19z3M3bD4bFR+jT724saFAVGdKs
QPXSje4fqHvdvEiD/FXhftd4EL8oDfLQEu9lqpPDIwakNrEyOhfl/c8sYxc6
fx915/zu781+3n40Up8+RRZZOB3OWJN2botIaHClrJ3PQ0Nq2b/g1aK2TOS7
1/yMpJd3LAZd7+xbhPtd40H82hRCy2WrzevPhnlenWdln5/P+6P9CWc/bz+M
u/Xp+RlP47OBuH5cgvxF3V6hq/Yh/gRv1CC/Qyv9JtxP0FdfjAdBfDTyLM9N
fxIbT/Yn/DjdX8Of7OXtx0VF6tPvnlPLzyP8qPYd/PjcD/Qnb4CfHfeojvlb
7nmUj3gGQTxO3+blrHuTIPC4TvJMi3vFn0gd6mBFh3qqDz0/d3DiT1i/ip9H
Hwh92nL3fbGmypEVj669jHWxC6mL7YadZsGthnPdaziHvVaO1GUPuO56y88Z
5brsvtAjkDqpnS779XrOft5K+P2dRrXQpm+Hvwtd62LQtS7WU71mj6k+vS/1
6Zfeu85ZGix+nQrLD2T6fWY/Fi+vO8hS2lT+FqX8vMBOtzscn9O3lp5RPIWO
doQ0uMefyPyV+ZCxe7mmeYh0YYC1VSanut5b5aHLt4mOebiqQT4Od/2eN9h4
ohm+puE+PGNJt3y7ju7nwZpG+g187WZUJ5syR5rm3/xsQuJxOp0zzYBpu/A9
W+qlnx308pu3/qTTobZ7HWp+vjLXoQ4n+tCGl3VncfLz0hUYowPsJv6kyeDx
M3v3JlWaHIFlsratQFWy9tkxoOnBiqbBlKsutsru94KrLvag63Or4VyMdHAm
uuy+1GWPuC67Yox02fk5pWPt1P28FWf7cY3qVGpUF/5lojsurr8Mutb64lkf
O/YY69Pzc7fbtTMtW3GuyOHANdEbNE2NimuZKyPNAnT61eL8+1bMozmGOzoX
ZC098leuo32xu7OphX753voJP+O1ywfNZD6cn/HswVSPIu8HTfDtPBh0veU5
4vvlATc65ktRnIe7fM9bbDzVDOdnxitapxm18IybeOzW0TvrxFUjvWVpMOEv
DbVb5uNZP4o/T3UTpGGIJK9QVzEszR6VdeLn07V5Iz3RNneFzonWHYh940+E
vstMG0JoBRxlXeD+Y3K2fI2U60MnC/6kTlmfLbhjfp7rLLD+9cgncV0U5eas
6jVu12ykroPVaQbcatoIHZzR+uatLjvXg1Fgp9deGSKuHXHV5dnPW6FRfRlp
VBe+0DaT7Xd31ubevOCePTg3el0ruXQz/7Q0Z1ezdCqsfXdZf9pibczIAlvp
EboXS7pCe+OTXoNmdIYa16A5jux1Rx5U4WXS3m6XhyHte+ecTsNduOctNuaa
4drlqmGL3BEaSrKrshyvSTzuKRN7edBppPv9wJONVbKFM/KbJBB+XWhXnqzR
WZk8nupL9nIQX5Wl9qLTV+y0Luf+pNehnmqBSQ0crhv6v3f1oTt/wrUAzsua
RXOa2IRymvqoUFcGvcddurozite07XyDPxG6llzvbu0Z+3krNKq1Pd3xbdW1
PXuIuDzVn/DgO00ka+rPt9LT62hno+tvnsfPr8qy4VPUuPqTiX6ezJvDRbaF
9+QBf/6NP1ktD0Pa9/zJNNzbe95nYzknFbq6HF9W6/Eax+OuMnFHnVjTSB8j
de/5/jIFl2lngZWRLQ084uex1F5I/b41fyK0KA9svD5pyhuh68br93/lusuX
7T618CdsjM91YI6877Yzf841SJWxflqbCB3Ue3xRH8bX8CfTvJVa2nu649v+
ZM8ewg7P9ict3wfG2xo+hzb8eSs9QmdTsTf9CdcWuVwuw8dJufLDgj+B3B/b
9a3vyYPP8idvtfFEM1yMT+73J3eViXvyoK0QO71Guot0tfzkcM5sLDIqJqIP
eLlvPpr4KSy1F1x797g633XVME/bm3t4GZf60PO2fqwPPZ7vimGe2H12ujGe
kWFP+j4Zq1/nQRd1n8f9idCPfro/meZtr1E97cPx/QHZSHd825/s2UPwVH/S
Ivcs+Hku9GOPI42OrfT8zwUd7fv2dy2PTyL9eI3XPXnwmeOTh23M9f/GmuEP
+pO7ysReHnD9uy7OTR5IjfQ1jWg+x32yMTyO+S6zH69UKMpNAxM/hr5sjtoL
PjetDnNLvdb9pJ4JHepBY1rMjZ+7OtPpQx/H+tCBA2+0MDdej2+YbzgfFOjh
mkYQa7+c88ifVGL+frp2sqOr3Y1xxnVH+klWd6SA7IKG80nWz+4hS/5EE+sn
wzOW/MlW3vYa1crFG2lUO7DFHHcXp1Wd954de3CEPv3+eO76PshoDny+T4GP
IUwvl0qCYn+xMszJb6WnX/MY62h70sdsS4osrJ9wzd3TWPd8Pw/qcDwHtFce
RGKkjrk16Jgvxm4S7sI9b7Bxrxnu9JrhAdfH7v3Lcrym8bijTOzlwZJG+kpZ
5L5MGc9xd/MHvP/S5iGihXUX4ifSIPcNqKoOx+caJj4ch5X7qvv1qk18gjHW
JhY61Cp0O0AUh/BsB+FoM6HQhz4NusvWVR+6QZl0+0pOBny+h7FhZV9oLkv9
9MV9mU0G33ERxgmSiL+zf5yunezoag+62OyZYp8rj3+fLjk3PNdw5ntZldMF
VpDjD/lYl53HuUTiXsQ8wNlk13Jd9mxIV5BWYi/PVt52EUcV29B6Le3jmcVn
rjvOnhnt6I5v2GPQp2fjIpvr0694XJYnvrjuBN3j+39r5BGLG9fPVvn+u7rL
RxVOP/HBnmufexsXYh59OT2SqY62zWx6kXnsxVjvwnZr1qoBm+VfwPLRNi0E
83Rs5YHQ9R40tv/Hf9svD5yxjnmyuD95Gi5Pw+09b7BxnbB8PUrNcJ1rhgfC
FyuaJdrm+TOW4rFbR/fqhNBI1+FGg0b6ml9I7dN0/oD5M1/nGvQJe3bx889V
Im7gGu1r8ugbN23oUO9oWL+V1bUTrqvtvG/9b1ez/K3B7uXtk7SuP01Tfs5W
enZ0tG8Y5rvadqajvRj8c/PgXh3z/XsetfEsre1UM/zueL03P3ieVzv1mOuZ
3964OqYjiM+Cv2cXdO/Tie+JhdPCOp/Q1Y6oL/TzWF6PJwiCeAy5rqe6/B0O
qatt6jbi6vZK3vcjfiJyr8TRiKmvQBDE+xBnrCeI4xhptn8eC/GTaFBEPhzb
hu248KNs5RxLgiAIgiAIgiAIgiCIb0idIw4jMe8VpWvvqhAEQRDEFiUCw76e
NVdHFszhcFmCIAjiO/ORetX8XN7x+7eljwudDUQQBPFl4FpLrnHGkb+3q1xg
+9G6Zs6Ej9Wr5ucKTc56EOdt2KA3EgiCIL4Q4lzDgzgP6yE+UDeba9hzfzL6
A/TrGXwEQRDEl4D39Zk/OTnZu4J5paZ1y/UF5+cBnh2QVA9BEMQXYtGf7GtL
36Ob3RQsjCC9b52jrVFmGYruzKKW68RnpTz3isXRuIzO9s1daNbeubst1qRt
3w/X/c5v36173QMJgiC+Pgv+ZE9b+j7dbKklxLVQts8j5w9MEYYJiqpEZOlw
mE8KkgKZfxHaKK3Qw7bhRDnKMkNgO9jb3iV08Y5TzY+Wn1t312fLL1RCIzvj
2uqqO4yR2gTWSZ9pGBEEQfxCLI5P9vW1d3WzBXecB8ueEAfxcEa4q0IxYnH2
ec58iDs6C7KtSxRFhXuOLW3LGL6fjMZGJWLXgePc8fHTdX3TrNNz4Nofp5He
INf4Ur0HNL4IgiB+GFv+ZEO/bk+X7oEIoLr6HK6He4S+JyT4iUi9bO5OVJzs
7DoWm38nCIL45fh0fzJ+bArrpML78npuBVyVa/323oOfqa7AjGmyiyCIX5iv
5E9yF+fxOy11gee9Mlkgsi1Y1h0fN9neQ8D3WCvmde6PZc5V35QgCOKXZfH9
k3197V3dbHQaV/5229xkHnTdF+sOfM7oqPfPbJGFIYo3TiA1mQ/bfvv9m/C1
E9W9rpU0iUlrJwRB/NJUGWvvTXX0fnws3o/f05b+v3fpZvPhxpn5HH2z317H
FjQjQJKECJMUgW0jTFPEzJck66Li+2mLDJzPFuKXjBlKhKYBN8mRsXg7l6NY
OyEIgiCew62mNdeQvutG1M346+Oa3R9LKz5NVbF4c/3A82gthSAIgiDuoOFr
JQqstJvTSyyoekhnUxIEQRCP0SRw7QhVK/XsbctHRtu6CIIgiLfQlMiSBGle
ffF5OYIgCIIgCIIgCIIgCIIgCIIgCIIgCOJTqQukcYQwjJHdiHoQ34WmKlAU
3aesaa8AQRAfSlsE0JUDFDNCHpk4HlV4Lzk4pEXmalDfqQN5HzVS34UfRoii
AK4bTLTAfipNmSIwTzjw8w7OLulXEgTxgXTnPrL2R/NLoUF1OLzunNwqjd51
hsq9lP4FelANfyg8XH6Rdw7FOZ3kTwiC+HAqBJfD1Z9w/1LX3/zlvDaFfdLg
T868z+Gez3iRvP2XgvwJQRAfT4PUM6Aq0p8oqgHLiTqN9gZF5MK2HbiODduN
xDmRHH5WpN2d625HBfsewNIvMJwY67IlK3rrr6BwcT7OdXf5+cdHaOMxy1ej
KZEXw5pHU+ZI03z/vP6W606a0DVmAztEwsZmt/5k3Z4EQRDPoG1yoVvC2x/V
y7tz5pmfcc44Hvo+vtQ2OZ4dpKINGubIjhrzQcYFJ95+HeZjgp56WW99MT5P
0HdPLSgjnZY+DiE/A9j5oj32NkMYZigCHaqbiPxK8gp1FcPS7C7fl6gQiXOf
j7h4GcoigaMdZ/5kz54EQRDPgJ+NO57vYk0b17QS59f32ugta6IV6XO6CaPU
lt8Pmi/GJHUWIojyRc31Vb31hbg8Rd895nsKzFt/os81Xr4OTRIgqrgUzQXH
k4Xk2s7ztl9dnadruWY9t8NEl2Y633WPPQmCIN7PrT/hmlbz+ZLM6fYMqdJ/
9P7kaMa7e1J7vXWuhXJ2Xq+v3ibmREdS0o9Pshc//W3IPGLjPtbOX8Zzck0E
Q9ERrTjPq61OztVWc39yjz0JgiDez60/yZ1z19YMeoNCF2vUJj3iTwRtBuej
1sN5n31p/YT5E/U1G6GfRM7yiI1FRlFs2FhLuQSr+9Jy53Zv8Nyf3GNPgiCI
93PrT+rIkHqN4/6sLdutoxGLscaj/qRNLaGHK+bGyhLL0/ZP0nfnffrj0v4u
BWbyhd/wK31oJxvpNYoNYrMfr1QoFvZZ8/mxQzeX1c/kzf3JPfYkCIJ4P+Vo
Pb5rgFvW9vK/8TUI0djUiHR+jQovl21aP/9+b3vE2y/pr5jPiPIXz3k1SMwz
jPE7NHUI/Ty01Vxb3rID5AsR2dOd3/r9nnvXnsv9gGJEQ362CUzlIrSS27xb
g7q5iftOaRtXBFojsU7XObBMhLNvT4IgiPfRoghNqMdD15814LK2njc5bRnD
0ZgPYG1jHFpQTxc4idT64G2ifuruUTRYQba6Nt5ThgYMP0USxcg/okNcJ3AM
G2Feo2kKhBZL22gzE9eWP53OcBaW5/d057d+v+feteemzOdO1k6Y7/V1E0GW
IIqLVR9cxba0oaLioltwbU3u/z5rMP1s154EQRAfQVuXKKvnnAPF9wJ/bPvV
oMpTpFmBeunBTYL4M7Z7rT2X74O++WO7vTf6elmNqqwgt3vXy+nFc+1JEARB
SJo0RvoJZ3p91nMJgiCIF9Dkm3NIP+65BEEQxGto289p0z/ruQRBEARBEARB
3FLF8MK1/cIt776v0hTsXi/+Jc6c/xQ2bUMQBPHF4Gforh2YW/hwF3VXWpRp
hDjxoNP73HdQo3rLQc4T27wxDIIgiA9ia/yx7k86+HvvO+cT//K0JULXf9M7
PnPblJGL4ENeFiIIgniAtkAcxghsA/7aEVrkT95Ji9yzWP4+OK5YtU2N2HFG
Zx0TBEF8Pm2eImsqhPpldK5Wg6osUXafInZg+/n1O/9M3ssjf7JN6cOwk4fP
41q2TUfhwfiAM6EJgiAegrV3Ew33tkQax4i7T+SbQl8wvv4tQT5+74/8yQYt
MufSneH1Bua2uVIh0E1sDRsJgiCeTlujzDIU3aCirXJk2TDGKFwNRlSjzlIs
Tnk9db5re6/Y21nRLX7Nw25oeJ4WS+elZHBUC4vHJ+/YhbNlm9xVYZJDIQji
o6hShGGCoioRWTqcIESQFMj8C852ylt31i7psMMIYVIuz59s+JMqixB4Js7K
BbYfItkRPy99DcejLs7m7Xm/lnC1rFvcJrBOc72VJ9PkCCwTHsvTqkwQOAY0
faSLIsYXCzopu3YRCdi0Dde7PH9RHTKCIH4aNeIgvp4xXLD+rCLOsWftVGDD
Tarrle/a3/UA/Dxd3x9rpLxfS3hVt5jrd420qp4PX9s4szHCECuuh6Vc/QH4
4cQ4mcnMF9xvF86qbXIH5/E5+gRBEC+jRnWdPGkQGUfo4RsOPGwrFs5TI/ZU
et1irp97soc16vn3OTUbW/m+v/MJEK/syxIajVzL5PpzzfyLMtF34RrHJ3t+
aPGT7ML8p7ahEUkQBPES2hTWSYU33yf0YyjgqifY18ad69Ir2+sLTTXZs7b2
qReDaBGbRyjWaOzR6WyNpVKEP7E2Dt9/j11yF6oe7mrcEARBPBXW9px7XUBO
XWDtdfiP5UlawlWAi2IO695tfNVQfA1S936is8Xn187udH6N/e28pb38Hrtk
9nbYBEEQT6LJPOi6L9o3Pvdz1Pu59hZZuK59+9o4bevuvhm+dqIObXnDxwUv
XTtpkTvnkT+pEBnKdO2Ew/WMNQ/j4cez7MJ1iDXvdSkkCILoqWMLmhEgSUKE
SYrAthGmKWLWZiXl5/Rq93R3306J0DTgJjkyll6HjR342slLaTL4joswTpBE
IWztOFk7kRTwtOl7Is+xS4vUVuFkNDohCOKD4BqzzfjrR2v7fhSt+DRVxdJb
wtfOo7WUj3j87dpJT+nrsOYvoLzXLm3GfOZ4LwBBEATxbhq+VqLASmXj2iSW
WKeuXvnIPEIw2tfLn3la22vVJLCt6Knr5k1iwwwXn0YQBEG8FdZeu3aEqm1R
ZQFru31kL91r0CA2FahuJt4H5c80dRtxtX5HHTtwnjXJ12Tw7BA/dqseQRDE
Z9KUyJIEaV59zHxeUyHPEnGeWZqVd7xT2KIIfcTvdgI10iBARpuECYIgCIIg
CIIgCIIgCIIgCIIgCIIgvgxNVaAouk+5pNUxoi6QxhHCMEZ2IypCEARB/Mo0
ZYrAPOFwOOBwXte/aosAunKAYkbIIxPHowo61oMgCIIYw8982vYnLRLzKK7R
/FLoXx0OO+f0EgRBEL8c+/6En5t7uPoT7l/q5QPbCYIgiO9CWyHxbNiOC8e2
4SXyXb0qdq9nuLtJiYJ9N3UNmm4jzGdtf8v1D03o2gWGHSLxLxv+pEHqGVAV
6U8U1YDlRN172A2KyIVtO3AdFic3Qi/tW/Mzg7v42FHBvgewdPY8J6Z3uAmC
ID6dCpGu4KDY4MdStVxb43CClfJGnJ932LX5FwteGCO0VOknxloafRiHIy5e
hrJI4GjHzfFJ2+TwVBm26uWdZjvzM84Zx4MGMWThZ+aya45nByI6ozmyo8Z8
kHFhceVh9NcTBEEQn0XLdcd5m9yfMcj1onh7LfT4hjmps9t5Ba7/Idrw4Yxb
6YPY347G9bz0/fmuwVdpnTNoueYTv0fptdlbpJYifU73/NSW3w+aL8YkdRYi
iHLSDiQIgvhkCu/cjTcusGwbtqVDVRQozA9kI3+i9huvyt6fDGMCrtXUj1l6
3/EWf3INZ3RP5nT7xFTpP3p/ciS9QIIgiC9Ffm2vlzQG7/Mn1zBGfuAt/oTr
EM7jkrvnSTjkTwiCIL4mdditmx8NRDeTRvf5kyrowuBrMNdwH/cndWTgOB+f
2NJXHY1YnK1L/oQgCOKLIjSiujUSOwF/Rb0pE7hiv9V4/aTzJ8WtP2GOAMaR
/02Fm/NWvkZinRbW7ceUo/X4LqA2h8v/dux1a2tEugzXy6X36NdTev9CEARB
fB3qzIN+km0736N10j2hE1XFNrRj9/cza+PLivkJVY4h2HWak1x1Avm1Kr9W
UXHRLbi2JveFnTWYfjZr+7lGhymvF2EbcKNcXNOWMRztBM0OEYcW1NMFTrd/
ucn8IZ6KBivIaB2eIAjiy9GiLguU1Tt6/W2NivkcufW3Rv2OCam2Lllcds7+
IgiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC+GT+P3U86sg=
    "], {{0, 145}, {404, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{404, 145},
  PlotRange->{{0, 404}, {0, 145}}]], "Text",
 CellChangeTimes->{
  3.774380343729712*^9},ExpressionUUID->"ba9d75b4-bd38-485a-8dc0-\
5835dc284943"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"residualBlock", "[", "net_", "]"}], " ", ":=", " ", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"net", ",", 
       RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], "}"}], 
       "\[Rule]", "2"}], "}"}]}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"invertResidualNetwork", "[", 
     RowBox[{"net_", ",", " ", 
      RowBox[{"iter_:", "10"}]}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"functions", ",", " ", "invcores"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"functions", " ", "=", " ", 
        RowBox[{"NetExtract", "[", 
         RowBox[{"net", ",", " ", 
          RowBox[{"{", 
           RowBox[{"All", ",", " ", "1"}], "}"}]}], "]"}]}], ";", "\n", "\t", 
       RowBox[{"invcores", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"NetGraph", "[", "\n", "\t\t", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#", ",", " ", 
              RowBox[{"ThreadingLayer", "[", "Subtract", "]"}]}], "}"}], ",", 
            "\n", "\t\t", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"NetPort", "[", "\"\<State\>\"", "]"}], " ", "\[Rule]",
                " ", "1"}], ",", " ", 
              RowBox[{
               RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]",
                " ", 
               RowBox[{"NetPort", "[", 
                RowBox[{"2", ",", " ", "1"}], "]"}]}], ",", " ", 
              RowBox[{"1", " ", "\[Rule]", " ", 
               RowBox[{"NetPort", "[", 
                RowBox[{"2", ",", " ", "2"}], "]"}]}]}], "}"}]}], "\n", "\t", 
           "]"}], " ", "&"}], " ", "/@", " ", "functions"}]}], ";", "\n", 
       "\t", 
       RowBox[{"invcores", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"NetFoldOperator", "[", 
           RowBox[{"#", ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<State\>\""}],
              "}"}]}], "]"}], " ", "&"}], " ", "/@", " ", "invcores"}]}], ";",
        "\n", "\t", 
       RowBox[{"invcores", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ReplicateLayer", "[", "iter", "]"}], ",", " ", "#", 
              ",", " ", 
              RowBox[{"SequenceLastLayer", "[", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"1", " ", "\[Rule]", " ", 
               RowBox[{"2", " ", "\[Rule]", " ", "3"}]}], ",", " ", 
              RowBox[{
               RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]",
                " ", 
               RowBox[{"NetPort", "[", 
                RowBox[{"2", ",", " ", "\"\<State\>\""}], "]"}]}]}], "}"}]}], 
           "]"}], " ", "&"}], " ", "/@", " ", "invcores"}]}], ";", "\n", "\t", 
       RowBox[{"NetChain", " ", "@", " ", 
        RowBox[{"Reverse", "[", "invcores", "]"}]}]}]}], "\n", "]"}]}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"Style", "[", 
     RowBox[{"\"\<Net Inversion Sanity Check:\>\"", ",", "\"\<Text\>\""}], 
     "]"}], "]"}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"in", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0.2", ",", " ", 
      RowBox[{"-", "0.3"}]}], "}"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"residualBlock", "[", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", 
           RowBox[{"ElementwiseLayer", "[", "Erf", "]"}]}], "}"}], "]"}], 
        "]"}], ",", " ", "5"}], "]"}], "]"}], ",", " ", 
    RowBox[{"RandomSeeding", "\[Rule]", "5"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"in", " ", "\[Rule]", " ", 
   RowBox[{
    RowBox[{"invertResidualNetwork", "[", 
     RowBox[{"forward", ",", " ", "10"}], "]"}], " ", "@", " ", 
    RowBox[{"forward", " ", "@", " ", "in"}]}]}], "\n"}], "\n", 
 RowBox[{"forward2", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"residualBlock", "[", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"constrainedLinearLayer", "[", 
            RowBox[{"2", ",", "2"}], "]"}], ",", 
           RowBox[{"ElementwiseLayer", "[", "Erf", "]"}]}], "}"}], "]"}], 
        "]"}], ",", " ", "5"}], "]"}], "]"}], ",", " ", 
    RowBox[{"RandomSeeding", "\[Rule]", "5"}]}], "]"}]}], "\n", 
 RowBox[{"in", " ", "\[Rule]", " ", 
  RowBox[{
   RowBox[{"invertResidualNetwork", "[", 
    RowBox[{"forward2", ",", " ", "10"}], "]"}], " ", "@", " ", 
   RowBox[{"forward2", " ", "@", " ", "in"}]}]}]}], "Code",
 CellChangeTimes->{{3.774349677901433*^9, 3.774349786979265*^9}, {
   3.774351062154409*^9, 3.774351062508011*^9}, {3.774351961997271*^9, 
   3.7743519989804983`*^9}, {3.77437554854047*^9, 3.774375591138221*^9}, {
   3.7743756272144737`*^9, 3.774375743771117*^9}, {3.774375841269237*^9, 
   3.774375848889895*^9}, 3.774379493491721*^9, {3.774379531526627*^9, 
   3.774379603183814*^9}, {3.774379637780458*^9, 3.774379759504722*^9}, {
   3.774379797104217*^9, 3.774379814300766*^9}, {3.774379853793215*^9, 
   3.774379857176971*^9}, {3.774379929017819*^9, 3.774380023757389*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"c4cf0a05-773c-4cc8-9340-209ecce0864d"],

Cell[BoxData[
 StyleBox["\<\"Net Inversion Sanity Check:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.774381280868267*^9, 3.774637505663162*^9, 
  3.774639334210168*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"dd555edd-aaef-4cca-804d-8f4943089d63"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393343886914`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"30a983bf-01be-4055-b49c-483fda2f3fc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"0.2`", ",", 
    RowBox[{"-", "0.3`"}]}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"0.2006225436925888`", ",", 
    RowBox[{"-", "0.30039334297180176`"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393347255983`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"001ebb74-d150-4ed0-a520-a9e31a0e7580"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393352936296`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"7d55464a-7f66-464f-a473-455f4a90824b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"0.2`", ",", 
    RowBox[{"-", "0.3`"}]}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"0.20000045001506805`", ",", 
    RowBox[{"-", "0.2999999225139618`"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393358516607`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"401c74d7-456c-4eb8-a43c-20730d58f589"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Experiments", "Section",
 CellChangeTimes->{{3.774338045650655*^9, 
  3.774338046970612*^9}},ExpressionUUID->"92d6ed71-9677-4eed-ac31-\
c4f3287353a8"],

Cell[CellGroupData[{

Cell["Data (\[OpenCurlyDoubleQuote]Two Moons\[CloseCurlyDoubleQuote])", \
"Subsection",
 CellChangeTimes->{{3.774338050051277*^9, 
  3.774338069499556*^9}},ExpressionUUID->"86d87f0c-576d-4b38-991f-\
520c256e40f7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", "5000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noise", "=", "0.1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"k", "=", 
   FractionBox["4", 
    RowBox[{"points", "-", "2"}]]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SeedRandom", "[", "1969", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", "data", "]"}]}], "Code",
 CellChangeTimes->{{3.7728128440597258`*^9, 3.772812970704172*^9}, {
   3.7728130170382147`*^9, 3.7728130549168234`*^9}, {3.7728132996095257`*^9, 
   3.7728135234012156`*^9}, {3.7728136415869465`*^9, 
   3.7728136902498274`*^9}, {3.7728137729584284`*^9, 
   3.7728138803906045`*^9}, {3.77281393058981*^9, 3.7728139395767803`*^9}, {
   3.7728139940481973`*^9, 3.772813996525557*^9}, {3.772814048601939*^9, 
   3.772814071832833*^9}, {3.772814191640459*^9, 3.772814192814328*^9}, {
   3.7728142647333236`*^9, 3.7728142652140713`*^9}, {3.7728143202267427`*^9, 
   3.772814363337674*^9}, {3.7728143986644783`*^9, 3.772814398951719*^9}, {
   3.772814435666066*^9, 3.77281446577341*^9}, {3.7728150202576747`*^9, 
   3.772815041626583*^9}, 3.7729804348532553`*^9, 3.772988363215681*^9, {
   3.774352172380044*^9, 3.774352173776249*^9}, {3.774380220664645*^9, 
   3.774380230581667*^9}, 3.774380980405937*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"71ba0fe4-66fa-4ea3-b5f3-9892d0776806"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwUl3c81f8Xx41oqUSDlvoapVAiknS0C2kYpRQRQiGiVKJQJJWGnVGECFkt
dZIt2XvveS93D/e6fp/fXx7vx/vtfc55ndfzfT53k43rGTsRISGhIGkhof//
zbYM//XTcQ53bjmbN/e4F4N0Bsw97Oaw4bhwbOSDAbRZpTa95fIcHhvLO4eM
TtxD937cYzmHrRFv6nKS+nBFXanc63NzqBemfzeorhNJGcu/HjedQ9XlLt3z
y/qxNPjiqbmTc6hjGyaTr9WL8fZpY3mGczj+RUjI82ob3jrI9HM6OofZN0Sc
/ka24emN+2U3HpxD7T+M3yrdnag8+/Rz8745ND0b4VRX2I+iHW3HQ/bMoSBx
hjpq3YqdBQoD+lpzeOWlq5S4VDfmvXK7w1KfQ13fb6EHRtsw1K1QKkN1DrPU
Tdw1kzvR/sSC9MvKc3iIGSMxu7gDYavpwdWKc1hev8S97FsLysxP6KzeOIcb
Oyu9Oo72ImVw0uPhujnkd9/z2ruqG6t+a0vsliHWLj3dpRlt+O6tfxJZmtCv
caSmzrgd792p3ft+GaHXoNHty5QWIu+1zecWzyE3bctWnYAeVNN0uL50/hxu
cRSM+U014/zluWIlInN48c/13BLDTuwlC956CwQ4c8rtkDS7B79VGWhtnxGg
8g7zb6eMOjEsJbxmiCnAA/tZz0brG9E5YMA+mirA7mKXjskvHXjwstrcSbIA
CwJ1vWKI/XX77kSIjQtQ85beNoe2DmSuKdv+Y0iAfm3m/hHj3VjDXl7h1ifA
f0IlPsfvtmBK00VrpS4BfvAIutZe1IV+n9M4na0CXHtg9b0/U+1o8Yz5IqxR
gLu/nPz0TaQTdzrvVz5aK0Cu5lxjgFc7LjoWWsSvEmAkX1XmWX8XDim0W+SU
CZAzNzHv2qZmLBRWpDn8EeDV67r3ds7WY3iP25P1v4j6PFxIj/Y3oeuPwv8a
vwkwz8BFutKuC49GLvgRlC/AbYHJijb5bbjJ09Rk32cB1keZJG5xbEXu6YRJ
eoYAx5o2ln+WbsRGNZJ/WqoA3x85WpBb1ojpi3evs0oSoDYzPHT0VxsGjvnn
rUgQoEXgz5/26zvwYmmtUVWMAB2SnO7tZTSj1ru1w74RAtxYJf52TLUdl/k6
+Ox6JcDviyYk9efV49iF3JWTzwSo12T5/VlMDRbtnvuU8ESAB5O+a+0Lb8Po
lYZHzB8JsLXMQ9PiaC2608J7Fj8UYILenf1XrZrRqHbAq8iHyF/3U7UwpQYV
MtSW3fIW4P3MKtWVtdUoCLqTouIpwAaJveofpxuwxa4MBtyI+/48opQENWH2
Aam2iGsCrIzW0jgU2oDBcpfcTlwV4CGJ9yXvVBvxMj9tgegVARYbuXs9IeLp
tjMTvloJ8FhKdgbj1D+ULtiv43JBgIXqUaulbrYg+WVovfxZAV4aucj6mFSN
pa7tju1nBLhMXupQ+ocmjDNSFHluLEClS7GGCpE1eEv5RvQhAwGm3rRTlLvc
hKfEf+6cOSxAYc9Uh7v6Tag8uOBv1n4BzrdtqaV8akSR36a2dnoC3OS9fLF0
Uj12xCbw1ugIUOt5EjVxqhHzvEmv6jQFhE5T51P+tOBT890qj3YIcLQ8dnf/
70a01wgo0VUR4LiG+WHlihbcJ1lnSd1M6HEicLJgeRPKkNcyP8gT/faV9xhV
qUNqpUOopZwA72Vn5Lk21mLlh1xFqbUCFLyl8p4eq8D3/nM/y1cJsOb3Jfn1
XY1419rQ3EdKgGmrHCPG40rRTC9iaudSASYm53VscK5B1TWDj8YWClByKMhW
y7QO57PV5OLEiPoF1rFO9vXY23jni4mwAN2qwh2fr6zCr9llJxfOzqJ+mGTN
58QyDAuVGvvFmUWdofvaacvK0Mnpkt9Nxiy2qcXkOwhX46GjH2W2UmaRF6QX
ptlXj+sUWNm9k7OoIqJ+2+FlHTKEDhx/MzqLgZT4jY3hZVjTHdpvMDiLfzsP
+FQqIX743u4t1DuLsm8zexmJDegXoShV0DGLDcecVhy4WocWN298dG6ZRXVv
lT4apQ7VT/88sKlhFsNyw93inhThYrWFnS3/ZnH/UpN5CZ5/cXCRmcfTylk0
PqUkvFWlCH+OJiw+UDqLqx1aFxq5l+ObEtJ79u9ZXPyue6GIazm6Ju7e+6lw
Fm/X0kL/RtXj0fsBTTZfZ1HcwLt451A1brxQd00mbxb1nvgUNk7UI1d7nVhN
1iy+6C+Za/auw4YVV9/6p8+iyflR7wDRQsyg5u7SSZlFw+jnEdahvzCgZu7f
1LtZrBU6/0LtbwVaphvaJ8UR+i28bGE3hKgVFCGwiCbih3ArktrLcKndYPiy
8FnctNTi1bfpYhzbv317adgsRk/tdjdfXYlFG+6W3wmdRXMrS131ykKM5pVZ
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
lQa1ojJ8dT7BpIqYX6PEr8C5qDKUaM0WO7yGAkEcWy9+dC/Di1nk6f2fKfDf
gvOW01fKkDR1M9gpmgKSHW2dVKUyTNsjVeO9TAFSvvzHaMEy9K0vfttKnC8z
Nsj03GIpejjNxQ2kUMDtNUV8ubEUK1O513gQPKflaDAc/6MUR0s4tqToUoDT
JCX24ptSLF9POVqxsggdsMlyrXUpPt5ZwRosTIHw3fdkfmiXooyOg2tL+yJc
566bviJViq3OTnJvHRdhH3XfD3bWUkxhNwxfukmGuW5f+4zBEmw5ndCYVUyB
vKLJw/8VlKBvvNUnShcFPBNO07gjSvA8l38kicgPDf/47Fy3EjwZPubf4kAG
Xuf1Dy2NS1DV2uJwzF0KtFyzUBFQKEH9BV2c7lqEaI3S1UK+Elz4dsF2tykZ
zPfuKrq7UIyXPV5/s/OnwOHNXs+21RdjWq5lCV8sBWiMwVMVScXoi7zhYdyE
f/TDhgc+xfh5VNllyYTwj7Ko6h2WxVj8fJamx7cIOsl/39RpFuOJbgpZiZcM
QkHXzj+UKMYIhpWakjHhH26/N+9ZU4yfHN5mN/AsQuTNba0tfUVIDTspqbtM
Bhttt5Anv4vwTmTlft+YRZCV7bx8IKwIB0U1z7T8o8CKgJJIt3MRvvyvnjKs
SPjH8vu+lxeLcKrjJf1MDRn8hqmfjhwuwmNz28ekAgj/qDK8NbipCAV8ir5v
30AG/pQ0Sb/ZQhQvUj9LdiHDUMhm0rGaQqRui51UkyRD7GP7b+MJhTjwO7fo
9Cciz8wbbIJeEr83Ff9l7E74h66s7EnzQsx4EzTzyZkCTDm/hRm1QnR25Waj
dFKgfOtMWph4ITLbT7dIFy0A37/3U2+WEP13s0k0a5PhR62h3XgmYsZfi/9a
t1NAPnwzAeWIUYfFrnC8psBvywbXsP2I3qvPjURjF8BIwe8vhVSA5ydj/LmJ
8/Sy6HqdjSlAb3178r47ZHBt3MAed70AXc7Yf9Uk/Hk1svz1P+EC7AkN8ZJ9
QIYwm+e8Jm35+Gp9oETrwUXYcUz9fVpAPo5mzduERyxC3Po12zaezUejcZGC
bJ8FUG/Nj7Jgz8dPpY5dZxcpUBn9aBcW5yF62HRVd1DAzO5YwlaPPNTaddrf
Yj0FplQY+x2P5SFZK20i+PYi2HNmptZQf2Op3NXupSUybOx0VJRK+Y3IItBs
X7AA774e+u1h8xu32VwPun2IDAfuz0Hn7t8o2T7LfM5NhoyTyaVyw7l4dNPo
dxvCD87zWOu8jsxFjy2GtTlTFGjv2VM/ejkXr5ATnFdKF+Dat7ELqgK5ePyP
t1HhJwownGM6Qht+Yf+l5yxvZyjgofnfNbLvL1zi1Vz/wGIBhPnEh85o/UI9
DseWbW/J8Hmg1yJ27S98eofB03ByAXZ/D5/6m5eDsd23296NkaHo4WU7Y9cc
/Kb+bjN1yyKcPr2FmnIkB03seh3zJMgwItjqyjmfjcNxBTyviX22Ggn8a5aY
ja2vwrtvhFFgXep5r3yLbExauXWycPMivPbgZhfamY1y0n32IY5k4Dtb89q+
Nwv3erGeDsilwHdhH97q0CwMKt/8qHkrBY6QtN7vMszC6YV1VWGXKNCQwbbt
MU8Wrrc0zt/5lAKXvIqj2qsyMWYs8mJBCRl6zz/ZdehFJm7hEFU38SaDy3bV
BJ+TmUgZOtlSTybD36nl/SPLGei0XJ58LpACH3J+papkZ2DYe02u0rsLIP7S
RTHEMQNR9WeMV/085Boq/J4/kIG75kbz8ojrT+4kND6ZjnuvzheFGZChYi6l
9EtsOqaMkGOPuS7Arbx7Ois30rHGlP+rHnH/CZ/99ZdE0vHd/L7gc84L8Nx4
6sLP9jRUElIqvT01D5xSCR0b3qWhYAD7d7NsCgRSLK7d0kvDj3om20+eosD+
wl1Dvzekoe4jk1NZNQuQ5jdkIViaii3KkV963Rbg3NVPU/c8U1Flq8IEz6YF
aJU2tas8norVd6ZvP0uaB3v6NupOegrhtwyDZD0y0Es6XR+lpqDeh0jukpIF
cA8M+dtqm4Jb3Nf6GxLvu/XGRS9Z6RTssc19FnOVAiomkjy8FT+xRUwxxXUt
Ge5TPwmVnPiJvuYrf9x4KfDEX2Snc8YP1KRoLGcfWgC/vaF7Zfb9wOj0oo5w
ezKUlPHJ90Z/xz1f5iVNyAvQePPtCf+t39HC9OEmG9Z5YF/h0Fb3T8ZNa4aT
HupQQCD0hT5tXTIm7GnWzLQhg+7htVcS3JNQ9i2D/0bgAhjXuZtdXUxEpm2t
BtN4AczvMG15rBMxSacz0WJgAT6yPnAuGvyGhiyl/n/XLkBC1LznA+NvOD+X
SfpD/H8Dx2x89tQnYOBeTvmaBjJMt46/69ZMwNjfrj8rp8nAtLsV4fc7Hsks
jrOW3+fhIFf/15OH47GTN+mIpM88qMSZ/FxMiMOv/67GH3KYA0e1tpw48Ti0
3T36lTOVDJ69+sUmIV8xUXh76nm+BXjjUluzkfsriizMf/UQW4ASvtNt+CwW
1aZGvWZJZGj8XtLvuBSDLgzPy8d9F2C9DkxIOcSg8rrKyfh988A/mkvuJH3B
nH2lHDOdc3DGU3H59fUvaPZubPAvJxmMt6WxQVs06h9610gTJPIs8wAPRTea
6OdZgdqv5iFc/5vQ1+LPWMiZ9dL47xzET0vuvHzsMx41nrsX4E6GPG61S1tu
fsLX/4nHxcSToU3j6B13vSjssmn3Zz6bhXm3g4+Gj0fiZ2owS2/VPFxL2f32
tHQE/utgFPZJzYPz+PboH4IfcXD9Em+B+QKMigpmCLCGY6Zx7fuTJ2fh74WN
FQ8XPqBYaaQmCC6AjQ9r92BfKNoWHB9s+TQLz3FpRqsmBENeCGooKpEhikb+
l5zzHl1LN3NRbpGBa/8kH39cMPIkho8Vcc2D1K1BKbegIKz9TzhTRnsO3n3o
ODrw5B1qNTjJWUbNQnJ9ve6pe4EYEKDE88iEDOVs5deTrgZgY4s/N3ybh9vO
D0ck3r1F9xMc3H9DFiB8+A7HvO0b3PfhpjQvdRaczhsf/K3ti0+Tx1aYAbOQ
8PvUpVcS3mgemD/nR/zfz6TlHxn+fYHJfhrdGi4LkBUsES3e+QxDgj+9C5iY
gak1myum057i7ebGhwK98+DTs9plJ+KJagb6loIfiHmm90htaHqID3f8U61m
WYCvfjkOn186o0n4NTafyFnYePt9/lEVR2ypUs/uYJuDcfdRvi8jNrjX//K2
GvcFuHAoKrH5nBn2ssVuOjo2A6rFP5+vf3AJ+WfP7jLaSIYLsW8ao2TksH2E
Y2wvcf2Xqeaj9wp0YMPpPiG+HwvwkIc+07bhOnjO6u2IkFwAO6Oi68fDLEHl
4I/o9MAZaGp+NsImZA/TKfxvLlYsgMifuFDb/x5Aov3wtRLi/Jk7qnVbk1zB
RXGw3p/Y5zXas/+U6e4gops14SIyC2eVNnQbfH4Cqn2PGuwnibypEc54UeYF
JUqxN1LbZ0H1+r63v6aew5n1uefnHs8BF0XlzuymV8D3cdmDn20WDr04p75T
wQe8NqX3lRH59nfrTdFLV17DoyzLvbfj5kAi2YHu7ekHJ2Ml2m7kEfOEZ415
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
fd+NA7NLyPCOTK/R4M+UGD5P87ZuCb3cxSs1OfaFTJZLfo7ZUkKj5znkqph+
ph+f8w/V7CshI5lTZ2arF9CDHa8GDj1eQulb5iJsQB7NqT3ur3W5hKa5Ld9K
Lqn09ejq1Xvvi/7d9d7tD1eS6dCfUbXXXpfQnt9KE0J3cEjao971XXQJPegL
SbhgzCG/0VEqFZklFNu+x/z6gyxa/tI9QbqshFbz8+vrvqZQ+eyd5nNaSygv
dO3xoNupdOLjtL+7/pTQvCPrrk0VrYMj1/147CbHpQ+6a9f1u5BNwYWZS4In
cqnKY7AmKX8hw30+pUVzuNRyyXzy+vdJ1Nx+2LnfSi6tvK+iOH5+Lrm5LBk7
fRuXjA02uk3an0QqMkOitlly6exUr6S0m3kU61m+/ewJLj3KlkmQm5FOu1SC
hf5XuKS3yneE/WUOfQs+ey/3AZeik3LD9cfk0m2djfN+vuHSIu3fcwK4uTQ7
XTlPNZZL1yPuUP8nCZSxrcN+QxaXZnepfVkzN54O8CDnVM6l01fG/aqem0Z9
NreDn7dxabhxxsB7TSn09Mfe9Z//cqn1P5Xfy2XyaOmVuS3dw0ppnNqU4E12
UVSoIOExQUX0c3flqJEZSXT8GWfa2nmlpGq4f+qGczk0dMbL9KOrSok37U7G
qmkpFBR97ICPUSkVayu8zW/6QAar9aRSROeKkVuCMyx4n6kmb+SrtpOldOnV
72JDw1y6uKdu5ZirpTTFPDtA50kajWt5z9d9WEpmnz0930nGUYzTlQuHA0vp
m+ZKozWy2bRjwI6JnnGldDAocM/Q3ZHUeXtq/Kds0eu9eHSwpzuJbk34btZQ
UUo3b28+oXgplaYFZvwa3iE6R30eGhu3JYnStB766PQrI5Wbesv0vgbS3mTr
xZbyZfRrT7j05eGgv5t0Sv6bXEb7q09cPcwNpsflsk5R88soy3mJxvytkbTQ
umwUX3TuOao5dUSbfRYV9ARFyhqX0fJW8+93u6LI1vXMtgUHy+j4X7tdKrGh
NHjYBsHuU2WkYJRkef95AgU+mnDH/VoZLfT+YHbvWTKtmtY+O9ynjBTDuI56
ZunEj4zPKQ0qowNPJM0Wm6WSy4pbtgM+ic4Va7lXFEJjSDHHfMisnDJ6UD/l
7rPAcIowmRO0o6qM+kcPy7plk0KbG/oZXOwsoxsWfVtN7D9Qx7G8xsD+5TRV
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
YBsl++/5CCgbTiWtfPI/d24WZ2k6fqg4y9n28Km4Y+lRY+8ErD7Er+j/l08v
DLkOZ/wz4RmyLvi+dDVR7HeBeV8u+MLwM5rDqul9wrRx6zgczFkybn3CmGpy
uWDXM+JMDs5fdFXaPkn0+7JLbNaP5yA7vbm5aVo1Va9ImuWyLwNKcttiz82t
ptxRqjKp07JwyCju2gidatq966CtZjMHUT6qu96srKYZXdmuYXfSIMm/Pm2Z
YTUlzuuMqi8uxLapwm9526op8pRz1q/SPPjamqUfMKsmoYA3wkuQj/Z3Kfd/
WVbTqaduY37xMrH854wDt22r6cuU+Wc4m3Phoeu1UP1kNVkP3HqXx/8C7pU/
A2LPVdOerS/PJdTmQeOLVcFG92qa+lVj1/k5BTgxIudlza1qGmPWvNZGLw8p
u7SOnfKuJuVtwshEh2LIP3+6cuiLatE+23n2nn4B9tZLK/gGiP59zt/vWaKf
g2fY87UiqsmuSelbg2MBfjsWh2XFVlPd4NFP3rhmwjCGLuxNrqa+rQuc9bM4
8O57vaknq5pGqcxOMOouQcPq4RM9CqrJ4uOPKTUz8zH/xql25Ypq8l/zO/ML
fYYbh/fpXZ3o9c23Ttdf8xmcsev+02+vJufeifvmny+Bsnm4WUVvNf15xeM1
mJfAzk9xhmNfNY19/+26xUQOYlsu/pKWqaFW7ZPNr/SLMGhe8+dHw2vocWVG
g2tXPoxPbfWZo1hDQ0IiRxrc5sIvPtY6VaWGfObOtRbUFEA4QHWxyfQamtT4
OXzmHC5WGF6X6ZhXQyqCi29ODsrH7TvdxW5Lasj6S5y0vOjzVRSbvh6rV0N3
Nsy8f7utADOUU04Gr6+hZ8eSJV0rSuBiOWPNyu01NLsy3lq5KB8ZgZ6jinfX
0PzexDmuWQUY0/W79siBGuqfM/BHz+ACWGpbRfazF72f0Y91747Kx7uzX9y8
nGpIvmC/ebmwDH3JC7dNv1BDRat8E6+c42Cj7NPJuFpDgvCTm7cOLsXTzdKC
bXdqqPftuEFfx3DRfN8usfFhDX2sP+gWKyjE4oqi22d9a+hs/5CRlMbFFVXa
qxBUQ/nTbc6cCitEofXr2a/f1VCu7V3fVcUcqIUN61vysYYGSnCsNllz4NDr
lJObUkMT/7sbbKNSiYSlvCdWX2pI+6mmgteuYgx107f9WVhDb94a7phQnw+z
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.9633157200640134`, 
   1.9633157200640128`}, {-1.5590483409923408`, 1.556711236171462}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.774381285644629*^9, 3.7746375071922617`*^9, 
  3.7746393361388054`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"bc221557-43fd-4c3e-a3c0-78459e5962d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data normalization", "Subsubsection",
 CellChangeTimes->{{3.7743380789239483`*^9, 3.77433808077223*^9}, {
  3.774338132438305*^9, 3.7743381351419907`*^9}, {3.774349493304345*^9, 
  3.774349498728168*^9}},ExpressionUUID->"5f0dd3ab-14ab-4071-b980-\
0bb0983a6336"],

Cell["\<\
The data is already normalized. Let\[CloseCurlyQuote]s ignore this step for \
now.\
\>", "Text",
 CellChangeTimes->{{3.774349501080091*^9, 3.7743495051364813`*^9}, {
  3.7743811943856373`*^9, 
  3.774381200673689*^9}},ExpressionUUID->"e219469c-0ed6-4ae3-bfeb-\
2ec6fdc8be67"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Mean", "[", "data", "]"}], "\n", 
 RowBox[{"StandardDeviation", "[", "data", "]"}]}], "Input",
 CellChangeTimes->{{3.774338096780738*^9, 3.774338118709963*^9}, {
  3.774351717658801*^9, 3.7743517196223707`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"8b4274e7-9db0-431e-846b-7b33475fa257"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "6.31494856406789`*^-17"}], ",", 
   RowBox[{"-", "3.219202682203104`*^-16"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7743812856968718`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"db3a0abb-5006-47a4-8515-7b0bfcf4bddf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9999999999999992`", ",", "0.9999999999999996`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.77438128570959*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"9e462428-58c3-4344-9423-aa8203c18cff"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train", "Subsection",
 CellChangeTimes->{{3.7743492845600557`*^9, 
  3.774349286608059*^9}},ExpressionUUID->"dd151ed5-aed2-4143-8d1b-\
b951cc324e56"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"residualBlock", "[", 
      RowBox[{"NetChain", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", " ", 
         RowBox[{"ElementwiseLayer", "[", 
          RowBox[{
           RowBox[{"0.5", "*", 
            RowBox[{"Tanh", "[", "#", "]"}]}], "&"}], "]"}]}], "}"}], "]"}], 
      "]"}], ",", " ", "5"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"traininnet", " ", "=", " ", 
   RowBox[{"iResNetTrainingNet", "[", "forward", "]"}]}], "\n"}], "\n", 
 RowBox[{"trainingresult", " ", "=", " ", 
  RowBox[{"NetTrain", "[", "\n", "\t", 
   RowBox[{"traininnet", ",", "\n", "\t", 
    RowBox[{"<|", 
     RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", "data"}], "|>"}], ",", 
    "\n", "\t", "All", ",", "\n", "\t", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", "\n", "\t", 
    RowBox[{"LearningRateMultipliers", " ", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<addEpsilon\>\""}], "}"}], 
       "\[Rule]", "None"}], "}"}]}], ",", "\n", "\t", 
    RowBox[{"Method", " ", "->", " ", 
     RowBox[{"{", "\"\<ADAM\>\"", 
      RowBox[{"(*", 
       RowBox[{",", " ", 
        RowBox[{"\"\<L2Regularization\>\"", " ", "->", " ", "0.01"}]}], 
       "*)"}], "}"}]}], ",", "\n", "\t", 
    RowBox[{"TrainingStoppingCriterion", " ", "->", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Criterion\>\"", "\[Rule]", "\"\<Loss\>\""}], ",", " ", 
       RowBox[{"\"\<Patience\>\"", "\[Rule]", "20"}]}], "|>"}]}], ",", " ", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "1*^10"}], ",", "\n", "\t", 
    RowBox[{"RandomSeeding", " ", "\[Rule]", " ", "51"}]}], "\n", 
   "]"}]}], "\n", 
 RowBox[{"trainednet", " ", "=", " ", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"trainingresult", "[", "\"\<TrainedNet\>\"", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Function\>\""}], "}"}]}], 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.7743381783489723`*^9, 3.774338273770405*^9}, 
   3.774338416662676*^9, {3.774338461097628*^9, 3.774338461683996*^9}, {
   3.774338497503111*^9, 3.7743385754412603`*^9}, {3.774349226181944*^9, 
   3.774349260536641*^9}, {3.774350149928953*^9, 3.774350168078326*^9}, {
   3.774350279565351*^9, 3.774350300927143*^9}, {3.7743510994314938`*^9, 
   3.774351112067089*^9}, {3.774351908794313*^9, 3.774351913263958*^9}, {
   3.774351989644989*^9, 3.774352005768754*^9}, {3.774352471336397*^9, 
   3.77435248102643*^9}, {3.774352557727528*^9, 3.774352570067833*^9}, {
   3.774352653975896*^9, 3.774352711060758*^9}, {3.774374173921913*^9, 
   3.774374174447527*^9}, {3.774374957526907*^9, 3.774374960149029*^9}, {
   3.774375005374712*^9, 3.7743750145655947`*^9}, 3.774375096290477*^9, 
   3.774375147705971*^9, {3.774375766046605*^9, 3.774375771858485*^9}, 
   3.7743760782423353`*^9, {3.7743762003220167`*^9, 3.774376200492917*^9}, 
   3.774380047571686*^9, {3.774380180930254*^9, 3.7743801895113077`*^9}, {
   3.7743802411623983`*^9, 3.774380243996821*^9}, {3.774380480399529*^9, 
   3.774380480656146*^9}, {3.774380535038332*^9, 3.774380536049779*^9}, {
   3.77438058751602*^9, 3.774380620929495*^9}, {3.774380821513731*^9, 
   3.774380843026141*^9}, {3.7743809713976088`*^9, 3.774380971971897*^9}, {
   3.7743814235148373`*^9, 3.774381504649098*^9}, 3.774381626531301*^9, 
   3.7743818576737747`*^9, {3.774381906474249*^9, 3.774381909455935*^9}, {
   3.774382097583898*^9, 3.7743820977459803`*^9}, {3.774382253811674*^9, 
   3.7743822836280193`*^9}, {3.7743823435391493`*^9, 3.7743823436448383`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"6476e1ed-938d-455a-936f-d27f229fcb61"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.774639387280321*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"1e76daec-b277-4a2e-bb95-2140403b843e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.5999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.5999999999999999}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.9999999999999998}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000001, -1.}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -0.9999999999999999}], 
                    Offset[{12, 12}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[
                    0.4]], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LogDet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["LogDet", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[10]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[CenterDot]\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], "-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Shallow[Subtract[0.5 #, #2]& , {4, 3}], 
                    "Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Jacobian\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LogDet\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"norm\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"subtract\"", TraditionalForm], 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, \
-0.5999999999999998}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}, \
{-2., 1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {276., 102.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28.99999999999999, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "LogDet"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, 
                    "$ArrayDimensions" -> {2, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["4/1/1/Weights"], 
                    "Biases" -> NetSharedArray["4/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["5/1/1/Weights"], 
                    "Biases" -> NetSharedArray["5/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["4/1/1/Weights"], 
                    "Biases" -> NetSharedArray["4/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["5/1/1/Weights"], 
                    "Biases" -> NetSharedArray["5/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], "norm" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "LogDet" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Abs, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Log, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}], "subtract" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "2/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "3/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "4/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "5/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "5/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.7746393876778035`*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"83328df6-dd97-42c7-a70f-09723361f01c"],

Cell[BoxData[
 FrameBox[GridBox[{
    {
     ItemBox[
      FrameBox[
       StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
        StripOnInput->False,
        FontSize->12],
       FrameMargins->{{10, 5}, {-4, 2}},
       FrameStyle->None,
       StripOnInput->False],
      Alignment->{Left, Bottom},
      Background->RGBColor[0.96, 0.96, 0.96],
      Frame->{{False, False}, {True, False}},
      FrameStyle->Opacity[0.1],
      ItemSize->{Automatic, 1},
      StripOnInput->False]},
    {
     ItemBox[
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"summary\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batches:\"", "19341"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"rounds:\"", "307"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"time:\"", "\"26s\""}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"examples/s:\"", "47931"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"data\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"training examples:\"", "4032"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"validation examples:\"", "1024"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"processed examples:\"", "1237824"},
                "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"skipped examples:\"", "0"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"method\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"ADAM\"", "\"optimizer\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batch size\"", "64"}, 
               "RowWithSeparators"],"\"CPU\""},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"round\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"-7.89\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], -0.07890847613822506, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            
            TemplateBox[{
             TemplateBox[{5}, "Spacer1"],StyleBox["\"validation\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"-4.81\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], -0.04814180309040239, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            ItemBox[GridBox[{
               {"", 
                ItemBox["\<\"rounds\"\>",
                 DefaultBaseStyle->"LabeledLabel"]},
               {
                RotationBox[
                 ItemBox["\<\"loss\"\>",
                  DefaultBaseStyle->"LabeledLabel"],
                 BoxRotation->1.5708], 
                GraphicsBox[
                 {AbsoluteThickness[1.25], {
                   {Hue[0.083, 1., 1.], LineBox[CompressedData["
1:eJw1WAlYjVncjy8m4bMMIxXTpImsDVHWc4okWpVUSnVbbnv33hhZx1pGyZYs
Y0kqVIpum5b7vymyt2pRVKgQkn3E+P7He74ez9Pzuvd9z3/5bW+/icKW+/ZV
UVGZ3EdFhf3+/5+Z1jUD5pS/I/m9sdFHQt6Q+RUzYgY39vBrFdry6VvxRIs3
JG69k713khpNnKCecvjzK/75UDrC/MA4zcYuklIgC/22ewQ1HLRD03/MC/59
DVpj9CrpcM4zst1kjtFN0Kbu9R/GLjncye/XoQHHr5dYpXWQaU0qm5du1KWn
Onvkek/b+fP0qFQ7r1c0vp2MOf7U41K8Ps0LWbXFRvyUP38CzZr8T+W01Cdk
oMsNs1+yJtLjKQZtKr2P+XmTqeXBJF0r38fk31Hpv2+6O5Wmpi6NlLa38fMN
qdr2rWEJG9vImi4LVemaP+iKFYcNE3XaeD3TqXzywKJR91vJi1tXPozbPoN+
VXRrah9o5fUZ4TxEUQHzW4kodVJn3b6Z2E+K9q6OFl7vLOx/cGbgoRbS8PdJ
/GdMze0dzzaatfD6TfD8Vi31T4+IXcCQW/PSZuP597e3pj/i/cyhm1vqlXvE
j8j1JdsKu/Pn0sm3q+90j3nE+5tHTWLPPhPVPCQLJrxLT7w+H+exzKN090Pe
7wKqopKg/nzuQ5L9k++pFbWEusQnm5zsaub9UzqoVFJz6EgziQ/HAfRQ6uuS
W/jEopnPwxT36XA0rbeJYLHKh59McZ5x5ZDRxOdjhv28nxktaiKDHdxn5/1n
Rt/NO+1mpdnE57WQxvsarDWvfUBYN/v7LaKRXv7RZO8DPr9FtNTwZeD8JQ/I
zukVEwMHmWO9b2Ly+j3g8zTH5+2ra1c2EqK7++zCnxdTVVP6umNbI5/vYqw3
RcNtUSPpHWaqPUbTgpoOfVpar9rI522BeHreP+VGA8nt8yXuo84S3E/ukfiY
Bj7/JbjPsKXHljcQWU/W4MrxljSj68uCLu0Gvg9L7L8043ZbPZnSFhR5YepS
rM+wZnNqPd/PUrrWfeXFNxH15Hml3vftM5fRlADNDcbm9Xxfy+hBPYNXHsPq
CU5vnds8K1rxzu2q9HEd358Ve36hr7yOeF6KfzNzoTXd0rIubfyOOr5Pa5y3
T8hCpzqilWAbMGSpDc7P+avexDq+Xxs6YY8uTe+9T+r3qT1+ZmfL+p+iU3Gf
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
PnxinGdkw/8BQFs6tg==
                    "]]}, {}}, {
                   {Hue[0.59, 0.7, 0.75], LineBox[CompressedData["
1:eJxF1glYjdkbAPBrj0IRahIp+1oRIU7RJqRJKGMpk6XQJlMMuVONogVJInEr
bapxq3vrdtFbtCBMJS0Kt0RlLDGNaczI/7z3nOf5ezyP5+d89/vO8i5n0g5v
x539BQLB7H4CAf77/z/uZe8efSKyf6Mjzu/vJgJBe7zTyI/cAnOBQOThb/6B
xB7a+P2PV1WoZbkTOt7ycXXqI+un9b0haXI/r6/hmtSu9jLfLv68FvVx9akL
Okmw6ZIF92A8dZbRT6Yd/Pd61FOPFXi/JvOaBUftftanbm3Wl7/i75tM7bhq
q+oronuxfbs4bir1vuJDLu38/dOpP420E78kqi53V4zNm0kd/8xd5yX/3mxq
yxDthDbyz7jsKUcezqXOs0uc18a/b0jdN2VxXSvx/8NmoK+/EbWzbUtwK5+P
MXVQrwFpJW/uF/1lEDyf+lE/bUErn98Cc4HQo834uoLsuDaro/6UCR1fbH1y
j4LPdyH1gpyupQrSeCKR/l1E/VknV0PB52+K+/V6bd0L4uAx8r5Z1mLq5Gbn
4y/4epZQG0LvkhekwvaXGx9kS6k1pye2P+frM6O2D74d/5wsn/5ndnLFMupw
/10rn/P1Lqf2UhnT84xIhuy8vKGO4PqTtETP+PrNqQcH21o9I3EH6AZ8REtS
/T+18P2woA52H5HeQuhkS579jT6+5drWFr4/K3D+6Z4aLWT4+q2LC/vQ6ndD
y5v5fq2kzn61/VgzwdWcHmRJbRZ1YlEz3z90TN+Sj09JqPHvMz3VrKj9A1dk
P+X7iZYEjfF+Soh+eMrK0db4fHfBrKd8f9HJ1hofm8i/Ghbjdb+zoW4fdSS3
ie832vVG5aEmUtDvS+xnPVvqxrVxy5r4/qP9zML6Gonfx7zh1dNWUa/pnVjV
yM8DPVnoc7aRzGndezxzrh21eUHq1kZ+PmhJusHcRtJVPflbsMlq6ksDtL42
8PNCfzFYXt5A6O4FbDFbg79vU1xo4OeHdoxP2ddAXMVx3SYr11K3BZeaNfDz
RBs/SBrRQHRE6zxG2tlTVzR/eV3PzxctnuUirScNp1TaOh3WUQvfekXW8/NG
B9/x2FFP7oHrnNZZDtTv1MWT6/n5o03PF7Y/IemLbnWtvY7u8X1f9oTHA7p6
942zT8iv17XT5MbfU78NOLH/CY8PtNrV4eQJ2THtpx3TCtA3Gw3GPOHxgtYk
U7po4F2pnRC72BHP12PYrToeP2hJctWZOjJhHP2fW+jTJdY/1vF4Qr9V8Z5f
R/5Thut66gdfk/rX8fhCx/585dFj0jS4c/3TO+i7GlLRYx5vTtQOZdb7H5PC
IEt1Gxu0VsOnpY95/KEvx5Khj8m5z6IH+ffRM3sv1NbyeNyAthEk1ZID9Gk9
e7S7wYxdtTw+0WYDwubXEofXLlZRNeh99zS/1PB43UgdaOB/u4bM3UYj0Am9
oNHwZA2PX/Qbj93WNUStflTxrkZ0r1PL4Boez5swv/WcoJq8Wet9+PEP6OJJ
FV7VPL7RDxxTNatJZXnVQvMX6Ngu152/83h3pvY8NDDhEUldRgNqB7X54dWO
8oc8/nG8oCL29wckRBp6Xfs1WjOvrqOK54OLucAh3DXs633ihgngQS38VUdb
6z7PDzRRaC28R5bjB9664P4e/WZ/l+fLZjo+2vaJTyUZjwv22Yz16Jz0fAXP
H7STz+3SckJnK3rwJ1pr2pD3ZTyffqBOEw98eoc0qtGACKAWdvWmPLzN8wvH
x6m7LLhNcPppX3A8pGZ2dCnPty3UeX57+5WSs/+p1o8Koi6JCrLaU8Lzj1pg
e9MyGoiv/56YY/22Ug+LGTC4mOcj2vlrPNwk696W2b8NRYsC1l64wfMT7ei/
8oSczHafpOqiso1aT6V/nZznK3pu6OvNMjKs5WhleQR62+c4k0Kev+jppLO9
gNDoDTEeuZ16zwSptpTns9JmrVekpIIe75UYtM/G4iESnt/oi9rDdfNJbdKq
vkGqrtQ5I2Ya5/F8R7uH9JXkklK6HTfXoIV6g3rFPP/RjXmzE8QE09svGi0e
OueWmNcDtEOxnY6Y0I9pzahGKy5ZXfuN1we0eco3aTaJOtM/4IWGG7q0JTGL
1wv0nkTvudfIkYeGT86tR7tuV8zO5PUDXV1hq55B9g7dPn/NOXSgnvR1Gq8n
aKeWWwdTyWYr+oUGtLOupctVXl/QKv0XhqSQVRgOWjuwflY5OybzeoM29Qvv
ExFTuhzvzei7kojaK7z+oM3afCwSyVQ8kEtoRfkbiwRej9B7An7qjSdjTKyH
tTxDx9s3XY7j9QmtVzDUMpYMxACa+CPWr5zO62d4vUK/3WDpGUkwWmzd0Aq/
d0ZhvH6hS9IiRSGkrZMGfDJaWH9jQhCvZ2hBT1lcAKmh6SBtV9or57+9vL65
o/2lFttICT3uvVOVFkbPsAJW79DCmJsGbnD90g9Ef49y/MymJB9g9U85vnmv
JACwmjRmKsetd4QIgdVDdIn35ZhfIFKTRswfaEVtdW0IsPq4E58Pz70ZDj9j
AZyjdJVwSDSweokWWVvqR4MnvsALHdgXJ48BVj/RwsoNKudAWQ7EaMXfKg/O
AaunyudDZheeB1vc4E/K569GNV8AVl934fOnTJbFwyI88AXo7tpKzQRg9RYt
fPWf9CJMxQA8qPQc/eREYPVX+XuT5KwrgMuLKEQLZlSLRcDqMdpVyzYgCQb0
zHhn8Q/aYVyMRjKw+rwb473v9plk+DTPeXXvErR8sO6IFGD1WjkuqXqUAlgO
fzuCFoqsTl4FVr/RPt/uqKZCdTrN6GJ05MWIkFRg9RxdbT83Kg3gZdtOHcEe
asPAk8/TgNV3tKtpVGk6/DZRo6zGAi3c1G2VAazeo30qv1RmQCI9/vAQdIlz
0cVMYPUfrUX6bK4BjVbh8nK0Xvom3Sxg/QBtbtpTmgWHHyc87xnsody/dKNs
YP0BrQjNlGeDsh3YokUa/0zPAdYvlONqL+2yge7ORbeTaMGIWTZiYP1D+T7b
wy+vg00YzcAHaL3Y08tygfUTtLlZ0sJcWHjHadOj4Z6Yj4KX0bnA+gta8aH1
Ti5MoekRug5dUuK3KBdYv0GbG9ub5YHm0tzRS8+gfaLGNuQC6z/ojS/8/POA
Vi/fj7VowbMpwnxg/Qgt/DT7cg7gctM191Krf5/WmQusP6G7ow5q54Hi/dK5
2zaiq33FL/KA9Su0Xp5z/3yg2RKpGY82jDrinA+sfyl/bxd0KR+Kd8W/ud+E
Fm4Lq8sH1s/QrkuM7PMhh5aPX3T24fPrtQQSYP0NLTxpNV0Cl573pC3aiq62
GbZCAqzfoU/n6gZKIOI7g0HvL6PVaw9FSID1P7QozE0sAWU4KNCKu2PvS4D1
w/043w+qnRKgKt2sj9bz36UmBdYf0eqh1xZKYdOjnIka7mixWcR4KbB+iTZf
3eUmBWtsgKlowd/nD0uB9U+06yZ1kRSwvB7tUH5vS7RMCqyfeuF6w6zvSWEy
TngG2mea7jMpsP6KPu3dYVQAo3EDPdEOObedC4D1W7RA97NXAfTHA81Gq9fE
BxYA67/K9/9ZU1EA3SY0wN6jS7asVi0A1o+90V+P7i0EGh15ww3Rosb3UwqB
9We0uMlwZCHg8st80YGDT+8uBNav0T05K1bLANvP4Xz0llEdmTJg/Rutt6ry
hQxwNoZ/ocd/iJxaBKyf+1AvDPcIKgJsnwd00JNbh0IRsP6OFjtNPFAE5fZ0
w83Q5m5LiouA9XulW24OksHNfbSCbUUbNg10kwHr/2jXuFO7i0BykgZIEFo0
LmKDDNh9QGmLyklyyMowclRcRgstI8fKgN0P0Iqh02YWQQoGNKCrl1el5wG7
L6CnV3jek4Cy3CrQJUuyjWXA7g9o/WP7u2SA1wfffr54npm7s4qA3SfQYvO4
uiI4oRc9Yq0++m7OsmlyYPcLtF5iyBwZCLFgrEQLE14SObD7BnpBS/CXIgjc
QnfAHV0XoZ0lB3b/QIu+VbkXgTcWuFC0z4WVNXJg9xF04PYrIIfdND2LUpXz
W5QzUw7sfoI2vGhWKAdsN7EVaIdN0ng5sPsKep/RiVE3YCPdDp8O5XjhhM9y
YPcXdPftLWo3YC02EBU/nM9S3YRCYPcZtEZNmqoYaDcPmzoD3S2cnJgJ7H6D
Fhhtz8wEM2x4dmg1+YbLmcDuO2g9k2C1TJi/5uCrFk90o5daXzqw+4/y9ymy
WRkwCxt0BDpw3c6v6cDuQ+js48aCDMB2ezYb3du5KDUd2P0Ire48oywdvsML
xUO0zP0sNbsvoX12r9yXAbQ7Ja16r/zeerPEdGD3J+X75qnNyQAVvACNPIAm
pgkZwO5T6Ea1cmEGCPCPIVrcPCwtA/4HjAvo9w==
                    "]]}, {}}},
                 AspectRatio->Full,
                 Axes->None,
                 Background->GrayLevel[1],
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6},
                 Frame->True,
                 FrameStyle->GrayLevel[0.5],
                 FrameTicks->None,
                 GridLines->{{100., 200., 300., 400., 500.}, {{-0.5, 
                    GrayLevel[0.8501]}, {-0.4, 
                    GrayLevel[0.8501]}, {-0.3, 
                    GrayLevel[0.8501]}, {-0.2, 
                    GrayLevel[0.8501]}, {-0.1, 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.7, 
                    GrayLevel[0.8501]}, {0.8, 
                    GrayLevel[0.8501]}, {0.9, 
                    GrayLevel[0.8501]}, {1., 
                    GrayLevel[0.8501]}, {1., 
                    GrayLevel[0.8501]}, {1.1, 
                    GrayLevel[0.8501]}, {1.2, 
                    GrayLevel[0.8501]}, {1.3, 
                    GrayLevel[0.8501]}, {1.4, 
                    GrayLevel[0.8501]}, {1.5, 
                    GrayLevel[0.8501]}, {-0.5, 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {0.5, 
                    GrayLevel[0.3001]}, {1., 
                    GrayLevel[0.3001]}, {1.5, 
                    GrayLevel[0.3001]}}},
                 ImagePadding->1,
                 ImageSize->{302, 182.},
                 
                 PlotRange->{{0, 307.0079365079365}, {-0.24075000000000005`, 
                   1.36575}},
                 PlotRangeClipping->True,
                 PlotRangePadding->None,
                 Prolog->{{
                    InsetBox[
                    FormBox["100", TraditionalForm], 
                    Offset[{-2, -2}, {100., 1.36575}], {1., 1.}], 
                    InsetBox[
                    FormBox["200", TraditionalForm], 
                    Offset[{-2, -2}, {200., 1.36575}], {1., 1.}], 
                    InsetBox[
                    FormBox["300", TraditionalForm], 
                    Offset[{-2, -2}, {300., 1.36575}], {1., 1.}], 
                    InsetBox[
                    FormBox["400", TraditionalForm], 
                    Offset[{-2, -2}, {400., 1.36575}], {1., 1.}], 
                    InsetBox[
                    FormBox["500", TraditionalForm], 
                    Offset[{-2, -2}, {500., 1.36575}], {1., 1.}]}, {
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.\"", 0., AutoDelete -> True], 
                    ScientificForm], TraditionalForm], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{"\"5.\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.5, AutoDelete -> 
                    True], ScientificForm], TraditionalForm], 
                    Offset[{3, 0}, {0, 0.5}], {-1, -1.}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"1.\"", 1., AutoDelete -> True], 
                    ScientificForm], TraditionalForm], 
                    Offset[{3, 0}, {0, 1.}], {-1, -1.}]}}]}
              },
              
              BaseStyle->{
               FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                GrayLevel[0.4]},
              
              GridBoxAlignment->{
               "Columns" -> {{Center}}, "Rows" -> {{Center}}},
              GridBoxSpacings->{"Columns" -> {{0.5}}}],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"},
           {
            ItemBox[
             StyleBox[
              RowBox[{
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.083, 1., 1.],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.59, 0.7, 0.75],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
              FontFamily->"Verdana",
              FontSize->8,
              FontColor->GrayLevel[0.4]],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          ColumnsEqual->False,
          
          GridBoxAlignment->{
           "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {False, {
               Opacity[0.15]}, False}},
          GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], 
              Offset[1.1199999999999999`], {
               Offset[1.75]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.8]}, 
              Offset[0.2]}}],
         "Grid"],
        FrameMargins->{{10, 10}, {10, 5}},
        FrameStyle->None,
        StripOnInput->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Alignment->Center,
      BaseStyle->{
       FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
        NumberMarks -> False, Deployed -> False},
      StripOnInput->False]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], 
       Offset[0.8], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Background->GrayLevel[1],
  FrameMargins->{{0, 0}, {0, 0}},
  FrameStyle->GrayLevel[0.85],
  RoundingRadius->5,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.774639413841646*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"275ead9d-180a-4b8a-b7da-9c3c3f99ae51"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["4/1/1/Weights"], 
                    "Biases" -> NetSharedArray["4/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["5/1/1/Weights"], 
                    "Biases" -> NetSharedArray["5/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "4/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "4/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "5/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "5/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.7746394139318247`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"ff66496b-d1d9-41ec-bb19-b4301d754713"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test the train model", "Subsection",
 CellChangeTimes->{{3.774352820819623*^9, 
  3.774352827059663*^9}},ExpressionUUID->"0a081682-2cb7-4138-9af3-\
39773615dbc8"],

Cell[CellGroupData[{

Cell["Check Inversion", "Subsubsection",
 CellChangeTimes->{{3.7743520818234367`*^9, 3.774352083855269*^9}, {
  3.7743528285076637`*^9, 
  3.774352828875527*^9}},ExpressionUUID->"25fc94cc-6957-456a-8b72-\
7d29079ee8dc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"in", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", " ", 
     RowBox[{"-", "1.5"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"inverse", " ", "=", " ", 
     RowBox[{"invertResidualNetwork", "[", 
      RowBox[{"trainednet", ",", "10"}], "]"}]}], "}"}], ",", "\n", "\t", 
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"inverse", "[", 
       RowBox[{"trainednet", "[", "#", "]"}], "]"}], "&"}], ",", "\n", "\t\t", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", " ", 
         RowBox[{"-", "1.5"}]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"2", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", " ", "1.5"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "\n", "\t", "]"}]}], "\n", 
  "]"}]}], "Code",
 CellChangeTimes->{{3.774349828576951*^9, 3.77434983968331*^9}, 
   3.774350232689061*^9, {3.774351868507565*^9, 3.774351874686586*^9}, 
   3.7743520856507683`*^9, {3.774352280916863*^9, 3.7743523550501747`*^9}, {
   3.7743525250054893`*^9, 3.774352528786915*^9}, {3.7743742507324257`*^9, 
   3.774374255894919*^9}, {3.774374669325013*^9, 3.774374691457765*^9}, {
   3.774375112449683*^9, 3.774375115602233*^9}, 3.774376242281488*^9, {
   3.774380400828876*^9, 3.774380401077499*^9}, {3.77438210964386*^9, 
   3.774382126851447*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"4e3b08ed-190e-4fe0-90ef-ddf365dd4ad4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1.5`"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9999992847442627`", ",", 
      RowBox[{"-", "1.5002413988113403`"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.9872376918792725`", ",", "0.013423919677734375`"}], "}"}]}], 
   ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1.5`"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.0000001192092896`"}], ",", "1.49998140335083`"}], 
     "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2"}], ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.9917161464691162`"}], ",", 
      RowBox[{"-", "0.01111602783203125`"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.282377004623413`"}], ",", 
      RowBox[{"-", "0.40136897563934326`"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.774381360294136*^9, 3.774381602979723*^9, {3.774382101000105*^9, 
   3.774382127576737*^9}, 3.7743824255102987`*^9, 3.7746375341490345`*^9, 
   3.774639364824832*^9, 3.7746394314680004`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"0411fcc5-a352-4208-994f-fd6dbccbd416"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate random samples", "Subsubsection",
 CellChangeTimes->{{3.774352099799654*^9, 3.774352100375235*^9}, {
  3.774352795155661*^9, 
  3.774352800787465*^9}},ExpressionUUID->"03df0946-5098-427e-b878-\
11ab3e2635b9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Original data:\>\"", ",", " ", "\"\<Text\>\""}], "]"}], 
   "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"$plotargs", " ", "=", " ", 
   RowBox[{"Sequence", "[", 
    RowBox[{
     RowBox[{"PlotRange", " ", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"data", ",", " ", "$plotargs"}], "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<Latent data (should be close to Gaussian):\>\"", ",", " ", 
     "\"\<Text\>\""}], "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"trainednet", "@", "data"}], "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<Generated data (with inverse network):\>\"", ",", " ", 
     "\"\<Text\>\""}], "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"zdata", " ", "=", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"0", ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "2"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"invertResidualNetwork", "[", 
          RowBox[{"trainednet", ",", "#"}], "]"}], "[", "zdata", "]"}], ",", 
        " ", "$plotargs"}], "]"}], "&"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"3", ",", " ", "5", ",", " ", "10", ",", " ", "50"}], "}"}]}], 
    "]"}], " ", "//", " ", "Normal"}], " ", "//", " ", "Column"}]}], "Code",
 CellChangeTimes->{{3.774352102087599*^9, 3.77435210409548*^9}, {
   3.774352154029871*^9, 3.774352187544139*^9}, {3.774352221172174*^9, 
   3.774352238514353*^9}, {3.774352750736032*^9, 3.774352784393464*^9}, {
   3.774352850704413*^9, 3.774352868573188*^9}, {3.77435290881396*^9, 
   3.774352937688102*^9}, {3.7743746388160887`*^9, 3.7743746526097813`*^9}, {
   3.774374704192348*^9, 3.7743747044101*^9}, {3.7743747588009644`*^9, 
   3.774374803923032*^9}, 3.774375970430026*^9, {3.774381323929538*^9, 
   3.774381333828768*^9}, {3.774382171651217*^9, 3.774382220297845*^9}, {
   3.7746394653255925`*^9, 3.7746394697197647`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"5ff15106-56bf-4120-940c-00e683cf3392"],

Cell[BoxData[
 StyleBox["\<\"Original data:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.7743813603794003`*^9, 3.7743816094721403`*^9, 
  3.774382131594768*^9, 3.7743822206406307`*^9, 3.774382434488909*^9, 
  3.774637534252268*^9, 3.7746393649335413`*^9, 3.7746394704916983`*^9},
 CellLabel->
  "During evaluation of \
In[57]:=",ExpressionUUID->"739d7d09-63d1-4c68-8809-8cd7e85f479d"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwUl3c81f8Xx41oqUSDlvoapVAiknS0C2kYpRQRQiGiVKJQJJWGnVGECFkt
dZIt2XvveS93D/e6fp/fXx7vx/vtfc55ndfzfT53k43rGTsRISGhIGkhof//
zbYM//XTcQ53bjmbN/e4F4N0Bsw97Oaw4bhwbOSDAbRZpTa95fIcHhvLO4eM
TtxD937cYzmHrRFv6nKS+nBFXanc63NzqBemfzeorhNJGcu/HjedQ9XlLt3z
y/qxNPjiqbmTc6hjGyaTr9WL8fZpY3mGczj+RUjI82ob3jrI9HM6OofZN0Sc
/ka24emN+2U3HpxD7T+M3yrdnag8+/Rz8745ND0b4VRX2I+iHW3HQ/bMoSBx
hjpq3YqdBQoD+lpzeOWlq5S4VDfmvXK7w1KfQ13fb6EHRtsw1K1QKkN1DrPU
Tdw1kzvR/sSC9MvKc3iIGSMxu7gDYavpwdWKc1hev8S97FsLysxP6KzeOIcb
Oyu9Oo72ImVw0uPhujnkd9/z2ruqG6t+a0vsliHWLj3dpRlt+O6tfxJZmtCv
caSmzrgd792p3ft+GaHXoNHty5QWIu+1zecWzyE3bctWnYAeVNN0uL50/hxu
cRSM+U014/zluWIlInN48c/13BLDTuwlC956CwQ4c8rtkDS7B79VGWhtnxGg
8g7zb6eMOjEsJbxmiCnAA/tZz0brG9E5YMA+mirA7mKXjskvHXjwstrcSbIA
CwJ1vWKI/XX77kSIjQtQ85beNoe2DmSuKdv+Y0iAfm3m/hHj3VjDXl7h1ifA
f0IlPsfvtmBK00VrpS4BfvAIutZe1IV+n9M4na0CXHtg9b0/U+1o8Yz5IqxR
gLu/nPz0TaQTdzrvVz5aK0Cu5lxjgFc7LjoWWsSvEmAkX1XmWX8XDim0W+SU
CZAzNzHv2qZmLBRWpDn8EeDV67r3ds7WY3iP25P1v4j6PFxIj/Y3oeuPwv8a
vwkwz8BFutKuC49GLvgRlC/AbYHJijb5bbjJ09Rk32cB1keZJG5xbEXu6YRJ
eoYAx5o2ln+WbsRGNZJ/WqoA3x85WpBb1ojpi3evs0oSoDYzPHT0VxsGjvnn
rUgQoEXgz5/26zvwYmmtUVWMAB2SnO7tZTSj1ru1w74RAtxYJf52TLUdl/k6
+Ox6JcDviyYk9efV49iF3JWTzwSo12T5/VlMDRbtnvuU8ESAB5O+a+0Lb8Po
lYZHzB8JsLXMQ9PiaC2608J7Fj8UYILenf1XrZrRqHbAq8iHyF/3U7UwpQYV
MtSW3fIW4P3MKtWVtdUoCLqTouIpwAaJveofpxuwxa4MBtyI+/48opQENWH2
Aam2iGsCrIzW0jgU2oDBcpfcTlwV4CGJ9yXvVBvxMj9tgegVARYbuXs9IeLp
tjMTvloJ8FhKdgbj1D+ULtiv43JBgIXqUaulbrYg+WVovfxZAV4aucj6mFSN
pa7tju1nBLhMXupQ+ocmjDNSFHluLEClS7GGCpE1eEv5RvQhAwGm3rRTlLvc
hKfEf+6cOSxAYc9Uh7v6Tag8uOBv1n4BzrdtqaV8akSR36a2dnoC3OS9fLF0
Uj12xCbw1ugIUOt5EjVxqhHzvEmv6jQFhE5T51P+tOBT890qj3YIcLQ8dnf/
70a01wgo0VUR4LiG+WHlihbcJ1lnSd1M6HEicLJgeRPKkNcyP8gT/faV9xhV
qUNqpUOopZwA72Vn5Lk21mLlh1xFqbUCFLyl8p4eq8D3/nM/y1cJsOb3Jfn1
XY1419rQ3EdKgGmrHCPG40rRTC9iaudSASYm53VscK5B1TWDj8YWClByKMhW
y7QO57PV5OLEiPoF1rFO9vXY23jni4mwAN2qwh2fr6zCr9llJxfOzqJ+mGTN
58QyDAuVGvvFmUWdofvaacvK0Mnpkt9Nxiy2qcXkOwhX46GjH2W2UmaRF6QX
ptlXj+sUWNm9k7OoIqJ+2+FlHTKEDhx/MzqLgZT4jY3hZVjTHdpvMDiLfzsP
+FQqIX743u4t1DuLsm8zexmJDegXoShV0DGLDcecVhy4WocWN298dG6ZRXVv
lT4apQ7VT/88sKlhFsNyw93inhThYrWFnS3/ZnH/UpN5CZ5/cXCRmcfTylk0
PqUkvFWlCH+OJiw+UDqLqx1aFxq5l+ObEtJ79u9ZXPyue6GIazm6Ju7e+6lw
Fm/X0kL/RtXj0fsBTTZfZ1HcwLt451A1brxQd00mbxb1nvgUNk7UI1d7nVhN
1iy+6C+Za/auw4YVV9/6p8+iyflR7wDRQsyg5u7SSZlFw+jnEdahvzCgZu7f
1LtZrBU6/0LtbwVaphvaJ8UR+i28bGE3hKgVFCGwiCbih3ArktrLcKndYPiy
8FnctNTi1bfpYhzbv317adgsRk/tdjdfXYlFG+6W3wmdRXMrS131ykKM5pVZ
7Qgmzgd/jX6zrAY92qQ4wwGzaEdZKBZqmYuG+ZdexPjN4iUr0delOwpR8eXH
LafvzeJ47lh06fxinHVh/Ra/TeR/I8cofnEethoesCj0mMX+dgvvOecSzNry
jHrDdRYl8hz7AyVyMEisI3iz8yyuz1iceqMiCy8PKP7XbT+LQW09yx99/Ip7
8Mb3lzaz2CEyL65ENAWlY3+eOXZpFk+b/BfW+jYZSbcXTs5azGLephUvhM6X
Y5mZmX+uGbHOidYVWfMb43YmrnU8PYsnRHce3ZZVhF7LyLkbTsyiq8mZN8Fj
2XiKtNuo6RjR39vnq/9FFaNyZcBQ8KFZXPKiKSrqZyKKfKi7B/qzqH117qNQ
bxh2Ply3kqlL6CP5ZHv04DfMtbr66aM2kZ9QV80yn2IM3Zt32FqDqGd/RYvs
vWK0kxXqWbl9FqsVdW3LwsoQWIZef7fOomb+ZvLGsUxc3Rix9IESka/e4PRf
qxtIyRr8oPXfLP4p3540y36BlU+3A2n9LO6rETI/NPkG3znebU2UncWmU7o9
55Z/w7tHyl3PrpxFwSMdz49R4WgqL71gyXJC/ygRrv3HYFQTskr4IzGLhfmO
WXtGvqN498fdtxfMIhyz+rU04hP2fGPVqc6bxQFa84j2wHf8Gn7AcXCOj0t3
y40/cfmGLzyeCUfx+Jjl3/5gXsgucDrVEWXM5qNihVnTkS0BcFBVaec8Oh89
+uYbbW58B+sWuVd9m+Lj7uXi5R0F/sgc+WnjOsHHkqneDlfNPPxXvJCnMMLH
6GPXDhRsKcKUBLNXHf18vNazunPRKhf09Unc9qKbj0PWum9N10eDxXly8eF2
PpqEpZ4WPpOP6to6lrwmPm5u7rv2OPgzLloRyMiu46Oj6MzUjpJEGKTUPbWv
5uOf40tbjsylYuG/dYrrKvjoVXj3xYfnSRD+8erP+mI+it1Q/K82/AW6PM4z
e4x8VL3RilNS3/HIFaGpvT/4WNS3fWBqYQ5u3G/0iFbAx+70N0EHfDKAsz5y
Q2oOH4sbUCs1OBIbZgYLLmby8YTPcdeWCzmQ3rr9pPRHPmY6/LsZMHkbA/Lu
jlYk83HJxNxu3sl8uBhW7ns/kY8bDe3tQnbegV0u0jKab4l6X1doJ1ib4jJD
q+zxSD7eVJB/si0hFUc3px+Lf81HlzDvVZU6uVg0j91n+oKPpxxOGStYfYGo
/gPei57yUcSiY77i45vo8evZ8t+P+ZjtUJlueJHgNaYjzdOfj+/ILaSX/p9Q
4bbSgW2+fDy0hNle+PU1CkzdO/ru8HFhnGlwfnQ4tKj/cg/34qPfrSt6Gcph
kLl00WIjdz5ylaQOnTlTAEGTZu+FXfi4U2nZ8IrS92Bdkaj7xZGPdFreX7Zm
AexJJjdes+Pj+zGjJ45KkSj9UOfaf5eJfLc8ljZ5mA2kS4Hz2iz5+EnvQdEc
/zeU6tbHhp7jY6Du1fn+dlH4Vmb9roOmRL9uF65PHciBW8yr/zgn+fhgzD//
gFkknGzIs8s05KNU12Wzz9sDQTlLSGB7lOgHz9QqPzARhZ8ahcse5GOn474M
ykAhdF6NVKvdx8fWErLLxaNBmHt4qCxgDx/L7ehSFxuL4el/O6z2aPHRXPxp
TZ9/AdjP3WVPq/ORsWhCW/JRMuzrKn+erMpH9R3nbe5YFIHMN+ktF5T5+HLT
rn3uPdlAeWP1W1KRj3+5+vL+y75BlXv6ubKNfFyvFnv6lcoveHeSTbm7jo8O
ixZnPTtpg3dVDgary/BxuKICTr3IBdOFzzeNSvPRVeOHMjXND1VHOr7FLiP2
7a+Ql9Q9BLFipTNnFhP1/WyZkgtA6I13n5g/n49dxhX60bO58OXer4c/Rfh4
/uF38Rm1AgizWLTWQ8DDAKsD0f16ieCoZZ67ZYaHbfcUGt98KYOD0u8Me5g8
/FTHdBoeSYW1FPLgKyoPRdJ9qdEOpcCo1rl3nMzD69taAw/X5cC/tMAVc2M8
7EjRCps/D+HDo/qMvCEeqnQ3525ZkQd+tusPO/XxcG536oCyWwGc03fsluvi
of7wf7rHp/7AzvX5ns2tPHyXt+gY27YcFs0ILQ1p5GFCOvmty1A5DLYYfdCv
Jfb3WOfsCf0IhbmR+1hVPOQpjA7W2VXAmxdDLellPGz/+20mu7IaXK7vcL38
h4eMpLi0qG05cNTg3vzVv3i4SsW9Ot+mFOQ2V8RXf+Nhf8isIFbnL3BFV+x+
mM/DRQk3d6o75kJ9n1Wd9mcers1e2b1f/Tek/0y/Ss7gYcqfoTwhv1Lwj2YL
vU/lofcmXa8cswywvHUw6lwSD3uSXzzJ/PwTdpk+V1+awMP6iQ95HmNfYKl6
Z2VxDA/zdQ9FXTYtgbElm228I3jYKC31Udq6HH5PuM+oveLhE0unMzlLSiC6
/NfLoWc8fPHZuuUurwTckxZti37Cw+OpW6s8/b6CwQPz4pOPeMg8WXDk06J/
oHDp3QWxhzxscTxSqpxUBbN7pujffXjoplTf799ZBS2r9zx18+bh7GnVBSax
fyGLEaig5MnDHYqZ9tNpVRBUX1/Y6cbDrpjNm7oN6uFy5nqzsGuEno46vb8O
/AGdEEfykas8XHNxuv38whqQvpofyLfloadsWoVEUSVMHhLekGPFw4YshWXv
b9VByaYTBQ4XeHg4aZeo7c+/8FYQabz+LA/fnAxtPS5eDl6dQyMNZ3h40rZ6
8sa+Ejj1dYdvkDEPs2yxRH/TX9jy5t7qfQY89N9tWh5SVAMi7hVZ9MM8DJYZ
jPr9oBQ6jFccS9vPQ/EVC3YlLymCnG3WfZf0eGj16tU1rnEVPF2QcXuFDg/5
275sXer6F+yG2ZJVmjxsXSM34X6pCvb9OZjmu4OHIVf1vP6G1cLq+Of7d6nw
EGveti053gSUu53tE5t56JTs2LtGrhoqz212T5Dn4b0TL0KE5EohcZfHInM5
Hl5crby+kVwHd6Xw3eK1PJz3ZOHIKZ1KMJlepFu0iod9IQ6xeKcMVKvNG72k
eBhndSxpcLIJxNLeOassJeJ90npo+bwGegOnRAcWEvlv/znFPNwEX232xEaI
8VC09oqgM6QWXsAjzRPCPCSf+5sZm1IFTusaqkVmZ/B+kLGvDZHPAe56u6+c
GVQVMx9yja6DNS2Os9cZM+j65sWg7PpaYOTkv5GnzGA9a69NXX4J/HsurNY+
OYO+Ed9t0qUq4cO1E2XPRmfwsYvYFYZLM/gej7p0aHAG85+7NHjaNMM5pWEW
t2cGj3UGyz34WQXqourPszpmUPyGxJ8Ng6WwsO/eZruWGTzb1BKovu8vDBZW
4JqGGZRxH3c6N/wXfkStOFf3bwaTXO7PqztYD2+8rCmBlTMY1Rl8UrOqBa6b
ZATpls5gpAy5Os27GY7u4Gyk/p5B8yDrd/1ujbBxyaFvHwpn0FPEQ8FEtAk4
489PW36dwS1eGgOFIY3QUNY5vjxvBv/t8P0z19YAH99vflieNYO9QVF74o1b
IMDPY41P+gyuFI2rVr7YApYXMWdnygw+PdK67pNwA+zas9hw7N0MsqdPHt7y
rA6Wrj47+DZuBsutcKN1bD2M0t/dNYmewStPTKKFBXXwu25KemE4oceWv4mx
tS0Q9WlPxq+wGTyaTKY/tm2HG08eHboZOoMLtUSWDefVg6FDQ5dy8AwGBgXG
D3s0gfyhDZ69ATPoQ/kNlx/Ww+xGpyVv/GZQsqRqJDK1AZpn85MN7s2g/KVK
1eZdLZDVIbxP6DaRz4jBqHZHPTz+cqIl32MGT8UGrPf71wTWr6NcnF2J+EMl
XlEB/2DPjWHxTc4zeFNqXvZfmwaQMlaPb7GfQbv+3nkvNVuAtNVH+6nNDHY+
FS1sH+yAkvmVtfsvzWCW3gXRpJo6iBtacZVtMYMvna5YFnyuBa8ia6FPZjPo
3TnJIqm0wcm4jEib0zP49rx8StyNJthyl7ND5sQMFkc+mV/7ug2Ezx2q/Hds
BoXbP96uvNEGHZovLvsfmsG9uTPduw91Qe7yLu5u/Rn8LhMqvLC0HkKmNr+c
0p1B4+XCIRscWsDur8fWJO0ZlLqnpHuY0E8vFf9YaMyg8vJXVw7FN8PqwMUX
lm2fwfBFmm9WijbD9OWz9JKtM5je6P59gXIHVOx7H3JHaQbn4/vEV7/b4d3a
afkd/82gRsWzdUJzDXCHs6dweD3R7wDR0JGkVjBtfmQaIzuDa/YWOYvubQaV
nAbSqZUzmGBAetSs0APizzcEii+fwd9+xWvSMhqgx9lpfaHEDBaedTJN+tME
X44V5N9YMIMnNzuk6dc3wAtFEePN82bw6pfRaoO9LeAoYjzSNcfFd933xUzO
NMOB3qj7L3lc7Li27vWX2R5YWzi86hibixTNXLbChRZgRqpnzdK46Cy0UPJx
cBf88/Q5mjvFxf6b+XVc2TZIPlPZe3WCizxSWFUPUb/v9pW3N4xwMTqs+k7i
TCuclbgs2dTPxVsxHpPBC3tgx3hGanA3F9e9PbN35GQTLCrj6EM7F+tGPxtW
W3TBwLtD7YwmLjIfXttW6t4Ohb4vbnys42L6OZHwOoMueG3ZtdC6movP7zqE
vB1vAxedLe9WVnDRo/Qup+dQLxxZdXPP32IuJpxWiw027wM5Ojb4IRd360B7
9lQ3cGoXO2v9INauvOGW4HaozzgrSirgorbBtreJTh3wMfh9TGIOF/1Tv634
e7MV/O2nNc5mclHOrYFG1WuFiwd1qyU+Eue1P55xZzfDro2Pr/xJJvbdg8zY
Vh2wZLaBfyuRi9eTpb4e9umF0fYNb1TfcvFaMnnTSZ8WwAIn1cFILjbEqB5I
J3iNfFVQGvmai+WT2z7k81rB3U3kkvELLn5pX7Xh7tZ+MDxhzBJ9ysUo7Vyj
LG4LKGyNfvbtMRebpOa/Hi3rAb74iJKrPxef+pFE21P6oGVQHRV8uejSve/3
tH8HZP72Odtxh4unDvWkcEy64fHbyunnXlxsW1T9vq2zH6zvrAw67M7FQx5H
qlWVukDn7OWNvOtclPBmfv3Z1w9Smp++Zjtyscs61FF0SS9MSnJP2dtxUdH7
BLPKuR9KyIfG117m4jyvL9aTvv3wturFg3pLLo5pbSqyMO4Fz5Qu2cfnuBj4
/Hp7zPlOOBmwJWevKRc/K3t3yY70webLNw1oJ7n4tmFtgGlhDwjv+z2QYshF
tl5bdlUZwesaibsXj3IxZe/jzF6Lfshln5WWPsjFc88mu3Mie+Fp0/v0in2E
n2subP/h1AdXPk8fvL+Hi4Y5c89/xnXCvme6XRpaRH0JWfuy9w/AKufHN8fV
uRi5gGmy9mk3TB9tlIhX5eKcykSJgW0fVCjIJZsqc/GemWstd6If3gk76y1S
5KLxsNNQN6sL7vQUNONGLlp/9rsZsacfTH6IuHiu46JuYklse3k/qEQai2+T
4aKXZ4Im9UQniHlGx/VJc3H4yMu1xc0d0H16RCt8GRcvyEdr3z7aA1/UdtYa
Luaij2a9c61cPzxffN9BeD7hj1syGw4M9YLjWOVcgQgXdRS/ZPV4D8D+0pWR
1wQcvHfmbEa22CCsfXeZeE44+NSMVGne1geM+58qWpkcDBtxfN2v0gvVF7jW
oVQOln0lv6jW6IMPuw9zD5A5qPy8a49nbz/cXxkWxhnj4PYz987fDeuDc7Qu
5cwhDhoL2w/pRQ7Ajtotf2z7ODgyIMX7GNQHizJunpftIu5jxVufLuyHgaDf
tJpWDtoVbV+T0jsIP+wkQgIaOfh1V1Vnp+EgvD5wTn5PLQfPWrsb2ecMwHW5
pB/TVRy8qNusqq3XA4f50ybJZRxsv1dgt0+kH+TadUnn/3BwV9DB1RPz+oGb
/zhA8hcHbzWt7dyW2AP1LxvXlX3joIXUzJOd8r2Q5iqXfzefg8I2jKVFBn3g
b+R8Qv0zB8vL5DU5Fd1gqfxleCSDgy0U9V3iM4OgKS56PzaVg62OUj/iGD2w
dNB41ZkkDsqbXCPRHwzCCEZnzk/gYMeyBaeWXxyC37EjR37GcDCW5mV2TLQX
Ir139rpHcPDVVG44s3EA3M3v39ryioMvR67uMxb0goFG1bKeZxxMFCgrzhwb
AnnJVamvnnCwofbI08qpPuCTLusff8TB1BXZ64f+DkBz5ac2wQMOGjQsfbTT
bQA+feC65flw0OhxWsy6N4Pw2P/wQidvDsas8U/I3jAAl63DEuU8ifg8m9cF
1wdAR69bp9mNg161bpvUs4dh+RrlhifXOEgNWdpGdRqASdZNJ/2rHDxT7pOd
nDUAJY2/RVi2HHQbNSktmxqE2GyJmHQrIv4ucZFfnD7wCj2ncfkCBxs/llre
Dh4EY6ekv6vOcpCptKI9oXYQthyl2Faf4WCUfp7e6q/DIKSwl//AmINXQ1+d
DGrqgw6hoNfaBkS+V7Y7Lm8ZhpzuRhXyYQ7u9d3uG/9zGEK+y5W+28/BDfHW
Ar7zMFyJcL54To+Djydnly9/MQh6N78wl+gQfvlqeyF56wisPi36rFiTg50X
lkjuzRuEadWTSt47iLVVY9rpgH6oXBTzS02Fg3olR+vsUgYgcXTEfGgzB6WE
3Q89iR8A75Kd01HyHNRIMXaKWjsCJon3H5+U4+CPvo0ruUNDoHK/Sk5sLQe3
RY+q/r07CPMurPr6fRUH7w7JBu8dH4YebZtTblIc9DNv2UDZMApfVmSOKS7l
oOUO7txH/UF4QeX6dS7kIMkiw/vG01G4WnNYNkyMg0naV0KcbwzAgfSwz0eE
CV4Lj5918x+GNUHdx/l8Nia5r/Ik/xwE+hXlgc8cNtJ4H/RUbg9A9X7POw4M
Nu6bTp7MvzYMyRuKpNZT2Pi9qMIotHQYfHkS6Q2TbNwSOMakhQ/B2bZzB4NG
2eh07mvrGbMhUM9P6tQbZKOxTMGDf56jsPAlxYPew0YvhZsBi81HoN9lr0Ra
BxvtldRcXsQNwQ/DoKRLLWw8csea72xJ8Lqlae+KBjaa858/P3xxDK6LbWyu
/MfGiiMkkef8ITgy4Hzdt5KN2asEiWqeAyCHX8R2lbJRM2nxty1vB4ETIxo3
8ZuN3b/rp6THh6Du9kmthEI2Tu17UO75aRg+msXUmH1l4/pNa36FLh2DhztH
7RfnsfHL0wgrhsYoXFimMfc7i41Reb4BiY1DoEm6H+GVzsbPvV8f7lcahKWV
VdtVUtgovGFLu8/EMIwkr6rof8fGoqIbfqenhgEf2lhHxLFRRdR5w8rkQYiy
yuQYRbPR93ww7RFx3429My9Ewtk4lv9hYUP5MByXPaL8NYyNz1+pOl4j/CHP
Ciu6HspGicCHN8Q2jQK/odtCPpiN9Jq+C6aHR6E5S5nWFsDG83fIINc3DJlP
PZ888yP0k5SoEXs4Bo8di/47dI+NZubBgQFWY2B9ZMkP7i02Al3O/2baOOyW
tzDJ8mDjZvoVxjOjcZASSp684srGnAJSfWP0OEx0UfzXOLPxrED771KnMSj+
tnddnT0bEx92rtotPAqx4UF5gTZsTKg+EVX7fQS8PJqMdC+xMZyvuPlqzjgY
n9o4TLFgo3zcqcwz84dhs+o1nw9mbPThv9rsazIOwou+rrQ8zcZHGkGC6bhR
aB8RzVx+go0inpwb5wJH4HPxySPlx9iYez+x9OG7cQhJiOm5d4iNIeVL13kU
jICtz6jXTn02Hnit9ivs9TjonddYNqbLRnbzrWGP/iFYpe2b8labjZJlv7R3
5AzDtPRfMNFg48ue4k7sGIIKyqq2BdvZmD5LebZhaAQS/tm4/drKRjFjmpTX
wRG48zFzwU0lov/MGt5v1TE483gmQfk/NmrdMhf9JTYJKleO6PSuZyMp09XQ
J28c5u1/Wf9alo3LFbWvnzAYhZ71PY4GK4n7zbK0dLxGoGBGWURoORs/uBv7
fSP68bzVMzpfgo1nLrk0nybeH8e8op3OC4h8O5Yjs34c9oct+btxHhvvkRV7
aMoTIOtiYdsyx0Jpyc68HUYjQDdI5oXwWDgs9H4FldDj32bqq/1sFv6YyWw5
ITYByfP0VNg0Firuvjm80XAU7vcHlWRMsbDS9gbto+0knP3VZGkzwcJwN43X
atvHYEfMRubqERaaWQ2fc306AgtuXwv918/Cu6rmUf3dkzBg+lXRv5uF/1kY
UINHJuC7+rxfu9uJ89N+ibqkMXi99JT5VBMLyRE6MhP0Ebg2GTP1vo44f1Gp
fqfZGBypGH1kUc3CteVkqfSJcdiQrCG3rIKFDF5jxbzgUWA/8P1SUsxCEwnH
Sp70GNRf+nvyDrIwrKR4+M2zEUjTXT22/QcL72/gvVJPngR/GVu/4QIWkhy1
HHsPEbwyM2ViclgoXjxvqqtsFHY1zGSfymRhyk3uqqWfR2BJ1pHj4h9ZaL1a
r/7l2XEYCXnZ/yOZha7VxanOX0iAV3u8bySyMHhVukd08hhEHt4qtfktC598
EG5PODYKbv95feyKZGHUbrfwVxkkMJgrOvDyNaG3/OSaA4JRkO9a0nn0BQuv
GIh0jkeSgP/VwmM2hIUXXUuOU6smoelN8uLcxyx0rNY6PLGXBJnu1PdX/VkY
yhRrunhkAh6d1Nu7wZeFTjsnQj/hJFipBDc13mGhxvbXCeMbJ0BnYfO1YC8W
Bsybl5nQPAbLRzaKgTsL9fbGax0xHoXJP9feMq6zcNdooYfWrnEojv+666Mj
C7nj2WcO+43B23vzaqzsWLiUXVfrwyaBp8Up+5WXWbjHU5/j00TwqhUrqLJk
YWwGM2vD0wnYLD0W7neOhef/RW9zhAkQomhs1zJloXMnP3bNF4LXat/yyZMs
tCH9sZE8PQE5aX+tEg1ZmLk0v5X9luD10WqO+VFCLysY3RMxDldsbV9IHGTh
kre6XyrY47BXP2vLn30sDJqU6U9eOA6r1vN+39rDwvy99yR+qk/AFPeIhaoW
C5V9P0xYLx2H8paX1AF1Fj74ZR+mqTMFCbk9wZGqLLzmlSglrjkB3i+2/mes
zMIVOhHvs45Ogcl1r++iioSfnI+GJXmRYZvBnzPfNrLwcRxT0SCODGKbl066
rGMhzVSzs+/4OHSLnvdXkGGhNjs1KaR/Egr6ktd2SBP5np1rVDs6Ac9/UnOf
L2NhaVP2q7WRZLgarWd0eDHhR9+7jNsxY7D/VvDQjDgL/6zu2JuqQ4I1ps33
skVY6D7y3dhyhAT0HZtW2guYuP6WYCpCiwTVS65/WjvDRLWlr1TUaycgaeLr
4XomE5dJSnck64zD/fJ5PY+oTPzbEjO1DMfBPOmU114yE5d4OSj1rRuH7Q9i
l9LGmKjlXX04tGMCFlwa+5AyxMQXLj+Wh/wmwcAeTbjYx8SiuzE5o8R7/mO1
X6tUFxMV/VQzNxB+fMX460p8oKPzIiM9F10yXK9fveB+IxOvK2q8+nB9HA5n
2iZo1BLnT/nF5fwlw/qQrN3jVUxsXWnsrbKJDGwHXl1cGRPXFDcN6L8hQ92h
o46mf5ioGbTL43cPGdI2vRJe9IuJz/wfXIcyEjwU9EThNyYG5x7bXHZkEi50
bt3pmc/Ef86Fnh+Jfmh+9ara+pmJ9mF97omdkyDx5o9NXwYTD9h1Rhe9mIaR
G0t5b1KZuJlzLn98ggy/jM+/MkxiEu+D2DJ1cQpEbvuwTTiBiWP8BNHdHDK4
LaAVF8QwcWtUfzqOTYDBsJ7ltQgmnltTdESURQb5P8GMTa+YWOBM7jnSQgZe
XPPT1mdMfOtpnz74lgTNdzcphj4h8o1asiJIjwyfzl3/eeAREx+js/zXuQkI
3PXNjPOAid9jkjePUKfASkps6pMPEw28Lv+5/mgSdKZPPbL1ZiKl+oePK20a
llfHbpD1ZGKc3YeU8+YUmEgdK6hxY6KDlKvRIiMSFAdqngy4xsQrXyPiq8JJ
EGvjN6pzlYkKvMytcbspcBOqfadtmdixxDTxVPYUGK+TkUm2YqL5eaXduswp
UOLaZp+/wMQMn8uDy/dQQKgl65jkWSaeUe9+/0RuEtpyeH2lZ5gYpLulLeQi
CXKeH/W+a8xEM+eTJcdnSRBy7dVydQMm3hVP0EwJI4Pt8d60kcNMtIv4oocp
ZNBT2nYgdj8TKw1Z7IMak7BS9FbHaT0mvgrvyokPmobp3j/u83WYuMdO49H+
+RQoL1y6+KcmE+drqb/7d4wMiVHn37vvYKJ8na2B7A8KeHt90N2iQvhptHDz
WBgFzpjQGrs3M/HrBqXxmMJJ2LZj37VX8kzkeTU7WhHn5y15Mu+4HBPPPqKV
FF4kQ9d4c6xgDRN3Vb3crd9E8Fq2aVfeKoKHwVzTCGUyvHh//Z+jFBNzNgeM
zi4mwVW/b3ZyS5l4kH/l9K74KdC/KCZoWkjUs//2I7UNZFiz53T4EzEmOimK
j2cyp4G+6q2avjATlbYluY/lkuAvfayMyWfgwU97t/15TobkOk2rdA4DJyev
K53ikcDnkx/bmsHA+Z/X7PjnOw1mT6qfr6Iw0KTh0wOXShKoOchsqZ5k4JXb
e9vqHSmw4NCV3w9GGcgoiuYHkKehf2P2Oe1BBpK2PqtbMkyB77M8CqmHgXZe
Og/WEv1/1XE0+F0HAx9FPPj93YUCzl9ebTrXwsCeKX+NGlUKHHrd+21JAwPf
DqsX2KpTYf2NbWeK/zEwZT3f3OYCBVgnbk3crmSgAjcwmVZJgdqtxQ/VShno
Orl5o58wGVLnL1s79JuBzRDCfrmZCg+GzudGFTLwk8iWafvXU3C+6IPhya8M
5OTUHTAm1hpxtMF5eQx0Scv7OBg5BRJ39937nsVAyRPRLVpR0zB89skKt3QG
MiuOue9KmoZfmi0ZiikMvGpfLKphRYXw5f8d7nzHwCOZDMl+Tyq4TV3vfhHH
wKKGL8fNk8hw/O83zyPRDAwYuaCZdYoK/6WKLeW/YeC5LDgi+3gaeAGnP3wO
Y6BZn6cQP5UCTZff7nMIZWDk7XDtEcKPGfvGW9YFM7A1uZ7BqiZD4Npdrg0B
DNQRBK+520WGSxy/+UF+hJ7z+mLK+8mg3Vwdr3ePge7pdXk335NBMkdmN/0W
A8WiZNOCR6Zh/NmVulQPBgbeTmndpU6BP87ZVy+5EvoKVwwmPKFCzDG+0Apn
Bvre/KLL9abCTcVjUZX2DHx9ItokVo0CJ0Req/vaMPCuiLoQ5x4FlHp7KzUv
MVAglJC+SZIKgh/bbCYsGLhrrHKPz30KtEbemok3I/y0U6nVai8FPnsWvzQ7
zcBaJS3bxSwKPDmzbNviEwy8XxD53t+XCrbbLxT/PsbAfRdNSkKOUWCvRMoF
r0MM9JF7WqbtSIUV4zT6Nn0G5iSfPhLVTwFy6b6n/bpEPz5/93noQ4Gyd08U
IrQZyLogSVmhOgXxvi2FRhqE//bd8S5lT8Fty//MRLYzcC+8v56/kgKndVzI
X7YyMGO5zmDTdipsXfU98LoSAwc/RMtfOE0BUbrYBvn/GKittk7tzncKdNWe
Lmhbz8DDS3WrpUuokJ/x1viZLAPJvYVGMmIUeBY8PnJwJQMNzw9zjeIp4GC/
y5cryUC1/RW3S3UpAAcfrM6SYOAWDUPjy9FUkN34L+vKAgaueWKhTd5AAxpf
5tiaeUS/d+Zc65ejwt/2K321c3QMW1V4MyyIAkkF2bcDeXRk64n++bd/Gnxe
8SV12XRcG7vy8vtGKpi5HUuj0OjYZkpyYqtQQO3E6/0fpuh48Kmai2UNFeZv
7Wu/MEHHq68LfxVfpkGfuIr78hE6HhO+d7BjFwW+Dd5aVN5Px1zrXP0YGhVe
/i5+d6+bjv2yV37+SaKB89tlujvb6Thc+9B7TzINDt250DjaRMe83//NfLpO
8Ho2xfltHR3vN5DV2m7SgKVBFzWppmPNtVzm9GeCV0mIXVBBx/J4yasXA6mQ
Sn6i+auYjlKFtxbuKyV4rWqp9kA6ap++d7iOyPd8yn92yj/oyHtq8pN3hQYa
AS6zPQV03BNnzT15ggoSl7+/eZ1DR88Xe+c1GFBhWE9czSCTjkXeGhGSM1T4
teZM2VwaHRMMpYfft1IgnP32Un4yHV1zndKnjCng2jTOckqkY1ZhCpV1nwbH
Pu96vvEtEf9HSH3KFhpsevZgc0skHeXT+twrR6gw4/QPQ17T0QDKXwZfpUHj
Udlz+1/QMbZafZa/iwoZCnYUVggdQ5ZPLUlWpECg8OegjMd0rKV5CD96QIVL
PfyNNv50FNO64QQiFND+cezbal86vpGd7Z1XSwXJyNen/92h4+JPq68v30aF
8Zt94w+96Ng8VfHA7SPB62mVh7vd6ehmY3bg2kcaxKjdXjN1nY4vTLe+sNxL
8Lq4JOe9Ix1jLAR+u9k0ODG2zNDCjqhnx3HzLTY0UCq9MLj0Mh0Vc93EdY9S
YC4x5W6JJR1lB6R8FF0JXu/Tpe+co2N2MO2AiAEdsi9AxnZTOlofvMOY10mD
4N0hh4ZP0nHuSc2gPMGHzcrWrmhD4rz2gv7lfTTQpf3neeooHTeZZKwRbSF4
rXVZIn6QjkNpW20631GBnP49+cc+Oip8DWPWjlKhLEh83409dLzz8HT8JisK
xNudaVHSoqOFL1uffJsGtw/EuXSp03F1+qaiD5uocFpuQvylKh2rrpZamY1S
YCt/V/xRZTr+gKDZTTMEr+0PtGcV6Hho++CEwI8KXfn/anM2EvkozmpYidIg
/6Xs1avr6JixPUNjQQINnrnaCW2QoeO2oMuHV0jTwcHoc2SjNB092H0vz1+g
ASjP7ghe9v94sitOEfNdRvx45b7FdDx11nvLmBQVqAOvLzPE6ag6eWxumRQd
qrCPmyZCx989TcmxHlR4H6vy0kpAw/XGY98L/Ohwz/v21pUzNKy0zHji8oPg
1bzkTxWThpZnTWcvddBATUPygh+VhvwClXfqgzSYL2lJ30Wm4ReVVWKHlejQ
R0oJmRyj4ZIrCvYJSVT4VkmXTxyiYXvUk8f14wSvH6DQvI+GtPFF1XcXELz6
h5hKdNFQL2T1h52pVDhk3UoqaqXhfONcU2Uvglc9+cBbjTS8I5brERJLB5as
63rVWhrWxBr6NTfQoZb1PX+giog//8+lwimC10Zx48gyGoas7EmLL6ODX/aZ
kRN/iPtN7mt5vqeCRWjcfdFfNFw6wxFxSqbDTqeJVd++0ZBuSX5w/gQNFh/V
ynLJp2HPwovmx+5QYUj+4VGFz8T54kvbGvfS4ZdQTW97Bg1jjz96kEL4J7xb
9vbzVBo6zHA+FKnRwfW7neThJBpaf65+rjNJ8BrxOXUmnoaaI+dlEr8RvN6c
1c+OoeHQth203z/pMHPqeLtdBA2Vua94sUS8RtU3N9a+omHxQyhfuJQOGYv6
F9Y/o2GfrrBipAkdAkdV3j16QsO5Fpk9x0xpcKnk9p69j2gorugQqUOignZi
SQP1AQ0/6ZndlhVhgOR9SecUHxpGHpBo7cykwfh5S9GL3jR8Z/rOYflZOhRp
p8ZIedLw8TWn/syFdIhewdCocKPh9l0yeSYqdCAsUu1zjYaiXK1+40N0MKoJ
uaJxlYaqR36ZhOjQQDG9lT9mS8PTt1KDn1XSYe6x/Js4Kxr6fXrsWU74o/WK
q6rpBRoKT79oGrhGg+z9P0oXnqWh6b6BFNEcKgRvmH8Jz9DQ3P9bu89DOtjw
zrBuGhP9LW8w8dMjeG2Le7bVgIZRSV/SDZzosCJ/QqnvMA1XCUpPWBbSgRym
hW/20/CHOWv6ZRMdylwenjXUo2G8RV+22gQV4g1rpoV0iPj6MVZvXtPh9pY1
QQWaNHxlKfhn3k6D02L2G6/tIPSX+O/13EEabB34/HWTCuGn6JC0Hk06iODs
qdbNNBSqeWsYSqZBZ8zx8afyNNytqnTmSzoN8m6/eXBAjoYd3Vu5cXwahJr1
y3LW0LDI+Km6qyoDHHaq5nxaRUP/A5FHpQLooL/M28BWioYP9+Q4f1pNAxlS
yYDMUho+kw6vV7ShA7VC8m7NQhoaKb2ecHxJ8JpsKR0gRsMr4StCu/zp8P5h
arqOMA0xY2RYcJ4B96wYB6f5VGxcmRgcYEwHs736XUkcKr7q39iafJ8BarJP
b55nUHHRkUf88xF0mM9qlZCkUPHABfM0eztivjbIJ5dOUvGlafsOBokB37Jc
9e6OUnG3VIuVJJHfy6c/mncMUnFuS/y3nBQ6ODnOdxnpoaKf/vD3Ha0MOHjE
RDy2g4qaq8/HpjTSYJ18fNzpFipG0h8Vi7rQgTk3oTW/gYpPhag9VRJMqO3S
qi38RyV+H8XH7jZkQOq3hw7ulVS8ORaU60/w5xdeM7e5lIpkM/GwR1IMsPBY
E9n9m4oKKkx7kXiC11P2O14VUnH6fWyNThsdFqvmVBz7SsXkfa+F9/5gwNBC
gbUgl4o9WybP3NWmw8+R49zcLCremguXCnelQ3jxmzDHdGJfMEK/ySB4TehX
lkuh4pcV9Z5CKQSvPqp/mt5R0eqaUEUywe+m897nn8RRUez4l2NzjwletUpp
EE1FvfR10VIRDGiUXh7CfEPF1YHMVSdsaZBOsZRPD6PihYEFLi8DGRDwL/WH
dSgVVXbbBc23Z8DFjwyTVcFU1DU4aWCZxgCtx/qkvwFUtJ2fnLfShgmSV54G
PPAj8ivfgsrWdBjXb1unfY+K9+VDs1LvEbyuV8gn3SL6Nbh48x1XIpUZ1xPv
PKjYXneEueEkAzxafwyfdaViIqd09PIQA4zy5t9f4kzFf+YlqrQrTFAMM1lV
bE/F8ocbsp2raCC4Hp9524aKGjuuNfxyI3g1mDyidomoL+4w0IKI+bpZu3fQ
gophi7v6hdQZEDzP/1aUGRVPWoldMjFmgE1/zbKTp6l4lL7vMIeYV7q/1qTO
O0HFwTeaS8rkGbAixl7/+zHCf/+JG1GcmUC6ldPmeoiKH2qG1b/pM6DUVOCm
qE9Fw03+FPEjTIhTN1jYqUvFB7v2dGmMEfN1aXjiC20qtmbqf6kNZsLpyX6d
IxpU3O/mt+fZCjpsrVBt4KlRsUahacJXjwkiyd5On7dSMdhya+/DCjp0PigV
cVCiouVKqQWGTQzIu7Q8Zt1/RH2D+r/4hP6huhc1GtZT8cg/oxXjPAbYy6T9
fSxLxf7+k9ThNQwAJsNWbyXRf+Xmsl2ddJBp0OfTJKm4cGzZfGFRBlAzn75O
laBiQmOKeqwWA6pC2lQuLaBiU/qenoEwJry/qlAqPY+KO9f1p91bQvB62O1i
5RwFl+1uymyXY4DZf4XM+zwKltfEV0wRvKjOzX+myaYgRz1DMfgyHcS7TJQm
aBQ8q21mcPkQA3q/xv+Kn6KgeMD0x5MED9/eTJqbTVCw0sxF6VQ7HV66a08v
GqHgIOus7PHbDHA+6f/4dz8Fz+ycv1f6FBMOqtTKeXVTcFfcuELDRzqsW7j2
67Z2Cir0XX6MxPvLHLY/1d9EwdnwD6fCjjOh5k/OWHgdBVd9WOk+P5oJKfEC
P6NqCnaMK1v+SGeA3z0DWZEKCh6vYQbEEO+RhUX45y/FFNR6fal39VGCV62B
49eRqEf3UFWJPBMWS6sN/PeDgnUCFXfHpwSv09532goo6BJ+VnbxNib8rC6V
epZDQbHT667rLGDBm7Tl6QczKbhYI/+NFBHP5dHFg9w0Co780128dgMLjtqm
dWYmUzCvMKJxyo4Jm/SZHlcSKfg9zpofKMeCmXX7Jda8JeplGuomEzw2cp8m
1UZScHikTm5FORPSW9r2Br6mYPB+8yeJG5gQkKvQvOcFEb/OcVESMU8uvnC7
TgmhIOv9vqLIS3TQul4o9uExBbcmS6RMEutlBgviLvgTegX1LmFdZcCYkqnW
cl8KWheTsoZOMKBINKGm7A4FL18Y9d64n5ivfZP297yIeLVj7tc8CF5/as+p
u1NQcCHnT5k2E4yi/SNGr1OwybrIdFMqweut2u1vHSmY//Va9ZXfTBCYrK04
Y0dB51nLFaK2DGjZ4WC94DIFe2nT7iMX6JC1JJfz05KCTjEhj1KNWRA8IXjh
cY6CgUW7Psqrs8Cm3EBZ2ZSC3W6uwo4vmaCbFF7Uc5KC/6XMn/fGh5ivDwYs
XhtSUFImUjC3lQGki2q040cpOP1TxrnnN8HrnjtP5g5QMCN00cET51gQt7rs
v/x9hH9av5r5FTLhFmP5D6c9FDQv0DNqfs+AU/UXTTZqUZB72Wn54j4GKGem
TTarU1Aftu64vJrgNYTpH6JKwT0Dv4/c6mNCp8P+dfuVKfhzptRUYpIJeYdC
81gKFAyKfbnuqC8LQje1G2VspGDi560RUEbwKlAYvryOgvZuXzqdHxK8drr5
rJah4MC48xf15wxY/bVw5T9pQq+3BzN+b2MA5fWCzIfLKGj2Tqj4lwcTqm6Y
Htm9mIIpNR9Zwp4MeG+c0EMWp+A6vz+aH1qYcG8byeu9CNHP1C3bSv7SIU3S
bUMOfxqTxJfaaf9kwPmq+SfXM6bRkZ3HSCfeN4mAeN+gyWkMXhx1NqqUBb/0
tLPpA9MY+F7f6mgzE26wa/oudUyj0eZcwb9SJsh/tl9eVT+NHMuUO4s0mNDs
JNi/q3Ia8erxaeslLHikEO6e8Jv4f/m39rvGmbC7R/X94q/TeG3xluNt0gyY
iCht9MqaRrPlQRaMtSyIPX1x3sCHaWS3thgYaTDAeDFT80TcNOYJD3BMCD8K
lT61+/pmGr8mqdkt+M6Ez/cVwuVDp1Fy4saTxkwG2O4uLHsWMI2hHvpzTGDC
SpoJm3t3Gm1tcxzaGlhQnj652c5jGkV7tt2/NUUHbzv/c3VO0/if5B2260YW
bJNbG6xrM40ZgxsjXJ4xoast59sHCyK/qzzmWhILnr00mFh+ehrPfotYPJTC
hP1GA2t8jk2jGOnWkFwcA+hidwzHYBrjZIRdH95jQDIuv2eiPY1HBlYaiixm
w1nvtIxfatOEP34IL1BiwQKN/d3KStO4yKL1x+w0A76T2pa8WT+Nslq1S6sO
M+HaB7d9Qiuncfn+vqeGAgZssF7g6iwxjcP/1bK2+DCgTjYhvkV0GpUkWq08
VrHhYaN23X7eFH5WnH38aQUTNEJrhT7RptDd7Ut2XBgDho84qMtMTGHkifih
f9osiBCau+zfP4WMW8lekV4MOP49/OVU2xQ+sjjD0znDBJ6HWrFF3RQmDoqF
/tFjQIZqGb2kfApf2eL+x4YsuDR6UWEHTqFLze51cjdYIJnINI0pmMJ3CpcS
JETYUHw+NFA8cwolt7OyjbYzwHOFYsGN5ClczIx+JEH4b3NN4UhX7BQGVlpu
2OTFhLbHpquPvZ5Cx0/k2bJrTHiyn3Q0N2QKh5UqN0THsGAvz//2Bv8p7Ax7
oKvryoSpvLVpwXem0Oudd2oRMR8SXHLbGTemsG3NQvl0ERac2WK4yNpxCm/J
uf0wymeB6MDAnr/WU/jgVNQ9wUom5MfccdY6N4URW/mMU70scDCTik08OYXd
CSliNbeYILvsY7XE0Sncb/Vk5/95+Fuxf/bWvins+W+ZhkcMA+4/bFcd3DWF
V02edvmmMUFt741LxqpTaOD3ibHjEwP6mAuef1OYQrEuPQnMZcCrrARUWDeF
tKjJbfe/MOGw427Kc+kprF22wUhGjwXs/+o28hZNYUj0wWPi29mQ1uVw2l5k
Cgdk9Vu6tFhwPnzuQT2XjJ6OGUKkGRZInIrI2UslY+cicTVFaTb8Wrh9MGWM
jLbhT+QcY1ngVlwmLd1Hxl5pKzzpx4D/fC4dut9KxoITKmrWN9nQpMW6OV5D
xpS63drSjSwIpIQmm5aRce/PFWdiiH3tj4ot+JOMWdlb6DuJ/o7b/hTflk9G
fYGZuibxHsSsN9MOzyDjhpR4h+oAFpxoJTkIJ5HxvMmVZfcJHoXCAiKvxZBx
4IJvZ7AeG7IN1lW2viRjwz/wVQtjge28PO6BJ2RUPkcNW7WNBSt/GW7NfEBG
uU3sHSxzgtdbg+dlvclovaOr86w/A7zV74YEuJGxNCG8+UI0G7ZNShVOO5DR
QCctdZMIwWvSR9J5KyL+g8aIRG+C10sH1peZk1Hm7QsZXxkm6Mt0nFA3JvSS
XrUy3pEJtPob92MPk/Efa32Q6mYWJIUszJqvR0abwlNeS3KYYH44sdddk4yD
Mztlhi+yYf7cbsmebWQcGVY3WvuICd++1ukflyejTnhBRIYuC5zdr97IW0PG
4w6Saw5msmC9itA7OSkyzn4a2/roJhPqhiManiwkoyx15ZU9zQx4GL9dlCVE
xqe0hxUKT9mw06Jc4zKHhFn3On8WE9+7w1JWV6qnSSjiGbdO+gEbIqpZr7VH
SWj49mCycCELjj96Vvquh4Qxu/pSntSygAdKrCUtJMzYOF627zMTPnF/Knn/
IyE3a9Yn1IvgNdfs7FAJCU8FDUqZswler5Mfnywk4YLAFxG5R1nwRynw6/dc
Em4TvWhbfpUNN/vWjSumk/BGtA1dZSsTlKLzZMPekXDqY/zgReK9bjMxMuBH
kZDP/NhjTCfm9ZKhOw5hJHxs6TSgGs8G3fK76Q1BJNR0MFwbMswEsp90l54f
CR+dXJ/KtSZ43ZMukXaLhH8PruZAIxvOMA7orXAloV9hh6yZEQtEMjuu+9qT
8GNviyb1HxvyHdzjJi6S8H36Z4tFCkxw2LSo1syMhGLSt9fd2MkG2c7Eud9G
JCzYkFcbsYgNf1/r7FA5RMJR2acCI+L3oY9xvXWELgmFhD48KbJng9oCxzAR
DRLaDPy6SJ4ieC0S+nN9Kwmb8yz3rCG+917ejaS1bSLhl1N39pQXsODQrh3y
h2RJOH7W1NzrIxtYU+UmWZIkPMCRUXi1jgWpqVYBaxaQcCdHYq/+OxZY2LDz
Aucmsa17oYr2f8T347rnwxTWJL495xZ3q4IFP5uVVllOTeKSrOyc9/YscH3+
60j58CTevPXAotKPDf8dN7+1s3sS68crMfc6wavIVMrbpkks63oosb6fDQGF
gW0Lqiex1Eb7uhPBg7bX+oU3iyfxb5jRdZWtBK/b83V6v08ibVkbZopwIGbc
yMkgZxLXvKtgZL9hwon3Q9H5aZPI2qz0xYnQc87y3t+N/2O4vOOp7MMwXigh
kpFElCgaShkVuTMiSZEileoNySijrBKlhRIiIpQIobJJuO29994cm3OcFdL7
/Hk+5zzjd5/7uq7vFT2NGe3HIjjP0CBli8DK6w/T6GXx8VarLANuNSbtZ/hP
Y0TojVUVgn8EfDVMb72aRsVWqLEg9Fyu0eNX5zGNrk+2Z6jyMsD1r2PBUedp
LLQWeta2TIO92ZzzMXencYIj3kH0I8FL9l/EN1lM4wWRdSfEZmngt/e4/sNr
0yi3sG3v2ccMgNGmJ2OG05h89df0WmFCr5FWqfq603gjNJbzOsE3scZrh3+r
T6NgkZWJmwUDjDaH8e05Po31dxSPXBUg9FpzSOOd3DSOpOfZ3Cb84Nfzyvt/
pafxSz/LUS4xJtio3oy9s2MaTUl0SUkaoVcmo7VFaBrrzqa3fUhnQEOq/zrY
NI1HboQRu0SHpzZ7FBPXT2PqYwEmVx8dDkvhbcHVKfyStL6l6wUDRvuNQp/Q
pjCO/VxUNo0BIR/mKqZnppDWfe4F+28anL7wkmk0OoXqFy7eUbrEgCUuMZni
nimsfxF4tIZ4v+SyTJMDLVN4JDxtnV4jDUw99Xw/VE/hfWmSjHsUDTYdG8tl
LZ7C7I1bZzhi6VBEcZ++92sKF6795TizjdBrsoBod8oUFsmbPit6T4fdt5PP
nkqYwmXKgR8amgzoFNd8nPJpCrVP7RWRt2eAT1fPd5HQKSzcNCf2H5GfykH3
+1++nUKj/G8FY4RfzZ7l2kR5MYVJHhk+e24x4NP6GDB9PIWk9sV48atMMCg8
bl/5YAodpd550gcZwPqw+fMR2ymsa2pc/6mUARlHrJuizKbQIawRD47T4Pbs
WhbOq1No6vOSPrCWCVvjww47XZjCv9fucfssMqD6ppzZoM4Uvgk6eOrJKMGv
26qCdNWI+fi0xK4h8vhg683SrKNTaA9nRG1L6TDgx6TuPEScn8NFVVCIDoHa
AVJ+e6ZwnNuvf0SPAZprpY2YYlM4YrbfIFmYCfRcfGm2ZQozN/lukXjHgIQH
xtn13FNobTCf2K/EABPZedKxdVNouyuMI8+U0OvEy61fVyaxaNP2tBeiTMiP
FtPhpU6i1qXsM780Cb1ezXJ7ND2JvwdTWGhbmbBT8Fzi+PAkNsWaDncS/t1S
P9Zt0D2JVQdIuVKChF69H3PlN02iqB9dJX8dHRTVBVWkqyZxjeus/zE6HSaW
k22DCifRc5/bqwOEfsMzNSNXsydxiUN4YjmT6Fd2vXVWPyeR1TpE93gH0aek
H6y2xk1i1Dwv3z/i889hroMnoyZxfHCro+F3OvwXEXMj6f0kqr7yvN7yhdCr
kXLAFr9J3CqVYmmQwYDyTS2FT58T9zM9HrL9CRNcq6zJM48m8dzV4hMMJPT6
jEXi8v1JZFubzybYx4AelfALJdaTyKWcqKFKZoAfXe6Z7K1JvL4Us3c1gAmQ
UpUeZjKJyTNs+nzfaUC2+m+UzYB4vq31iDyRRzG7/gjYn55Eie93ft0ZpsOl
voBTPTCJjGZ+Fqf9DFgfKu2spTSJff1MjuuEPnP0C+NSZScxQgr5LrxlgDXn
5Q7R3ZM49/HOyU2eTBAtnWf33j6JJxd8DQ0ZRN9//OroosAk/jx/Xmt4gdCr
krjV9Y2T+GlfmsidBRrIkbPCqlgn8d/cw4NDyTQYSTxXLb88gVPSmW9mZwm9
mo8vfaJM4AsBe48lQj+nxTz2cU1NoNKHpriwfkKvHYLXnIcm0KrGT1n1D6HX
wO9vhjonMH6SovCV4BdT3VP5Zxsn0P2aoCwSPLZpXd9sdsUE7hrdf/94Jw2K
Ch6I7cIJ1P9yd/Q1wcf3XTeef5s1gbx2AX9dZ+kgdTjW88/3CSwd52iSPsKE
jmnlFPOvE+jrqVTUOUkH768tgw0RE1jI9vuE7BomHL9hs1k5eALvliRK6hER
OrOVVT3u9QSWKMqGZkkwIao53HHzswn8nHy6/v0mQq9vDse4P5zAxTevvqc/
JPSqVd1CcpjAp9uXaC8Iv07/9x+bodUEHn5f07RfgwG3f/2RL7g5gTeeXjI+
ZcaArfcDLWQuT6B0cFrB8V6if+6XCQk+P4HZloKRY8T+uo8Xlv/TmsAzO4ME
3xykg+znywxr1Ql8bn/2a4gOAwZMFva0K0yginy4cVQFoVd+78tqBybQZd6R
lHCYCRp14j7JkhOY+OtdTcISA2gvs38JiU5g4/BZxQ8uDIg/eX7Ki5+Yl8gO
Ol2S0OvS+LY5zgnU5nJLdbNiAGeGh64JywQqZHm2GBJ8nHd3i3vpHxJWjTue
MyX88t6eH8kHySS887NmrHqMDjuGTvWFT5DQucWFpY/gi5bwPu71gyTsOoL3
TQsJHr7opOrQQcK3WTdOpHszQJGH2663noT32IxOD25mwERF7CftchIei9MN
0zhD6PWpSmNaPgm7acq2HHYMOKvcukYsk4R23zcI+PMzYZVqI+eTTELRyU/X
XPyYkPKD9RY1hoTS1NAJ3mpCr3c+vrvxkYQl5mqDjj8ZwC9xpKT6HQlfjzVK
LBL6LOupXlTwJeHl6m3o+IwBLu9vSUY/JWH59Lftrhp0kDm/dHGjGwndMuJP
itvQoXvDuxcu9iTcKb8U4EHc/02xTNawJQm1g3T6FHPooOpeNK53g4TcUcZD
A6F0WFAwEfplRMIwtv1b/9bTIWZ+QVvyHPG8S3pxiV0MuPTN29X/FAmvpUYt
z/AwYJ3Zjm9LKiRU2bEg+ziG0KtoTpeFPAnlqH7FVcT/Z91+nrNpHwkfbmsk
nZRigGgA6bjKLuL58zLqLkS/qdfxtInfRkKbFhudnCo6PGEViuDjI2H0IPv0
hxQmyOX/qH3MQZzH6GGuwRAdRpy1/k6sIWF1gf4j5/dMeH+o/8BF5jje9xVk
/zXMAO0pp+s4P44bvafl2nPp8CeG238vaRy16xjdeoS+k0y/4vv+cazsydP4
xs6Ea0InFta0j2On7a3ND6cZwNPUusO2bhx79M8cMyber9DX1qCjdBxrqiRK
JZMJvWqyeannjaNxfqRaczkDpFY/pn1PH8eTspSXbJUM6Mg+MrI1aRx3i55W
NL/MAG+HGv7nX8bRSdG7sOYKA47vM9OcDxvHJ5XcbUPFNJgZXXpwJXAcx08o
VJScokNU1LuvZd7jaHIsKOtxKxP0L+9tP/RkHJ8WWv6W9mYCC1/x+giXcaS7
3k6rb2ZCeo2JErvdOL7cOHD8lAYTLF6QLR1vj+Nz3QwdqwsMEAKfD32m4zgw
9fzRtykGVDF3VJ2+RLxv0ZZdHUTffJSW8yf97DiqnH2tbUPs8wFb/b3imuOo
FXFHqbufBv1SE1d8lcdxHZ+3uAM7HQIGPF/TDo+jlLbB2pFiOqiHCeXd3DuO
kXKiMZo9hF4v/Jyp2TmO7//xN566xIT4jdrblYTHkS947GObNqHX8n69L7zj
yD7HdzaP6FOcT5w9uDeMo6VQ3nkxZQbkHeP56fpvDNlLh35X2jDg3uLXgRH6
GC6cF4itIOa74/sJ3vNzY7g3pjTNy4QBzbfbTuaOjeHbzt1aL6SJfN1x10Gq
bwzFz0jwdF9lgEI325eA1jHkFf2qePAYHUhBEc3LNWOo9HFDTy/hT2F68qyW
JcTzbHynHy3SQJe99khz7hiqrhgJwwoD/haamZ9IG0OetCixekK/KQ+XgxO+
jeHlZseMRsK/b8oHlfFHj+F2Zo317H8M4JvbS/f4MIY2+6TVN1QwoCy+ePeU
/xgKPrcfqvqPCS7/XTG+9GoMozdsthN4RuhVhPKq0GMM46OPBDEb6dDT6pOz
z3kMV8cHvoZfIvT6dudkyN0x/CnPfbSA4H3V07+EWSzG0Orr/pYEQi8Law3O
3L02hn0r2aGkRgZ8+T3xsNNwDHXW8IcK8tPhotOTJA3dMUwcNU9/kMWE9Qe3
9v5QJ+bzRO6mUTADsid+btx2fAz9Ta0ehxnSweqL9okXcsTzW6Iqz9YwQOTa
wN0F6TGsjizXdi9mQJ2gS9TVHWMoMc+xfJXQo2cDT0O50BgWqeyS3+ZLh0M+
cf/kNhHzfaG0xaGMDsPqqoci14+h+6QNC3OEDsErbTc3rI6idXS23BtuQq9Z
dwPv00axUukJV9chBjDs1hX3z4xiKY/U8ZEBQq8ykRSd0VE8WP913acwOlwb
kd+V2TOKG+PmDIz+EfkaWWu4o2UUf0amy/N00qHQyPz56+pR3Ds/VjaDTHDg
XcmgF41ioWHty68lTJCsDhr779coqspxsvsTvN/2bN+WupRRXLOLGTnWRuTr
iRKtowmjyHFiyabyIh2OMa64xHwaxYqdiV7XiXyaTaHE84QS3497SmV/YECk
tW+n29tRzHntla+5yoBzkhIcYy9GcX+RL+eZCUKv/b+O6T8eRfWP23PMTjMg
LdTA+veDUfzmPnJkjzYTbhtMhu+2HUWhdJV+CpE3QlxPawLNRtGK9NA1O5MO
FaVbV1aujGJAlEvqOqKPPPJI2X/nwijKvHnsbJZBh/1HT5u26IxiiYdB/XQ+
wcPkAT9VtVF8c0BUcd8oAwKSXAq+HR1Fk2tGxV3E9xoWm+YFDo2irUOR17kU
BlDF4sWf7BnF6CopW0llJnztVNWfFhtFy5WknbJEfl5+1/7EaMso/hbkqbS5
QQeOs/dSi7hH8axdVNuUJBPy1q0f3r9uFE8r/iuU2E6HuxjJ92FlBOOM31RY
E31WzE1Bg5U6gqtxusp9hH81Ha67f296BDnfXbQ7HsEErxnz2K7hETTt3EB2
bmeCYtxKq2b3CP6MftMoYcUE0o3gdSlNI/hh89/WamMGhAvvVxSpGsFjPL7a
jssM0G0puf2ycATX7SjMYatkwsqbq6Hk7BHMcIhfHiXe76fWYsW1nyPI33Qr
yZhO6HXNa2ZF3AiecxY1UjzNBP5cCZkjUSP4K3fuEhexD6X3c02i3o/g4lQ6
Z6kzA5wOXPDl8BtBYW7vBWYiHaRJk7kPno/gNpW9CULHGdD1+en0wKMRzNmX
n1V5ggFvrgiL6t4fQVqXCzljDR1OCKSezbIewZWL9666VBM8XHf68c5bI0jm
CzeqJPg7+tXg9zcmI1h5eyn+szgdLqi59jP0R9ByrlxqEw8d1i9v2mR2egQZ
Fnuqr1YxISsjHuphBLMlRr7H5jPB+h7YH1MawZrthTdmTOkgIt3xOVZ2BDka
Hp1RJ/iqZuhe06bdI7jDSD7+OOH/nh/XszzaPoJWiY7xCjxMOHQp6vC4wAgW
D7V9/sdF5CuPopnBRuL82pfNX91jQHBlXVAe6wjaORgyJcKYoO1lUbpneRj3
6X3EelUmMJX/Ut9RhvFwjNfnq5xM+EYLllqdHMa6uouD4voMuPZzv5HV0DB2
7uFe22HEAG6r0petncMYFdFww4zwnyKJa9nQOIzeLLVPvazo4NC7SEqsGMaf
+rGpjMtMkAh5vXULDmPSnbE1skS+t5/fpfM0axipN+MX70Ux4CXHb7eZ78PI
l/b7QQqTyNeSC4nGX4fRr04uK02aDtPuU93FEcPI0Jc74kShwUdFLy7Z4GHc
TtmtupbQ6/kFYZWw18O4+dUHrjX/6LAmMdWW7dkwHoWk0p/xBA+b6UTaPRzG
bZe3C3FJM8F8+1Bdt8Mwhr7326+8TOi1w3X1lNUw9h6LPKjkRYfKAN6DqTeH
0fy2355KBTq4nUm4IXp5GP9oXS7vIvhqP9vJgFfnhzEi8wB/TAET+vI7Cila
w7hO5OKgRzgDAl3syKaqw1i6dtsuVg86qMmxS1QpEPNZ5fpmKEYHylTUBfkD
w5j4vDZdmeDtuFjFZ58kh7EvJNZgRJ4ORtfr0zlFh/HKZyc94S9Evm69PerE
P4x6h0+YvfrEgN9NfwWGOIfxZZXz/JeNRL6+fn/qLMsw6nRo5m9kZYL4qQPO
2X+GcN5BRjnhDw0aV0vjJMhD2LHPTl84kQbPcq51+E0MYSFHrIgkwa/yjlT2
PwNDKPKCTyPsI5Gv+94cNe8YQvWYN+/XHKDDh7FdVg31Q7gkdPmGI/F/6Xz6
HXa8fAg3Lz6/+tqeDiuXDau/5g+h+eFumV8cDPjON73EmzmEwse2B739S/Bw
rdc+9+QhrJ/vUrIh/Grzy23XSDFDqFktSZUh8qIM0t5c+DiEPqTZf6XEeZz/
6OTnvxtCBXHVnx6vGLA7fWhW2ncI0yU3NudsI3jY1k0s+OkQ9jx74NPhxYTX
uzef/+c6hB4Nh7rsCP2pDiZ4WtsTn8UCDpAIXpkPO5nSZjmEtTyGWwqJ/fts
2Dl48sYQdjew/9hD9ENDbvvNyUZD2HV6412WdDqwVbCrC50bwj97OF9NEn0g
+8knR69TQ6h/wYay5Tod7hxXiplVGcL9m69V9ZFpIEKtb7ksP4Q7Qzf43Ami
Qe3322yl+4bwFc99vl+3GPDYclX+4C5ivikjXIEvCb3uDLEI3zaE99hVLSe2
M2Co+0DIOr4hrPpaHlp8n+Dh4LJye44h/BGk+4zkTQetc6aMnjVDKPvyhvb6
dhrQ2WlE7Axiepe9UKQKExKL3lxOmx/EzH16lIZYGlx9JOmznTSI+/e+Wp8v
xQQehbxf3v2DyHXuwYY6Yj9wznBqsW0Q3dX3L01+p4NjwvS2G3WD+KpUwu2M
OQN23XqmW106iK/Nrpu5yDOhVUTEXSFvEKXrrUScn9PgVVta8uf0QSzjYfDI
Efxw1P9MH1fSINJtt+zLJ+43fXqY2+XLIF48LB2iRuxPBMtD1eGwQTwcTWX/
/IYOenmb7fQCBzEiaGoDmx4T1jh/+5TjPYiFDActpStMSD2o1rjrySCabLy/
qk70E4vJzjX+LoN4+XZZVtouBgjG2Mst3RvEEc4I9oUkOlRd23DL4vYgph0e
Ot/XTIOHWz6/azQdxCCfpraTH2iwt1GpRPnSIG7+Yd/xRJUB/T4Ni3FnB5GD
/xjtmggd/DUsJfk0ifk1f+gtdCF4+O/qxcfKg3jTPJw7hujvi1khLyYOD+K2
rq/ksBcMiLWXzTLcO4iJh5zevn9JA+O95eMFOwcRdoeUyRN8u2HUVGiv8CD+
6EjUFLdnwu9ImvZ73kE8F3R1gUzwsK2xn+uaDYP4XFhxp6ADHY5LnLnQsTqA
qTe+x6T70yH6vVv699kBXNZmFfj6nAEsHN8EnvcOYMpjjpgZ4rOVe6fTlZoB
NDHIm3sWTuTDPHvHodwBLHzhudaaxIDDZkpH2b8NoIqMxWbZPQwIar8d1hc6
gOa7rlwXbaIDTSdkKf0lcT/5uNjbSYS/55dd9XUaQNlzL/SEDGmQf4iWd9N8
AGXYK+UvBdBBMlZSTMlwAIODf5g/EKLDS6GLntzqA+hS0qwl/5oBJN9ngyOH
BtDi5qaL3+4T/LSappYrPoBj/yJ9+wneSnEY/hLAQ1zPiLl+jujvQmOb2Sz/
9uO86cBKEbGPrpfVLE7M9KP8HmF5ceL9Bmrsy/l7+vGlNreRIdHP1ODznqmq
fuwo0pS+ZkSDL2kN3oU5/cgrmT5hHUzwzO5/kyHx/bhrksdXS4EJNmGyundD
+nFVTXmD9kkaNG+8nqzxoh9HDgl3pfcx4MgTP+5tD/pRInL3TUc1BrxfzLu3
cKsfLxr/Va0LYcDK7ZmGcoN+/KTQ70aXoINpt4hc5Ml+nNgrVijBwYRSPd13
9w/243OD4hkBOcKfih4u6oj1o1RLoL4e4Vd+8okXd3D3Y3wg29gDAQbMxXdl
0pf7UP2aUYICjQH6IhxCdVN9WB4YOwE/CX5/e9Q1pqsPpc6Ky8dr0mAry50u
t8o+lPNYHY1SIfLeKfS4fnYfDlcp3XPdR4OhifKPu+P6cPmLb63mXQaoX6Ov
rAT34afejRLeMTT41iB1veVZH96pEed5TPQ/Lo1L+M2xDwUG//EfJPjVMev5
jif/9aGRkFyAnjgTWmQynhrp92EyawOD1ZXI38iR4f3Qh2UldrOhBA9E8PJr
ssr2oUJEpVpEKNGnnql/7RLtw7b9nRaHNzDAnOGwPoWrD4/GHtqZd58O5dbR
li+XetEtTSiiJZ8B+/sbK69N9qKC8kDydaJfvDVYs/dIZy+aOm+ZcNMk+k/p
wdccFb046MCnGc3HAKOjN2YGMnuR9bxFDekaA3KS3uplxfai+M8dj0fMGCAu
XvDjTVAvZu++dNeL6NtP381uMvPqRY5ik7bAUhqQ1m13OObQiz7nePl7xmig
43a2edPNXmSJ5Dwi9o7oIzOPjoyf68UbCbuWYog+v/lmUnDeiV5Eq5/bvPwZ
cL+lm/Zufy9K1nKqtZkTeaPFaWwl0ouu3qdmxE/RQDn3WA5w9uJzudK8D9ZE
fzhgJbzlTw/uXb6ywYDwN7boDw9nSD2YFpNcme7EgNsClT3F7T1odvmSXOZx
Ih9eMVTCynrwtU1GzY8FKsgu746yy+hB0WL6UUOi/76/Z/TvVEwPti8r+6X+
pQJ96MVN0Xc9aDo3nJxPpcLlS5lFlCc92L3vgP+WPDpg5ahElV0Pcu776PF4
ng47VASef7regzs8P+/m66DDq58aY056Pej94fm/oEcMmJS4r3VWpQfJzhV/
6gj/1A35Ei+xrwcHrndq3ZKgQSpH84Y/wj24sQW3sAEd+B+vtW7Y0IObI/uz
Zl8T/rpwqOYroxutbu8cYBEg+q7Zzf3u49141jBAfZzoGyc6/P0utHWjceAB
hXlxGsSewTnp0m7cHfTuhYQPA9YVzJ3/l9aNwpma3StPaWArJ5baFt2NPQaL
Z9fb06A+Vo8vOaAb12Z7JMXdp4HC1sf3vTy7UbyY++YM0V9CXie3Xr7XjeSZ
9KMf1tOAudqjcNC0G33Fiy3KvWhww5ErdN3Zbjz2XCtSPYsGhWPHmT3Hu/HE
QT1CsVTYY2JtkibTjd0/2AR3eDPApzYs13trN7brnn8QP0CDKagSucHejfH7
PFPebaKDQTrTXYHehdclAu9JpNAhfbd0P9dYF/5jd1KRXaXBtnBjGG7pwjlx
hSFpRxo84n71Oae4C7WPNir3FVJh+EnWWv/ULjwwz8kpbkADTerYLYvPXbht
C/WlPsH3Xy0FS5X9uzAxt9R+J+G/G3s0pfg8utA08/GBqKME35178HLCtguf
Zi49/EH077aiGFLB1S4MNRyvndpMB0WFltPvz3Qh15NiWV7iPB8SWBJtjnXh
vZdnuFRD6PBP5DCXunQXcty7ombcTYOb/v/ZbhXqwt4MtkylLqKfsgTWza3r
Qop6B++JUCrIOBfKllE78aKcfczdbioETM77fxzpxHXnzIaCLRlAviZOdmju
xLaba+afv6GCYeO5C6eLOvHYjYPkQk8G5Gp4pIuldOLsM5PltRFUEMn+LkCL
6sSgLOVxN2IfvPb2OdX4daLGyt9/lwl/Go3c2BHt3on2nMViJ7/R4dRmlaOu
Np2o6Nr9Ps6QAcnPbcLOXenE0ZMykpn1dOBhhi9J6nRiteADhT33qeBkU311
WYl4H4f29D8Ev7T3/8lr2t2Jn/N1hBVFGHDigoxYgmAnCskMZu8k8uJT2WVP
D7ZO/JHGKXnlEgPWHPMevLjYgZWh5G25bnSwTM5W2zfcgcde0OwmCD1UiZO+
rG3qwKdlDXaDxHwOBm0hru7AAfgT8oiX4P31WhY/fnRg80Pujh1HabDo5lT+
PLIDzZrz3I7epMOV2dg9V9904NXoSf/4ICr8vtnqLfeoAz10dOlCRD5ItLJO
sVt3oDD707Zd/HR4rn1Et/9yB16C/miXNGIfc28lZ2h3oFuDS7dHAg3Oyr7j
fq3YgZNWjzMjdOnwI7ro3n9SHej34+vKZisqCAiSG5QEOvCoTXoO4zsVnL13
yPGwdqC9bGJJUjEV+pbPvxslt+N/7gl36TN0ADvPxdzBdtzKBJYfHDT4PPzj
YmBDO+asWjISeunAbtSfaVnQjiGUvdVVcVSwquIWUv3ejj5zuz7eI/isQeWE
q0BEO86svLvO2kMHuRTbrinfdtR7/0Vz6wM6BO2KOF7k1o4LH7S56EpUYmo1
H0PvtGMPv0LXaYJ/rnIur9w1bkfnY0p1d/7RoPjx3uuaWu1ISg8DHRca7CKb
4DaFdrwaourYQ8zb19xnB3lXO4rEaL2c/kaFmY6cpxV87VglBzEHQ2lwTndi
OHJtO2Z/2pUqSPhHRoGQ5oOFNvSwXbOrmdiHLYe1v54ZaEOZMyoXnhF8/fir
8/qd9W04yr91kSWVDv1b4ywZeW1I2XixtPoFDU6+aausS2pDFsVNbx8T+Rb/
j21vbHgbPmSLOd0vR4UN9+VfP/Rpw5OW/S/JF+lgN242o+/ahkx5daK20aDJ
JEhvj2Ub/hLv7zNZJXi5rvjH30ttOKmIvi+yqRB2krKpVbMN/dh8yheIPrGc
vtMh8UgbPlC5qxSrS4Vbewyan0i04b46d2+RMSqUhD85Yry5Da2ecttumqPC
Xp6U4ANr2lB6mXJGl0mHN08HaKzzrWg4d0jhIHMRZqk8xt19rejoVCfOH0eD
i3dUc1JqWzEnh7ppA9FnsnruCr/63Yof2q/vHN9Fh+3nIx+aJrai8NsZFkd1
OngU1/YcCWvF7YPFRuQyKowprKhwerdiq6Pr2wPvqKD9bV/UoHMrJj4lKQsQ
+ZggevVflkUr9j0k2RzrpsOmAN+bfhdbcbKsSDjQkwoOrLlFZhqteL9haU0l
kf+dzpMSxw+3ooK+VaT6PRocm9r6nHdnKz6+EyH5TZgOH01Pj41vasWJPfW1
m6VowNLkopW/2oLZuZn+hqw0MNOMjw+abcESj0ezVXZUqM5u32Dd24JH7kqc
q3tB9PV9661P1rRgMrvMFuMfVAiKUqjZktuCIieF75TFUIG62WL/bEIL2pyy
ehO5mwpGL4L9SkJbkBI6r+QUTfAws2Qu7GULCsTe4PeRp4GY7eJ5e6cWlDye
azCTtggvBiRStcxbUPXzFpawS1QgXbjAt92wBT+X1C64+NPgdPnT+4tqLZim
pUc2+0mDn8dSW6sOteBMV6aJxCIVNn8fVPgs3oLeVbknbxP+7LqDN9SZpwV5
vst4RXTRoCsImGf/NmOIrURLrgYVTrLbmeyaaca1zi6kn7Z0+PIwKvdPdzPy
Wl2UDEilAutcnUhjVTNWWOuOBzvQwPq/v+5xOc34bfivzdeARaht3d/vHt+M
q3OnednsF+HI6WtgGNKMY9akdsFoKgT/fv1Z5kUzzjhrfv4wuAh02d9r1zxo
xtChb4zHTxfB9MvUrfZbzZi8euZxe+siFAhuK002aMbtl3x+BrfSQMpHR+rZ
yWZstTrDQb1M9MUV15cmB5vR5W7G6bWHaDBrl0A6KNaMUo/sNNy+UOH8SMfp
9dzNCIcMaH7URUg1Yk/sXW5C0/xsmRHCj7ZWK3KlTzXhewMubS53GriduG3r
09WEsoF3F3R202Aw5X3djcomzJIT/3xAnwrqkmWyitlN6OGWtOG4OxViQqn+
G+Oa8E7A1EVxwj85uSTJw8FN+H1Q4LJFDcEfHoYXfj1rwo6y6+bRE1RoJnul
+zs2ofmdSutHelSQt0gTuP1fE9I6ZNlUG6kQ0jnkpKLfhBcMO9ea/qbBiu7m
Dj5owh2qSX/6iH50HU8enTzQhHsPppVObl+EssP2YSjahEePFRmqEP18T9yn
pfdcTfjFWeB7UzUV/IQbrtouNaIoxNiytlFh/s1qnvpkIyaNH7lrl0sDgzWy
YsKdjcT86ZrPuOmQfd/Uc768ES+NrS8q5KSDMOnNYFlmI96U7TUm0anw5Eqe
WkRsIxofPljb1LYIQ3XTXxyDGnFF1OHpmCUVNNRE2HS8GpGVdqa1OWMREjPO
WIg7NOJmDan6E0Sf3Sj9sJx2oxHFWotiB4jPjh+/7ak914g5J+2mzP1o0MrT
5f3lRCNSyy7S8ocIHvbaMOW6vxEPLv5TlneiQQRNSfe8SCPu1m3YZ+20CKt3
LJOlOBtxSEzaw+QcDapzDogwyQ0Er2luNXq2CH6f3vTFNjTgcMHpQUinwtWX
058MvjegJ0+XQ+tVQm93z9xa9W3A+CepFN7zxHkMv0km3WnA104LryyvL8LP
4xtIxloNOLGGj9xN7LPjTstvbJIN6F1yy451ntDLhnKb1LUNGM1+T917iNDH
vKTs9YF61Djvte665SI0tj1b4Myvx29NKkdliH0NzhtOyw6vx2RR4d0bibw0
jlFzMnetR9bBziFqIwWkfD8rbTaqJ+a9dc36XzSYsP/3J/9IPXrfi6kVnaVC
pvH1POvN9Whx9uyTopZFcFPN9xCar8P7amubRm4sgoqUqFppbR32tqtr2RF+
xrnxEatDYh1CW4DgzwAa1FG6yrZ716Fmfql7x6NFCO866l1tUYe0AqcBf4J3
rxeGnnHRqMOTxjczr+jQYF88faPkzjo8vsUrzUOABvN+lxoaV2vRJJoc6fGP
CmkPMgIf99ai+BSfapIrFTyv8l/cm1uLr3cl007VUUBD3XFLR2gt/sg8lmHa
QAVemabOZ061KHXKyOy2MQ1aNh36eMiwFh0E9tVb3qFBKP2tad+hWnwmslSw
/9IimPfNivvy1KKq3O08ncNUkC49O6w4U4Nn9BUp2sS8aYlJsSNVNaimqmVP
/bEIOYGclgHxNSgWpf7xjs0ivHS1kjnxogYXfZ5r5xH/v86NyunJWzXoeOhK
2fUbVODW2vMj5CTx/YYXEieI67v3v7TXEKtB43u3azUjKBDJP3Z4Ybka7e3/
/L7cTQGbJQ1aRFc1lrifoqltJPrV0JdsnexqtEtz8HiwhQaUirUP6cHVeKX5
YuKly4uAP26qxDhWY2naKzGjJ4vg9R5Xz+tXo9e6yQoD4n767mJFKweq0cGi
j3T7JwX4zR4/+8ZVjZQ/h6qc4oh91Ok9ZTRZhedcH7dW6VMg9pDyBtaKKjzY
ijqFPDSwFAqv/hlbhVW1TskX/lBAYZX55ppXFZLKZqs8ZReBOWp8nuNmFQYt
pHBPDVOhvCZrc9aJKox1qk8fq6CCT5pg6y2RKnzzAi4IEvl5NuxByKY/lRiV
Z5PaXECBbU9aLue1V2LJw6rPZ0YIvrt9WMQqoxL5ZgTOh3QvQpJeYJ/gu0p8
dczaRO7oItyTX/hUbFeJVxWVr6wdWQQ5kfO37PQqcWS3/POxPRT4t/aHpOi+
StywkvVzN5GPxRMbSZUbKvGJVdSVrD+LENBg881pvAIX7CnWY78WwTCr2kai
tALnHAetHVipsDNSRrYhugKlozpUDPIpMPrMe+GRZwXe3exVZHyFCvHWpDRp
0wrktN11qKCEAk4GWk5txysw/9bPmFMKFDh69KuS19YKdBFYpgWqUmC9ONuS
LL0cL/dpxRZGLkLVOrO8npZy9CUXSMQVL8KbmSIP79RyjH4iFNrXTIErLTvU
FPzLMfUU/1o2gs+253qyDtuWo75a9ppXBK9Mf+4ve3umHEUk5XJ+Evn149UJ
b2XpcrRWfzXi10sB93sRZybWleP9c99qc/YsAlxa3vh+pAwj2GfOXOKjAIvK
lQa1ojJ8dT7BpIqYX6PEr8C5qDKUaM0WO7yGAkEcWy9+dC/Di1nk6f2fKfDf
gvOW01fKkDR1M9gpmgKSHW2dVKUyTNsjVeO9TAFSvvzHaMEy9K0vfttKnC8z
Nsj03GIpejjNxQ2kUMDtNUV8ubEUK1O513gQPKflaDAc/6MUR0s4tqToUoDT
JCX24ptSLF9POVqxsggdsMlyrXUpPt5ZwRosTIHw3fdkfmiXooyOg2tL+yJc
566bviJViq3OTnJvHRdhH3XfD3bWUkxhNwxfukmGuW5f+4zBEmw5ndCYVUyB
vKLJw/8VlKBvvNUnShcFPBNO07gjSvA8l38kicgPDf/47Fy3EjwZPubf4kAG
Xuf1Dy2NS1DV2uJwzF0KtFyzUBFQKEH9BV2c7lqEaI3S1UK+Elz4dsF2tykZ
zPfuKrq7UIyXPV5/s/OnwOHNXs+21RdjWq5lCV8sBWiMwVMVScXoi7zhYdyE
f/TDhgc+xfh5VNllyYTwj7Ko6h2WxVj8fJamx7cIOsl/39RpFuOJbgpZiZcM
QkHXzj+UKMYIhpWakjHhH26/N+9ZU4yfHN5mN/AsQuTNba0tfUVIDTspqbtM
Bhttt5Anv4vwTmTlft+YRZCV7bx8IKwIB0U1z7T8o8CKgJJIt3MRvvyvnjKs
SPjH8vu+lxeLcKrjJf1MDRn8hqmfjhwuwmNz28ekAgj/qDK8NbipCAV8ir5v
30AG/pQ0Sb/ZQhQvUj9LdiHDUMhm0rGaQqRui51UkyRD7GP7b+MJhTjwO7fo
9Cciz8wbbIJeEr83Ff9l7E74h66s7EnzQsx4EzTzyZkCTDm/hRm1QnR25Waj
dFKgfOtMWph4ITLbT7dIFy0A37/3U2+WEP13s0k0a5PhR62h3XgmYsZfi/9a
t1NAPnwzAeWIUYfFrnC8psBvywbXsP2I3qvPjURjF8BIwe8vhVSA5ydj/LmJ
8/Sy6HqdjSlAb3178r47ZHBt3MAed70AXc7Yf9Uk/Hk1svz1P+EC7AkN8ZJ9
QIYwm+e8Jm35+Gp9oETrwUXYcUz9fVpAPo5mzduERyxC3Po12zaezUejcZGC
bJ8FUG/Nj7Jgz8dPpY5dZxcpUBn9aBcW5yF62HRVd1DAzO5YwlaPPNTaddrf
Yj0FplQY+x2P5SFZK20i+PYi2HNmptZQf2Op3NXupSUybOx0VJRK+Y3IItBs
X7AA774e+u1h8xu32VwPun2IDAfuz0Hn7t8o2T7LfM5NhoyTyaVyw7l4dNPo
dxvCD87zWOu8jsxFjy2GtTlTFGjv2VM/ejkXr5ATnFdKF+Dat7ELqgK5ePyP
t1HhJwownGM6Qht+Yf+l5yxvZyjgofnfNbLvL1zi1Vz/wGIBhPnEh85o/UI9
DseWbW/J8Hmg1yJ27S98eofB03ByAXZ/D5/6m5eDsd23296NkaHo4WU7Y9cc
/Kb+bjN1yyKcPr2FmnIkB03seh3zJMgwItjqyjmfjcNxBTyviX22Ggn8a5aY
ja2vwrtvhFFgXep5r3yLbExauXWycPMivPbgZhfamY1y0n32IY5k4Dtb89q+
Nwv3erGeDsilwHdhH97q0CwMKt/8qHkrBY6QtN7vMszC6YV1VWGXKNCQwbbt
MU8Wrrc0zt/5lAKXvIqj2qsyMWYs8mJBCRl6zz/ZdehFJm7hEFU38SaDy3bV
BJ+TmUgZOtlSTybD36nl/SPLGei0XJ58LpACH3J+papkZ2DYe02u0rsLIP7S
RTHEMQNR9WeMV/085Boq/J4/kIG75kbz8ojrT+4kND6ZjnuvzheFGZChYi6l
9EtsOqaMkGOPuS7Arbx7Ois30rHGlP+rHnH/CZ/99ZdE0vHd/L7gc84L8Nx4
6sLP9jRUElIqvT01D5xSCR0b3qWhYAD7d7NsCgRSLK7d0kvDj3om20+eosD+
wl1Dvzekoe4jk1NZNQuQ5jdkIViaii3KkV963Rbg3NVPU/c8U1Flq8IEz6YF
aJU2tas8norVd6ZvP0uaB3v6NupOegrhtwyDZD0y0Es6XR+lpqDeh0jukpIF
cA8M+dtqm4Jb3Nf6GxLvu/XGRS9Z6RTssc19FnOVAiomkjy8FT+xRUwxxXUt
Ge5TPwmVnPiJvuYrf9x4KfDEX2Snc8YP1KRoLGcfWgC/vaF7Zfb9wOj0oo5w
ezKUlPHJ90Z/xz1f5iVNyAvQePPtCf+t39HC9OEmG9Z5YF/h0Fb3T8ZNa4aT
HupQQCD0hT5tXTIm7GnWzLQhg+7htVcS3JNQ9i2D/0bgAhjXuZtdXUxEpm2t
BtN4AczvMG15rBMxSacz0WJgAT6yPnAuGvyGhiyl/n/XLkBC1LznA+NvOD+X
SfpD/H8Dx2x89tQnYOBeTvmaBjJMt46/69ZMwNjfrj8rp8nAtLsV4fc7Hsks
jrOW3+fhIFf/15OH47GTN+mIpM88qMSZ/FxMiMOv/67GH3KYA0e1tpw48Ti0
3T36lTOVDJ69+sUmIV8xUXh76nm+BXjjUluzkfsriizMf/UQW4ASvtNt+CwW
1aZGvWZJZGj8XtLvuBSDLgzPy8d9F2C9DkxIOcSg8rrKyfh988A/mkvuJH3B
nH2lHDOdc3DGU3H59fUvaPZubPAvJxmMt6WxQVs06h9610gTJPIs8wAPRTea
6OdZgdqv5iFc/5vQ1+LPWMiZ9dL47xzET0vuvHzsMx41nrsX4E6GPG61S1tu
fsLX/4nHxcSToU3j6B13vSjssmn3Zz6bhXm3g4+Gj0fiZ2owS2/VPFxL2f32
tHQE/utgFPZJzYPz+PboH4IfcXD9Em+B+QKMigpmCLCGY6Zx7fuTJ2fh74WN
FQ8XPqBYaaQmCC6AjQ9r92BfKNoWHB9s+TQLz3FpRqsmBENeCGooKpEhikb+
l5zzHl1LN3NRbpGBa/8kH39cMPIkho8Vcc2D1K1BKbegIKz9TzhTRnsO3n3o
ODrw5B1qNTjJWUbNQnJ9ve6pe4EYEKDE88iEDOVs5deTrgZgY4s/N3ybh9vO
D0ck3r1F9xMc3H9DFiB8+A7HvO0b3PfhpjQvdRaczhsf/K3ti0+Tx1aYAbOQ
8PvUpVcS3mgemD/nR/zfz6TlHxn+fYHJfhrdGi4LkBUsES3e+QxDgj+9C5iY
gak1myum057i7ebGhwK98+DTs9plJ+KJagb6loIfiHmm90htaHqID3f8U61m
WYCvfjkOn186o0n4NTafyFnYePt9/lEVR2ypUs/uYJuDcfdRvi8jNrjX//K2
GvcFuHAoKrH5nBn2ssVuOjo2A6rFP5+vf3AJ+WfP7jLaSIYLsW8ao2TksH2E
Y2wvcf2Xqeaj9wp0YMPpPiG+HwvwkIc+07bhOnjO6u2IkFwAO6Oi68fDLEHl
4I/o9MAZaGp+NsImZA/TKfxvLlYsgMifuFDb/x5Aov3wtRLi/Jk7qnVbk1zB
RXGw3p/Y5zXas/+U6e4gops14SIyC2eVNnQbfH4Cqn2PGuwnibypEc54UeYF
JUqxN1LbZ0H1+r63v6aew5n1uefnHs8BF0XlzuymV8D3cdmDn20WDr04p75T
wQe8NqX3lRH59nfrTdFLV17DoyzLvbfj5kAi2YHu7ekHJ2Ml2m7kEfOEZ415
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
fd+NA7NLyPCOTK/R4M+UGD5P87ZuCb3cxSs1OfaFTJZLfo7ZUkKj5znkqph+
ph+f8w/V7CshI5lTZ2arF9CDHa8GDj1eQulb5iJsQB7NqT3ur3W5hKa5Ld9K
Lqn09ejq1Xvvi/7d9d7tD1eS6dCfUbXXXpfQnt9KE0J3cEjao971XXQJPegL
SbhgzCG/0VEqFZklFNu+x/z6gyxa/tI9QbqshFbz8+vrvqZQ+eyd5nNaSygv
dO3xoNupdOLjtL+7/pTQvCPrrk0VrYMj1/147CbHpQ+6a9f1u5BNwYWZS4In
cqnKY7AmKX8hw30+pUVzuNRyyXzy+vdJ1Nx+2LnfSi6tvK+iOH5+Lrm5LBk7
fRuXjA02uk3an0QqMkOitlly6exUr6S0m3kU61m+/ewJLj3KlkmQm5FOu1SC
hf5XuKS3yneE/WUOfQs+ey/3AZeik3LD9cfk0m2djfN+vuHSIu3fcwK4uTQ7
XTlPNZZL1yPuUP8nCZSxrcN+QxaXZnepfVkzN54O8CDnVM6l01fG/aqem0Z9
NreDn7dxabhxxsB7TSn09Mfe9Z//cqn1P5Xfy2XyaOmVuS3dw0ppnNqU4E12
UVSoIOExQUX0c3flqJEZSXT8GWfa2nmlpGq4f+qGczk0dMbL9KOrSok37U7G
qmkpFBR97ICPUSkVayu8zW/6QAar9aRSROeKkVuCMyx4n6kmb+SrtpOldOnV
72JDw1y6uKdu5ZirpTTFPDtA50kajWt5z9d9WEpmnz0930nGUYzTlQuHA0vp
m+ZKozWy2bRjwI6JnnGldDAocM/Q3ZHUeXtq/Kds0eu9eHSwpzuJbk34btZQ
UUo3b28+oXgplaYFZvwa3iE6R30eGhu3JYnStB766PQrI5Wbesv0vgbS3mTr
xZbyZfRrT7j05eGgv5t0Sv6bXEb7q09cPcwNpsflsk5R88soy3mJxvytkbTQ
umwUX3TuOao5dUSbfRYV9ARFyhqX0fJW8+93u6LI1vXMtgUHy+j4X7tdKrGh
NHjYBsHuU2WkYJRkef95AgU+mnDH/VoZLfT+YHbvWTKtmtY+O9ynjBTDuI56
ZunEj4zPKQ0qowNPJM0Wm6WSy4pbtgM+ic4Va7lXFEJjSDHHfMisnDJ6UD/l
7rPAcIowmRO0o6qM+kcPy7plk0KbG/oZXOwsoxsWfVtN7D9Qx7G8xsD+5TRV
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
YBsl++/5CCgbTiWtfPI/d24WZ2k6fqg4y9n28Km4Y+lRY+8ErD7Er+j/l08v
DLkOZ/wz4RmyLvi+dDVR7HeBeV8u+MLwM5rDqul9wrRx6zgczFkybn3CmGpy
uWDXM+JMDs5fdFXaPkn0+7JLbNaP5yA7vbm5aVo1Va9ImuWyLwNKcttiz82t
ptxRqjKp07JwyCju2gidatq966CtZjMHUT6qu96srKYZXdmuYXfSIMm/Pm2Z
YTUlzuuMqi8uxLapwm9526op8pRz1q/SPPjamqUfMKsmoYA3wkuQj/Z3Kfd/
WVbTqaduY37xMrH854wDt22r6cuU+Wc4m3Phoeu1UP1kNVkP3HqXx/8C7pU/
A2LPVdOerS/PJdTmQeOLVcFG92qa+lVj1/k5BTgxIudlza1qGmPWvNZGLw8p
u7SOnfKuJuVtwshEh2LIP3+6cuiLatE+23n2nn4B9tZLK/gGiP59zt/vWaKf
g2fY87UiqsmuSelbg2MBfjsWh2XFVlPd4NFP3rhmwjCGLuxNrqa+rQuc9bM4
8O57vaknq5pGqcxOMOouQcPq4RM9CqrJ4uOPKTUz8zH/xql25Ypq8l/zO/ML
fYYbh/fpXZ3o9c23Ttdf8xmcsev+02+vJufeifvmny+Bsnm4WUVvNf15xeM1
mJfAzk9xhmNfNY19/+26xUQOYlsu/pKWqaFW7ZPNr/SLMGhe8+dHw2vocWVG
g2tXPoxPbfWZo1hDQ0IiRxrc5sIvPtY6VaWGfObOtRbUFEA4QHWxyfQamtT4
OXzmHC5WGF6X6ZhXQyqCi29ODsrH7TvdxW5Lasj6S5y0vOjzVRSbvh6rV0N3
Nsy8f7utADOUU04Gr6+hZ8eSJV0rSuBiOWPNyu01NLsy3lq5KB8ZgZ6jinfX
0PzexDmuWQUY0/W79siBGuqfM/BHz+ACWGpbRfazF72f0Y91747Kx7uzX9y8
nGpIvmC/ebmwDH3JC7dNv1BDRat8E6+c42Cj7NPJuFpDgvCTm7cOLsXTzdKC
bXdqqPftuEFfx3DRfN8usfFhDX2sP+gWKyjE4oqi22d9a+hs/5CRlMbFFVXa
qxBUQ/nTbc6cCitEofXr2a/f1VCu7V3fVcUcqIUN61vysYYGSnCsNllz4NDr
lJObUkMT/7sbbKNSiYSlvCdWX2pI+6mmgteuYgx107f9WVhDb94a7phQnw+z
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3, 3}, {-3, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7743813606033707`*^9, 3.774381609740574*^9, 
  3.774382131804491*^9, 3.774382220887501*^9, 3.7743824347057943`*^9, 
  3.7746375343889027`*^9, 3.7746393650512266`*^9, 3.7746394706313004`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"fc758759-da9d-49a2-aad8-d74ec18255ac"],

Cell[BoxData[
 StyleBox["\<\"Latent data (should be close to Gaussian):\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.7743813603794003`*^9, 3.7743816094721403`*^9, 
  3.774382131594768*^9, 3.7743822206406307`*^9, 3.774382434488909*^9, 
  3.774637534252268*^9, 3.7746393649335413`*^9, 3.774639470694647*^9},
 CellLabel->
  "During evaluation of \
In[57]:=",ExpressionUUID->"7b49bf14-d96c-4f61-aa87-3d8a0d8e53bf"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
LWEX9EbkS2gNlpNX3TQX9wVFs1JHuLIu719y3IdeejvrkXcl8sQ7dGP92VKA
uqRlu+l/oCn93Y7w/mjrVMFqa53xPN9AsHXJe/K3S5yFX1w/7qP3/hWsdcB+
Y5JGHcXGsszftlnJy957F383GUsdR6eqrI8hobSf6cV+7XhDsDK+MvdZBZcL
1moVYX4cvgm/yCncp15/B7/vd7mfG+FNXnNsKvIvNiUvP4z11JySD3rwaPJn
Ty8TbL3BfZwScoM87Jx1Gc824eQ1r+V8ocVXp65gJO+Dzfi6gq2fnrHeVnak
DqfWcMaz7G7y5Dvn5by5NZ46RPdBxKffdMFq3HXivX9O+AfGUC8yrLTkRVtq
bOT+aFBuwWq7izzPT28G/ddr3v/O9KYO7jj7i1bkgmDT+6qs59rt29Avr8P/
DvbUwS3Zyf6b+5TQreoC4vtKPfLah+xjvxtQjTqXTh74c+cqwXoM7xMN11nw
m/8DfVa9A69J4L53dQHJGzcLXed9Xc5c5JHnbMD72pbJyPsYyfuBL5OFrhn9
0X9sMP2LXSH/sk97wUZaXtazo+cF6xf7cP/SIYfkgSsVY7Hv5wL0z5VZ8lXN
1yp1GDk6s95P7SnYGvaV+7/oMfS/VojxLX5ZsGUi90va+13UUdlt5v50TxzY
fwf73dM08NDL5Gv8fUpeep6VxKvnLOrWDn/jfOJtCLbkH8h43z2BPVnykZ9b
vjH+ct6A3YcLkBc8r7P0N116SH9t2Pg76FcCe/Y5SjulwiKhm4XTqIco1ZU6
tAl5WI/cwwWbS/4yHxc+hf7oAOexlbY6pPxFWW9abEP+pr6ynivVelDnsnk9
9y9PPWjvMJ797sI66tK672J+e0bT3pY/qBROF2wNGMR4H4mj/Swn/Dk3gTpG
v77kN+QZSF61exL7d/dp5FVfsRLfNQ8Jtsa4En/LJ0Kflp/4nDea/sedOA+7
/hV/6RvzM++tyUI33voj/9ZIiRu9am/uB7sFgr+ehf/ojtRtpQyC/522xFm9
ivBfQ39zWGnWr9jc1J0WLYM/ssQJXe2XSn3aj6bk9R90Jj/H8Y7QDS831q+o
WvQfUxL9lrcQrJd24f3L1S7QPabx/na6B3VZZ9ryfn/BTOpcRtzg/fAQO3AP
T/L7zX3037SH+/qlncnzHz+Q/HaPH+hX+Sj5id7PqTt54sl+kK2aYEv1rfhl
y1Dkb73J/6/eib71M1NPtrMdci9lYz3JMoB10Hs3+Zb7n6BP70T5f3UndHP5
fubnqa3UuTx+SPydXCDjp3/ozD6RNoW6FPus2O99Ff4fpyGvQBJ5yV51ybdr
Po32U+aTL10/Bbx6cRJ+SAAHFiJ/4dQn9EnbSL5kTRfsGsn9o/GrOvi9Qj5d
jS748WN/8qe0keTpfrjA+/xKe5F7aBbx3eIyfvv7U9Zp/SB1TVrfieSv9F4n
2Do6mfWo5zb6N1tM/pnLfuhN8lI/2KOWrBN6RCznu+X24IDx5E/87MC+//Ie
/sjlLNjikZv80pw9yYtv0JTzzsdF0KNCyad6GQq/aQs4zyRRF2S106jnXryW
urISzHtz20fkTfAjX33CZvg5JTO+16zQZ08kn7e+I3m1779yPnNxIW89+pXE
m+VsHOtcFiv1ZQmjaN/zGueppdRFGZZFnIvylKMOMYT8AaNeYep0RmyEz8o5
9C94jPzjOZwjLBNqo9/KFczLT2N5P+cQS397W354r2r4fftG4v5BNHn1FYI4
b9xuwzq61MD+Y62oA6l1gfP4rtGcm99nkE+Tyvhq1jx8X2CzK/2bOzBfZ4aS
V/6W+0e1w03oV2z5OvmvgLXZjFf+cfCfcIM4jDqHfH+dfITCp8F7tzAunl7Y
WyY/+2LPbfhv62Dxt/p6HOP0s7otP2wa+/RKnefF9FHgB9vhO2EQdY/9yV9X
W7pCf/mD+ZERI9iMHGy7v/3EOatRVfJL0yvhpxajyVfzpK5Kr9dA9ilL5TzU
8bTuTj77ZeoEVTOOfbekJ89Rxak/s34YC1/LZeplzLPQt4VxXmmxHXzxC88P
45/Cv4IP/eYuRZ8b5OcqJ/YI1jNXZH9+fIB247mvNnpvgN+WJcTlpK/0z+HD
+mfa6miG7kfek3vE4YumnNu6XBO6+XA957U7b8jb3JSffPomk5knA8k30c84
oM+ge5wTvpGnrTtH8f/FVsPv0Gri9+Ay7Ks7nXNGdBB1EU6Nyderewh8cAn5
xSHrWDeKryNfufFIW/sY8tV7mYK1UVnJlz1WDf0utxD+eo8I2o+qSD7lmRzI
KTiU9gumsa40oH7HnLKF9sv2E69+3oxT4dmc19xd6T++KO/3C/2i7vPAS+Kk
RybyLlO4r9R3Dod/JearJbAJdQ5JhYh797y0d8zOPLRvSvvTN1nv566h/WWd
fK1ph1l3Gk4jX7C0D3itG/vn4bOC9Q6H2IeqjeA5I1Nd2zwG6weKks83qhj3
KFpx7DuyFZyLfUH9qJHn67GOehfdg7y7QnnEz3r+n+ibI5Osd9biG7lH8rLF
wcwz6OfnRH7gotbYUy6vtFfP1MZPoX9Y5952JM7q2PILqy8Edzple58QL/yN
hf1YDz6/4tyXsZL1U8tH3n/8YtY/l4H4zamG6Kvmbco5t1t1zndb50CP30+8
u2VD/wHVOL/3zkRd6IxDnKcXlKAua3BHnofzbRG63pf1Ta1Wl/a1vci3TQug
feE/4g/rnEjO6Q7b2C/7HbWdg32Io2LtOKc5rGV9OmyrExvYgv0kaBj9cpCP
b0mZbPP3RPxfuz33jMtzc774tBp/5XkP/Qp1bmYNK/WLg5tT9zJEZ/+ICUC/
Wk3Iv+xEHamRI5x4/PGA9i8vsJ7mqs28nO/B+TOaujm92zzmx4ECjNP11bb7
ix/kUX/8Qv7IMJM8l1rk71gLVCPPe2ol+h2Cv3Z4HPdF0z7yHFyL95Oa63vW
saob4ZPBc4w1sD7n+1zZWCf8Msmvnj4fvK8f+0e+huQpt95GfugA8ky1Y4Gc
f+bF0S7sFPbUqc85/UQx5EccgZ9jAL9fqIsx1g1l/Oa2Zl556vjPz/YeL+IM
8Vw3Cf8+Ws3zuFc1xje/yXkwu80/cbWJx/ZzsL9lHPY58Fxszte5r2hsu4cq
Qj6V3vgD/c+RH21s24cdI2zvm7/64ufQr9zXDMMvWuk+xNvZufBvtRn5kx7i
x06NmM8tycPST2clfqb0Im85Non50Ocp8Tb3DPa5ZkOfZB/uf+p+YJ72L0Y+
unMYebuTRjDefhfRt4iB/GtDbO+hbO+ffzRifMblsN1/+9I+4hznlwM9eG6/
V5R4u5kX++rukOdnNZa8De1BJPYGO+GXHFupXzjYn7i2W2XjV5TxXVsS/Wvk
pn+P2dxnTP/Ac8OpeOo5cneFX8oMsB11sErO89xPXBvLujpwL/dntnOeUsuJ
55+8Z9H/ck2er7M3Rp/1EcTn6szE4WA7xm/ADPweeYLxSOO9iJl3HfeRd7ty
ztZasR50IB6N93d4PxR9g/Fp2Efub/RW7uSVvizIfdABW15t0/noY/RnnT5a
B5z0gv6O5GdoynX0335M9LOM4DnX/Ndc5Fk+l0Sfrhr6zR8C9inLfVqmo5zj
xpQnfhISmVd1rkp/vfoznlveNKIeIXwj8jZt5L74CnVEmnNFxmvmNMbnvQf2
hnbA3wPW4L8G6chbS/6fcf0x69Hq89yv3ScPwDhjy98OaIU979K4T86Of5RZ
uRhfbYftOX85+bClbHl6U67C7/Af+NW15a9OXcJ8Gkj+jNloMvwKhhEfvvTX
srghr/FU/DUiUOTp28n70EaY5J9Of8D4dYzH3jDyupQuIxmfz+Pwz1h36gfK
rbLllX6X/taIasTvpwRpb117HX6ugwRbendmn8juwH3fuV34o1Nbeb+oLyMv
WJlRG3uzF2HdaBhN/n9V9glrkBvvGz9O4Jw6pTn3tR/wj1arCvKyuNvycPKh
f3b0s06/y/uCFr/wbwcn+F2pxrkzvQB0S0H8tyKU/J1tnsTLpd7om4l4MMc2
YrzivjH+Haqli5w++aiTm7mZ/Ka35GkrjTsK3QxqCf8L6cLPNO9ib9RW/BP8
2ZbnGMr9uQ91rUq1C9LeMro6/nz5D33rcm9muWrLt2uSn3PIxqnQF01E3pU+
It+InYX+efJIe8uXWPjVfIc/f5VGfsIp+mewHihZxxIvXh+Ij6xJgtWzt/H/
QvJJzOg+3Cs8eg6/r3Opq3z1wPZ+nfgyE5Kx/wbnPuNpM/il2t6zvX6BPfPz
Is9lDfofZX03gmqCrde4Rwgpgr97895R61sPfrvI01JD6nwVvaZR92H0fiJY
2f2J55Rv3xjf2RPQZ/I+7HE5TN1bmXRpr10dxPwfmsR41qptW2/bw699bviZ
W5A3Lg1+f8hXNd/fJ55bO38T3G4Z/r5UlHirVh97tx6F3+uTzKezOQQby+2Q
t73eN+KFfVB7PQn9lXDoJXykveVODeJ/aiNpb/lRg3vr6BLI+8R7EGPfRPRp
sJ3xLr0A/xYbiD15mwtdv9kJfe5Mp31AO/rPDRGsLeCcp08NA7txDjBXugs/
vcwl4j38HfqW7Ef8POuFvgm58cfOCPwb9d5Wt/IXfTNRx6daXkp7PWIv8bwc
/5v5W4ObP2K8Mp9GXldf4ae1/s34Bfih/8ME+FcbLnTF+6UtPk8KXXlYiXPy
CC/m9zBbnsusJOwLrcA5d8E46MWpmzATAwVbfibhn27qd+Hzawf86x8VrBTB
32be+vh37wzOFdVn4K//3z+7HEdfH+p2ddcE9LWznQf65BF+WrMr+DvEA/uL
NGJ+r2ohdCPVdu7/4kJ8Fk+01XmsZ7wbcy9nSUgk/r7b1u/j4+jfsSP6eK0G
D6LO3Gw3Cv//5j2k6vMbehnqCo0AR+S1vwZ9v6PQLd2p47S0bkr7Kye5x1cb
Ir/EB9aD4EpCN4NZr03LvAzp5+PMenM/jfmw1sC+gFD0sY9H/02h8C9SlvEa
6Mj46lfw57c16HcRfsYiD2lvHbCL+XUgDv/fD8ffGa2RX+0G+ItjBvze45/o
f8grHM/6tOCl9Lfqaxhfa2XBaq5u+Gf0BPjPQB9lalHaD4605c1eR17HRPCm
hYK12r7YX/868TSWPEUj8DH2DOKeXI34hD9qr2d+jTlLPNbPzPi/b4+9Y8mD
Vldnw55vtnvl39H4v+xz+nfcjX2ZJxEv7h60v5CVc+OfCyJPHf0O+xodY3xy
nMOfbYrSvmMd9O9T8IfQV1qIJ49q8K+eij3phfDPVnvbOTwP69mS5TzHOM9k
PBc/5z3FmPXEf0gC/kxtgH+CvaHnzsX8LdKPe3LvwuiXtxF5Ol9WsN4+nUv7
kILMz3V3sHfFU/QvfBh7XlQR/ZXumXmOOD2D+Vj3Kfvfm5xC1yqP4h5ipAv+
dj2K/PKsz9bz5J2bc3YR/0/qEZ+NryDP7Qj3Itd90L91Z+J900WhW88O4Vy/
agXyH1Fnbq6qLnQzSMV/1bMxnufPUye6j/gwBjRhftxrgb4bDiPfNwz521ph
3+Rc4GHkWVmGZpb2arNB0PPbCd2YVw17DqxnfMY0Bg8MBp/cxnuhhunoewZ9
LJG9oHdPYPyf3YOem+8OaM2nIb/yXp4r2i8lPowmvIfI9YL5VXE3/Iu2Zb54
BMN/POu7sbMx/uh1G39U6s34PIynffemPDf4TyLebnDuN/3HEl9HBlPXPAC6
0mEL+sz7B/+st3iuuX0O/xaYzXgfwl6jk+05zCEOf9UMBZ9IY7w2HMD+v1/R
J6EU/esvtennjz9/jEL/v8ORl9SK+DhRkTp1r1j8d7A1z6FrxqCva13ma+fT
yH9+m+esR5fw55iCvFdcX472xkjsHVGK+eQzj/fM7gb2FS8Cvcpo7NNcGI+3
TvAv0oz51aYi+u9AnrWrA/y+2vLCu9eAHtMF+x43BrddRf/+DvjH5Rw4M+ut
MvUSz0GZ2qJPTX+eC398Jx7iLIxfF1/GZ/RI7kk6ThJ+ulth+g+IZb3MXpW6
2h/n8eejCjy3TXYH53TG36OH4v87HXgunt2Y+eu8lTyqbi7479Ejnkt2XeA8
4urNc9NjT+TleMhzwFP2d70kz2XG1Rucj85PhH63B/G3fjP8PBshb9cBnhua
1YNf0kvGbzv7j1nsBs+RHfCHNj6c5+wGpdHPpRL2HXpOvCffQ/+S6/Cf31H4
VxyH/Knck1jenYN/2GKee4t+It7qk3eoz+rGfhP4C/2z92N/mPWV54SRnTjP
ZBrDc2uWrIxf/4rok4vzgfmpPvb0vQL/MtSRqiXcaH8rL8+lOWYKP9U5G/Rh
FuiWYPT3Yv1XErvi/zle6N9yEPcCVsbT6vAG/yZzHrLutqL/X54HzHVzeU5x
c+a8eqgL8l22IH9XcVud5xfsu7CG55KWPcCWT/DrVpL1/24VxtutF/a6BYj+
enAU41v9BvxmVOB8uaUA9nTKgj/Kx/Kc0XEy59Eld2n/egzyetuea/6d47z3
/RX66vjLbGHBntmfaG9fiHP3pcbQvwxFf89W2L96GM/tVdlPLKdceK7rbjvf
V2gEv28rbetfKs9pKS+Q700evXrbmfiOqspz7skg5LbyRD/nvcRL1VLy/9Yw
2/PXiibg31fRd2pN8Zd1ne28UZG6AfWZrf5Mmw//N0uRX7M5+hX8jvyum4Su
uT+lfbMetjoeO/y/vCv6NErm+TliJPZ6wVdZ9hz/tt9JvPwohf/3EF+q5Rb6
Lrfxv8Jzq+l61XZf8AZ5zvuxz3+F/L9uMj/NuP34a3M+7BvrSLvls1lPHl3E
7403oNe6UsRh28OsJy+DkFcpDXk5iCPF8zV+ydsAf0RcQ873MtAb/YGP6wDm
Z/GF2LXQm/8/ZVvPNhFH2hMP4q/dZ/T4OJp4uawg50R+7Pf4zXgti0SvRaGM
S+826OuB3srf8fC7m4/xnEF/Nbwu9De2cau9AT4LiWutRjz8nsTwO3w/9zaH
gxm/vMxL69Zp/Po/sumfAv5el/3gWjb80eQGfD6kME65ixPXBW36JWWgz6E8
4GdloOe5D98v7Hfa7qX4sa89cTc5O+PYtQ/+8XPEPxfpr8zJSX9/xlPLR32g
NmE19pxaSpzU+MvvH1v9TP6u8LmHv8wcmVm3x9+gf8HP6BtxBnuKteJ81KQt
+sVEMr6z1tN/3FHOk+dvct/Wsx79ZmcirstOYF0qN57/jwtATl0HfjdzftTz
JbLujaEuXNmehX2gL3mvyr2mjF+eypxHStrqOR9q2LP4H/QfFWx1rdTT6936
sr/nOoFfelzh+XJnF/bl0A6cJzq5Endx1zm/nj+JPsU3Yv+RlrZ84c2MS2/m
ubY3Hv4vYuFvfc09+6tS6N+zEOdJxzT2leAI9GxpW7d3reI+ej33lWaBF+yf
8z/Qf/MW7gt+3ee+tXZx9L5WAvt2F6RfXUfitzbf2TCtr6W9dXkTznczZuKv
hSd5XlzliF+na+zHF3exL4YV57xf0JfxrJyHvK4O92j/kjxHZd4o5G7OjF8O
9mT9aFSX7+50Iv/bvPSH+8jB29jHPLJyX7S5MvfLc6jr1AfdwP99RmB/8+vY
X5bzvf48EPmTv+CPtWPwR+VBjGdYCPYmjWbcClUl3selc172o/5Cu9yF5yWv
M4xHIvdd6vck9vlenXiP9qQG+lchT05rcMt2DnLl/KdwP28O28Hz6rtPyC94
lfPv7Fvs02EdyRP3K4v/f7ez5YH1EGzpuIr73I+2fP0I8hS0hCycs24s5P6m
50789/o39x3fu4EztjG+c/vDfy/vO826dTkXOZfn/mHHDfTfEcr53+kZ4/c5
lXjoXpL3I5sKk7fTQuVcOCA/zxfFBuC/sCT8E1AO+5t1IV6q8L7BPHmC9y1v
ViP/0AX6D52NvFNHeH/Y6yp6+71Ffifebyl7uD9TVvP9BcP1NPSQYOIkJ99N
VuY9wK8lxjM+kV+Zh3vGkcdZvRDnfKM97886n0fejhTmY4CPzf4w3j9UqYS9
3V/wPvhUHdq/m4L8huUZ12rfGI9L13gfOIA8KkM5QDzOvc/9yaJaxLdykPGt
0AH9Qp14f9Z1KO+XluzgPqRMCvaf/Mj7n99838Q4wf2ptQTrmLL7K8/37X7S
3qE58lMdked0Bf5H4a9MWsZ7xIXOjE/HBOJjQm7s+0kdlrZcw9+7fIjn5m95
n3XjtO192Hr0P0YdiSWlJ/JTkrCv+32ee5r+JF8kux3vx++5Ie/wRvY5+0Ty
2hrzfSC1VxHyQT5247mtCN+x1Eqiv1rOlToKx+uM274h3D/lm8F4qeQTqf1H
su56qeRDXKyIvNmFuO87/Rh/Dm2Cf/cm81z6sAt5DTND0Hcnf1dA9x7MPc5U
3neagaegT48hTy0391J6CnWrZs1F8N9le79a6zPy30Xwdw+S1/Fe1a2m5Nno
c05xr7bDlmf/OCv+rZvBfdLXMtjntIz9wXsZ68YDb/K0tkXQb/Y+4nP8XMb7
DHXGltil2Bdchvypm3cY51PZbd85L2HL/1vNdykbrQeXT6AeZB35MEaXPdTz
lJ9CXtAbP9bLYg/Zhzsa5LWkz2R8wqJYj9OqE1++Kxn/9dt4jndrTT56sa28
d1mxl3qsgCHkmV2uTB1YRm7uoQ7x3Uetsu37bf2+k+8b8Mr2Padp/N20EavJ
x9kxiHqtTunktQ3uwf3yTup1rGP47rZmd4x7vGyB5D9N53tT5uIxrB9jbmPP
vSHkp6yszr3ACb7DbZzhe2rmlOfkfQ5Is+XbqdAX/Gaf2RtKvk3BOayDnT2Z
n49b44+0L9QjjWhB3tLvudT7JD0gL6jzSP4OyOk15FWt60oe38ABxGdUeeTp
Jvpf2Uy8hlaCf8Uw8u9Ll8ffU6Opr8r8gfyhcuQ1mR7ci6n1VzA/X18gror+
lXo8swffH7Y8/sw4vf3DOtfsOvq4cm+rDdpD3vOROPKmalOHou7RuVeq9Ag+
iu3e+G4V/m5SSHXmTYd21EV8eMy62PwiebJ21GMY79qR/3+F/G/Fd3io8LVf
Qd3G0G+M76xznCPXLpf6XO3kKvJVuw0kz+3vAs4lzUZSp+7+jnU08ySpd7Ss
/mfL247j7/hcKUj+4dm9fAc+8DfrUPAa8kH912LPqZXU0zzYAd/wROq73F8Q
nwdHy3pgqT0XvxQ8iz92OtK/0CTyH2N/wr/NVP5Oj2MN8nadAqkv2xRM3mL6
dqm3NBu0Ji++kDP56Gsj8OfFh+Jfo0l19rkGNagHO3qA7+OWnyT1isoX/l6K
Ursy8RaZSB5t70vkG3fjvZFlYnbyzJeTJ2C+KijtNbdjxE32+uTJF+F7lErp
ktTvnX0mcWIM30p8fyjI/Px8Bnln35DnHNpf6PoIGx6QSj3WYp19YnaSxIMl
PoY4LGdSH3a4JH4b4kw9V8120Luuop5m3Qn2kSJ2zId15PEpN0cgp1tn7Olc
mHqXKk7kwb11Jm+81GD4O9nqb8b0I0573YF+2om8z2wTWd+y7iEvtFhX8szf
2/LE2hYlz9SO7yMalRgfNbgA+YV/zpP3edD2Pb3t+Ntwb0L83w+G3+gV5IEW
HMN4j01jfX6xinoP74bkfbUwaZ85gu8XX+1EfYlnTvLyRrqznj7MzvcmnZuT
776iK3T3CdRP+AdCX3IbuwrPxJ7xrfDfhWw2f5KPbvnsyjnqSDHyvUPxt2qY
1CPsn08+rf9M5IVQb2ItfoDvUA61h358ti2f3ZYH+XI+7T/x/WK9aNwdG511
72A06/drW37q3GPkiy4qzT7/4wH6TWvKum61J9+0QiLzsfgMzhM+fE/cUoq/
66Cvb0r/JxPYj1L5/q/qno4fvMjbs96ZTP709xjW5SvTWC9c79ryMEOI45vY
Z7RwpF9PziHKgED8m4PvU2sB9diffjoj/+Yg1u2QmvRPmMg8HtqA/jmoc1LS
vrLvGj7E6dFetJ+al32gYwtw/WasC9a+8O+ZbMuvtX0vPkdp8h0mc462ZvkL
fcsi2rfvQ951ooX2JeuQX1siCuxnz/3AmU74KXIEekYuoX+HnazX/tH8v8cY
zkXt1xC/Xsmcf8zz9D84inGubft+dZ+F2Fu+EuOU5zt250C+MjY/55pMB4mf
oGGcm3LuYjwOGqz7Dfi+qpbSln3hPuNpRvdHTvRlWx4m3wFR/xAPatau7DOj
prDf1SzKebMef9/AsLyC/5u6xOWdfPjTGf3N/byvNxqUoX3PCPhNSsfPAQU5
bxefR75rm/acZ35hr+aDvuYj8gKVJafB63qg3+NcnAv2PWP+Bpxl3y6pEb+X
39reh1mYdxMdOLe0WcK4dLF9R+z0dfz/PRv8vp3h+8SeSexTPsfwezbeV5sV
PGk/ZArnigYx+D9hNfL+8Pc3lJGjODe8+kZ7NTP3DVuOYn/zlfx9yLvv+btE
W0rx/c3ea/kO6J4V/D1K52ShWxtm5e9bpRV/Ie1/luV75ZnT+W53hQXyvUVr
mZ3ynUtlYlX51Zwc+I7po/J8X7yeq/yqbycLH+O2N3+3wuMQf2d5Tjf5rpl1
6/WXQt8zxiq/Rib+DnD2DlHoac/fv+zG33lSVtbie1Dv7PiuVfIG/q7ph+/y
nR7l8gL5NRtNlO/86N4t+R77HXu+074nh3yfSZlyR77jZHXelCi/mz+KnmoZ
N5Gj/9ot+lh7pAs2RtkL3Wwwhe9NF+S711roPL43m/0C39H9MFjss7hU5Dtr
e75hT2Be+Y6WZdoH/r7DAo2/m5Dck+/D5y+JfmFefK/h5S75ToCSg+9DmgtK
893OQ/v4vlZ0Z+FnXOgi37OwPF8j5xx1WCDf596Wme+WJ2bl+8ipRe8y3os5
b3x7wT5/aSZ/h7zGEvxyfSx/565iBuewp/lW4/f4DoJ3PeDvEpesJN9NMA/b
Ud989xd1w4ED5ftb1oyB8h0t5d8I+d6TsraBfCfJvB/M+c3tJefBsYt4XjoV
x9+3LL9Pzstq0BM5xyhjBst527opB3XQMcXl+yPqxa48tww7wLnV+pR9e3x9
6sZa9uI812Ex9fJ3vKinzeov35dSKt2X7yopJRuLfMVpqq0+JjvniWqR1AUu
jec80vv/WjrvuB6/94/fdshWNm8jycwm1G1vWSGJt/GRvbLnLWSTnZFuq2yV
UWTcZkZIQmW9s4rMItm/3/d6vv96P17v65zrXOc61zn3Ofd9XucsY935qyh8
y29nwfNGwm/8/IB1ZYl24CHJzOdqduB8hBLwlLXkK9JO2psB8NDb+jH/2FoJ
Xp5TAny7jCjyP7kMz8f3GHyVE3NZL/2MhE8c/JV7Te/3hd9y8x18+9XYYd53
Fv7n6FbMk2dWQn/SJ3jDs/Lil4x1+CE9Gh5YIPNuJdqO+cHTpczTy/vDI2tm
B19lTzH4Yy/T4PPEV2Y+9GcdfMf9vZm/tCgGT2yVs5UvNxC+0qA/8B3L7OS5
/7o0fjqRi/jv1ot81eYyn66HHdrgcZTnVBM+8rf5VnuvwIfL/YL5aw1/yvMt
wXO+SzPmE+WSmc+6DoNPFjWEeYN/V/x8/wy84sZrKKdhLLyo5xGU7/4dfklI
BnYH/ED/y0fMcxsGIu/sxPxuxm14y2NOWvnFdzj3oSnrA7Uu99eZyv3HuqSU
GbunuFOPVrl472B5TzltY5gHXX/DemaTn5wrpd08JP9bCh7mfg+fwbTfi6Pw
5uvMZZ5t+Fvv41rG/GPFKeZluwz0qXk1STeMeySV1hc4d2VVZc4Lux8k45vu
Zr0HzVDhVW+7y3ywVnv8u6M56+6N5+G1LXYm3hM3s+4IiMEOh8LE+/Mk2vNe
WWl/08JR9LPwY/Tj35c5r6XzZ+m/lg3DeD8Q6IhfHPfSP4OIB/W/76xXnn2U
cVV54M55EbGd5Nwny+xE3r+8/s48eVMY57FY7i27IP5/JefZ6W2COYd0+0Te
M7RbwXufZ4fkeWMe6cU5oX2W81yfwX2c6o0i3Ec7sLY859TW7+AtxrfnHB9X
5hVGxHriqPge+lOneqyjiu2DF7kpkjjq1oD1hzqQcWRhMbnP26x95B7JXxNo
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
sQ8ZH05c5r1/9iDy12HdrbkMJz6rOGHPxFj8+Xwi9qb60N8P8Z3FPCBQ/KX4
hPCeYmUP/LEG/1i+XXtN//mBPS+O498mrHPV+XvBKt+x1Dtxgi1PeU+qvT/H
95Vqeyn/kJnvUR1uoP/1BeInlO806kcv7Pdsgr/i8jKeVG9G/tu/0L9uHvJi
B2j/xtNZZ12sxPMl8AzriAHfsX/8Set3laPEzwfrurt1S+KzXCb5F9yX70vq
qCbU594F5OuDWCcGnaG9u+VnHTf/GuPD6I+s0/p58vzNxXsN84Frok+xi2Kd
234v+qefpv3mVyMewhcyL5+7lPJKFcZ+xzbEU8+dyMt3pbxe2cxrndezH6x1
C+pnDOc75KcOgi0hefgu16Ys69JEf+yZ9JF1pH2kYIvLIfyxbCzxNJ3vtoY5
kvHw22/ivnoy7Rfbj3VxUqoV22Hf9+vETzTzfOVkNeIjYA7z9E+b+Y497jzz
7IYu1HfFLOs65xPxUPUd84DcK6iPS2/Ku9UJ+71msS6ryvNIXTaF9A+fSXla
x/30u04J6L9Rm3lElQy+f0VeJH1aLeLfw4fnzggz9l6wI/8Ya/3sq5O+41ns
eZ9lnfezH82IbI59l7ayH611Pea1OzvzXbHkWvD4vdjzk3mf8bgl9nzsaf0O
epb0Zuu6uPx7+U5nKD1Yx9/cR3t9d+I5EfGHeO4RTDvFhIr95lUrGceP1aX9
k2Yi3/Fa9CnnmKcZKXWob5/CIrcM8qe/7OU5pWfUxj8t9jJO1y/FeOo+xvr9
sbnYa/rGc9g8y4bxem8x+sG79+QvfZV5iE0e6/fWzfzmLIj/Qgsxrk15wHfJ
B3Vp10W92ZdRuSz+uaTSHqV/o9f3C/v+9vPeQwn4Ktg8h30N+v7nfM+evhW7
J4/D3z+LEydVGB+UZkn8vyk/v38i8cO3JPwVPBo/O9iwjyM6jHT5bKn/3JnY
0+Qk7eV6Br+a+rJP060Z7T2nB/aGfmTeVMuHfZMfE+nHb5YJ1ptNY5xY2sNC
fO7lvcnybOJrdbTVb82kPP10L+oxOQ/+GjcaP7WvRXmPook77wfWfZIVqV8h
H76jT7DBH6uO47+xByn/73Ha4+Vy/Ji0iX0B1Yoz7/YOkP8tGwthx+FUsdfc
7jz9vJCXYJMv806zj0L5n9iHYnr+lPIvj8RPY+zYZzq3EeNeqj37U1PaUa+A
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.110318422317505, 
   1.8179728984832764`}, {-1.6838589906692505`, 1.5788172483444214`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7743813606033707`*^9, 3.774381609740574*^9, 
  3.774382131804491*^9, 3.774382220887501*^9, 3.7743824347057943`*^9, 
  3.7746375343889027`*^9, 3.7746393650512266`*^9, 3.7746394709261208`*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"2f78aa99-0162-4d3d-9081-5a0c02261bd3"],

Cell[BoxData[
 StyleBox["\<\"Generated data (with inverse network):\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.7743813603794003`*^9, 3.7743816094721403`*^9, 
  3.774382131594768*^9, 3.7743822206406307`*^9, 3.774382434488909*^9, 
  3.774637534252268*^9, 3.7746393649335413`*^9, 3.7746394709879556`*^9},
 CellLabel->
  "During evaluation of \
In[57]:=",ExpressionUUID->"95602472-67ef-4e71-be62-805f60712912"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"3", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.004583333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJwtW3lcD+sXnhKF7NRFmFDiZi1rlilCtkhXyTayy767tkFZIiRkudVYWoTK
kiVLY5eEuCXLzaioREgokt+v59E/85lm5l3O8pznnPN+Lb3nuk0xFAQhr5Ig
VFz//6cbn85O/P9V7NHoY5//X7Wat3Iq7rUNbW9UXJVJUd8q/i+Pj83Ce/3e
PK24yv7jvuD9Wm9eVVyFMr/P+O5B2nt891cgn884oldc9Rkj8b3WqE95xVVo
EWck/f8i1fuZWXGv92nxteI9UZ/6ueIqbenxFeO8H5yG8WOyc3GfPbMA4xy4
UoT/7801xDhvn/7E8/aB+RVXKbE319ViA96TT+R9xLz7nvzAdXzTI5jv84vH
FVflg6OOcQ++w/iS38Liiv+rdWx+YZyz805jH73inmH/s/M+YX8TQ99i3q8S
1//Tg3LoO/E/3MfMK624V4f8zMA8R4pK8Nx1OeQiaebf8H3XWlmYp7j3d8z/
Zux1fHfUDevXdyZhf6pBCPYhN07k/AVtyjCOcUkyxmkVkox5PSYaahXvO2W9
wXs90iBH3aaDUPF/wS3xFOQe8iYT8llkzXWfnFyKdd5c8xDX0e7F0HvbZf9i
nMMOH7COdt/eYZ7IAMhZa23M79ceN67Qh/5rDvSsdbAswTjHVMyrLMuEXMXd
pYV47twd8pGaWr7Ae41nU45JC7Euxe4Q7E9/ZIz969v7Qo6C14FPkMPnSQbY
z9D0B9h/0N53GFf1h3yEn7YJuOZ8DcVz32jYr7Q6rxD6ff0Zdir1Hl6G/8/b
S/kYOMP+pa72+L+W/vM51lVc/hbrcjjzCOPV6PYe/8/pUQQ5uYmwX61zX9iF
NHk19C0c/xaCcWaK1SvGF6PjYXf6gvnQpzhhFeWUeCsf65V2FEAv31dD/lq1
QIyrrJr0DM9d1tJejVzgV4J1Ge39fI9i+vFo2JHw6SPsVqljdQb7bLKJ+jKb
gfVK91XISTTflIPvV07Mw/PtI/BcsD+IdWr7jml4b91+6E088R7zKOG7crHO
CRaQkxB39Q3k0uwU5CpMu0n7uTcCdqh03gj7ESxNud/ai7EeJXkt7FM8ZfIa
3xdnwz+EwePhf8q0e8AppaR3HN6b9Qhykh50hnyVgofQp9blKeYRD9aAfYhV
nLBevc5c2JGWvxT4Jnw0JK54tMe+FbUS/FVxrFqpwn7Vc+XYv2KdA7tWmtvh
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
GB8vDaWddSln3HZ14zgj3Mkf9gfgnKbU34byKLNnvXB/OM9lmYWzftnOAfvS
GlblOcjI+sy/tvyu19T8RPy3doPclBv/gE/IZ1PIZ99/4LqskjCvuMmf+YTL
AtTpBYdU5g+rD7B/NbET+yXLQhmPIl3JS06YgXcJ1hcRv7USCXrTH/9HPQ45
zv21Xo9zaXLzesyz3bx5TkT/5Yv3Wsxifd3iG+tE1d8SJ4cNpd0e+cV8fPrE
y9h3ZH/al9sd9kdu2DOvfPiQ50nWFbJuHb+UvN+lO3lkg53kJ9d4PkgpX0h+
EL3md13zKuKU9Lk+8lFh/EL2u0bmEOeCGzGetuD5BClrGO305gv2/0s6k18G
+ZL/d7hFHK8TTLklnGQ8yWnB+3FFxOPyUsQnKe0o7FK1tmce9/0G9i/O9Wde
tXk888XiphzXMZhxduB61gsmTWffoPVWni+91J38eqkF+XbEAuJBxG3iVlAT
ztsuj+fHNhsAx/VCR8QPrWY7vC/F6ujbaKle5P+ZI9kXCf3E81NPWRcTzHfw
XF3wEOr/5R2enwz9yHOqqb/o/6ZGPOc36A77KP/sZT941AHythwT8HvNMYn5
98AV5LP3/uL5Lpdk8u+bH9i3dzZh3yI1HXikL/zNT3x4vlNb/JJ8NORglQr9
CkvOsO5j2o9+djKYeVBkJ54TDWvJvlCbMMR3tf1l+sXrT5C3eIj9A+m/LOJD
zHHku6JXMOU4yZJ18B312TeZSB6vWMjkWbHfOe/EZcTTecHALWm3E/iIHreU
9r+E51elGTE8T7H7GOuVCV/Y76lRRN4Ym0H/GNYf69EPbgWfUVP/ZL/Lre1l
fF/LlfZ14Cuea5tMmS/5l9BPRxcyLzhSgvHlqWtxXlIafRL5vZDZj/2D3RHk
/wEdgOvq3yMYd67Ysh/x4QxwRj72BHxYLXzBuNU5l7i66Rrx56YJ+jWCYX32
M12rQj96u9oYR4+fRb5nuYt5yb4wnjOZmghck2MKafe9klivSa8FPFK9nIjv
j5bSbwvbs14vDDSpGF8cf4/4NWQa+VLjy6hHawktEe+Fjz7TMd4I5h+ywP6L
NrjIsEKecpdG8HPlwzja57UY5jliF+Z1PYJ57l7dxvp91DOeMwjbRrsZxDqP
MGFqNYznWxN4Lg1ry30Mr0XcS3BD3BIcjaJwnXyK/d8XPowfaV+Zhxy4hfqU
+qsD+WGr2uTH8rS5mOfmfOo33JD9eM8J8C89aRXXGV0ZfF/Z/4Hn1l8UoN6g
GrM/KVXfw7zIR8Q6xZpbaH/HJ8fhfa0+z81+e03+UF8lDiWMv4nxu29jPeLP
acAH9dpb1i+bNyQvjajKOOd373dcncr/VxoAuxG/WDFvG/MHf1/i1on11g3P
WSfOZF9btApmfE/PQz9JTR/P/pR7FO0nfCjz5BvsA+h/28IexWAnymsl83q1
byj7fmGzw3Gteh98VJ43Af4kzW/Jfq/NMNYrDhkDH9XmgcQJ3YR1jkotkHcJ
zw6wbupTzvjwr8J6XlY54+vIjqyz5rXBVXYJI488+/kS9jMrGv6r7itm3fyp
zt+hLGrH/OzDHZ43aSjSP4paMy9OcWJcCjpGvjnCgbjT7yNx1uoq8EmdOxB8
VfUewHxpgjH7fXUkxG0lLQV8X8l3wPii9UKeN8jox7wyWyTv8X5P3Pz2mnw8
bBFxZvxh8rWx2TiXpV25xnqIfQDPJeiN2e8I+0BeOaUq88m033E81gQ4pBv1
Y929F8/TKjGTmRec6Ej9jZgJHBXkZewL334MPiWUVOZ5luQsnlcRDrBubWEJ
+WiL9xI/F4WzrpCzhnVanzXEx0rmwGXBawX9c9kT1v9+xfP8z7jhxJ1Fexj/
Tl3hOfm6IaxrDd+RSnn0oP2Y2JHnlXoQp/7YybwxzpRxt3ky+zDjKpGXJLHO
JDTNo34vFbDu3ayY/usUwd9fxTYhPh/Nwr6kcffJe3qaYhzJVeQ5iWO1WU+s
Mxp2JdT0I4/MteX3txLZv+wzkDis3mX+3CON5wW7PmE9fE0y8+7KYeQBhc/Z
p03rzXNt/jm8j+b5NqF2Ze5rzXb+bqpLOOueqWXMw2rUJw//7IvxlbOsbyhn
p7Dvt2oC7E0ykYm3UYWGFfJUqoSjTyUntmH+d0rcRXsYxLzUkr8jUMMmMZ7e
m8L+apX6/B1VnyTGu/W/z7ntHkx7qn6X5+7MZ9Eu0teTv/UJIo8cPIP5aI2m
tKuMYPrbxlb0K9vlrF+4W7NOWp6BfFBfeJ/8N3AP693J3dkHPWqGfQmFOeSF
zcKJ582bMB648PyqEDU2AM+nNwOOS3mmxM2SWqx7XNhGHM6eTJw8f4p9nYmF
wFU1+BDzzbOsx0obztLex75lverfHNrL4S60s1MXeQ5g3Wrgr3DEEnVhyW4C
5CUHVQL+6Yuqse91awXPKXs6cV0NOrK+MSCXecmv2cz7HMupX6Om1MexrcR7
V/b9hP4jyfdNbBhvRkcBh4UxLel3SduQ74ivlrNunbgW38ulIeQjOR+Jl0sb
Yp9q0AXm12UK+XDgX6z7/zmGdYckO9ZLg2rxvKLBS54ruziAdflGKexLFHdg
f2o98U7pm8hz5KVPWL8NPMhzA0vWsM+ckUq9xuTTjrI30C9dr5MHOYSxHze0
EfYjX7Jj3JrP39vJb7zZD2/SFXxBHZnHPnxiG9alontxXXN8mLctY51J2lPI
c9XnhtNO46eAL6odPMhDwnshH5VT+jP/2yKwn5M+C36rb3Qm7x5fn/XhBrtZ
x+1QFoP1dXvAc31D2kFu6hPakRBifxH6HMf6nzT8MfviynPgjF7XgOca1fWI
Y6LDDPLSiJ+sBxvF8LzL9Le0DxP24eR/OhL/3zzjeZ76O7Ipn9HEn5jqrGt0
kmlvd36aVsyv7I7lOSq/aMbf6evwuwp57mfGxbO1mQ9VDWedPMKC9udUH/6l
JIxhvpWbzLqMnxfPXdb+l/z7RSPq0cQC+hVfXP19jvMOzw+/9yK/r3OBvGbC
IMyvqa0Rd7XsXNYbn9xmPzLKl33e74vwuzqhmPUfeb4zzz/Vvsc+Yz074uXP
dOxfip+B85pKFQ/Ua7T8Y8TR5S95XnuaM+OTF3+npYeagXcJmXuo385u/D3v
5WLkEVrkNtZFX/dmPzKfdVXhjwPEjbw2iKv6pdOU4+0CnC8Wbm0HHkiBhuRb
s73wuzxp9yvW2V8nMH66u/B3ZTV5vl/63pZ9yHIn1vun92H/y6vRSY6Xzjz4
8ArmNdsMeL7YJGU95DB87e9+7xTy9sweyAdFbxfqJ3cB6y9716JeJSyN5rm1
ohHsr8QORJ9SiHrEPp35IsZnrw7Mo0ODWO+1qMx8ZW4L1N2Us27MM8f+4PO5
+Yjv+rTDxhX2LAWn8zzTNCv6x9HlGE/u3ZI4G/SM5wF3hhJnXzUgHzo8kHg8
KJV153IB8laeZoJnii18OJ4VzxUqRzszP49lfUfQ3qL/piUMpx5t+rLe0z6V
v39p8ZJ2lubF/LjhDeKijcBziKXfeE53QDnjwGiF/GNNA/pjSB7PP+7kd/op
nkcQfvL3RsKWi/ido1A5ib8n+7GY9cDoLTxH3nIX8gkl7hPPUQVUI3+s8dfb
Pv8DfmgrRw==
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3, 3}, {-3, 3}},
       PlotRangeClipping->True,
       PlotRangePadding->{{0, 0}, {0, 0}},
       Ticks->{Automatic, Automatic}]}]},
    {
     RowBox[{"5", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.004583333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJwtW3lcD+sXHhXZUrJmaywh13btWxpElmwJJTJCdoUsWQfZouz6WarJcpEQ
QosyZUkU4lraGC2IbGVX+d2eR//M5/v9zrzzvuc95znPed5TU3dPx+kGgiC8
NhSE8ut/f1JeSM7V/67qe6+Ptv9dtcV9iss/K4LN5fKrvuXit/LvxUYHXpR/
Fs6tzSi/ardjvuB+NfcFfu9fVlT+vRT5+B3uK22B38U7ysvyq5La7hWea2Bb
huvRF0ZS+dXp6zPc/2j+V9wveBSXX6WRz76Wfy8bt0sv/yyk27/FfR7DcZXq
b8J9QuArg/JxlJ7vSrGO8Q6Yh9KyYT7GqbayqPyqHq2L7+WQqiUY51bMNnzO
PvNv+e/62OOFeK5fDsZXW9XA/JV6Rr/xHv+a8eVXuX3BE9z3rD/GVeYceoPP
ST6Yv/Rz3jeMG+h+H+uJrPYT72sz5jHmEfLhO+z6ywl20zpXxv3ai7IcjOfc
/hfu7zTtFsY94Yj36KZ3sT6ps99HfJ+o83sh7RfG8V9zDd+3CrqD+WZMMdBg
5wav8V7DgQ8wv8UOQvn3QmKrWIwnX3mG5+M3ct8rxGI8pbPhQzxn0uoz7hua
lYxx8099wHzH1v8Ae9huxzrU+7awr66EG2M/pEDss9qx6XfYYWEo3isuSPuM
cfbnch2/9v3AejcImVjPyAzYUalwHPOS/z4M/xOemmL9SrTvU8zXbTbeJzw8
VQHrNK/5APNsNAf7qKf7wj7C29thWHfW+Ke432QDr02NP+H7nGLss1TJBX6h
ZiRjnsrkrbC/1HsAvhdLzmXjvSPqFOJ63lDHe4a1eofP7Y1hP6FDbfrvRFf6
a+xhrE+56ByDz04dqmH8fBf4ndJ/AeygVzkPO0mnUwrw/Z2Rb2C37ctp/woT
YDcpMRHzkIYuRzyqHnWxHq33JTwnnO6F+7QgmX4ne8zB97Udz+K52ytf0L65
sJ/W8wzWL388yXiJGQ5/Ee0/MV4uV4Ef6NYLsR6lzp73mI/hKjwn7N7zCs+7
ONFOVeNf4hr/jXaduIzzn3UF4woRG+E/0rV+WK92bkgu5jOpG+yhDRqO5/UR
plinajoJ8ac/3p2P9S4b8Jx+WIx4EhRLxJNQrR72U86xwHyUDXs/4fv2/TBf
bfwJ+JEs9uRncVIKnu/ZGnaW81dgndKpyobl/qtfO4t560m53NeHnnhesTuV
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
iIJ2rMP/rsl4WdbTG/7S+yx54sHT1H323YWOIO6yIa+rewD7K9m2Jd691c/S
vm5Yr7RgFeJR9XtIvbKeP+JfCJ+GcxLpGftm9Vu51IP+7ko+5kV/ksbsYL1u
1Yq6j/VR6hvvJeYjF2/EnfjxKuO012Tqg6+W0o/+WkCdTvtJ/5kxnfs+JZPx
UFZC3XbaEuqF9hLOf6TmE4mrRk2o36rDWUc/WUidIaQu8EKWV9Be1/9mf81H
c/QTq5NnkgcOiziC+cSzL0vyKkafjX6SfXLall04B9ZeDAcvk855Ajc1n52s
uwL68RzZbhn5uWkN8HlFjaWOtlZjv//rM9ALpfZveI75dSx5bEgT1I9KUi7P
Xf+pT1yLvUk+WvoC71dyWrKfa3pj4LQ8pCfz2ybyQP13W+aNh0fZX/pxLr6X
zr4AjivL7Imbo8mftBo94LfCNIXne2IP9gN3JX+TV1hl0A7szxN6vuF4Z4Yx
/8/cznNMv8k8X5qSexjXJknUwYtXsB8o8AF10BRr2Edz8oTuLBr8zX0JMjiG
9Ql2zHNTTNlvWd2N57q1O5M3Gj/muXJS938wj4tX4df64l7EA8v9nE8t9sPp
DUXYR2syjnzz51HyqK1HiH/qS56fH7yH/mbBcBn1uZwo4n+nW6wn21Qh7thZ
gm8K9i1ZZyUO5X6c70YeVs2EePymM+JPuD2eddw1Q/LhutXZ7zjkCs/NDlBX
kWu+JW7PyqL9UxcyznKL2L9+eyLrqTONeb57II/73jwFdhd7dCPvT7+EfCWc
eAadSFhdNQb+YFyL/ObseDyvb/oJ/qjVbM1+2hrL4e9Sg1XUmVtxPbLXBf5f
TQj7JQSrJdQT7s46gfd1zyH+z/LA/KQaFV8TH8LI2+uGYBypPvuLhc1nEOey
w0L6Y3516uql8eQFYycjH+mpKvH1fYoB7Hn8JHi/9F/0lM9faG3pi/fPmHIV
/vQsg3XlDivy7D2x1MW8zkfBvkvPUU8L6068OE4+JbhdxnwkuzfEgdEr2d/9
/iH5Xx93+v24VvSbzACet3tMZPyOdGc9GFhMfGr2kfVgw+rs49VHkvfMTiYv
MjXmebHXc8xDnhrCfjWruYyDil7oXxUq196Kz2N/ARekeYk897hgQl4X5E6c
s3Ajz3huyHyfW0xdqg3/D0l+v5f90N4VWH8/LaCOtngDedf+1jzvav2K/LCd
I+MkIRV2k57lgtcrqXNYfwkHNuM9w3pzP+v3Z7xWPkid11Un7q3J5PhxDVmX
1fnFOs8zgOd+1735/PSKx/H5xXvab6kaie+LJOq0yQE8n76/mn4bVkIcfV4X
/qhs0bn+CSepO0eFcR/dommnyWOJg622UpdMSaVfrJ3Ic+Efz9in82oa4/4Y
/59Orl+NebDkLfvJOlei3R4+gv4kei9gHTN5Dc5fZN2Y54AnVL4/4BT7nN8l
Uqc6Yk68ze6B9ejzFeCYvGw563CbTuxvMukOvqD4NaDOF9eG+aOKHeuZBk7k
r5YtqedaNaM9C/+cx393YL+jYzv60zEb9tN2HkTe5isQV/Kpf0q7bchXijaQ
Txaf4flIp4QLmE/TzeyLGLCIumj9RTw/0xPRZyF+ac582byAerySSb3CzoD9
vnZ9GSfN/ug6RaawnxTajOfTAQXshznQn+e2EVOZV1oUUU+ZwP9PEf0nIu+q
E6ux/73ffPLmG6XVJax/HfKFVsOBfG+5JfiINOke+IJYYQj7XBoGMW8eFJhn
TRyJ09/3016RruiX0cqM7jCuPoF/yy4OzJvzGrBvt3cx+y/0+eRzoWWsZ07m
s//ySxOeT7duxbziuJr/z+c7jecgF6PI/yPn0l8O2++lvzRH/Grvc5jPPu9C
nSprieCponsHjn+xIc+TvBLZh3YgAufvWqX5nK/rSNY9IRVYR00YQzzrwvM9
cawl8pdmxv8TUu+NYDzOq00/koPYf74tOAH2NjtK3SpuFd4jdjxAHvrVhX4a
O5r/F/DrCevahHM8B57Vg7rKnl20v8Xsx1zXeuy/6JTNfFL50xbMZ/sfXc4/
jHl0fhLrp5TG+H8D5WxD9gl0PEC+ntCMfZpmJtzP4aXU+doOIs8/fIL8wWgS
z6/vNT1FP2feV9IW0c53vbkO96XEgQaF1MM/xvL/3zI70Y9vxFAX+7kK52zy
mFPG8HPpK/N6RyvWMa/TmYe+NGde7svzGtVmJ+vqDY14vh42mDpQiSX5josn
+W7Pl+zX3TCBPKWeSH4X1JH6xuFw1lfqUtbzn1Sub7sR3/ttG/tHK+rsizUv
wv2i133qmW+8qRebF7J+77mG+sOGNYy3sjase9Zmg3dKdmOZT3L5fy/qDw/u
k9cjnANLvVJZZ35eTP03Iwn7oL1aRFy2Gc39P55JPL5TscD2/w88LOM=
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3, 3}, {-3, 3}},
       PlotRangeClipping->True,
       PlotRangePadding->{{0, 0}, {0, 0}},
       Ticks->{Automatic, Automatic}]}]},
    {
     RowBox[{"10", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.004583333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1: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
2Ad3/8h9p93h7+muOr12+j/AGjes
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3, 3}, {-3, 3}},
       PlotRangeClipping->True,
       PlotRangePadding->{{0, 0}, {0, 0}},
       Ticks->{Automatic, Automatic}]}]},
    {
     RowBox[{"50", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.004583333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJwtW3c8V+0bPsmrpYH2ctoLab31pnGKaIm0h5wm7ak9ToSWtracVFpUItHg
RMpISVRaTloaGqJSqt/PdfHP93O+33Oecz/3uO7rvu9Hk0lzXaYaCIKQV14Q
Sj///6c3qXs37v+f4or+b0s/le51Y3uXfro1/obvQ59/L73WQ3Of4PeWd5NK
ryWPtr9Kr/XhSc9Lr9UFVj9Kr4W5Sfl4rsKpX1inV3xh6adW/qyOz/q9/5T+
Lm+p849Uus6Qm89Kr7VJIX9LfxeeTP2Kz+K63/H9q15fsI5BRjau5/d9j/fW
esv79rwxKF1H35X/G/LtrVsE+fa4PMNzn5YWlH7Kx68W4Dnjo5BbuLLvLO5/
43S39Hcxa0JR6bVUQcf6SqMeWEdI0v/g8/3TeMh/bc4N7M8m6wvkub39He4f
t6lcqRxaLyPqwTb9Ot4ffuInrs1H4D3C5hP8vXtxLvT2RoOe9UFzXmL9Hd0p
3+QGqZBnvQvk13v5GmqQ1+cz7m8+DPvXVlpQzyuPXoQcrQJT8f2jiQal9wvH
rbG+tvs01lMeWgtYJ01JgB1+K9CTENIB+1dupmM9oa3DPegxNB12E8JSvkKe
3e6faC+7z9BrlDvsL3aYhn3pSmgF6GH7Xtq5TZMflL9GhdL36vXT4A9qfgL0
J3vVgn7UiuEPsF7DavA30TkZcskdgnn9szrsq28wfwi5OmXAntrxjHLY5yT/
TMhfYdQHfE4xgn6kVeUTcd+nK/AvafV33CdFr4NdpdyvtPO90SWw6/Ys6Eew
GnAbdnA0xvfK8VPQgzK7NvxSmbfxAuTpb56P7/09oR8hsw7fO7s8/ejormK8
b+keDetndaxSur7afX0m9mcyH/YUDlUphhyzssJx/eK8UKpHqfryQqzj7we9
Ka5J9JMhdV9hXbu3sLf0ZinsrAzpznhzvk1/+XKY8TO9O+1ccRrspcQZUt5r
U2Ef8bHfa3xv2ScP9nnfCb/rdwzTsf7kHrCn1nDnR3wff4hxVm/XG9j3eTno
TasV9hpyVTdGPMh120B+sWTle8jl5wv/0Z1c8V4tTnoKuS/1htxSizsJ+NR+
Ue+mo2A3zbom8EndtuEFfjc5nIXv+zVgPP0+g33qNj0hj5SwDP6liH0grzr8
LPxIOLNpB/xu2vqf2He7XMb9n7QU3L+5Ynn4b7A1vtcSXkAPiuDJ54ubwU/1
b1PwXu3u9ZdYv2sb+tF/fvBHrbtNPOOiOfxBD7wJvQt13BHfyi+XW5AzMJpx
N+I0n887nQx5Vi1knHVaAJxQEjyhR+HCc+Cl+Mv8G/ynkgw9KrF9sI5wtNkV
fL/nCK71njawi1TlBeJZ73b/CT7HX+K+Zn2HvZWsgRnQ588fkFM77V/AfbvR
n8Za4TmtMJV49OY95bGoeAmfMz5B39LIXOpJPcA4WmcXgvs/DkccCNfPwg/1
qHzGRUAH+sGxb7m4TpnEPHNVxzraqxvUb1L9h3j+yVs/7G/xITyvGaRBT8L7
+lxHCLsJ+w66CFzWD70twf5qNIdfKmebIi4kj0Dmm8ZF8Bt5vcNjyDWoPvf7
qwXx7EAM4zN/pUGpXygZ67C+3twIdlSTvwMXpK5BsLss7PmE6+xfwAkpwhL+
Km9Y/BfX51yYD3JLaG9lO+TQf5wBvslTK8JuspfG/U+1A57pifmQU+hMHNCm
HcM6yqoS4K04zI9+EcZ8IeTW5HuNxgJXpJQyfX/0Q34WxvyEPtQ+bV/h97PV
sJ42+DueE+69hrzCoobYh3hxPPBKtAqG3ErNQuah4vaGpe8X/rUCvgm1etzA
e7MF7EdwGgkcVD09gAfCsdXwG21/WDp+P/8SetVGzaf+HGdCTuXVQdhTTh6C
eBbebqWd7xfex/OJGchTYm72W+ivOBXxoEabwV8k07+/8btzIPxePVCV+GjQ
FJ+q8S7gkSq4U68DCujPmjPypBZZwvwQbcN49QhBvhPjepB3VH9J3LnUGXld
XWFKvFpV7io+n7Uib2iyGbgiuP2CPwpPfaE/1dqf+NTzEOJd2XsSeKQ8cYf8
iu0o7E+/1+wBnktyw36knc+JJxnJzHOnBr7D9+OaMj9/X/mZcjQirh/7ibgW
twbDvtK0E9Cj1IL4q9zUiOurZ2NdxW9JHH5XVhQyjg7TD771Rt6VJ9WAv6hH
b8EfhL37VuL3VHfEmTC8L+SQHddST/G7gL/apFUf8dyfIfBXZVoQ3iteK+Mv
0YuZ53odg/3FTsuo1y+FwGPR2Zf5ZWM56FXVh8C/RMcjz/Fc+F/6+XZP+u8w
l7PU50T4hRR0kXz2Qh54kXSwE/K2FDKHcjg6wA9E98vwJ7XPGeaFLhPph7Vf
wr5y33HkNQG9EIeyew7soDb4zvzs5Yz3Cab/wS5as/X0r+LfsIvUJgX6E/Iq
Y33V3vEe9POF9hVmjIf9teIetI+XIfPD4CfM+/OqAF90zwDmUQeJ+3vtBLyW
TcYxr3eri/hS7l6lH87fgt+ltGjYQfaWsrHf8MZYX3xhCfsKdbrxfXWawi7a
xdrwf81rC+yrxt4DH5AbrIf/Sz3tuG97HX6qBkYDV+QtmdiPktibeSrWH3aS
Vpwjv+g9m3hXZQBwTtn/GvxDvxyJOJMc51Pe5uHYr7hvy1PIZ/ZvDPbn8IX5
psSB/th4D+yjLmlQqdS+wpJVWEcNaAk5tN7d4IfK/tVJ+Bz2nvEY0pB4ae2N
fYr2q7juLX/iXMol5p9OjanHqEqxkHtZe9rrTAnwTqj9lrjlvJQ4srQn9qMN
f10e/vaoCP6szCtivC1xAb9Tzn3Nw/3h5R/Bnk+8KY9THeCm1C2X9UB288v4
PnI+7tfS6jAP3HNiXPh4fYCeVu9EnaQIpyGf3MSOftMwgTi2oS35euYyvEea
7kb+HFl0Hr/374v8KHh2BA9VTOU42GXmNMSPlL2d/M/uC/N82mCsL9ffxHiZ
kP8I3w/wZL4rOgCeI9j7kIdcaA6cExpko46ShIewg1h9KXFx3MWy/HiYPPrU
EcgnycuRZ8UzK8kr9r7yhRyOccStXqfIZzLvEW9aTcF62vYJrCO7lrB+i/vJ
vL9pJOJW2HSZPMKiF/V0shnr1IrVKe/JZozX0KYB+BwRjTym7qqNPKTPKuNX
4jbWNeENkVfk6G+QW9kw4xrui51Gf6mUzPXXjyokvjwlj3T4iTyn2C5CfMjf
HSC3YHMPdlKytzH/2VUgboQ7Id40yYD5Vcmgv75/DD4m361E/J/wjX7mfoL7
H3ojn3p0xXqKtgB8RvlymXHiMxb6l90y4b9y5dfEUy0PcSEInVBvKB4NmA9b
n0Ydrx4/g7jXXv7m+k/GM9+OOg8clMUP9I/IvTlYr8YY4n2aA+Lj/wRlE/T0
Zg94mFxjO94navQDzb8v9CG3DQSeKGGxzJPVn5BHiZ9P4zq8GnlKVUPyzfTh
aXjuXUvwHrWCCfxSaXoE+UKMigfOqfc7gndq2aO4/uWpwCctNYZ5pbqE+JE2
eCEfCVWTsa5kdx/2U5LSwGu1gnL046v9gEdSri3rHs+vrBsvDyJe1p5LHnZh
Pv35dAPYSTj8GPgmJZnBz6SbzrdxvzfrXyHEBfJptZzp11M/YD9qJ4n8ynL5
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
7004znn4jHrvev8Pe9ExQg==
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.004583333333333334], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3, 3}, {-3, 3}},
       PlotRangeClipping->True,
       PlotRangePadding->{{0, 0}, {0, 0}},
       Ticks->{Automatic, Automatic}]}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.7743813606033707`*^9, 3.774381609740574*^9, 
  3.774382131804491*^9, 3.774382220887501*^9, 3.7743824347057943`*^9, 
  3.7746375343889027`*^9, 3.7746393650512266`*^9, 3.7746394720412474`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"b9851b50-83c2-4695-803d-132f40b1969f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1368, 829},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 212, 4, 67, "Section",ExpressionUUID->"2224c134-276d-45c7-94ea-4dd0ffa2d06b"],
Cell[CellGroupData[{
Cell[817, 30, 158, 3, 53, "Subsection",ExpressionUUID->"05f03502-7a93-439f-b1ec-147fe6302be3"],
Cell[978, 35, 297, 4, 34, "Text",ExpressionUUID->"5f016171-0170-4547-bb4e-08190d5bca0a"],
Cell[CellGroupData[{
Cell[1300, 43, 11360, 222, 569, "Code",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],
Cell[CellGroupData[{
Cell[12685, 269, 343, 7, 27, "Print",ExpressionUUID->"5cb741fb-0026-454a-9993-98f4120fbdd1"],
Cell[13031, 278, 66980, 1354, 79, "Echo",ExpressionUUID->"62f18741-62a5-4d57-8129-146bf3978dc7"]
}, Open  ]],
Cell[80026, 1635, 1909, 45, 65, "Output",ExpressionUUID->"c531a0d9-8221-4bda-a976-ae758f841e6e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81984, 1686, 158, 3, 53, "Subsection",ExpressionUUID->"5fc1a659-7ea2-45be-9d2a-2ee30cfa2795"],
Cell[82145, 1691, 184, 3, 34, "Text",ExpressionUUID->"b4441762-f85f-4ec0-876e-fdad329a009b"],
Cell[CellGroupData[{
Cell[82354, 1698, 10289, 255, 825, "Code",ExpressionUUID->"0fdd1362-68fa-4a31-a308-0d922c18858c"],
Cell[CellGroupData[{
Cell[92668, 1957, 297, 7, 27, "Print",ExpressionUUID->"c6774987-2c84-41ba-82bb-e50fccbd78a5"],
Cell[92968, 1966, 41557, 795, 79, "Echo",ExpressionUUID->"5af9064a-21dc-4b50-bac7-af6c8fa06cb9"]
}, Open  ]],
Cell[134540, 2764, 854, 18, 32, "Output",ExpressionUUID->"00142a78-66d9-4628-b68a-61d8057affcc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[135443, 2788, 160, 3, 53, "Subsection",ExpressionUUID->"4c78c069-2755-405f-b87e-88df1552e418"],
Cell[135606, 2793, 24900, 414, 186, "Text",ExpressionUUID->"adefcd5f-97dc-4869-b34e-f816c3af1db0"],
Cell[CellGroupData[{
Cell[160531, 3211, 6281, 127, 375, "Code",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],
Cell[166815, 3340, 283, 7, 27, "Print",ExpressionUUID->"8bbff5aa-c63c-4965-9816-bf0e28351d0b"],
Cell[167101, 3349, 44734, 873, 88, "Output",ExpressionUUID->"06c21daf-72c1-405b-a476-c53a407c55f6"],
Cell[211838, 4224, 91583, 1692, 88, "Output",ExpressionUUID->"b386e943-85e7-4b89-ac9e-370b0f97c80b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[303470, 5922, 210, 4, 53, "Subsection",ExpressionUUID->"97e011af-ca93-4cfc-a73b-844ec84d1c77"],
Cell[303683, 5928, 9702, 165, 90, "Text",ExpressionUUID->"103a692b-3600-4012-a7e7-fa38f8df8b3e"],
Cell[313388, 6095, 109149, 1801, 896, "Text",ExpressionUUID->"98671d82-36d8-4748-9dcd-91367c7f2e50"],
Cell[CellGroupData[{
Cell[422562, 7900, 5221, 114, 501, "Code",ExpressionUUID->"6e3d5d87-15b2-4853-bd86-59dcefef4488"],
Cell[427786, 8016, 56071, 1158, 88, "Output",ExpressionUUID->"a5e659ef-5483-405b-a12e-a9c923471763"]
}, Open  ]],
Cell[483872, 9177, 197, 3, 34, "Text",ExpressionUUID->"85f22e9b-a0d9-4472-822a-3b3507d5968f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[484106, 9185, 268, 4, 53, "Subsection",ExpressionUUID->"c9883fe2-2bb7-4987-b0cc-5be716d0bab2"],
Cell[484377, 9191, 17856, 298, 160, "Text",ExpressionUUID->"ba9d75b4-bd38-485a-8dc0-5835dc284943"],
Cell[CellGroupData[{
Cell[502258, 9493, 5857, 146, 447, "Code",ExpressionUUID->"c4cf0a05-773c-4cc8-9340-209ecce0864d"],
Cell[508118, 9641, 298, 7, 27, "Print",ExpressionUUID->"dd555edd-aaef-4cca-804d-8f4943089d63"],
Cell[508419, 9650, 56531, 1091, 88, "Output",ExpressionUUID->"30a983bf-01be-4055-b49c-483fda2f3fc0"],
Cell[564953, 10743, 407, 10, 32, "Output",ExpressionUUID->"001ebb74-d150-4ed0-a520-a9e31a0e7580"],
Cell[565363, 10755, 99950, 1820, 88, "Output",ExpressionUUID->"7d55464a-7f66-464f-a473-455f4a90824b"],
Cell[665316, 12577, 407, 10, 32, "Output",ExpressionUUID->"401c74d7-456c-4eb8-a43c-20730d58f589"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[665784, 12594, 156, 3, 67, "Section",ExpressionUUID->"92d6ed71-9677-4eed-ac31-c4f3287353a8"],
Cell[CellGroupData[{
Cell[665965, 12601, 213, 4, 53, "Subsection",ExpressionUUID->"86d87f0c-576d-4b38-991f-520c256e40f7"],
Cell[CellGroupData[{
Cell[666203, 12609, 2704, 66, 166, "Code",ExpressionUUID->"71ba0fe4-66fa-4ea3-b5f3-9892d0776806"],
Cell[668910, 12677, 100246, 1663, 239, "Output",ExpressionUUID->"bc221557-43fd-4c3e-a3c0-78459e5962d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[769193, 14345, 267, 4, 44, "Subsubsection",ExpressionUUID->"5f0dd3ab-14ab-4071-b980-0bb0983a6336"],
Cell[769463, 14351, 285, 7, 34, "Text",ExpressionUUID->"e219469c-0ed6-4ae3-bfeb-2ec6fdc8be67"],
Cell[CellGroupData[{
Cell[769773, 14362, 315, 5, 48, "Input",ExpressionUUID->"8b4274e7-9db0-431e-846b-7b33475fa257"],
Cell[770091, 14369, 277, 6, 36, "Output",ExpressionUUID->"db3a0abb-5006-47a4-8515-7b0bfcf4bddf"],
Cell[770371, 14377, 232, 5, 32, "Output",ExpressionUUID->"9e462428-58c3-4344-9423-aa8203c18cff"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[770664, 14389, 155, 3, 53, "Subsection",ExpressionUUID->"dd151ed5-aed2-4143-8d1b-b951cc324e56"],
Cell[CellGroupData[{
Cell[770844, 14396, 3810, 74, 285, "Code",ExpressionUUID->"6476e1ed-938d-455a-936f-d27f229fcb61"],
Cell[774657, 14472, 60255, 1161, 88, "Output",ExpressionUUID->"1e76daec-b277-4a2e-bb95-2140403b843e"],
Cell[834915, 15635, 105804, 1916, 88, "Output",ExpressionUUID->"83328df6-dd97-42c7-a70f-09723361f01c"],
Cell[940722, 17553, 22325, 464, 455, "Output",ExpressionUUID->"275ead9d-180a-4b8a-b7da-9c3c3f99ae51"],
Cell[963050, 18019, 60333, 1150, 88, "Output",ExpressionUUID->"ff66496b-d1d9-41ec-bb19-b4301d754713"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1023432, 19175, 168, 3, 53, "Subsection",ExpressionUUID->"0a081682-2cb7-4138-9af3-39773615dbc8"],
Cell[CellGroupData[{
Cell[1023625, 19182, 219, 4, 44, "Subsubsection",ExpressionUUID->"25fc94cc-6957-456a-8b72-7d29079ee8dc"],
Cell[CellGroupData[{
Cell[1023869, 19190, 1668, 41, 141, "Code",ExpressionUUID->"4e3b08ed-190e-4fe0-90ef-ddf365dd4ad4"],
Cell[1025540, 19233, 1490, 44, 32, "Output",ExpressionUUID->"0411fcc5-a352-4208-994f-fd6dbccbd416"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1027079, 19283, 223, 4, 44, "Subsubsection",ExpressionUUID->"03df0946-5098-427e-b878-11ab3e2635b9"],
Cell[CellGroupData[{
Cell[1027327, 19291, 2690, 69, 213, "Code",ExpressionUUID->"5ff15106-56bf-4120-940c-00e683cf3392"],
Cell[1030020, 19362, 408, 8, 27, "Print",ExpressionUUID->"739d7d09-63d1-4c68-8809-8cd7e85f479d"],
Cell[1030431, 19372, 100162, 1658, 381, "Output",ExpressionUUID->"fc758759-da9d-49a2-aad8-d74ec18255ac"],
Cell[1130596, 21032, 434, 8, 27, "Print",ExpressionUUID->"7b49bf14-d96c-4f61-aa87-3d8a0d8e53bf"],
Cell[1131033, 21042, 57177, 956, 240, "Output",ExpressionUUID->"2f78aa99-0162-4d3d-9081-5a0c02261bd3"],
Cell[1188213, 22000, 432, 8, 27, "Print",ExpressionUUID->"95602472-67ef-4e71-be62-805f60712912"],
Cell[1188648, 22010, 54959, 955, 770, "Output",ExpressionUUID->"b9851b50-83c2-4695-803d-132f40b1969f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

