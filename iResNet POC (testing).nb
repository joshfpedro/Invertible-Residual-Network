(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1753194,      31556]
NotebookOptionsPosition[   1745742,      31425]
NotebookOutlinePosition[   1746085,      31440]
CellTagsIndexPosition[   1746042,      31437]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Training Net", "Section",
 CellChangeTimes->{{3.7712451283911304`*^9, 3.7712451316814165`*^9}, {
  3.771429487828245*^9, 
  3.7714294883105803`*^9}},ExpressionUUID->"2224c134-276d-45c7-94ea-\
4dd0ffa2d06b"],

Cell[CellGroupData[{

Cell["Jacobian", "Subsection",
 CellChangeTimes->{{3.774349302424162*^9, 
  3.7743493042569532`*^9}},ExpressionUUID->"05f03502-7a93-439f-b1ec-\
147fe6302be3"],

Cell["Helpers to compute the Jacobian (of a function at a point)", "Text",
 CellChangeTimes->{{3.771430193599156*^9, 3.771430214330559*^9}, {
  3.771430871152418*^9, 3.771430891146223*^9}, {3.7743493162634497`*^9, 
  3.774349316550748*^9}},ExpressionUUID->"5f016171-0170-4547-bb4e-\
08190d5bca0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Takes", " ", "input", " ", "of", " ", "and", " ", "outputs", " ", "a", 
    " ", "Jacobian", " ", "and", " ", "a", " ", "corresponding", " ", 
    "function"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"JacobianNet", "[", 
      RowBox[{"func_", ",", " ", 
       RowBox[{"epsilon_:", "1*^-3"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "lin", ",", " ", "net1", ",", " ", 
         RowBox[{"sharedFunc", " ", "=", " ", 
          RowBox[{"NetInsertSharedArrays", "[", "func", "]"}]}]}], "}"}], ",",
        " ", "\[IndentingNewLine]", "\t", 
       RowBox[{
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"NetExtract", "[", 
          RowBox[{"sharedFunc", ",", " ", "\"\<Input\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"net1", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", "n", "]"}], ",", " ", 
             RowBox[{"ConstantArrayLayer", "[", 
              RowBox[{"\"\<Array\>\"", " ", "\[Rule]", " ", 
               RowBox[{
                RowBox[{"N", "[", "epsilon", "]"}], "*", 
                RowBox[{"IdentityMatrix", "[", "n", "]"}]}]}], "]"}], ",", 
             " ", 
             RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}],
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
        RowBox[{"NetGraph", "[", 
         RowBox[{
          RowBox[{"<|", "\n", "\t\t", 
           RowBox[{
            RowBox[{"\"\<addEpsilon\>\"", "\[Rule]", " ", "net1"}], ",", "\n",
             "\t\t", 
            RowBox[{"\"\<MapFunction\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapOperator", "[", "sharedFunc", "]"}]}], ",", "\n", 
            "\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "sharedFunc"}], 
            ",", "\n", "\t\t", 
            RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapThreadOperator", "[", "\n", "\t\t\t", 
              RowBox[{
               RowBox[{"ThreadingLayer", "[", 
                RowBox[{"Subtract", ",", 
                 RowBox[{"\"\<Inputs\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
               RowBox[{"<|", 
                RowBox[{"\"\<1\>\"", "\[Rule]", "1"}], "|>"}]}], "]"}]}], ",",
             "\n", "\t\t\t", 
            RowBox[{"\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
             RowBox[{"ElementwiseLayer", "[", 
              RowBox[{
               RowBox[{"#", " ", "/", " ", "epsilon"}], " ", "&"}], "]"}]}], 
            ",", "\n", "\t\t\t", 
            RowBox[{"\"\<transpose\>\"", " ", "\[Rule]", " ", 
             RowBox[{"TransposeLayer", "[", "]"}]}]}], "\n", "\t\t", "|>"}], 
          ",", "\n", "\t\t", 
          RowBox[{"{", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{
            "\"\<addEpsilon\>\"", " ", "\[Rule]", " ", 
             "\"\<MapFunction\>\""}], ",", "\n", "\t\t\t", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<MapFunction\>\"", ",", "\"\<Function\>\""}], "}"}],
              "\[Rule]", 
             RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
              RowBox[{
              "\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
               "\"\<transpose\>\""}]}]}], ",", "\n", "\t\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetPort", "[", "\"\<z\>\"", "]"}]}]}], "\n", "\t\t", 
           "}"}]}], "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\n", "\n", "\n", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<JacobianNet Sanity Check:\>\"", ",", "\"\<Text\>\""}], 
      "]"}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"W", " ", "=", " ", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {"1", "2", "3"},
         {"4", "5", "6"},
         {"7", "8", "9"}
        }], ")"}], "/", "10."}]}], ";", " ", 
    RowBox[{"b", " ", "=", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "5"}], "}"}], "/", "10."}]}], ";"}], "\n", 
   RowBox[{"<|", "\n", "\t", 
    RowBox[{
     RowBox[{"\"\<JacobianNet\>\"", " ", "\[Rule]", " ", 
      RowBox[{"MatrixForm", " ", "@", " ", 
       RowBox[{
        RowBox[{"Echo", "[", 
         RowBox[{"JacobianNet", "[", 
          RowBox[{"NetChain", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"LinearLayer", "[", 
              RowBox[{"3", ",", 
               RowBox[{"\"\<Input\>\"", "\[Rule]", "3"}], ",", " ", 
               RowBox[{"\"\<Weights\>\"", "\[Rule]", "W"}], ",", 
               RowBox[{"\"\<Biases\>\"", "\[Rule]", "b"}]}], "]"}], ",", " ", 
             "Tanh"}], "}"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"-", "2"}], ",", 
           RowBox[{"-", "3"}]}], "}"}], ",", " ", "\"\<Output\>\""}], 
        "]"}]}]}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<Reference\>\"", " ", "\[Rule]", " ", 
       RowBox[{"MatrixForm", " ", "@", " ", 
        RowBox[{"N", " ", "@", " ", 
         RowBox[{"D", "[", 
          RowBox[{
           RowBox[{"Tanh", "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"W", ".", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "+", "b"}], ")"}],
             "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "z"}], "}"}], "}"}]}], "]"}]}]}]}], 
      " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "\[Rule]", 
         RowBox[{"-", "1"}]}], ",", " ", 
        RowBox[{"y", "\[Rule]", 
         RowBox[{"-", "2"}]}], ",", " ", 
        RowBox[{"z", "\[Rule]", 
         RowBox[{"-", "3"}]}]}], "}"}]}]}], "\n", "|>"}]}]}]], "Code",
 CellChangeTimes->{{3.7712449742491846`*^9, 3.771245006366479*^9}, {
   3.7712451508831515`*^9, 3.7712451557841234`*^9}, {3.7712453144685216`*^9, 
   3.7712453285817113`*^9}, {3.7712457304715033`*^9, 
   3.7712457308931007`*^9}, {3.7712458259602227`*^9, 3.771245850404341*^9}, {
   3.7712459191204967`*^9, 3.7712459291404824`*^9}, {3.7712461153774204`*^9, 
   3.771246153338872*^9}, {3.7712462382690597`*^9, 3.7712462393199034`*^9}, {
   3.771246330313553*^9, 3.7712464063691993`*^9}, {3.7712464726031733`*^9, 
   3.7712464860937243`*^9}, {3.771246540718958*^9, 3.771246555169996*^9}, {
   3.7712466800239964`*^9, 3.7712466865206413`*^9}, {3.771252682820319*^9, 
   3.7712526886540747`*^9}, {3.771252902567024*^9, 3.771252978293189*^9}, {
   3.7712530384354324`*^9, 3.771253079399975*^9}, {3.771253116220532*^9, 
   3.771253123793268*^9}, {3.771253380719039*^9, 3.7712533889277287`*^9}, {
   3.7712534698197002`*^9, 3.771253554009178*^9}, 3.7712536853326907`*^9, {
   3.7712541530167217`*^9, 3.7712542144035273`*^9}, 3.771254424797951*^9, 
   3.771254598201507*^9, {3.7712546714725294`*^9, 3.7712547071027145`*^9}, 
   3.77125474946239*^9, {3.7712548842551365`*^9, 3.771254932131669*^9}, {
   3.7712558131951303`*^9, 3.7712558710050125`*^9}, {3.771255915368943*^9, 
   3.7712559808829327`*^9}, {3.771256068624137*^9, 3.771256118081049*^9}, {
   3.77125616620991*^9, 3.771256171259182*^9}, 3.7712564488714848`*^9, {
   3.7712565465180397`*^9, 3.771256552092588*^9}, {3.7712571653739414`*^9, 
   3.771257172429468*^9}, {3.7712573877926216`*^9, 3.7712574037348146`*^9}, {
   3.7713244660005426`*^9, 3.7713244910245776`*^9}, {3.7713245243790855`*^9, 
   3.771324531988117*^9}, {3.7713245908646317`*^9, 3.7713245959189453`*^9}, {
   3.7713249191158295`*^9, 3.771324946301439*^9}, 3.771325843479694*^9, {
   3.771335643376546*^9, 3.7713356487496405`*^9}, {3.7713356846427784`*^9, 
   3.7713357320037837`*^9}, {3.7713358479249325`*^9, 
   3.7713358505109787`*^9}, {3.7713359320692725`*^9, 3.771335959998743*^9}, {
   3.771336024185506*^9, 3.771336025487505*^9}, {3.771337124879886*^9, 
   3.7713371679068193`*^9}, {3.771337926772975*^9, 3.7713379470355263`*^9}, {
   3.7713380138964157`*^9, 3.7713380192122517`*^9}, {3.7713381625833273`*^9, 
   3.771338195343887*^9}, {3.771338382620248*^9, 3.7713383831857405`*^9}, {
   3.7713397317904825`*^9, 3.7713397656696844`*^9}, {3.7713397970856915`*^9, 
   3.7713397999350233`*^9}, {3.7713400425678825`*^9, 3.771340053186591*^9}, {
   3.7713401150641637`*^9, 3.7713402533748283`*^9}, {3.771340556522333*^9, 
   3.771340558227483*^9}, {3.771341022932105*^9, 3.7713410414968033`*^9}, {
   3.771341611078085*^9, 3.7713416137232957`*^9}, {3.7713417798994308`*^9, 
   3.771341837020052*^9}, {3.771341869097454*^9, 3.7713418781499043`*^9}, {
   3.771341928760856*^9, 3.771342024010883*^9}, {3.7713420669509897`*^9, 
   3.7713420734470963`*^9}, {3.771342137535701*^9, 3.771342226986998*^9}, 
   3.771342354281867*^9, {3.771342426565675*^9, 3.7713424279424815`*^9}, {
   3.771344621792909*^9, 3.771344631136168*^9}, {3.7713453428098526`*^9, 
   3.7713453451538863`*^9}, {3.7713463119730854`*^9, 
   3.7713463362949605`*^9}, {3.771348354959154*^9, 3.7713483590829926`*^9}, {
   3.771348749417597*^9, 3.7713487597311993`*^9}, {3.7713511952321477`*^9, 
   3.7713511997695894`*^9}, {3.771426249219207*^9, 3.771426252651078*^9}, 
   3.7714294811167603`*^9, {3.771429539535887*^9, 3.771429565927732*^9}, {
   3.771429713837861*^9, 3.771429715245688*^9}, {3.771429886985057*^9, 
   3.771429902583715*^9}, {3.771429956155987*^9, 3.771429962712124*^9}, {
   3.7715268930376472`*^9, 3.771526907093895*^9}, 3.77152714212579*^9, {
   3.771527318409111*^9, 3.771527319922534*^9}, {3.7715399434494057`*^9, 
   3.7715399443750134`*^9}, {3.7715404209072847`*^9, 3.771540423197483*^9}, {
   3.7715408380531435`*^9, 3.771540871034897*^9}, {3.7715415857666063`*^9, 
   3.77154158949069*^9}, {3.7715436241335382`*^9, 3.771543651514549*^9}, {
   3.77154368863717*^9, 3.7715436900327816`*^9}, 3.7715437406552467`*^9, 
   3.771543914348199*^9, {3.7715439448118973`*^9, 3.7715440275125427`*^9}, 
   3.772881423114967*^9, {3.774332671590641*^9, 3.774332685356101*^9}, {
   3.774332724472166*^9, 3.774332774762607*^9}, {3.774332827864274*^9, 
   3.774332828009109*^9}, {3.774332872454357*^9, 3.774332874415681*^9}, {
   3.774332936741726*^9, 3.774332937902575*^9}, {3.7743330369858017`*^9, 
   3.7743330660906897`*^9}, {3.774333104855508*^9, 3.774333271328895*^9}, {
   3.7743388528515673`*^9, 3.774338957000124*^9}, {3.774346914272501*^9, 
   3.774347298340797*^9}, {3.774347363100333*^9, 3.774347367310162*^9}, {
   3.774347461229594*^9, 3.7743475436071863`*^9}, {3.774347573809621*^9, 
   3.7743476325636377`*^9}, {3.774347711932683*^9, 3.774347745262836*^9}, {
   3.774347831998953*^9, 3.774347839971089*^9}, {3.7743480075468597`*^9, 
   3.774348045152628*^9}, {3.774348107913321*^9, 3.7743483302577353`*^9}, 
   3.774349338058784*^9, {3.774349368197481*^9, 3.774349369088551*^9}, {
   3.7743507930112667`*^9, 3.774350809894742*^9}, {3.77435098599223*^9, 
   3.7743509985836763`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"JacobianNet Sanity Check:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{
  3.77438126760188*^9, 3.7746375021385365`*^9, 3.7746375360817194`*^9, 
   3.7746393281862364`*^9, 3.7746393666049*^9, 3.7746427904726086`*^9, 
   3.774642907666342*^9, 3.774648783619701*^9, 3.7746906605012407`*^9, {
   3.7746907003028193`*^9, 3.7746907224884996`*^9}, 3.774691713064845*^9},
 CellLabel->
  "During evaluation of \
In[1]:=",ExpressionUUID->"74e5bcd5-a7d3-497e-bf76-e4b8424d3440"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQESB7i65vlYVu6yeTJx6s6qc+IHzvGamy4+tMLe
xXfjtA9TxA9YrF8TfOvwLntZo+DpicHiB9r2zBQ9O/mofb5D9e6znOIHjD9N
n+Bx7Jy9TYUms+kOsQOBNRln19dcsW+6GZs3PU7swMt0JalOsVv2TikSf7/8
ET3w8a6NeITEA/taicj1vpNFD8jbmLdOSn1sb/BNvnWhouiBGj+G658/PbOf
qdQ5+eR9kQORk0NF7W++sC9f7OL/e5bIgYstoT4hba/sz1QE7TALFjnwWImh
xvjXa/tpizadq+YQOTAhN3TJHZO39lcUUied2iV84EZK6FF/s3f2HZ8zmZWz
hA/s4mC43/Pvnf0mqYOKrWLCBywiQz9O7n1vHzQt6+2H/UIHAsJC/6Q8fm+f
BgZCBxjB4fTB3qTs46/nvAj+3w0ekhW7BOH8Q2I5B8VyEPym5dGfDysh+HbJ
4uvr7wnA+V885wMRgr8CpDwVwQ+bISzLZYDgQ+ILwQcAeJy5Dw==
                    "]], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.812820711494877, 
                    0.9773027452952469}, {-0.25, 0}, 
                    Offset[8], {0.08165695756016156, 0.01745942669596423}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    0.40000000000000024`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6., 3.6739403974420594`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 3.061616997868383*^-16}], 
                    Offset[{12, 12}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-5., 3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"addEpsilon\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["addEpsilon", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-4., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Function\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Function", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"M\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MapFunction\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["MapFunction", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    NetChain[
                    Skeleton[2]], "Input" -> {3, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"MT\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapThreadOperator", "[", 
                    RowBox[{
                    RowBox[{"ThreadingLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"\"1\"", "\[Rule]", "1"}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\"1\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], ",", 
                    RowBox[{"\"2\"", "\[Rule]", "3"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    NetMapThreadOperator[
                    ThreadingLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], 
                    Association["1" -> 1], "1" -> {3, 3}, "2" -> 3]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.0000000000000002`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"z\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["z", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHEs3///9XaGy8NT8zY+37tNQV/3NzttynlsOggGz3zZr1
v6CwYM95kLuyMte9mzbtfznIvVR0GwiQ7D6QG8pKj+wHuQuEQWygmBKV3QUD
RLsP6AaBzvZn/aA4hMXl8iX/E2jkLhggyn2nT/93KC7cdwYWZj09bzpoGGbI
AK/7QHHZ0fZ4EsxdoDB7+eS/AR3cBQM43QdK/7k5W+/C3AXig+KYjm4DAQz3
gcIMOS5B6Z/OYYYM4O4DuQuU/hFl2da7dEj/hADYfaD0DyvLQO6b2P+5gQZl
GcnA0jIrqbrq3HpYXJYUHTgxgHEJB6B0DgojT4/Kl8hlGZXSvw8l2MWlqsDb
s/quh3vZf2Oj4P++Ps2rnR0q8ig1l4EKdXlr892ZyHW5l3t9DSVmUgug1+XQ
skyBgUI/UwqwlWVo9dKAuA+UzkF1JBF1Od3dh16Xg8pcPGUZ3dwHS/8k1uV0
cR9qXb717qJF/9OILMto6j5Q+MDyJZl1OU3ch9kv2Xp3x9b/AWQYRXX3gfIh
LP1ToS6nuvtgcVlRdnw3FepyqrsvL3fb7QN7/ntSsS6nKgAA+YGQWA==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"divideByEps\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1000", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["divideByEps", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[1000 #& , {4, 3}], "Input" -> {3, 3}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    FormBox["\"T\"", TraditionalForm], 
                    Offset[{0, -1}, {-1., 6.123233995736766*^-17}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {3, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-6., 3.6739403974420594`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"addEpsilon\"", TraditionalForm], 
                    Offset[{0, -15}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Function\"", TraditionalForm], 
                    Offset[{0, -15}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"MapFuncti..\"", "\"MapFunction\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MapFunction", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"subtract\"", TraditionalForm], 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"z\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"divideByE..\"", "\"divideByEps\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "divideByEps", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"transpose\"", TraditionalForm], 
                    Offset[{0, -13}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}]}}, 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
                    3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736762*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.1499858073915776`, 
                    5.378432173300872}, {-4.812820711494877, 
                    0.9773027452952469}], {0., -0.17}, Automatic, {
                    0.9778967587819768, 0.20908832861665047`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.40000000000000024`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}, {-4., 1.0000000000000002`}, {-4.,
                     2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {386., 102.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28.999999999999982`, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "addEpsilon"], 
                    NeuralNetworks`NetPath["Nodes", "Function"], 
                    NeuralNetworks`NetPath["Nodes", "MapFunction"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "z"], 
                    NeuralNetworks`NetPath["Nodes", "divideByEps"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]], 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[3], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{3, 3}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {3, 3}, "$ArrayDimensions" -> {3, 3}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/Weights"], 
                    "Biases" -> NetSharedArray["1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 3, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]], 
                    "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray["1/Weights"], "Biases" -> 
                    NetSharedArray["1/Biases"]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {3}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]], 
                    "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {3, 3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]], 
                    "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/Biases" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3, 3}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"z\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Echo",
 CellChangeTimes->{
  3.7746917145927596`*^9},ExpressionUUID->"f441063e-9abd-4ae1-a479-\
d88af185a107"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"JacobianNet\"\>", "\[Rule]", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0.02574920654296875`", "0.0514984130859375`", 
         "0.07724761962890625`"},
        {"0.005841255187988281`", "0.007331371307373047`", 
         "0.008761882781982422`"},
        {"0.00035762786865234375`", "0.0004172325134277344`", 
         "0.000476837158203125`"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], ",", 
   RowBox[{"\<\"Reference\"\>", "\[Rule]", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0.025743319670309385`", "0.05148663934061877`", 
         "0.07722995901092816`"},
        {"0.005873066041279025`", "0.007341332551598781`", 
         "0.00880959906191854`"},
        {"0.0003454621793415763`", "0.0003948139192475157`", 
         "0.0004441656591534552`"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.774381275603286*^9, 3.7746375032851963`*^9, 3.7746375364205394`*^9, 
   3.7746393312862234`*^9, 3.7746393668936405`*^9, 3.774642791034937*^9, 
   3.7746429082822294`*^9, 3.7746487896075096`*^9, 3.774690663930073*^9, {
   3.774690700487325*^9, 3.7746907226929536`*^9}, 3.774691714692495*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"ddd4fc8d-a4e2-49f9-986e-fc50a348a431"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["LogDet", "Subsection",
 CellChangeTimes->{{3.7743803589092216`*^9, 
  3.7743803598708763`*^9}},ExpressionUUID->"5fc1a659-7ea2-45be-9d2a-\
2ee30cfa2795"],

Cell["Helper to compute the LogDet (of a matrix):", "Text",
 CellChangeTimes->{{3.774349321972266*^9, 
  3.77434932949515*^9}},ExpressionUUID->"b4441762-f85f-4ec0-876e-\
fdad329a009b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\n", 
   RowBox[{"Input", ":", "\n", "n", ":", " ", 
    RowBox[{"dimension", " ", 
     RowBox[{"(", 
      RowBox[{"Jacobian", " ", "is", " ", "nxn"}], ")"}], "\n", 
     RowBox[{"k", ":", " ", 
      RowBox[{
      "number", " ", "of", " ", "power", " ", "series", "\n", "Output"}], 
      ":"}]}]}], "\n", "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"LogDetNet", "[", 
      RowBox[{"n_", ",", "  ", 
       RowBox[{"k_:", "5"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "powers", ",", " ", "parts", ",", " ", "elementwise", ",", " ", 
         "chains", ",", " ", "diagonalElements", ",", " ", "trace"}], "}"}], 
       ",", "\n", "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"(", "1", ")"}], " ", "Find", " ", "the", " ", "power", " ", 
         "series", " ", "expansion", " ", "of", " ", "log", " ", "of", " ", 
         "the", " ", "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Create", " ", "k", " ", "powers", " ", "of", " ", "the", " ", 
         "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", 
              RowBox[{"k", "-", "1"}], "]"}], ",", " ", 
             RowBox[{"NetFoldOperator", "[", 
              RowBox[{
               RowBox[{"DotLayer", "[", 
                RowBox[{"\"\<Inputs\>\"", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}]}], "}"}]}], "]"}], 
               ",", " ", 
               RowBox[{"{", 
                RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<1\>\""}], 
                "}"}]}], "]"}], ",", 
             RowBox[{"PrependLayer", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", " ", "\[Rule]", " ", "2"}], ",", " ", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "\"\<1\>\""}], "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"2", ",", " ", 
                RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], "}"}], " ", 
              "\[Rule]", " ", "3"}]}], "}"}]}], "\n", "\t", "]"}]}], ";", 
        "\n", "\t", 
        RowBox[{"parts", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", "i", "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Combine", " ", "powers", " ", "of", " ", "Jacobian", " ", "with", 
          " ", "the", " ", "coefficients", " ", "of", " ", "power", " ", 
          "series", " ", "of", " ", "log"}], "*)"}], "\n", "\t", 
        RowBox[{"elementwise", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ElementwiseLayer", "[", 
            RowBox[{
             RowBox[{"#", "/", 
              RowBox[{"(", 
               RowBox[{"i", "*", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"i", "+", "1"}], ")"}]}]}], ")"}]}], " ", "&"}], 
            "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"chains", " ", "=", " ", 
         RowBox[{"NetChain", " ", "/@", " ", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"parts", ",", " ", "elementwise"}], "}"}], "]"}]}]}], ";",
         "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Sum", " ", "the", " ", "powers", " ", "and", " ", "combine", " ", 
          "with", " ", "the", " ", "corresponding", " ", "coefficients", " ", 
          "to", " ", "get", " ", "the", " ", "power", " ", "series", " ", 
          "expansion"}], " ", "*)"}], "\n", "\t", 
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"chains", ",", " ", 
             RowBox[{"{", 
              RowBox[{"powers", ",", " ", 
               RowBox[{"TotalLayer", "[", "]"}]}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"k", " ", "+", " ", "1"}], " ", "\[Rule]", " ", 
              RowBox[{"Range", "[", "k", "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"Range", "[", "k", "]"}], " ", "\[Rule]", " ", 
              RowBox[{"k", "+", "2"}]}]}], "}"}]}], "]"}]}], ";", "\n", "\t", 
        "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"(", "2", ")"}], " ", "Take", " ", "the", " ", "trace", " ",
           "of", " ", "the", " ", "power", " ", "series"}], "*)"}], "\n", 
        "\t", 
        RowBox[{"diagonalElements", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "i"}], "}"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"diagonalElements", ",", " ", 
             RowBox[{"{", 
              RowBox[{"TotalLayer", "[", "]"}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Range", "[", "n", "]"}], " ", "\[Rule]", " ", 
             RowBox[{"n", "+", "1"}]}], "}"}], ",", " ", 
           RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "n"}], "}"}]}]}], "]"}]}], ";", "\n", 
        "\t", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ConstantPlusLayer", "[", 
            RowBox[{"\"\<Biases\>\"", " ", "\[Rule]", " ", 
             RowBox[{"-", 
              RowBox[{"IdentityMatrix", "[", "n", "]"}]}]}], "]"}], ",", 
           "powers", ",", "trace"}], "}"}], "]"}]}]}], "\n", "]"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"ExactLogDetNet", "[", "2", "]"}], " ", ":=", " ", 
     RowBox[{"NetGraph", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "1"}], "}"}], "]"}], ",", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "2"}], "}"}], "]"}], ",", "  ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "2"}], "}"}], "]"}], ",", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "1"}], "}"}], "]"}], ",", "\n", "\t", 
         RowBox[{"ThreadingLayer", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#1", "*", "#2"}], " ", "-", " ", 
            RowBox[{"#3", "*", "#4"}]}], " ", "&"}], "]"}], ",", " ", "\n", 
         "\t", 
         RowBox[{"ElementwiseLayer", "[", 
          RowBox[{"Log", "@*", "Abs"}], "]"}]}], "}"}], ",", "\n", "\t", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", " ", "2", ",", " ", "3", ",", " ", "4"}], "}"}], 
         " ", "->", " ", 
         RowBox[{"5", " ", "\[Rule]", " ", "6"}]}], "}"}], ",", "\n", "\t", 
       RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{"2", ",", " ", "2"}], "}"}]}]}], "\n", "]"}]}], ";"}], "\n", 
   "\n", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<LogDetNet Sanity Check:\>\"", ",", "\"\<Text\>\""}], "]"}],
      "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"jacob", " ", "=", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", 
          RowBox[{"-", "2"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "/", "100."}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Echo", "[", 
     RowBox[{"LogDetNet", "[", 
      RowBox[{"2", ",", "3"}], "]"}], "]"}], ";"}], "\n", 
   RowBox[{"<|", "\n", "\t", 
    RowBox[{
     RowBox[{"\"\<Reference (LogDet)\>\"", " ", "\[Rule]", " ", 
      RowBox[{"N", " ", "@", " ", 
       RowBox[{"Log", " ", "@", " ", 
        RowBox[{"Det", " ", "@", " ", "jacob"}]}]}]}], ",", " ", 
     RowBox[{"\"\<Reference (TraceLog)\>\"", " ", "\[Rule]", " ", 
      RowBox[{"N", " ", "@", " ", 
       RowBox[{"Tr", " ", "@", " ", 
        RowBox[{"MatrixLog", "[", "jacob", "]"}]}]}]}], ",", "\n", "\t", 
     RowBox[{"\"\<ExactLogDetNet\>\"", " ", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"ExactLogDetNet", "[", "2", "]"}], "[", "jacob", "]"}]}], ",", 
     "\n", "\t", 
     RowBox[{"Sequence", " ", "@@", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"\"\<LogDetNet[\>\"", "<>", 
           RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<]\>\""}], " ", 
          "\[Rule]", " ", 
          RowBox[{
           RowBox[{"LogDetNet", "[", 
            RowBox[{"2", ",", "#"}], "]"}], "[", "jacob", "]"}]}], "&"}], ",",
         " ", 
        RowBox[{"{", 
         RowBox[{"15", ",", " ", "5", ",", " ", "3"}], "}"}]}], "]"}]}]}], 
    "\n", "|>"}], "\n"}]}]], "Code",
 CellChangeTimes->{{3.77434933949854*^9, 3.7743493829567003`*^9}, {
  3.774351675384377*^9, 3.774351694143609*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"0fdd1362-68fa-4a31-a308-0d922c18858c"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"LogDetNet Sanity Check:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{
  3.774381276550026*^9, 3.7746375038032246`*^9, 3.7746393319115763`*^9, 
   3.774642791244813*^9, 3.774642908509261*^9, 3.7746487902835155`*^9, 
   3.7746906642123194`*^9, {3.7746907006369257`*^9, 3.7746907257348194`*^9}, 
   3.7746917149916935`*^9},
 CellLabel->
  "During evaluation of \
In[5]:=",ExpressionUUID->"557fcebf-9378-4bcd-992c-cd44bd0897d5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  InterpretationBox[
                  "\"\\!\\(\\*TemplateBox[List[\\\"\\\\[Times]\\\", \
\\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\"2\\\", \\\"2\\\"], \
\\\"RowWithSeparators\\\"]\\) matrix\"", 
                   StringForm["`` ``", 
                    Row[{2, 2}, "\[Times]"], "matrix"], Editable -> False], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantPlus", "Arrays" -> 
                    Association[
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    "\"\\!\\(\\*TemplateBox[List[\\\"\\\\[Times]\\\", \
\\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\"2\\\", \\\"2\\\"], \
\\\"RowWithSeparators\\\"]\\) matrix\"", 
                    StringForm["`` ``", 
                    Row[{2, 2}, "\[Times]"], "matrix"], Editable -> False], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConstantPlusLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Echo",
 CellChangeTimes->{
  3.774691715110403*^9},ExpressionUUID->"64206732-1b68-4c37-9230-\
c9466e6bd0c4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Reference (LogDet)\"\>", "\[Rule]", 
    RowBox[{"-", "6.907755278982137`"}]}], ",", 
   RowBox[{"\<\"Reference (TraceLog)\"\>", "\[Rule]", 
    RowBox[{"-", "6.907755278982138`"}]}], ",", 
   RowBox[{"\<\"ExactLogDetNet\"\>", "\[Rule]", 
    RowBox[{"-", "6.907755374908447`"}]}], ",", 
   RowBox[{"\<\"LogDetNet[15]\"\>", "\[Rule]", 
    RowBox[{"-", "5.547641754150391`"}]}], ",", 
   RowBox[{"\<\"LogDetNet[5]\"\>", "\[Rule]", 
    RowBox[{"-", "4.1456804275512695`"}]}], ",", 
   RowBox[{"\<\"LogDetNet[3]\"\>", "\[Rule]", 
    RowBox[{"-", "3.4056637287139893`"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.774381278719904*^9, 3.774637504692216*^9, 3.774639332916822*^9, 
   3.7746427930968466`*^9, 3.7746429100670557`*^9, 3.7746487918775916`*^9, 
   3.774690664821706*^9, {3.7746907011365895`*^9, 3.7746907262374754`*^9}, 
   3.774691715515293*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"98b18e15-336f-4564-8f8b-35a7f67ba4b0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loss Function", "Subsection",
 CellChangeTimes->{{3.77434938900718*^9, 
  3.774349390591318*^9}},ExpressionUUID->"4c78c069-2755-405f-b87e-\
88df1552e418"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztvT3Ms060H+jsRvJ23s6llYrSJZsKbYVSId3VihIlyl20SnSRbjZCSRlF
oVhpKSkSiZIiBUWuhJJbULJKg27F7diOkpLy7DkD2BgPMGDs18/7zk/y//0/
NjAzZ87HfHF+/+ifOX/xf/wPh8PhX/1P+J+/+Kfu//rXf/1P/83/9j/jH//7
X/2r/9P+q7/85//kr/6vv7T/8q//l3/2P+KX/xk//+kfHA7/EP8FCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJiTqDwLjAxc5+dU0kJCQkJH5zpLYCZtz86mr8
NqiLHMrV4mygKjJI0wyK6of1RV1AVtQfKAhllBfw08TzFnxM5u/HOntZoQN1
CXmafkRO22z+56HKYoii6PkTJyjnCmZF0NCvBXhXHcLqbTWELDBBOR7gcDiB
5kSQY/eXiQ/W9QSU7vN4tSBIiltd6ywEW8XfzirYUTHfhm9CmYCnX7BNCriF
+G1NEYFtuRCjHeWRhbI6gRH9HF+SWNhXRxPeOWSpsgBspi8aBG/T1Z+DT8j8
7VhpL2t0oEocsFz0gbH9XnvaaPM/FU2ZQezoYAYZxnIXDMOHJEshRh9/VTQw
TAv8bCTrOgXPdiFMEog8HZSrB+8VVQOZfWHxxkoGBlJ4cKV4o0cw1obC00B/
XxB8H1Ibzqt0j+L9Fdz8/k2VRZCWb6jbu1DlkOXv76sm0uH4R8abGopi1OgP
yfztWGkvQjrQpGBfruB1z6zyFN46xVlt85z+/ElIHXAS/LfwwQ7K7ssGv7Yh
rmv8F+cP/ddQQqir4GSt328iA5RP7N1UAWg4xzmZ8SC2VFiXI47TtNH8qoLA
wLHbzxni37FW9yjmHv9EH7oeTWz8kfGmDA242umvrsZ7sDbeiOhA4eKc5h5v
3o6VbfiK/qxziFwLTNPAOcr9Q+tJi+DGG2xX4IBPt+ceOGHnvHPsC8WFfjj9
ub2bPrboEA7iSDvvOYDq3+sNpQ+6ldzW0ao0BA9jp+36EBfLdW2KGALfA9d1
wY+Lx7lTU0Ia+u3vXjCYR+CYI8FywgyauoDYd8B2cK4osChb5215nh9CElpc
3eO1ocZ5jGdd0X4uYLge+L4Pvof1outwvnovWaxuq+Q0KYcJVBlEfgBhGOIn
gmxg7zTHjvwI8qaraxqBH6T4fxVkIeqeg3Pp7gYmK5fq2F9/ewqUdF+UQ4Nl
hV7bxji/996Ur1mrH31/uSjzIM6gKCuo6/t90897tR8aNndt25iiHBwIaO1h
pi/KyITLsV1z9nwq61nmVRq0uoP9E/XyIn8S4HdBAv3jxOW0tQ+737Bcj2wv
yoAXFpbsZa6eS/GG1uk9S4XT4Qy6QzYVQlqJ1G2ib6YktGTzE3061Z+r7ZHd
U2E/pZB3m1mkE2m6vLfVZD6YhgNhvnFAPxFvCt9m85omwb7rY0pmw8WIOl+W
g3ulvsO2Ju8fDNQR6coR1L6OTQK2poF2PsBhEAMLTwc7pRri3Mw1wYlLrG8D
RaDDCcctbjYlULrGQD1LWl1ic6ojXL3bk8FXT6B1ylrHJpzPFtASX5n6YFyo
HgY4qOdhHIJDe0iKA/lEaQTSH9UM271C1JnIOI/Wcmfa0KCOhyQTFccFNfq8
CsoCZaK0a4x9K5frtlZO03LgA/VENaBdAm9w+IL9k7S/VP1eG44joqb7+4rj
irMOjkd1TSByMKYeVbAwlnpBDEkSgIntOd/GFFjnyAH11LbRttEfBF67vzdo
x7OvWdtuWkq2QdH8dv24RP3AMo+KznxnsfC81/qhvrdRRV+D/szSLqA40Xxf
NBm4SiurummYvMYypzULX0WZnyxIB23NHHWTHW3rQ2DPVc2ojW9kC+YFTlcH
0oFbm7eX5Xouzm9QRnVsYbzBZ2K8aDqZzddtqm/46z7LNj9jX5z+XG+PwPaN
AuyHvCwgNDWwcazhxzmkngqXQZ88oUb/oj/2yWrw4k2N7TIsHL/5YFkB3IYJ
TQ6+Zbd7NxhPbc0AN6Jx0Qvli6KJwaQ+7faLSK46TsAyV8H+One2kYGD8mA9
TXOxqwsZjj+rCj9FCAaNDYyYL09sv3oZ9lMDmWeCFXaKQH2tXsFJuwvYWpbS
7Z00EBtoY1f/Nh5sEhP1FmNBCXxUERjn0bw97XS9/26pDRwfGmr0ezRo40Ld
1sppVg68dgagkt33g9k6hSQb/qwNfB/5OZyzXro+ZNeHoNEcduAkcurzyzCW
V6zdBy28z0dr1Jczxd6QjR+efM3adtM6rXaE820to2n33fv9y8XnvdoP2Lf6
Xf/F+oL29w6DOvNl3mAcvdxsiDUGXKur52o5bejDEm3vNLKFGu0D7Z3etWDl
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
7r0cFs99S0hISEhIbAXtd3tgWxZYlgNekCzulUlISEhISEhISEhISEhISEhI
SEhISEhISEhIvIzduc4bqPICHo6j1wVkxegsOZZbFOUL5/5G5UyU8St43Osi
34+bpS4hT9PntknsK+c5iOgRT/++EOtkxrHlfSvza2T2ab/wi/zQd2F/rvMq
C8AmvoZRHjuWY/PY5ypveXE0et93Jh/e2nIey/hFPO5lAp5+mee/WYEqccBy
E8hiG5TjCYzo+/3ZR7CznKchrkeP+veFWCmzKVveE5+X2af9wi/yQ1+D93Od
N5H+zLlZ5ZDlj0qbmMfN8YZbzlMZv4jHfS8+acZhdc9XV+Up/IDh8+fwNt7u
jTbC0fGvw0qZcW15T3xMZsM+/bRf+EV+6AvwCa7zKY7nMdjY5pV4s1jOL+Jx
38sPFi7OaZ7z00p0eFO8+YSN/DKsjTeCtvzteOzTT/fnb6Q/K/AervNn8HS0
KTOI/Ogh9/VDvCFO8ZA4uAMI4+y2XjxX5ric5zLE2jbNPy5+Dfvd91CuISSh
JWTTc88sE/zeUuF0OIOOde554Z+wmbO9aXmM/VbmUZ9YlK7DOhHn+qyLob23
NIW86yiSfZpOrfMvc66L8suLyJmvMw0rs+WFTyFwHQiy58niKzbypH8V/R10
3FbRTO7WLTz3A3mI6O6MzNbY2CNE+nVeDo8yE9OBYZtc14MA/UVRVpOc4M99
ur/PY20p+jphX1BO0PtTlsvbbMfrZLKmPS/jDVzn3GJGOsp4vCkH6oh35yHe
NDn4LA9qf35gucxhOfwylts2xz/eY+ka0mfVDNs9WPrdOC+ukS+Wi/1Txx3/
M/rFhptr81XO9pYn46C4MKxq7mrzXAplgj4uhrwsIDTxWvQlfpxD6qlw6XiJ
njHPuS7CL78s5ymdqe688Cr6HIw1lnYBhZd0eaONPOtfDq5qdNwaDeSeDvYE
fcF6nvsWIro7L7N1NsbHfL/OyWEsMxEdYLXGOZqi+a3OUp59xhmgs3jMNbmn
Pt3b59HvBo4LO07yjuf06vW1XirvVTsWkck6H74P3sF1/gyejjJum4l4U+B4
07c9eEi5LVDmU1x7KmOhbQL844vXVPj/59HvaRcnpuKNSLnjuvKwA2d7jTKk
ujq3e9A/GN6DfT+iYuPRvqtyR4ET49Ij7giL6TMfS5yEC3UVkfOsznQ8TEN+
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
EhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIS
EhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIS
EhISEhISEhISEhISEhISEhISEhISEhISEhI/DRWUZfPG639HrJHBT5NXBXle
/epKvBl76vyfIC+Jn4amSCAMfPD9BMpfXZkeTQGB40FWr7utCB3w1960EV8n
tw0y+5S8dpFVE4FpJYIXV5BFIQS+D+E721flkMQxxEkCCX3w/9OtMXxvnV8l
r98ETQNj6ddVAUVZP37PuU7iQ8D+SH0dzmcL0l9dF4YGMtcEL9+iERVEtg3x
J0LOV8ltq8w+JK89ZLXKfzZQZjHY1yOofileRF2v80NNBUWRQ+qqcDhcwY5z
KDfJ8g06/4fFmzoLwQsyuImhxP5XL3BRLnA6HuCkOpB2PzZFBK4Xf8c48U9E
4cH1K/wmsLroVgybXWDugm6nnxm/fIvcXpHZJnlVkETZuvJeldUG/5mYp1Xx
JsH5UL6yWoTcVeB49aDYcC/DO3T+D4o3deaC6aQD+RUQusFtrtgUAWinAyju
oHfLEGwnBrni+AvwLX4TLSa1VXCyV6JFCb5mQPSJOc5XyO1VmW2RVw6uFawb
H359vMnA0d0N8Qblpx7hbGer72zxJp3/U+JNnYClmo/zu7qA4kGfKwi042O8
QRQ459aD8gOVlHjA2BfUJeRZCmlasDFDXaSQJBkU1YxNYB9nWdmNMRqocrw/
r1aOm1OwFdQd3k20dpGmkHd1aMqM1Y9XpcxRwPhEwPkKuc3IjD0+g2xgfFX1
LJf18nox3myRk5D/RPkVpBc56kXDjzco7zSOIMbyblst+F1sX+F4sSAuSihL
7A/RDqgj0I8nMKc6YBFv0vk/JN4U3hXO1sL8nGKShn07nswwnTQh+cyWr0SP
kd9sihh8E+1PsSGIAoizCqoyBut6BZc3DmsyCP0UitAABf1QFESQlmgrgQm6
l4v7TqyHqvnPfqxMIAhiyEucJ5sa2H4AfpxD6qlwQZsaP7+JDLjY6fgpj9fU
NdRCn5naf4PcpmSGKCMTlIsCl7MCZphBnvjgJ88rCCLyesRr8Wa1nNpKzvtP
Wq83LGwf+mPaLwo9MEf7N1Vsg24GQNskTRmhDzIhwp+rLILIUeF41sGL8P8j
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
QkJCYn/8/6wkDFs=
    "], {{0, 171}, {412, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{412, 171},
  PlotRange->{{0, 412}, {0, 171}}]], "Text",
 CellChangeTimes->{
  3.774338768495008*^9},ExpressionUUID->"adefcd5f-97dc-4869-b34e-\
f816c3af1db0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"iResNetTrainingNet", "[", "forward_", "]"}], " ", ":=", " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t", 
      RowBox[{"n", " ", "=", " ", 
       RowBox[{"Length", "[", 
        RowBox[{"NetExtract", "[", 
         RowBox[{
          RowBox[{"JacobianNet", "[", "forward", "]"}], ",", 
          "\"\<Output\>\""}], "]"}], "]"}]}], "\n", "\t", "}"}], ",", "\n", 
     "\t", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"<|", "\n", "\t\t", 
        RowBox[{
         RowBox[{"\"\<Jacobian\>\"", " ", "\[Rule]", " ", 
          RowBox[{"JacobianNet", "[", "forward", "]"}]}], ",", "\n", "\t\t", 
         RowBox[{"\"\<LogDet\>\"", " ", "\[Rule]", " ", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"n", " ", "\[Equal]", " ", "2"}], ",", " ", 
            RowBox[{"ExactLogDetNet", "[", "n", "]"}], ",", " ", 
            RowBox[{"LogDetNet", "[", "n", "]"}]}], "]"}]}], ",", "\n", 
         "\t\t", 
         RowBox[{"\"\<norm\>\"", " ", "\[Rule]", " ", 
          RowBox[{"DotLayer", "[", "]"}]}], ",", "\n", "\t\t", 
         RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
          RowBox[{"ThreadingLayer", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"0.5", " ", "*", " ", "#1"}], " ", "-", " ", "#2"}], 
            "&"}], "]"}]}]}], "\n", "\t", "|>"}], ",", "\n", "\t\t", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NetPort", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Output\>\""}], "}"}], 
           "]"}], " ", "\[Rule]", " ", "\"\<LogDet\>\""}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NetPort", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], 
             "]"}], ",", " ", 
            RowBox[{"NetPort", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], 
             "]"}]}], "}"}], " ", "\[Rule]", " ", "\"\<norm\>\""}], ",", "\n",
          "\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<norm\>\"", ",", " ", "\"\<LogDet\>\""}], "}"}], " ", 
          "\[Rule]", " ", 
          RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
           RowBox[{"NetPort", "[", "\"\<Loss\>\"", "]"}]}]}]}], "}"}]}], "\n",
       "\t", "]"}]}], "\n", "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Example:\>\"", ",", "\"\<Text\>\""}], "]"}], "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"wrapInResidual", "[", "net_", "]"}], " ", ":=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"net", ",", 
      RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], "}"}], 
      "\[Rule]", "2"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"wrapInResidual", "[", 
      RowBox[{"NetChain", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", 
         RowBox[{"ElementwiseLayer", "[", "\"\<ELU\>\"", "]"}], ",", 
         RowBox[{"DropoutLayer", "[", "]"}]}], "}"}], "]"}], "]"}], ",", " ", 
     "3"}], "]"}], "]"}]}], "\n", 
 RowBox[{"iResNetTrainingNet", "[", "forward", "]"}]}], "Code",
 CellChangeTimes->{{3.7712461733785934`*^9, 3.7712462797517805`*^9}, {
   3.7712467282968006`*^9, 3.771246971234892*^9}, {3.771247012593236*^9, 
   3.771247062931487*^9}, {3.7713355124382553`*^9, 3.771335514947486*^9}, {
   3.7713424860170774`*^9, 3.771342490632975*^9}, 3.771342643255226*^9, {
   3.771342720801722*^9, 3.7713427421698256`*^9}, {3.771342801133519*^9, 
   3.771342816975562*^9}, {3.7713443832768326`*^9, 3.7713443923025727`*^9}, {
   3.771346168774109*^9, 3.7713462368048964`*^9}, 3.7713463000914755`*^9, {
   3.7713482181981363`*^9, 3.771348242679274*^9}, {3.7713482945794554`*^9, 
   3.7713482997207875`*^9}, 3.7714292407229433`*^9, {3.771429902587538*^9, 
   3.7714299025891314`*^9}, {3.771429983803138*^9, 3.771429991742524*^9}, {
   3.7714351480099382`*^9, 3.771435149900608*^9}, {3.771436277291979*^9, 
   3.771436277422518*^9}, {3.7715245505834303`*^9, 3.771524557743154*^9}, {
   3.771524602084203*^9, 3.771524638035481*^9}, {3.7715246845227213`*^9, 
   3.771524695107903*^9}, {3.7715248127492228`*^9, 3.771524816425106*^9}, {
   3.7715359964987326`*^9, 3.7715360027931323`*^9}, {3.771536212303712*^9, 
   3.771536219846096*^9}, {3.771536307109409*^9, 3.771536319602399*^9}, 
   3.7715402363173018`*^9, {3.7726603773808994`*^9, 3.7726604141110134`*^9}, {
   3.7726605470423756`*^9, 3.7726605477045527`*^9}, {3.772660653609005*^9, 
   3.77266068264157*^9}, {3.77266073243651*^9, 3.772660776353501*^9}, {
   3.7726608525124454`*^9, 3.772660938848506*^9}, {3.7726610100581665`*^9, 
   3.772661079510709*^9}, {3.7726612610250435`*^9, 3.772661261544655*^9}, {
   3.7726613028474483`*^9, 3.7726613115890985`*^9}, {3.7726613570646467`*^9, 
   3.772661358987563*^9}, {3.7726614035043325`*^9, 3.7726614261171007`*^9}, 
   3.7726616848702292`*^9, {3.7728812875393124`*^9, 3.772881472843192*^9}, {
   3.7729802699003105`*^9, 3.7729802800262637`*^9}, {3.7729803334982634`*^9, 
   3.7729803350411654`*^9}, {3.7729803758679733`*^9, 3.772980415652627*^9}, {
   3.7729805358123164`*^9, 3.772980563818876*^9}, {3.772981168706562*^9, 
   3.772981174352434*^9}, {3.7729812350551567`*^9, 3.772981258276066*^9}, 
   3.7729828113925467`*^9, {3.7743333774450483`*^9, 3.774333514094322*^9}, 
   3.774347056902504*^9, {3.774348347675708*^9, 3.7743483736116743`*^9}, {
   3.7743488574769793`*^9, 3.77434889855902*^9}, {3.774349611433282*^9, 
   3.774349614821385*^9}, {3.774350827302779*^9, 3.774350835180683*^9}, {
   3.774350973666121*^9, 3.774350974592297*^9}, {3.774351010141726*^9, 
   3.774351020965646*^9}, {3.774352428726531*^9, 3.7743524346085377`*^9}, {
   3.774352962042448*^9, 3.774352973544826*^9}, {3.7743811283690233`*^9, 
   3.774381146882728*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],

Cell[BoxData[
 StyleBox["\<\"Example:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{
  3.774381278922164*^9, 3.7746375048567753`*^9, 3.7746393331612306`*^9, 
   3.7746427933110924`*^9, 3.7746429102684684`*^9, 3.774648792126975*^9, 
   3.7746906648805313`*^9, {3.774690701192441*^9, 3.774690729311285*^9}, 
   3.774691715576131*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"909d4767-5660-46b0-b7bb-589e4fa8e242"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381279166358*^9, 3.774637504996402*^9, 3.7746393332844143`*^9, 
   3.774642793513392*^9, 3.774642910486084*^9, 3.774648792299303*^9, 
   3.774690664957325*^9, {3.774690701257267*^9, 3.774690729392043*^9}, 
   3.774691715642952*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"222e47d9-aaa7-477b-9f6d-64d4e2ac0a46"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.5999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.5999999999999999}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.9999999999999998}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000001, -1.}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -0.9999999999999999}], 
                    Offset[{12, 12}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[
                    0.4]], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LogDet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["LogDet", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[10]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[CenterDot]\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], "-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Shallow[Subtract[0.5 #, #2]& , {4, 3}], 
                    "Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Jacobian\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LogDet\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"norm\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"subtract\"", TraditionalForm], 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, \
-0.5999999999999998}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}, \
{-2., 1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {276., 102.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28.99999999999999, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "LogDet"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, 
                    "$ArrayDimensions" -> {2, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], "norm" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "LogDet" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 2}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Abs, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Log, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}], "subtract" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "2/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "3/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381279166358*^9, 3.774637504996402*^9, 3.7746393332844143`*^9, 
   3.774642793513392*^9, 3.774642910486084*^9, 3.774648792299303*^9, 
   3.774690664957325*^9, {3.774690701257267*^9, 3.774690729392043*^9}, 
   3.7746917158723383`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"717b9d9f-0fe1-4102-88dc-3c288b57b011"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Normalization of the weights to satisfy Lipschitz constraint", \
"Subsection",
 CellChangeTimes->{{3.774353997619336*^9, 
  3.774354033547255*^9}},ExpressionUUID->"97e011af-ca93-4cfc-a73b-\
844ec84d1c77"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
37Jm5702rKf7Pb5lU343OM+0z6IM96oDSVsthvkuzgXurad8S5V6YJmuWK9v
xLjoWd9CY+Z531K4Jxz34Pz5JgNqOa9uxxUij9T5tQ/hW1QbHG2Pz+EccGjb
TP5NsZj+V4XTYy1tW/Ln1e3t1xviXMqPR3zLejrv9y1b8m6Lb1kqo9fYvd23
zNWrtXrUpA6oqnr9Zyd39fGz0Dk7egdgcB5ZnlG+XcMg/3dZK7sGgH4ylWv4
E7xr3hJqyqWfmpq3LNn5yLxlOd3vm7csxovjje5oYp358h0kIxblNR77ndv5
aS+kFd8i4u98S0Fz+TNclq9e4lvoPIkyuyZG4x5lcK6k+01np0jXqG/GPMoL
kQ/XNbEIjAP+zuq1m4X8G7GU/leFM2AtbVvy59XtbUuc99TLLb5lPc77fcum
dGzwLUtlVL3E7o2+ZaFerdWj99FAamH9O7m3+4liXZbqYC92sVZI4xAXEtrf
qunsiQ1Wtz45QRXczgun6vpZrP9e7Zms6/313yoA7YD9T1d/w0GftmLn3Tas
pruRa4uj8TfWERmAmAfvTblvVddTJdrWmX6ftBYvfu/08p7m4Nc2PJiPd2vm
WCer1ubclf5GBtHGj/2w+LPdd+zOETaindC7Y434beHTOZBeXZ4qhxu6NtKr
ZWTTqb8OPAwDf3NWME3R1R/QvtGx52/FPtJOrB1GOJevqwIS3wa3PSDQ38uv
UxuOWM5a0Laphfwbspj+V4UzZCVtW/Ln9e1tQ5ncUy8n2sb4mbU419rfFBvS
EZtYNtN+H/q/mS2jV9g9zJ9y3E/ASr1arUfvo8E2p48qdwG+ftvuxfnEyILz
Xr6/v1OO+Ltsdv4kzoXQuiud4/Ni+PWvAjBpfX2vgUtn8XB8EzuqmDcfDR+S
sr6enTjo4Cd0Tq7duzrpYNku+AHO+wwT/PZAYJ1HYr3jcsdAvWwnvft9vw3L
6aa5KI3N6HkPn6/LBNyLTXK9Oac1T2zTZ8OFeHRum86JOeL8x+6AdoXZpf9f
zG8aqxw1cMIU0iQEx7QgLMb53m2plrGNYWFdp/0HwwLPxnQfVDDdSDxTJ7Z4
d145nEA1fXFGWXzvY5xVDNZRnk8/aTaEsS981f5sijiny+E2jZmnw+mkge0F
EGA52liemF3XJ6bCqCgvT6BZPoRRAK5lQzA4DFolmHeHLo9OYIaFOFdXxNdy
9ERZY1tXKQ17nPcHkP56Ov+mK/NC+v/zReFM/GY6bTcPzObPY3V9ub2txflI
vey3jX/793+dfGYxnRva33RZLISJddGlsdUO59VWAPHCAeTFMnqB3df8ceCf
/+VvJvqJ9Xq1Wo/eRgNTR+yWzt3RuaX3ez3iOkdvmhrjvSdHXm3nc+HVVf1g
ea7ES/lSbr0zq7naMXUeuqmueTz6fpD/GO/kFGzNAkzLXcXY2bUYGaXrwXvD
NuffSvpfFc7YwPW0rebPVu5ob2tx3lEvN7eNl6Xz1WGulNGTcWzLn7V69UQb
+Y1kem+RYZh3wO2N+bEg95gVPWJ/yzBvh9sb82Oghjz0wLYssGwHvDD9orvi
GObHALc3hmEYhmEYhmEYhmEYhmEYhmEYhvlIPk2n+mla7fVuP/JT0rfVjq+w
t3dfx11MagcwzItpKsjnKuiH1MG6yDecgRj0TfKHn9E/vYHE2i/fS/0dQe8k
26S93rsP6FPSt9WOr7C3SUK4V9ahySPw/GT2Trmvoow9MEUdIJ0YFQzDwH8a
qKoOlpfccQaKdE1cDEuRYZ30Ce249jmM01JlnLujJrTWy8v3FaSBAxq9H33U
b9+rvtsGDUzTbP8ZoKtH2O9O4OafYOs7kNoydEfF3B3ATRmD194x8SWUCXg6
3cOI5TB3LwNM903Ep/RPzzOhwUw61S+6X/kTEPe+9cvvU9I3acdnlEcWhiO9
vyWa3AfTjr+431kgoTuhpF5EB9msCX0l7760RoYIS1sTuU0tebf4jH4z3QG6
GsaaDeF4fFt4BrjZ59g6WaefQmrlzt8vj1QROHb0deOc1IbDim8hRn0T8Sn9
05OUoQFnO/1qM96KvL/t6/Wut/AZ5VFAGKTb1xXqFMdfxrSu1aeQWBctoisN
upy9HF/Oy9qNiWV/rU/06zeI/uVW86xPFehgzl3Q+4wNtJ5Zb3juG9n6+jrd
3Rmw4FsoXrRZ8+8ZNbyQrb7lO+qb7qHTYFbOFni+f7kvsCkziEgXuqF71KR+
utAW7+5pI01n0hsPbtc/qlZ323Z9iFcnpK1GNM6xG7o7zyeNaH+kxy2jiyHA
+DzXBT/qz8m3hTEsv3767glnMX2kQ37RqCY9+8sXQidb6FpXKQSuc9HSHdqx
pTw22VLR851GeQTZPfWW1rETBywHy3bjkm/hq3Awp+/7va9OwK2Wd5xBUVYz
90XfyaRv6TTxTqP7hxftflV/HWJ//ejCx5wNZQJJseG5b2TrXJ2eby9b2uLV
tzRY10OhL+9NtIMA56VDbYoZnrKnfbKtu54fQhJaD/uWT+mfnqLJWn3Z5KLf
frmj9KIdIHUGhnpSmaNedCgp7alL2pjyruACxwt75XzV1ZygrxHtYF6EcQgO
xXtybu74p7BUs53bks6QeYT92YG03h5Gv/zG6dsSzlr6pL5et2ZA+tqHA2l3
Yp3o7jVWLaFrbWlHODnZpB3bymPNFrrj12jv5m4gJ73QLVdC4XghxHrpBjGk
6MeDnO7ftsDy5++3vsR3UkAdDbzurxN09/1J8+X6FN27v5f7BDatnW9IwiIj
34JlE2K/t+vrDWy0+4N8C43L6f5SoXVdYJ9kaXAzRfhqWyfq9Hx72dqm2zua
z6Z4JoojeW/wcXhfe1s3Fy/Hf4U90oeqZij37qifMg6r+y0iewa+5VP6p+eR
dwYdBvNVocnTS1sj9C4OPV+CZWb51zkLabycXchaPfeqCMFQxtoCt7R6Eedr
OI3Q4OnpJJBuyX6gaVFHYGBeHO1M5ONqGDBRfoP0rdqylj5qP+oZnC5/SJda
6dZZWk3F83hNf2zHhvJYswXHaqQN5HaDnjqFZK2q1AnWZwOCdqxz3Wup0PYT
OAv+gDQhNEUZ9zt31wnSjVF6aW/knuZEvj1E61v2ZwMMXYXTYQ9H3QE/Lm59
5xa7v7q/7tlw0CywbVv+sww4H46f5Vum6vRie9nSptt5S1+fN6V5wlD/Btue
NtCgmeJZe4Te3CBusX/12LzlU/qn55jpy8Jh2uTchXR9qCxJ+9LqTTSlnrs1
1nMnrYiF2IU+al9jc7BGKbWBhhpTrRbo0YFsQxjEyLeM0rcczvb0NTjGiHBe
qaMv7vQ7ZdnRnX/DvBjbsV4e67YU2EfvhcaLsekMVIVjrCOOacqLDbTXcs2G
A5yXxn1UT0ljKh1+fG+daPdne/2FDMN/zX5sb97SFFJrTaH2OMifTXZ/eX89
b0OTuOCm6899O1un63Rr7UR72dKmJ/ZbcucmjC580SerW+vQY/aQL1D2Vk9D
c8rmmRinfMuH9E/PsdW3SB20vUJ5UEPiOBD3DCHd4yUd5jnWykxo6U7scwl9
zFZj91v4li3pI81Wy3QgzCrsu2hc8B7fsi2vy4v2k3KyIFpyMO2a9EXfDsdg
waVwK+Gn9HnRvla/EOctg3W3R+pEldDZUhxf0Xov6V0aZ7DiF21yDtbEqsgQ
fekBx7T9GDbZvbW/zhyx5jZ39or2mq1k8qt1Zm0YaHV8ua3TdXq+vbzDt6zX
w2fsyd3TRZcVZp6Z4xW+5V3903Ns9y04IALrgOMa2wXbzW7mmFKHeewD6iy9
2X8eslZmTUzzvj2Ol/qplvWlG99+C9+ymj6hOdw7a/RG37JqS1+jPA/APGJe
LY3byNajfdlLa5Lg+l4LzrXPpDW8VOmaCOffyqjveqxO1JB6tBfpgR+EkLzy
BYXRfkuDbfKE9UKBc68+b7J7sb9uIKc9a7FZFoK2u+rQDskcY1rDeAsrNmSB
L/cevtzWiTq92F5e6Vuo7SmzaXqVPaTVPDoP8g19y7v6p+do1yHa9cjuPI5Y
79uNNaaFf57S9G412EnPPc7RL9JZoxh9kJctlOnEmCJtz1Zchk5UL6UfuTxD
Pu7Y7SdsCaM74z/Yb7lJ30o4K+mT9eOA4zqxYgilGBMf2nXvdj2zvzYMc3Zs
KI+1vMbv7d65S5H2xTUB2vvHvGkfyLBPF1lXpeBoOvhLgwNpHYSaAidnMN5d
sZPeZ3T823f5SNubtJrndPmmfrOVJpbvt9yu+bTrh1hWRudQN9Tl+XdL6D1E
C86X+krrjXuhJTzMx6ZAv28GN+8oJuhXnWDbu4lL77eI+Z8u6/J7bL3H3nGd
Xm4vW9p0F2ZvDyyb8i1yL39tzva0PW2dORjhJY9oDVHo1qfL7WfYN4nffkj/
9Cx0fpTGbicd50t5I84piDMIGLfmRnAjD41p0I1wsi5JDfZOhxl/68SLa5wV
nX04dBreBdRVBr5xlLrUdl8fOwVPJ912D8IoBM+ywEuqzWGQ9rqrHYQ2OqXn
v/5jnL4t4Symr05ajeo9HFUT/CQEk844Hf8Y/vYf/0qcd9rtVaEb3i1PzeXz
lvJYtAXHKJrQKE8gSzHtJtqztBcP1HfQe2YuhEkMruOJ8+Wui+PejZ14g3OC
44T/mrdT+iM6e3hdR8CxtifX8XbdP0XmZyD6uqnfbKNMMQ+17r1zHdz+++lV
jHO7ndBl1921spbvsF/e8T+csT3Id+INXcP53370fiadvwusM+z3R9AM7Isd
G0x8VsP6fJO/7brAbtQ/jnJ7ZIOGNljYLui9fO18aH3o/77P1rvsHdfp+fai
wz/4/7TSFin97dmmA5ZlUopzyIF5Euk8meG1z6Lx+nFDfXnKnjYqYZMiy0M3
sR3pcDicQLeD2XcAhn1TXk33C1/RP72Ke7STm+UDFyKsV8tYy6CrZc3ub8JS
+kijuueIH9SQFyFtKo+VvL5Do/zykxx9Slg+cBdTBbGlgze5VD9n5zB/apwz
4fghp3IuocgzyNDXRYELhtWNqR7P0/t5cV2m8ihyyOnuqNkBYg05zgVWj8y+
m022EtvtHdfp17WXaRpIHRXMzRcXvcKeng79l9xp9m36J4a5l5u9lrt/jGMp
nPM8+tqV2FvXJublzZ13BHzH1FmAc6r8u0nrJ9tbJS5Y3tq7WQzDfAvuvUNs
BN3X4D92R6B4nwvn7GfTAS+III4iCHwXXDd82F99b9CY83viU+2lO1OD5JH5
N8Mw74DW0L4SujPDdx2wbQdcP4Q4/5E4FYZhGIZhGIZhGIZhGIZhGIZhGIZh
mO+B32C9aIZhGOYraOTdOQf7Ri+GYRiGYZ6C9KJ53sIwDMMwDMMwjKCGIg3B
DzOoSU85cMGhuwrz9r7MVn/ZCQZ3z+KzyUV7efjetPyd0F8uUwhIy9oNetrO
a9+D+Dzy49474q1eNP2G3v0W+tjB6P48uvtNaq37ECY5lNVAa71KIbzoyCfA
r+YxDMO8Hrpz0zrR3bAG+ogAoiSB0DzCbq+D43nY/yeQRPJ+T/2iMym1l7t7
q0lrYH/2Wt3mBorIFneUKmcD/ZQLvu+CcVJEmGG59n2rF31WpNZOG2NfL9oV
+tgB2q2Aol3vnK4TC066vAe8Id0Rcee0Ke5kl5Zm4ODfcasjn5IexbQMEsMw
DPMkpFl7o5VM2sukUXu5mFrq6yidsGCTgnNWwe3ubc9sOCgaXCWOW92evkZ1
qy9wFJdxr31Pf6o3vuWiX9DzJVI/B32FFC3BMJXL77v72G/jIH0cFbzusiuc
w6RPXZ7FMAzDzDHyLdQHk45M2n3Q9usj7Ri5ThU4OG/Zqb17tjtNuL4AKmnj
7lptm7XvW22cKd/Ss6GJdFAu2mwl+OdbrSBK1412UDvf2iknMB/Ul2IYhmG2
8YhvqVIPLNMV+zKNmLes+ZZWk1Ob8y397x/xLSTxZMFpj/MSoT2Ug6v15laX
YEqI7LPQn9qrDiTsYBiGYd7C3b6loLWlnq7xJt/S6t4KAc617x/zLZ3Wutgn
CiJIhwJqfR35zAf9gP7lZl7DMAzDvIop33IW+y3dB7f9utRePoKdSb160jhX
dj1fM7WfUgWgHYxWd2rte/pTlXspFysbiAa+pUbfslOumtK5p4Hh57Na65Qu
pxOFF3+qF99COuxuwDpCDMMwr6DKAjBPnQ5zDjWO7WNHapYfDR+Ssr6e0Tro
4Att6rjVXj7ASbMhjH2xD78/mxAK/yJ9x+6kg2W7OIfwwDJM8C8Hfpe/F+fE
hF70EQxPakHTGhzNM8gGD22oywRcTWpK6x7tnTSQueeB1jrZ50B8Od5G2tma
0IROkxAc07raSzrsRxtWZL8ZhmGYt1LfatffaC9f17yapp7QuF/7/jF7SGs9
Iq31Umqtp6S17lugu+nto1M68qwdzTAM8+FM79Vv//6BGEMdDno0XtOqEwhC
PmjMMAzz/VOAR+eB9Whmn3zt+/upIgMOygHUi9Z6CIHnguvH4l1KhmEY5num
hjz0wLYssGzs58MUbo9rrX3/OFUege/aQmud/EtS8CIXwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM85vD
/wNRR4qH
    "], {{0, 75}, {407, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{407, 75},
  PlotRange->{{0, 407}, {0, 75}}]], "Text",
 CellChangeTimes->{
  3.7743556194427233`*^9},ExpressionUUID->"103a692b-3600-4012-a7e7-\
fa38f8df8b3e"],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
zNNJ4Gka3GR4+hyXiCND8+4rX1fbqMt+HLpk6G8bTXXB4sB6kvch2O+yDs9m
PpiPURLmexU2vtkNsYbUU0ccWajQpWy+ozrVkSGCqy3Z+Iqfk1DgHB1MUlYm
1l+RC3MUqcvGTSfMG9w2uvZr5UhdPjadQHaLz2RjWD4uSM4UR4QPH9ftIAn8
fL0xxcaUofubrG8w11AKJXxcWxyrXyiOcJvb9lmz+tm3v/4ynA83EUf6dd/g
K+3LjEdGo8qcBfj22I0oa7+cA+sm9aCw8e5C1aHqxfmq/vSz53riSK1u+uPI
0Lw7y9fTNuqyH4cuGfrbRnNdpJ6CKZ9TMtVsfMh0JE/ZGEVTIRcMYlg9dcUR
1k9JPLEmM2XPRyUhQ2y3Iycbvo7K0lweu5aRjXuXxaDB62l22jpmMzawFblw
NrDjo7lHr81ke8ZHu/W3ZnD9jstzSby9zbbzhfmcY8Gmj0LEx7Cs3S11uHz/
Qhpj47L2bGTtOQ10rLVsPCueZeNbvkZWnpueQvHErAQiNnacivnu7Pfa+sg2
jhTKns3HluNIaX1kV+692NkZnLx99JSBj189Q4Vm1ff6HAoxhz6SsB8K5/PT
pXasZO34aAMdoPtVPt8slMT6bAqr59GysE/jDPYRO5AmWT/QDiIkSYTAVqHa
20z65BxeN2K8WYtZfennXznlPRf9dcN9yr6vsl3rLOt2SN7d5etrG3XZj0FP
Hfe2jea6YC1X7FcYzbbzQCkCdZbFpKiY/5B6arZFMVedj3fTDY+xYyw0f/8M
k101CzGL19XRcSSTfx9HIibT5AJrIzeBbF+i2Bcixmlr6HaHb4v5Hq45lrIB
27FhKAoMsRiVYMPPg/I9EGxcptn+SXOHkatiwdNiMo3GU6zyGBn7JqTZjPU1
tp2CAPqCPzeFtJ2vTLjN8PP5E8yWMkzPhsx9z0zC63/3d1Dm7LfxEqrD+rCs
TXsG3//F7VoTez35vkKxv4TZvczrIs39wGwFRdVgWiZUsY+jsJuUvaOvpiLP
Fd8zHLeXIav2rL87qsxNHwq+pyeTdZrlm2R1tOZpT1bQ873R5pr7LdYm1OI+
3EMza9N9Xge+hvmY58vaxpr5CJvvBZqz/iIrd3o++4h9HavpOK/XGdN7UI5L
HXIeVDfMZ0jrhvW3vnposIXuusneC/naD5NjLmmwN2mjbvvy7i1f3N42DD9p
lP1w/fTXcWfbaKiLnUrMFaTSBlIDK7lhfNtZT022yEbUbr7PjMvNfQPro1jS
RMg9Z+mIvclsPLdifkCzPQQ+qyvWfzdP2YOZMDmZT7Ecl9mEBWUxvrtrI8cg
5XstLh01U2aDMY7bhpYw+YobMZMj08nS2s1rpZV0e9FVBmbPbExy5+ZCu3Qv
6me7fzO9aL+q1zbOYKPpOdMfUDe8TINSPKls52wbp6C7fTfXRfWb9Lw6Ggqu
y+jMZz3u+toIoQfN6yMnpxpY0K3NHRzDEgiEU5Gw8abpRvu/+Vmeo+fICNeP
bL521LHf9Bjw/haBQHgake0/m4t13jQ7u7lSKuepCU8O+FyqAVVRoCgaDMs7
fn2BQCAQtuB7RHwXjuPA8+t3+xAIBAKBQCAQCAQCgUAgEAiEpxUxojPcc345
3IR8XXlce/0QCISnCzEC14XrefA89n/Xz3mrOFfH9nuPfe8V7tqPCu94x93B
X7hjoIQ0hKUZ2FNT3IJ8bbLV5LusbKGtwWzh6Oj67cbBzyTfAn9dP27JtgkD
cZd57DlOkf9MZb8apIg2tuDcGC81uMF270DK1ONDX2Z8Haa3KZQ5QeTpWM2W
UK3jzianng2n1kZTBLoMo3QJ1c3L1yxbk3yXli2Go6pwG5tI1283Bc7Pkp1N
HsvubQrSgtuxbUI/7jKPPccp8p+z7NcFfl9xMz+Gr04xmut1zoiNxdrf8U4s
sO16mqEBSXEb9sDdrHyNsrXKd2HZNjok1W8+r9j1240hvw/pKuMIx83bNmEY
jueCr/C33wKPPccpXPanvHu9yO9WW1XuE+K8N4syz0aGCI7pnnAuL4RtVf1f
ytr1suXe/5uUr0m2LvkuLRvz06s1mq/d6frtpsD89FXHkZu2bcJQHHu38JPA
ZX+Oe5WvEeJ+/go/WOhYsI1lbcyYeOz7I+8gF3PpngZF8xCV/J8Pdd4+Nr0R
+Vpl65bv0rIF2hzrlmDR9dsx4LzZh/Fh7+PInr/eqPHRt3PVt/O2n4vf/sZs
uwmdfOiXL/s1c9mXfenxXPZNPPZ9ed82l33t3da8+Hl3e1/X2wU7LrOoa39X
roPb2AW45rdcsrvrZ2OmAzfOx19SiUvasoLD51KYjdmsjLrlwmfltzYhPFOB
Yub3tYYGlh28xBeVr0+2HvkuXXf8fupZS/+r67ejcDAfdhZHRgtZ8HE7Lr8z
dlK437uLj7uNK/v/Piu//cVtuxVdfOiXLvv1c9nX/fDhXPZRA4/9kLxvm8u+
ylHTnVfGyVKdg93oq7yuj2ljf39+rnnk+uK+IisJi41OJrOnYDJa7O6h5P24
g6eOOS8Mk9nKY+R+/SGGLeWchpynpoO//GLyDZEtz6dNvovWnRBKxayNt6Pr
tyNxEB/2djxSlEHwTeTcHb183A1c2Wfmt7+4ftrQy4d+wbLfAS77uh8+jjuy
xGM/MG/0le/CXPaldwfklbDnJ5z/dfcdq+u1kcW8Y9rY2bnm82SEvjLOnHRj
7+/9D3IfwgXO+3G1Ogk9cU+Mw8ZlRmGclQsMZz1jsTbK/87WH7bga50Lpjhe
r9OC/ZxbPttiY2ZDF+PYvasYJptIo0O+U2QT73PeB91pv+uT2cmi7S7Qrt+O
xQF82I3rI4W408/HXeemOze//an6QcT0c9I4pY0P/XJlvwtc9meLIxVO0LvA
Zd/8bnteIm6wcdiOgzXQIee+6Zg2dm6u+R12sTiCaxc4wHhsHE0Eh5pvNe1j
Cth4UMn7cSnr4nGOr8JT3CdNCnx9Maun3WbVPa+98NNyx8DqWPkSF4YZ7OKy
p8yx0PP72gfKJkrWJd/RdZeKOVrH5ftMC/MuVTB/N2/zCV2/HY3hfNh9caSf
j7tu42fntz9aP1sRjz+f0M2Hfrmy3wUu+0vFkbvAZV99ty+vrJwSxmwMYYYp
fE3Blgr8mDaW4Vxc8wXkfTPFsFDqliU2ViPOg2zCapyjTbBx/dxeUzGXXuIc
5nUy2+su9az92Qzel56r2ZwlHyN3cXwcKx/PY2HsOY+5T9mO74bKhh75jq67
/XPSvCOO+Ep73l2/nYChfNh9caSfj7tu42fntz9RP51cSV3o5UO/XNnvApf9
oDgygMu+GkfuApd96d0BeWUvZWuXUxZvVPUQm2mII2flmi9A9M34OlzF8DhP
13gk1ga6qiuJAniWBpmVr7y9hI3HlnsO5YD1+0R1xT60lQRz2zj42GDRsJf/
TPLtk1mIden0ENn65DtVtp44wud/Fy3k6uXfzsf7PpwPe8unXZi/DwrrKb18
3A1c2b3vHIhj9ZPy/UcOTEWC0Vz9nejnQ79g2e8Al32dC/44Lvsyj/2wvPvK
d2ku++K7Q/LalZ6VdcxjZHHB/8g21sU1H7kGNLO6RjEA3E/Otz6jCB4DV718
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
YFtsfGnoYh6iaxQYWyuMJ8xXFb8srI8MKa8rM/+ytPbj/8L7scX6ImPWVy81
qgSONC74jrLd9+cZMnvm/foZ1obXsz+5o50ebRv1PJrlSUQcGa+dgk9hbU9m
z05Z37KnrH9h/bjxykK7KbTHkardbvPm82yWLpX7Xxg2Z326nptl28aRXYxI
HeG7VvZemMjkfciKnQ5BKY7wtFnb4boaTVn8iBAX4shlbLVXwIPts4wmnQ6P
I4f5t3z9vxDfsufNwvm1I+JIZ1la7DkJ4fv+/rOJDxirMp2uJ3nbYvLKOjxm
BxM+RklY3Sssju4S69YFt93xsquNttt893tVHBZHksCEolo9c8EdabL+rmHu
+3+eMsdCr+553EP080pzgyj5hyHl7fIvYgzZYDO+Mt350qrdD6vjCK62FPMU
47kCpzWYHN5OD9dxmzxNcSSvc1b2oKes4rdSGx1Stma7FXYla2LdIRX9vfPG
kWF6voI4IsTwoPA5OjaGVJXVLo5czlY7BTw6jrTr9Pg40lee2ON7ktnYQay5
sf7TegGltA/uuDjSXpZmOVNfx3K53H8U56Cz2KnHxnd8DsFU2fg+5l9AnrIx
iqZCLg1Iu3Uh7HJct5kk8HMf3ix//3tV3PC8FhuXLhb738DnHjrGhNnc5bwy
r7X3D0PK2+VfUpfPfUwguyUrEHMk+35N2e5782R9ke2WxmTD585ZWss2f3t4
Oz1Yx63yNMcRPhcwWbui7F15PfjXXDeVeRYu/WaT1/XAOMLna4rzWBeII8P0
fEtxpMGfphuD1clIzHFJeRy5iK32C3hcHOnU6fFxZIhf9A2+/m7AtGx4tT0F
DXHE7okjnWXpGl+fgkCs4+zXnFIE6iwre1R8Lh+DFecpg4Iu+BoRs6PJUofL
x0T8/KirQzUqc7nFOUoMea+K210f4X2smeq3j/ny8kzX+7XH2Ob7u2dQeQX3
ljefNy/5l3y/126udrxfDxCv8P5gYT1hp6vM3yZ/+TfdeTKZVHPvXFNn3RFH
KmmLfSWn2ka9DpvlSerrI7uyl+u/Ma/YEftV+fjGDlhqSYTAZm3Y3pa0qWx1
u83a7RSK2KiUImLyTdnfRTcjZB6yPnKSnpvbVG19ZBtHCsJka6P7OBK5BjRz
wNnBQMVcbl6riPl6biGOXMRWWUoe87uaVd27hub0htgn+nTalGYVx/m30FxB
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
scsyNI7wNOev1/nL9rw67Xd+DuWH7ucAbJprybiCON+hqP9Ah9x7gXIzV2AX
7/d/YD55XOV1qs11d7eLPr7vbt7xLl76ZtR5M4+PI306/KSnbIWUGznHh6+P
HKPv7rz77C4epPs6+t4b0i7ObRP9Ze2TaagN5evGBb+YlaXoJ3riyA7Nemtr
x93v9NVBvXzdOuj/vRktcaSFA3SIHMcifnAf2ie/1b5PG9dHHme89ketj/wM
/YW3oNXmtERudX62CobyQx8XR7i/lDBm/TIzTOFryoC1mmb76+L9FhzvE7nQ
367L19cu+vi++3nH23jpm3HOONKnw7/rKRtHF+f4Ievsh+v7NL7zYbqvo++9
Ie3i3DbRV9Z+mYbbUOzxvaxsbCDWLFjMWy+guMWE++NIl97a2nH3O4fHkT4d
9OuoCYfHkePy6Ub86WfQqzGEc6mI/2f7tZRPy/u19BeG79cqQcxp3W+ZO+C6
HGMit/NqDuWHPjaOIPWhzphOZH43cVPfpEnmuv118X4/+NdLMa9dnqMYEEfs
8niki++7k3c87uKlb8Y540ifDv/SU7Y+zvGD9msdqu8T+c4zvfXpvinb7veG
tItz20R/G+uTabgNifl8g68HGzAtG15tTbi7vfTprbEd975zeBzp1EHa/3sz
Do8jx+XTjuSL+1i/9iW83bmOH+Dzs4avf5PXzSPBczx9rbBfhsWCBT9v+FM5
rYyDuDuObF5vm9MSv4p1dsnuas1D+KH7eae7eM0jPofA7d8bUqEt3OVdvN/5
b9O1vWunol/M9Lxf4815ffl8bb6u6ir83NkSghK8j++7J/92XvpmVHm/m7nQ
m1Gv6x4d9pStj7e+Sbfn0vfJfOeDdN+A3vcGtIuz2sQQbvc+mYbbUGiuBA9x
3PpMd3vps5mmdtz/Tl8dNJSvSwfilZ7fG1HN5z/kfxfWOoJyHDkun2akX7N4
8GzTOfPKeZGH2Xl2+Z3v4H/6JZSX34f+RXEd5RE2D76CKumCg1ji596/bbo/
5UdofE7r67bqqK6vtqCPH7qHk/z//aceXvPUwXpe3NvQhnbuclGcDt7vSPCG
szY2XWAlydA1CdPpHJJq7fZbJr6G+ZinPcNyzfRty9kzPJ20m/+9M/9OXvqG
6m7i/UaVC735/VYO+V4ddpStg3P8X/7b/7OWXy+P/WB9d+c9lO98iO6b0Pte
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
8+zxF/l+LeZ/ZfsHlFwW9/cvf1Xu4/7yDeQ/8POOb7Df7sP55D7mz7A48dKf
4ed5bd58i+XDfn/1M3h8rf6n76C99DZWr38J56PPob52H27rPSysPB99iDmL
JaPt2fuPft3bXjXtA2Tje9M0idUTGx/JvPzpbzClmzzLv5+LSNMYcdIRvRL+
e1da9djSnloq9r8Mi5VDwVp33HSv2AF5pQl7Ni38mVT8Q1seDeitrwNxtvQO
KEPhnf46HGBLvfXblPUR7/SirTxnsKFzoLPMx+jv3DIUn7l7d/klDxwonzSc
HU8fIf5lHwfSh48qZWZjhV8e1cv78HfETWc+GvFY7Neq11lL2oNlqz/f5c7P
i6Y5bQLhGJAtEe4CfoX56n080dcP3jiyddaJ7N25PgXh2kC2RLhexB+9j/Gz
f8Ts+bew/qS+Dk44Fgk2tgFVUaDwuxna7kcgEHpBtkS4cvzyA8zX78N48Cv1
cwgEAoFAIBAIBAKBQCAQCAQCgUC4k0gRbfbnLZJwU+MueLLyJdw40vK5jeSX
XxH90s1RnP7yW+8zeNi+t5m/H/5U2ROddp0feUIQh1fBOXd7yPzKja2pJ5xL
/tqsKkV8k3UgEMJUjN0ZM1+Tsb+mKEbgunA9D57H/u/6+R0mnB9m+73HvvcQ
7N6JCu8Uvz8k3wNxp9rO+XTM70QIfB+beKAdpxE20c3WUxJYYq+MOLn7/TfZ
WdBnsvOT4uxj9Zzkwx9hvvIu5Pe+g/fJZ5Bf/hhu7Szlj7Bffxez56v3C0Cc
51RfdWB+EsJ78DmUl97P79fn17g50I06x9OTgxSuXOd4eFoQM1sTZ5X5PZIX
zy1BYGXnyuf6zZzQHYJ0e/6/eofhxdHlz3lst8U5+vFSgxts7+1I2fjBh87v
t5hKML0N9q4sQeTpWM2WUIt3MxyU7yG4O23nnDqOHBWq6cO3OOdMzgPTnjNC
RxH3TdzkmazE1yHrOd9R+iP0V+/D/Z6NIdLfEXz0oeDbmrzyXeEM5CN4r76B
2b0fduMGzhUzffHP+/th0t8QfP0DrFfeaLin5jdY0huQHxTOWH7qYFo8ix/Z
UDXvDOePrxQ3woHN+pHhde6i5Xc63kwc4cjuoL+mOMKR1cE1xREhFawViyNr
tzYn4KvTZi6JjcViS58tn3M8cu62c7l2chYdJy7k6SqvLxbrgwD1IUm1DDk/
0E3FkcSDstzz1KWffg7r++IDj+G99kaZB/6nL7F89g2oXxQee/gN1s/+EesH
5TsDwnfeaogjIZTndEgfFZ79+j5mledCQ8K6iSyNMAiRJWF5Zb5zi8SWbjCO
bK4zjtjXGEdYf5/fz1q9JzUNBJ9m9f5GPq/lmO6AeZszxpEz45Lt5Cw65pxu
FU66KupliGDeYBzhvJezYl4N3Iz87svx8/d3NpDw853P/GnPDSawvT+/fGda
cxz5HfbLnLfyAxazHou/3dfexvKdyh2T/A7qmdJ9D0Ea7bmgjSI/OBtvC85v
Jk+05Q+3ClzvQ57hsd/Jfg9dmJq+u6+yxHvuhqVxU43PmqVtCz5rbzfuTyMf
juXmfbuMn5zPK6a8PJYOTTMFf4MYo3oWDE2Fblfu9GstOx8Hy8z2cs7UHcd9
xhduaBn/uV9txyXebK+VF6K7/JxHm5WF353H7xY0NFando2bfR9HuEy2qCvT
LPBcsXcdyxRpt98b1F7+MvZxhMtt8vKb9efby8R04Fq5PrNKE3YjdOrv+X0H
lFvkYfz/7L1NyNTY1y9asxrWpKEGDgp6UtCTokflHVXPMrNmZiSZCBnchgzk
ErDhINKcNOfSt2y4x4jnYDhXjhnIa4Sr5L4HJcc/YnEUrPevg3oRIQpCdCDR
iQEn6+61d1K1k+x81VPPh/b+QaFPVbI/1l57rf25fhblSPetZhtTp2dt88yj
2Z4HGpl3TPJcEmuX6IU1ZeXlGiQm+uQI44F3z7ct8n2HlqJZDhW6vVM/adC7
fbZx6C/A0iaUA2JuYh8h+RU6hLgOWz8Sc7ZtWRgz1NazNVjcacWtU7yv4J3/
DcYX322+WdHYyddzsYcpX/EvyBPzKLevIfYjQDmJ9dMmjV05P3cTjPsinnvk
yxiAWsG1TnVzOtyUHzkAB9MFrFPOb4xlinzOOrH/GENWGeG6KmnTLB5r7TMp
fzX+TvmrDVAnI1CcEFZEN6Z6yjOfrGAxG8Jo7uTrbSOf9YjFMSbzUk0xN3pN
Yynj/kDK1bHh4h7NGfe0T9p9PqJ8QcjFvXB98CmXdsYVWVf3FAlbyxkhPzs9
t4B84SqYAeMeWZLxQ5/nI6K82WrKrUye1ecVfAFJTf0ZjzbytKNMDRN5tG1Q
x/0Sj01uPpIwfi2eQ5bxFig1tqah/jkwPzKckPmtZlKuG9quG/73ujplWFLe
jW2M84St84wMknq7eq+dOcw0b5OHhfsNlTamqUztZV2SW4M9p3y1fDz2iIyL
SKdJXIXYM2U7LiY6Y9vLlmdi9uNHin2nlRzqdLtrP2nQu/22MdAzRzGNxY98
ATH5UxTDtFgHWjLqRwbTVCZkHKQRmWz5OJrq2QGRDdP+EGqnPsjdcjrllE8R
XLhU4mbEOYV9hviRXx7mxzFVfgSBMZhPmZRbZnJRdKahzJWUA/KzTaewoTr0
NRj0ldS/RYxbQeXWeXF+0+PXN5qeYb/nuFBSnp5cH6DvDIiP4b8MwVEG0J8S
/6SrsCgYuCLvbWkMSPnJ+bZBvehvZVFbdwSzzZu6Ur5wa8sXvjRpPSdZh0Le
bOQfyvgByJiPTKXKaKx/QvmGcF0kMzcijt/iuhblM+M5mmIXNK2CK6lV/Xmk
fgTjCW9eZ3zplHunVZuuSnwrmb1lEm6oN/LCDWa5PChfS5WNaVWmdrIuJNxo
z1kaarqOHUPguEwvUca9yaaNcI4ippNxwSz5l/p8kzWZs9tkzmeZm/M+VSjX
sUEOtbrdsZ/U6d2htDHmoRI/Mqvxu4U6sEoyP8LFrMv2auhQtKmeXbAyYdzL
+NFFwHj9N8B6kV/rWl0uc6HQ+YiC85EnOX9Q5UeSV09BPXsXgvcfSR7IAUDK
cuF1QX/SPT+1vOeXRwxrXBvRp8QWZeuIkYCjh8m2p2T61vQMyx/5lTa/Lphe
+MCDtWN/XuBRDW2YDfL2a1Mzu+BHcGw7WWzHIeti22Sy8Aspieq+LVOmW8gJ
1J/qJb5wZzOZxXHWgJRpDOqiOsZVc/0Tyn+GnLJZUURrxKX9kQTnnsxOUwYk
RwPdr2/1+vrny1feH2FjONxP/vdWbdrCj9TUG9u7XzhjVLd23k7P2sk6j2Y/
EpN5R4/MO3DInayIjmQLKXRsQ3SSDrHYHEWIWHQutyZfMl+3FpnfIeNkbQwT
c1XZ54t9p1kOdbrdtZ9sKlnSu8NpYziQH8lxjVNuSubz2tezBYjvG/eq5iPI
nXIXrMflWPvxHdwfuXqA/RF89hKoDzL/9AWWl9GX/AlWbo8/AkdoO7knAuSC
Zjw+CR0b1PkRNm7Z8mY3PVP2I4z3XCnwpbLntv4pSwr3JvuU78cOC+Xegx+p
rjsir1uML9ypHechb7ZL12JxPrzl4OLRXP8d/QimvSB5Uy5a0u6a0Rifu77+
PER+JJ1rEj/yb63a9GB+ZGmMSnvUdTamnZ4djh9BuzWg6ygheE6w1Zl0rIw8
iIHtVKwh0qWYbvkiT+dk+xvNfyLg+s7q2NmPQI1ud+8nVXp3OG0Mh+JHWtmD
toiRg70PIjMd3r8H1oN8jOQ441Ch57V+B4PnF05etj+vhZzIFe+rD3KloGs5
leds1gsyL9zOs6HRjzCei+3cremZsh9hvOdD0HJGDtffiuVMYGlqsFiSeTCu
1Sr5/ZMD+5HauiNSu8eNs3oDpbT+GQbp+Iznzab8d3me2/b1392PMI5lInvd
AM1suB3QWH8eIj/CyjwlDr5dmx7Mj1Cu8Rwnbr2NaVemQ/Ij6bxDs2zITTmI
vZj1+qAYC7BFBLDJClzbJekrYJW6bPv9EdTVkWAOn6GzH6nV7Y79pEbvDqeN
obUfGXWcj9TWsxNSm1ngZ48e3Ib5hacQPHsDS/p5Df6de6Bfy/bav4B3/hKM
L77Zxjm4fxOGp++W+IXpGphwPoKc9hxP8qfnoPxI5jhv+ecC0IZFOW9B5dIb
E1vLzjWt8DxJL1tvFOx94DrpKNtva/OMYC0J94QnuIfHrd3j+lUuXVymMUC1
2Nw8wbXIwppntn6bpcz2Rzg/kq456hV+pL7uiJTTI+0v8T//E+MLJ2Mxf834
wgPbACNTJNI/dG7ShHo2FPiR5vpv53ObPi04Qx876f2Ror6gbe413bNqU/9c
qmU/gvzpE8b/3q5N0/mLYm/3RBX+HGxDvUObyn+U7cHiOMNg41Gh72tVpnay
zqOFPafzjn55rTwhfh7vts3F53yTpU/G+SHR06ngjEY7P5KsLJjPF6UzSTyK
fadRDrW63a2f1OrdobRxlmedHynUgZIZlu+PZOck6PyH7hnV2IOOQJ845OY3
8bO7MMl4gHOfPLc93me3zl2lnNPB/YcwP3MTnFf8PspnWN1/AuppxnOsOS9h
yfEPJy+ewFy5Cjq+//g5WOdvgH6H8ysItKVjs5onOPIYh3V/CGNFB8ezmGwm
Onhh2u+R81tnZ7G0uQZ2TkHrnsHzWoy/Hu/wmi7np0MfjNkYZvoCHNcGQyN5
c/z1jPt8DHo2eQ6zck5Ad9fw73jmBM9x4Fm+hQ//+Fc8X5LyXeO5v5iM63Q2
Bx+rNgRhDGvPpHstGT91Ulv3THyYxgAmc5PysuMd1w1feH9M8l7m1iymo4w3
2wFDRX70CrnX1H/L+z6HRXrm2djwtjMZxiuXvJ9+Z3mQW0pH/Z5Wr2m0a/vi
wzEElkJ0SQGdjLFt2wJdt/K84A1tyrLU6PnKPmnbKWkXj9iQwWgGmr2Cf29R
7xDvGJP51mA0hdlcB1Ob0v+rGLtBZDdb6Vl9nmW0sOcRsWVjXbCuGIBO6lsY
dhaSJ+0wswWxKJrzTdZE7wwX2HF3sSOJCn0Hn22UQ4Nud+onDXq39zZeumAq
ZIxJyjfVbbqWJkK5Djq9z85kEtF7DeYM0xnCzMSz6g317IwQHFUtrd+3RfL+
A6xfiTiD2+ArxG8/wIq8X+YDjsHTZltbXIk8FzQgFzR/Xksj8+MCX/QWbZ6p
QRMv/aGjqu7cVyUO7Aa+8C682YdQfzxHpbY+ENpc/1L6pO61zdxUJ/73ClvX
UIKtfNvGkdurnNvMCyIIhUYvId/Xt83KmNB5dxT4hfFf03ktFxabc1qk79vu
/uOO1eh2t37SpHfH08blOrTKuN4edCpAAJbhwPo4TWIBkWeQuWjNHbTmFAR7
H7s8I3F0wDGNnpvTS+wbh3mvHNdxcH7mCO6P1uQbOmw+0dt+hrJPfpvA+552
sP8xwA5IVi7YfnhAH8nWB0Vxgro9I3HYYHdHBjAajUDZdWIs0RKHH5+k83kt
CYkTiSLndyBYr23zjMSRgIxhbNMA062+MyCxL4TUnmf7T0tDg6MJYXdc+UpI
SEhI7B38hGGnPZ5vLF8JCQkJCQkJCQkJCQkJCQkBUs7M722KLoyPlP0WwioI
2vMIJRGsDo1Li8h/vYQgWMK61AhH2Dakjuv1Qc+FHAZayKCurfeVx0nGoeqn
hEQ9kBtWR16f2num3yZ8bVDimUBEPsYr8WHp6TDuD2BeyzeQ3oUasDib+wbl
LMUYR8SGreh9qm15jq5tYlJHg8bZyMUiOAFoK4Oqtt5nHicTh6ufTXnHEd4f
12E6rbln/U3lfXK5Vw8P+6kzizPwLfahBiBv6ap42RjvMk828S6iVQDiYSwv
W4y7cxj9FM9rT3KxU/DeLx/nXtw2h6PrPvKFnzA/gmiln6K23nceJwbF9j8s
/axHFNiwcDwIrBn0N/HZvu28Q2cOkyPkgj8J2Fedm+PefEfAuJH9SQW31RZ5
2aZxZ/bdTylvQ73cRW1zWLpOx/Qn0Y8cgX5+S32g3P6HpJ8tQX1wW1se4fzb
ro47FvlgaotczPq95d2AjI+xP9HAWizAD2kOjHsUz/Kn5/oxnhNyuyKPqM0e
SrkgkefRy92Dj5Af1kAOx4wXtgbInbrhunQ5zkfkOMvKkPJkIs9sgcCyKS/k
wmV8lSblxo071TnNKwkh2HBo2vkxb2MfYhwFlC83XoO3YPXwBTEnKBevvQAL
y8rH8qosG3Lxku/tgPKkLB0LDMMEJxUiTY9yaZZ5OJuQhNgu2/cYt+cUBr0h
KIZF+W9FNAVl2W776bYdLWFbtdWbmMhiyzNqMW5bi7QNvstxJxXbRtzudXnX
6EQBOT+C7exgvyB67S1z+wbd8mmnO3Vya2Pji23NEq3ql4L3i3nU9Jc6mTIu
6oxbdglrojtx3Kau7dpJ3P4t9LO2Pu37t1B2nWx5BJ42huFMEMOS+BBtPISp
1Zabcr9+hPJjjHs09mXGKbnOYhNONcolq81GMKaxslnM1BKnUy+L1R1DYKpg
eCHlMlrbCgzI+NUUxZemWIE5naex9zFupgK6z/6/KcN4DjrGT7Qt0HAddpNe
U1743ZzYvJSvEuPO9TF+6apjnRn/zSztJLGnwnCoQUav1NRPM75PrIdBdN/x
HBY/bpxvPyz/VHWZHSJ666ojGEwMCOLqsm34RYcKGBam7YNrTCinoIbc0LYH
PvH9GFNOGLe3AiwO3oDxImzESaTkIRfemMiYcXsK0yvJlvXTHuU7XYDruWBi
fMYRHwOwo96QdCMn5Rldx8TWRBCufdCR+0dxK/1IuWx1eUc1OlFGzo9gHOD5
HMxcPIbu+TTrTrPcmvRT2NaV/bKiOXJ51PWXal2OAx3Gs5SbNuV+w9ipOAZa
76udhO3fpJ/1/b9t/66UXWdbLvAlO/iQ3fKuQzm2MLaZo/TyHK/cszkuDsqb
lvoRjM07MWGZ8jRGa4fGmK6MOUI5fXGNO/01DsDnYqQjfxXPk4ncFOqwR7lX
oqa8MCb4aNveNO6PpdLYxJ3qjLo3nYCRGT26nrKNad483kvAm+fXzpMNR1D6
Bca3HRTWi2IX5qRvjPQl9XPi9kh5c3gebcoP0YMpV6A8R0Y7sJjbBY7aQINh
r2ldqyjbLNY6147FdLrqDaIk95jxnc1r/Iio3WvzrpZ7EZkfWZPx8KIYR3jn
fBp0p4Xc2sxHSm1d2y/LyOXR0F/E/Qz5EPpcuySpPLln9tJOon7foJ+N9WnR
v2uwmy3f+pLl2tv4kK4n7o7Kj/Cx/Plnq/wI5Wkkc8YST6O3qqjjmugPjoUw
drhfiKlctgtUv1TG9/DfGvLCeVJ/ZlfGzW5f523euM5mmwrjFU37VZt+6uEe
7JQrCxl7DXFcn+1XU/7meYGjOGZ809RHVJct8yNbtXZp/5rleE4mBa6GZjDu
nT36EX79eWXkZNhdb2BvfqQ+7yad2ILaPYwTPp6kvBQFqeyYT53utJFbKz9S
auu6flmGOA9xfxH3s3Svm7PlrG5b27yfdqrxIzX6WV+f5v5dh91tOfEl6ojG
kp+Yu8V6P6l+BG1af1plu6sQgmfgujvOYzVwN0or8iPp2Jr4kf/SkBctS+W+
Zzc/Ei8XoKkG3XdI6Hhkv36E8pIJ0qC8VpQj6fv2IzvpzZ78SH3eHf3IRKc8
EX3k7Si8sGs+dbrTRm67+RFEVb9szqOuv1TVNfLx/C364Bg3NcGeT0DjiBj3
0067+ZH6+hyTH4nYPGQ8Hon3S1rgRPkRZ+tHqL0SnKGJl4G4nsh1meneCtfx
+0RXMtsv9iPYX5E77J8NebF9m7LNi1Yr0t4d6kw5w7h57CH4kcTDefAA1Fyw
dDZfZmO079uPdNYbxJ78SH3eXf0I0d3YBx33owocyrvmU6c7beS2kx+p7Zdl
5PJo6C/VtgV5xnD/3IKF7YBfOC+wn3bawY801ucY/EjkcfshbF6yiy/Zrx9J
55Rp/2PnI9L1xhIHPOurdB0SH0vImEUbMU7JENj+WMrT6K2I78Z7op4JetX+
D3leX2yFnbjzkh/J7Y8kPmij9M5AU16RC8qAjaWcZUjqFcLSIXrqhJ3qnGT8
yT5+S+a2pIxD8nemirTMbfZHcnqmMT3bNCDjY6b7PqW61rWHYH8k8yNcgRgP
c+ZHIvBJfzUqufIY6Jp5xr+ZwU/32Wv7R1G2/57+ze11LAvrBl31BrJ24Tl0
U85hfp+91DaCdq/Nu1ruRdD11nT+i7ywEzzTYQR5rtTO+TToTgu5NeunoK1r
+2UZfB5N/aVKl9eLGSik3JU8TntpJ1G/D2v1s7k+bfp3NTJb3vasbuZDZhYf
F3s3XyLOu519EGGNewm9PowVMncjbYRcspS/dTAFA2Opc2WLA4PxMA5GMEX+
RgfPL4xBMRhnZOix+6GMp5HUF7+vypj4+tloRvLwYRm4YKoqLDZry6kfQc5S
3SBjlAXo9AwMN85uyCsKTJgN++nvI6qnm/XXtnWO0Z736TrkaErK5zugon8a
KfAf/st/TXkqBzDDs7UCwUd4nmPI8eVGS1jM0fcSO6Nz56WjACwFuVotcFwH
LE0Di9Y1riwbnrXRxqRs/SnoLplnEb/uWwrRYexvBrirmPHXUn7RMagO9lNS
H8oXVFz/5cq8TM+cUP5NUq8Y53EuKR8r91hdgFtzEHQr2/8d/uP/9euWlxjP
L5H62+qYtslYdSA7xt1Fb5AflMlwAFMDy8dxDg9nNB8sr6ht8u2e1ORdLfc8
MO/0zA62MbYD8pMjbzuV1fYMadd82uhOndziChk0tXV9vyzUvpjHv1f3Fyt4
U1FXPAPD1tA2PFZ99j7PgX2wdhK1P7adUa+fb+rqE7fv30Udxv5k6KBOh9Af
EPupGWAu/Pr7R3EAesmHbKTDfIliN54Jqc07abYPtUXswqvI888Kz38mNL3W
FJGYXljMn1unSLkwK15uzKvq9/Z1LuSfNHO37gzk1jz0QEWk75ExR5vzJDvn
sBNPZ0e92RHish1N3oeTzyGVXdgv26Brf4lhaVt0PBdFIaxXS1j6Hri2CXOt
PEc7aF276+YR9v86JCvw/Tp+2AgCdx88hIdvH44O4v0RiYMjXtpg2pIvSuJk
IMK1oplgTSpZU35WqadHi+/LPrB1y17l2V2JXYHjMQmJkwJ6tw/Pr6oGWLYL
notxMkwwTQcqwgdIHCK+H/uAa54p362GuuVXrjNKSEh8+8CYKAvTAF3HtXqn
FP9IQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkLihCP5DOtXH7+xc29fIXrx
YXeO7MI9oOT9R1i//VL/yqePEDY8A8mXWjnSfIisc+fxq2LS16ErZ/wBEK9X
jbELD5C4oA7fAP/5vjnOE9Ke4cncaz/U9peohX/ehN4Pv8FYuQqzs1dh8uMF
8vclmJy9DrMzf8EY//7R7RQDav/4Aus7d2H2EynLL49OHLddFaJnT0D/5Tci
z6tgv+/+Pr3fmt5nTd6+BF3BtC7QT//0TXBefS288A7s81dhfvk5+PdJ3mdv
wOJF4ZlP78C9fIO063VwPgkyfb8G8zzJ984aggdPwSA6od35yJIPPbCQd6Jl
X+3GGX8AhH56p79d7KRdUORKP/n85/vmOMc7iSqNmZGPg3UCsGP7IwecTu/8
s3gL+ubeOp5LNUGl7YsxnOZgOrvF7v174Ct45/8E81lma76Ae5b4lVM3OJ6k
N2AqN+F42C3zoD7vSP0I8V+vPh8oheTOdejv4EeS1QJU3WN3dLANzt0G9wWZ
Q+Cc7P5dmKJ/P32Pi+X2FYILv8Pw3MttbPJnd2H8E2nLLG/y7urxG3DJc+jb
yn7kMzhnfwPlFjeXefuIjC2ug5s9G7lg6G5zG7TmjN8TOsTgY+jIBy/gSj95
/OeHzXG+YnxTJ82PIDq3fwoas6sHI0GwERafLB8TT0KEr+A7zzmbIPAjBOGt
JxxH3vHB//W3I/Uj4a0bMLnw+kBpJPdvdPcjGK9nMocsNHDy4FFpXrG+8ifx
BX/C4m36xfunMDv1G6j3+efegfHzBRhffpd7N7p1tcKPvAb9JxOm1z5uv/r0
FJRTf23zAQzNp8Bs0dBhW3LG7w0d7cg++OBPGv/54XOcf4d+ZMX8yFgUvNFj
fkRxvvGZSAMXcxNvdic+dgqxH8nhPRnPXnsCzq2n5PMclu+/wvrBE1hcewT2
A2Z/omfPwSZ/L6693K6BJB/Ao98VPnfewL+1eR8KfuQTSe8WPkPKcv81/MNv
l4YI0eOnYF28DfrlR+Cla0XhnZswOnUB+r+4YJF0/LcVLycfISDlsK89BPMK
8beF53bxIxizbqhycU6Tr6V9ieT+Teif2q5NxXcwnz/BesU/he2Ja4EPczHi
qv3IZ3DPERn/eBWsZzgn+Qqry3/B+PzLfOwC5EIeKOBU2M8mzvjufPdiZLzh
Fknfd7SSHanS/0o++Bq+bxFXutCPdOBPr5YD/bUTv/jOHOcNsspj60eitUfb
xzCLvOh1dUtInWyiD0TGqdCxvW3y92LBx05sV/em9m+FHfxItazalTtZZ3z3
RDYYQ7KQbXe7XVvBGi7mJv7nrnzsGZr8yDswlRvpGgexMVeug/6AfY/j3sGv
20YMr/2Vt1VkvGxcXMP601f6bnjrOgx+uETGz5/bvQ8FP5K8g8W5G2A+yPbd
26VRrG9w+SYY9zEN4g8dUqZT6TofriWdvgBDkl4ssOMMH2Ch/AYzh619xcS2
D39yOc7gXfwI9tV+jn9XBJyPDM4+3die1eU/hPswdC3wVH5dstqPEHzCdUwi
51O/g0LkqznvBOvCaRmrAsbVcMbvwncvAtrNqeqwfVVMZz7k1scb9F/IB17N
9y3mShf5kfb86dVySOvXlV98J47zFrLKgfmRwUSBOcZKsXSY0XjKZEwRtq3b
CoxRniuJcRKlHOAt617f/h3QyY/Uy6q53PjOnIytfNZvcTyGPAbWqlX6O6GO
i7mJ/3kXXm2KBj/y/glM0c5mayyfXoP/DP/zAaxf8jY8vnM9b6vIuH2d2bj3
z2H+I7HR57O1/Bbvw9aPrN+/hsWFh+DnbGa7NHJ4cQ/Gv9yD5dvPEL0nn1dP
YY5zkHMviZxYesO6dS26d/QnGI9Tebx6CJNTfxD5cI909SORQ3VL9WpaKnkN
+i9XYcHNPZYXLpG6lvfOA/yezFv49qz1I7Qej2D6I56/MGF07omAO6FFrE4R
t9YB+O5ziMg7w0I6AcfB0qj/At6kBr7vElc6CPxIW/70RjnQ1Dvyi+/AcQ5t
ZMUj9SP8XJnySeF3PvuusW713K3Qpu5N7d8FqR/pjyYwm83ynzHbZ9/4kUZZ
NZR7TWQz0rhxJsblV8lYbd0y/V1QzcXcxP+8E682RdN85APYZ9hYdX5lzZWp
iw1P105+ImPkT93ep37k579gdprY7meFc0g7+BEc0+O6lU3X6LjPfRyDt/Aj
G5D51ePnYF++DqMffidl2/7S2Y+g/eoNQAuq81pevkHmgfn9/6b5CD8srvUj
b5+DdtYFj/jW4MpVMmckMj3zpGDXM46gag4lkR85CN89D7Tp/SKPZCd+dJHN
3dZNxPct4qEU8Tq24U9vlgNDNz6/3bhpu9kK0f5IxkfEyt1ctzZ+pL7uTe3f
CR3mI21kVc+TOYV+TXzb3e12E8RczE38z7vxsSNa7I/AR/Au/kXtS/+0C+5b
tOftbXh05wZbz3rA32/oMh+5DebZSyTv2xDk0u7uR5YXfyc260mFnNr5kfjZ
I9DO3wXn2WdI6HzkgH6EjOcmPTIfqVgPie7fBePOx9L3iXB/5Ctrz9b7I+/A
PP0bKHe+bN5f37oBwx9+g/kdvr0EXHNFCPzIQfjueazMMfQGam79sBs/utiP
1PF9t/MjiGb+9GY5MByFH+lmK8T77PRMdMoD21y3g/uRpvbvhA5+pI2s6spN
359Uj712t9s1qOFibuJ/3olXm6LBj3z6sFmbil88AfVnk/R53K8Q2PBbAhue
rWf9yu0tffqyGfs3vb/ZH/m0Bv1nks7Zp1ybtCwDh/Dan6SuZRsfP3tN5NTC
j7x9BFN+HWsffoTy7/aFZ0SiBw/BLPqQ95+ZLNPzWtqD/Hkt3ONpfV7r03NQ
MI3H/JcfSBpkvn35A/cd2vv+di1DBIEfOQjfPQ+2nj4urGt04UcX2NwGvu9W
fqQlf3qzHBiOwo90sxUiP8LKjX4haVU3gR9xuvmRpvbvhA5+pI2smstdPsMY
rVb0+d3tdg3quJib+J934NVm+ALOmQt0nd0Vrnk8Af3a1p7QMTD1I+l7OO6l
ykTmLL/iHYW/wN6cX/pMfBSuS7ngc2mHziMyrmjzPq7RbPfZkxdos02YXHyd
9rt2aRTrMztFfI9yD7wXn+ndjNX9e6BfeUPk9BEWCu6VPGec0Z+K62iZj7hE
bDc72xTewbH7JdA5O8zmCVs/Et5/CMa11zVjjgicWR/GRl6v48d3Yf7rE/Cf
vYEl/byGAO8aXnyepvWF+NlLeR/94h69++EU6h85VfMR9J1Epld4n/EGjJ8v
FfwT22evPQ8p5Izfne8+h1S/h3NnY6MjB+9yjEDH/Y1G/S/zgTfxfZe40gHK
HOut+dOb5EC/6Mgv3p3jnJdlO1sh8COxB+qY32dv0cazdA8s3SP3NLxDOAV7
k0ZD3ZvaP6uaZ4GxaOAhXOqU71p8f0TJ3x9plFVDuSMXlAGbpzrLkLRRCEtH
Bz0TXm36O/KzN3AxN/Fmd+JjR7x/B+41l9jmC3R/dXL+Hl2ryYGMv2c/XwXj
1hqWj5+Def4mLNJ9CrRzY3z3x99heo7Y5Vt4dukPUC6+pOvEbD0L5xB3wbry
kHzugfHrdRj/cpeuq9a//wXW9x/B/OcL9EyqeecdRJ8+go1+iZR1fP4hPa/b
VAahmO/fTu/wk8+pSzDDZ9Pf1tf+Ij6ApE/K7BTvhSPIvEj7mcUDGClEFg+e
gkrS6v98HazHZJ71gsjozCX6++zyc1iRuYNzxmTxAeq20YkNHnH2J3l2L22X
4qdwX+QTu8+uXnkJwYMnoJ29DuZjvg2/ED/5FHTFpDELFLz3/iIfPyV5Reqg
/AXqNZLG45dgX7gB8yuv83Y9LO4X5lHLGb8D370IIeXvJvZqOIGZooJpKDAc
jkHRbXrWtkn/S3zwcTXf98X//J9LXOlCjvUO/OnVcsh+7s4v3pnjPDsf1dpW
JLBcKDAez0AzF/Rcr6Gl8utQtzgw6L343mAE0zmxmY7K2g7zTdrVvan9s/FY
b1Cjp0sHTIW/zx6k9Wbnk+kZvew+u8v2KOpk1abcUWDCbNhP3x+BYuXvyVem
f0B+9nou5iZO5MPih/4C0dvP5TLh9+9Tu1Z5VrYh3YO8v3MaxAfh+pDgYfy+
aQ4XvedsMcm/Xt5NvyMiMkZTwBKOO5uB8bXwHv7ue3NEHm8/wKoYX4ulDoEx
BdU94CruXvjuky2ntzD2V73+l/nA98T33YU/fS9y2KI7x/mmIJ1sRRKTcjcp
WF3dUEbZb7vEbWMvNrT/YfG174eLvrvd/p742SWOBAkZyxjWieMvjXwTNEvG
GpKQOGp8X/zsEkeGeEXvUJ8U7mKMG4n3kE9IcSQk/lb4fvjZJSQkJCQkJCQk
JCQkJCQkJCQkJCQkJCQkJCQkJCQkvnckEK64O87I61a84LVvDudd8P4dLN8K
7vp9l/gK4YsPu5+dLZyVx7se4ftq2SHXet3v9JlP1Xzt8fsPsBbeF/oWTm7F
RP/Dev0/dBT64HHhWOp+QCQhrE8oH/zR4Xj1BzmktUl6pzMtD723PzbTePjs
DjHeea2NAd4KX2F9/yFoyiV613pw/mVlvTEuRx/vY//4J2gYNxj5fc+ZBZ7Y
7xPI2a79Yu7MeR8FNlguO0NO756fNtO77SaMzj6CJR/r5NMbsM5dBe3aS/Bv
3YX5uXuF2JYE71+DfeEvGP4ikP3b56Cfvw2L+2vw7zwE9cxNsDlO+GTtgmX5
9XESjhHxygFtzMfQLer/4aPcB48LR1/3gyGBlaPBpC+OWfJ3wUnRHxoXiCtD
gmOSHFF2Ai7GUDuwH0nx+DYMaYyRPBfrFu8oT1Kf+houFhHOR159Eb2wIz7D
eq/p7S99Gt9qBz+C8SRUK72HlLwG8/xd8N9+offXg2s3qNxHF16n7fgFvPOX
YHzxzaZdkdcLY8CHWYLJRxqna4HxZUo+HOOL5eNqYfzk3PuItQO6GRz/WLsC
NP4sF4u9rP/7RgTrQvrFPnh0yJfl8OtezvNg765pPK9v248cRB5pCsemP1wZ
HEGs/hzSWJz78iPP7oJy5iqzaZwN2+RG/Ixy4TbM0I/8ejDu8zqsia2e5eIN
npz0Md5uv6sfwXh40y2PHXK22yUOXW5OR2MR52MP03jEP/wOOv8dsPj5ZT+y
BvVUPl588sCFQSEGPWJlzkD1TuYdqaIfOfT8SJ+fFQK6NvfBoyvLSc6z/C6L
Dfwt+5F9tMHu+pPA2mM8xs4yjT/qO/TvhctzmsSwQr5jb035rB1TB93K338u
liEOyXM2H4ct70cS8rtrLyintrfMYvVg/jaYhg4GSb82VgfxI/MrL8HCWIA/
3uC4qhDE1p2/AfaLp6AU/Ej89jU4ThYj8SuEKWf74tpT8NNxf4LPIAf74zR2
evIB/IwbneNhx7i7I4wJeeYuWNee59Z6GG87ef7yQ8rlXu07WRnMi7fBuJJP
oy79rVjFZaNl2MGPIOdCrj8l5f0OxqfC4iHHmEcppu8atB/LceTFfuQj2BhT
8ucb4NC1rI/gnPsTlFtl7hOMvT0eE1vdYiCC63JUj22Md8j0iv69sMFLx23I
T53ndO+gf8A4vxeWBRbJwzXyfiSv/ylnFcbUW3tgGdaWq70hzzjNwzStTRxK
jBGMMciHMwOsxfadbR/k6+uAn9YX+5yDnOUiovOmsmC/3/DBB9s+IChLue9n
fOJkjpswPnHGt87i8q68BZg6eZ+PYUCe8zMO+0U+XqS4/u3aTvzu1o/Eax9s
tG9pnMxWsilCKCsiA9Q3L6Q6gHkYllNIp7suiOtUo281cj3YOCQAfcjHxUd7
P+A46BLKB6yQZ/oTFUzLBtdl8SaHWrBpd74MGN+SrrUNdW58VpiPRC5oc4Pj
l4/BNzSwqPAi8PUx9DHWa1V7UT/yIY3va8L0Gmd3yBhZwbjmn/J+JHr2lO0Z
/HR7W67kDRinL0D/7FPOb36EBXL1Udv4DqxfLsH8PuN7X11GvvI0hjryzv6M
9vIN5VZn+ArLK2QOkcWZ//QazF9+gzEpT3kk/QX8iy5Yz9B/fQb/wh/Q5+Pd
C9PnUVM22MWPLMEY9WFex7WLcfPP/raRN/UNp4gfz73yhnLYM95gLnWhHyF4
vwYd919+/Avm52+C9fhz8QmGxAd1MAQtaOFIYvLskI89zmKR5zhHIhvmRB9T
pvRO+oec1jM95b+OSR8ac1x9Of3HvUGdrr8PZjpYxH7MJyPQvKQhT+Rdn8M8
jTGWIL9EP41XnpD8Rthnl5QjfVMd3g4kpC3HBa5bjO+uaOAJ61RTFkxrmsWz
jcBTVXAyJSuURdT36Xcon7FK7ByxHz6xbcoQ+mO0Jxaxdz7xLXNSv4wzY0Xs
+jDVQyIHcwIDxeXiwxfr36HthLJLOVVmGrHfZJzhMf7z4Yb3pkv6IlmR8brL
4usOpiroxK4vFjrM0KaScVGQNOVRowulOkU1+lYv14P5Eda/eH6VQB8WuEwZ
XyW/JkW5wri9tGIZ6Dy/wo/EoUt8rpOP57QkY83ZAlYpZ3Do68TH9mFWxT2R
+hHqBzDO+8+3N+PU5cXrjPPpU3k+ghy3OT8Cqb3leaaIH1Ivvt7sDxjIUZ5y
SFEukI1tfkfzHvPrTpRjKj8+T+heTpFbg9VhfOYRrFLe9vDBbTL/MGF2K1vj
EaTPo7ZsO/gRyrHUEC8aY/pjDP5U1gFyfpXyYLxWvZxvrvEjWPZnt2F8isXG
n115U7EPwvhIxi3n7ytjlNdRewr94Ta+d+yRcV/2Rxf9ixwyrlK2thTS/sDN
R/L6n/JzFHmz6vJEfqsxv062BkfL4sOviL/vleRQ7IP0b56viLSvagTiuXFd
WSgX+mzL27EKINhUpFyWct9PuQw5vgzGJ078RpYmGc9qgzQ/YheNyQwWacNR
zpacfSvk2cl2iGSX+hFuXEy5Z7P27JJ+payYDmQ8XLRelKOlz3hHdtYFUZ0q
9K1BrkfmRzi+s+J6cLEMlHNL4Ed64xlMR/k+mKU3mBolzmBv1eBHgO3r9jNO
1k8vQTuX7tEK/AjlJiz4EZzraT9t12HCazfBLKztZ5wai1//pDzkTBJlO49l
Qbsa5N59Tdd5hhfe5OtMfNpAuVvibfdetPQjtWXbwY9QzrYq/iLEZ3B+vZnb
L2HzkZsHmo8kr56Aeu4eLN9/APf8H5SLZXrlncDesf4h5jsXIMc1iHHoxzDo
D0ClviMCRzdzdr+t/lF/VNgLKfaHvP4jX2C/VO66PKkdU6r2Etv5kYxLIuvb
4YKM/yvGCPX1XxG541meCWh2kcO7XJZy30eapUGeM5yOqadcbHI2F57kgpXj
mpcDCw35+1TYWp98nt1sR7Uf4ddzM272YIf0xbIK6fd5HVjSsgyI/9pdF0R1
EuvbFmK5flN+ZGYQn9gn9tPJncdZkjzrZVUA50fQdyCPbk95CIFzE7T7qR1u
60cgm6fgmtIHYo8f5mwd8sxqvzIOKzrmr/Ej68t/CNZ52Pi8uN+/vHAJ+mef
19S52Y9Ul20XP2LCuJK/5iusnLuweJY/O4acwv0frlfsj+TLLfYjKQ/i42yu
xtb3eqdImiWOYFFfrEPI+hOOM3EdVXfB1YYwmHtkTrwAjSNe6aJ/yG9d3FPf
xY/U5Ul/m1XxNbb0I1m5cA4Wr4ndsCrP4jbWn4y1HHVMefuGyoLbOzgcPxL5
FmikvLjuTcfNNX6km+3o7kc62yahrES6ux0X7a4LojpV+5E6ue7dj2iH50fo
utbahhmZw06tVW4e2RvMc3yimO/Sr+CgwPNanH2lNorMSQbcmksXP4K848qP
Jswu3AbtWnGdanu2uMmPxJQDt3hW6TXoP5G0nfy6P/VdP94ocAt/geWDbF2n
wY/Ulm0HPxI7MCPjdWJ2Swjv3KPci7nHkVeryB2PeI88wi3Pa31Cvvfi+0/p
+8YLKICta006EOxQHtSBCpapUr4uXFseDRTQdS3H09NF/0T81rvOR6ry/Gea
R37eTsaRlBCxvR+ha3C4XqTroC3yz7ctS4x88Nlevm/Se2Bbm3sIfoTOI7e/
NfmRbrZjt/lI6/QrZVU1HxmA4sYH0AVRnSr8SINcD+ZH0nW7jOc4XoKJ8zLk
NebK7JT8SH49uHj2OFsj3dYkv88eIS91fwRaxoO5xrV53BuyIAhjSEh7+JYG
RsVGZ/LgJkwucutE1J4V9tvRnhXuj2T7I9tyZfiartHk76Mw3nO0czheJjb+
IptvuNRXfQDrNK5Xvabvx+gPEpx7mGX+8tO3y+eMXmGZSfnOkHkUvZ/xAfwr
LhgPMnstSJ+XQW3ZRPdHvsKa+APzlmjNCMF0fWbnFBai+7dhfvE5BBxnu3/r
Nhh30C9+BvfcpdzZLMx3oDwqndvF+Vd5PkJ85enfQLnF+Vhsy5+KZ/Cwwh6o
g2y+FIJn6mC66/pxYuzBfMDpd9rncHyXq2UX/QvZs2PdT9s4Bh/HXhy3al7/
cV7E1i9yqMtzw6GNZ1EiiKMVra9NhUrs3oa/PCF2niUnPv+fsPlTzmYLUFcW
8pvBGbGVwZ/pK5el3PfZ/kjJj/QEfsQKUz768YZnfUny6/XnG70u5fm/utgO
kezK90dw7XIjyy66USkrwf4If/5wZ10Q1Umsb01yPej9kchTYUTK2R+OybjF
oWcYB2MFjLSPRoFFz2v1RirYS1KPtQs6nsnoT0Ajz4RLJ+WVHoG68OHpv6Zn
NkiZVRv5r5HDmaQxwjTmsPCRUxh5qpEbeAxzC8+fJbB2VManjJzBuL7oiGwE
sYUPHoH2y2+UQ9249SbVzS/gXXA3Y/v41Uu6X8Dus/9F5hhrePo4Pa9FbK/q
vC7zcqO9P/s0b1/ePwf1J8apPjl7F9w7d2H8A/ETZ9id7dVlXM8nv51/CP5m
n/4lGGf+hNnFJ+DeegT6r3fBE8ZiIXW5dZNxvWf37m99yNVZmH6Lsv1L8BQM
BXnlfweV1J3VFe/81d/nj/EMIRkvbE7RkXmfkLP9FDePwvvsZ6+Dfgvvo9+D
+ZnbpL58qp9hmfHen/qTPPcSVlxdkhdPYK5gW64hePAczPM3iC8VnNnCvchp
Or7Bey6UXzo/LygjISZrtj3bAmjn8B5K0Qa01T/2bOhqMCHj/MF4Csqc+DN1
TP4/I2P+AP4Z8Pr//8L9/0dn/OVE963cefr6PCMvfa+Xcslz3OO4r9/vDWGi
WoBfR4U+mNPtlQkTpeA3BXWqLAsZx06JPTDdAALkE1cN4IqSK8t//5di32dn
sNUR42/Hs73IJ+5Q/vY+THU8XxvRO+VjakdN8P7xX+lZO+QNnygGuC5pd/Ls
kPyW7e/n69+l7QTvpueb8DzZxr6lspzTPY4O6VfKKt37Jr9p9LyWCSrRG3fT
ULvrQr5O/wH+b7tC3yK3Uq7/8j9q9KcLkOM4I+o91nhGCT2vcBwliO+7oN0R
3B3nudiBxYja2oKvdH1HWN5PnyES3fko4Ss9ryWuc036jWUTP1/P9xyCM1dh
F1r0hMbHqilrLYgMKFd7Fd97DJ46I3MRLvUEz0oaUHtMmT1Y+rv6lS76l1Ce
dXau7yAaW5dnUsGFjt/HrcoZexoZ79VqRbuyJPG2vjuWpTV4XnX6Z1zQC1Ge
bdtu1/J20I2SrLbrWglvazvlUaUL2W8t6tQoV4mD4QMszt/d3OP+W4PMFU3j
5PDsIiLPAN3Jr5TFwYKMt8LjKdA3gzUsVEPq9bGj6xkRiW8JEZ43OvUbjH7+
A+Z3Ku6//R1BfIltn4x4VsjX7gTlCRKO9yTEoOcL+gMYjcYw32VyKbFnsL38
gervd94mcTLw/jUsLt4F6/4H2b4S3w+iABaGAZbXcA5B4ggQw8qxQNc00DD+
i7Ns2KuSkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkDgGxCGsgqCCky2CpeeB
5/vg++RfL0jjGCA/QPa9T773YRviP+Te4b9vQELK8S1yPtfK77DzXh9Pvt8a
ToqcTko5mnBk5TxC+3IIiNer3e8gfkeIfAM0k7SFp8O4P4B56f4Vctk79H5t
H+MMLLP4JQmRYcBiwgwVWPgr2F7XiSH0TZiNpqCnd3TrEcPSZndTv7Xz4s3y
O1zQ+OIY80fqci1OipxOSjmacHTlPAr7cggIfbCUEY1DYFaHYft7gPK5ZFw4
xCauAhAPQSKwZ6Sd517pTCSNdTw2S7GhYGWTtu9iU1n8y2/Kj7SW3yECub1X
8lRkI0pyIuPd9VHIrZDPt9JeR1rOo7AvhwAa80z6EVibZAy9tYPVyGLYF2IO
JUswJ4NSjDmcd7oLr+OZ72/Qj7SWn8RJQ+jMYXIEunZU+XzbOAr7cgg4kB/J
uJOXNMYkcifrxgJ8weQqXnlg2wuwTBMWLn+XJmFc1e6K8rfbpgE25YfENUHy
Pb0XHcHSscAwTHDSBUCaXsaF3GIuV50/TsvI99oUBr0hKDQOGs+7XQaNjZ+L
aUzMqGuDY01L89/YJ993lu3Wj0SUjznjpM5+R75iZ8MZvuFbxjZA3noiM3Hx
Gfcyk/WSlJe1l5BviaRvGSjfBcdfLG6rJvkdVdsn4ZL0Kf67dvpJ01sw7mrb
W8I6jCCuiWHUVoZV9Y42bcfkFK9ckv+Cfmf76d0/TJv/u7JN6uRYUQNOTqGb
xlmdaGAtFhz3+w75JSEEGX+3xeurOJ9ye9XLLf21tc3JyrpO+ebttHJYdibv
PMc4ytzdcKO7m72Go9GrLQ7fvkBNW3W06eR9i+ix72g7+xHkXkcu4t54Tuzc
Ahwvjfs4NnIxYZGPeqq6jJOElN9VRzCYGBDEpMyuweJLTol+EX3UZiMYG0sa
g5TGBR4qYFiYtk9jCff7U9AsUnbbA99nsUCHWn28gOr8M5kmNB7dAOVA+kOS
1MXiK/OgQkTk6UWQuAr0ewpsKDPJGMK2lzvcCWZ+ZDBRYK4aYFk6zFDOA5J2
uKkVjZVQnOeuzHx82i2SraxJe+k66aO2BRqOccg8wtzEMIwhMFUwvJBGJETZ
DejvUWVb1cnvqNqevoO611c2sazb6GdMxlHISUpliDG2ByyuKvqocpdoK8MG
nUs5sbfcQzH4KsaOVzex4+m4VJ2l87uqNmExvCvbRYCSnHCcO2ZyjDfttkt+
xK+QdDPegNhTYcjxEBfzCQXt1Si3lm1axirlDtxGNQ8XUxrveUtvS/rcNOPw
QE5zogP+UelVobSHbl/WlW3VVr44LpiqDtuPwXaaDw+wP5LOwSZb3irGncxx
A1DO4cJ6R+xSXoeRjjJAfpJeyf8iStxxyJXU68GUC/adybxShxrzTxGgP223
LkN1EPs8S4z49VQ3fI3yRmd1xzHEbsuWqR/hYrBnvBV8jJ3Ym1Pbbay49+bV
vHWUD3bWo3PmTbEwhvoQbVo6j0Zew4kJy5TrOVo7MO9n67XVbSWU3xG3PeVA
yNmlJv3EtWg+/l3C9lRF9esiwxY6x7iHuLEl5SXm+CSRD1t3W7QJTby6XUQ1
yMkp5Rfn15t2yQ/9xHQCRjaGobxHPM9yOZ9Se7Xqqy1sTglpfCrOj8TEJuf8
SGST/jVJ+TXwgQD8ZUU5D0Wvtjh0+1LbVi3kG5E2GRbaKUjHkTuua3sqyXNa
5JjZpkc5XXI8MgjGkcjsBNPJEq88bG3JRhUTl+rzjON6ofxpNfwpzfln5W7v
R5gOKnTskqzIHDjTvWVqC7DA6RhCiNAFs3YcIdofiZn9ynGypv4GuV5p/iao
tYRDLI2MD4yB6Li6XXelfM4TrcT17HjIRVDdViL5HXXbIydbcXxbr58pr4Oy
9Qms/jyfZ3cZttK5CPmF+pTPjv6J6z6DlMcXn/Z0Mh5OuDJVtUlapqIc4zUE
QbD9rLYxw/NyKtv3nfLjZIHrfrap5P2iyI8U2qttX22yOWW08CPkGXuG844R
zK08h8bR6BVX44PYl0bbwkPcVs02XcB9eMB99qY86bhLwBdE1wBpvztcP9Kc
/+aL1n4ENv45BM/h4tqiX+8NQCODhMB2qscejefRxfvsdExTmHux2KxkjLJO
IDC0An9mKWOBDUzH9SmXKcq8z7dn8f0OfuSo2757f8ezyjpMyBjYoOv7xJbM
J6BV+f9MBg0ybKdzxD7OM54/YudUE3yHzC9xjhKT8axmbjgw69skLVNBjklg
wnQ63X40d2PDmvzILvnRb5cL0FSD7mMldIzbzY+07auH40cQpD8buM+Ha1Da
hifqaPSKw0HsS8u7LnVt1VQ3quu5NdjyM13RlGfioUwGBQ65lCeX+uvD9SPN
+Wfl7uBH0nGBZtmQUw269kLGmMYC7BIRLpd742BB5EdYmQfFvaB0rX1IdELX
ReNDHmIbiP4pm9OI+MPpm8sAVkk3P3LUbb9Lf6frBhbuJVuwIH3TbyROaZZh
W51LfCIzXEtZ6KBhvRIf1CHqjw5qkbO8sk3SMlXOD8po8iM75UfXXbl1rB38
SFu57cWPOAU/gtzo2XGVFe69kTynbP5wNHrF4QD2pRUlWkNbNdWN7S2NC+ta
B/Ej6VpaLs903z63Ltrfrh3T15AXd7Lh+qVrrbxNT1FaI89sCafgbJ25jhe4
Kf8Ufof1PTouQD7owsOJR8s3nFecw0tW4NouLDQFrOpNDBD6EVyDH/P77FuE
OM/E/ue3s4G5tf2NLDaJpXzOJni4FpJEsPJM0C1uP0PQVmL5HW3b03XsdD0g
falRP9eLGSikbtUcczvIsK3OUV5xXKvUU66oBJb6iNnwkHustk2gVo4i5OWU
rsGkfpGeJ9ohv8SbU25WjS7YI3fwnMh5CFsVLudTbq82cmtjc4pI2wz3JzCZ
hIzzNbw3N93KmdRZX2yVl/KRZ37kSPSKwy72pbVtaWqrFvJN9WM4d7g5Lp4B
GFWc8alHhHv7yNk7mIHprSl38mI+otzJE507UxcFYCljmKoWOK4DlqaBRTmC
Y1i5Bj3LQHmDne19TDwnoY2Rx30Kuov3N0PwLYXUh3HWu6uYnpdkvMBjUDEu
f1UVKvNPfybpsPuYfRiri+052sqKEzmOdQFPHM4NZpX7fcnShyAOwZ5NG+Y9
xJ4sFBgjZ7e5oGcgDc3YrpOWHic2VlieIrI9lhnlMliQdPX5HMwCX3Po4Zw8
5XPuD2FmeERfatqqTn5H1Pb//J8ZRzQpL54HjtvoJ5GzxdYxetkH+ZumKtiV
h8nbybBJ5zayRnvDOw1iQ2ZqeV4hbhOolaMIWy72rZzWZHzZx7ZTtjrWOb8Y
7T1yqzP5LXwHVDyjNCJ2LT1sxedz5b9dL5Wjjdxa25xiqwUG4y8fjGA6J/7R
wTNKYzK291j5yRh9RtrUcHxYBi6YKqnDMhHK63D0im+k7valvW2pb6uLi//Y
Sr6hh2f2iM8fTmCmqGAaCpOnbh9+bBbkFq409keAveUfQSjsrMS3hw1CJHZi
OrNb7bfRFGPkY254aGXBvHowxoFbk0k5oGtypnzOuwynxMkdc9sLgTFoiL1a
YdlCWK+WsPQ9Mq4zYa5Vje27yBBa1Lv4W1KzNrHnNuFQzePeJb+CPIh8iu9W
c4QXsz4EfeH5xavO9uMzYcsyVmIXveKxo33pZFua26oZHOd7w10Jif1iZUxA
cYh+BX7N+dwuiMkcXc2vg9Q8K1rb/7siwvn8TNCvkzU4dlAhIylDiXrsplcH
x/5ti8TJBJnvGjPQbAfsA3KW4nmTAeXQJvN0a9UyLbZG3ZvVncX5+4DevyJz
+wne9bRd8Fy852yCaTpQfR1cylCiHrvp1UGxP9si8W2g1ZmKJqTxKExn2Wpv
la1rpzzPGuq3X7mW/HcCxnZYmHjWjchy4Qjjm3BPSxlKtEI3vdof9mJbJCQk
JCQkJCQkJCQkJDoiAledgYqxYm2bxo4dzzSwyP8XlgHzqQquXIyWkJCQkKhC
6IDJHTgK9BFMuAtt64V14jnTJCQkJCR2wX74hOPAh+01f7zTyt+DRX4Qv1Wc
TIk6IGdnWL8nj7xv4X73A5NPH2H99vP2/EjyZb/3H5LPsHr1eY8JHgRfIXzx
oeW5BwEEZ/Djtx8gfP+1+pX3H2t/p/j0pfL8Tvz+Q7590nIcCZIQVnvWt28O
h9Dnvr1yHAKfMN7lHMzl/GOPiEkbaZTPo8ilxiONh1AXg78tPr0D58J1mJz+
C5Rf74J55R7o56/D9Je/YEq+M18cNAPEF1jduQvTHy9A/+zz3W33nhA9ewLa
Lyb0frxZE6On5v3ABsvZnt9OXj0F7TRJ74cL5GPC8OxDWH7iXvj0BhbnroJ6
7SX4d+7B/Nw9CD4VEn3/hrTDVRidvltu07fPSZvchsX9NXn/IahnboD9gvmj
ZO2CaXmt78ry8DE2U38I4+kMFGVKuat6gzHMFAVm0zEMMZ6G9q+wdjSYkP+P
KnhS/h7YY5/75suxXz5hjP0ykGfz9w4ae6/Wj+AV4lWrWKG1+LQGndi/gULs
2vv8T/Gze8Tu/w7Gs4NlscVXcM+Ze/Qjn2F9gLlN5FzdyY/EgQmqxcX6Tl6D
ef4ueK++0Pnc0rkBI+JPhr9m9wK+gHf+EowuvNm8E5K8h8ojjg+EvPfsNdhn
f4Pez0U/8hEWyiVQH2znMcn9G6TNHm19R+iAbvod5ZqAq2JcjqxULE4cz7uR
rMgYksZLZLET/95+RNTnojyH/aGgnMde+v6BsF8+4eLeiMR+QGN0NviRg4PY
t3PEbp26Cs578RPrazfAeLyv/L6S/PbnR9bEFk8vv9v5/ejWDn4E429O87GU
kgePwH7FP5TKlfgDanXfPoLpqd9B5/0x/e4SaI/za1yry38I/Mga1FMmzO98
2X71+DYMT9/LPYfcmvNOB1xi8B2+b5f9CO3/TgDSj4ixtmcwbRXj6GTnsQv2
xydc3htphYTMzTOu4RLncgDOhnO57t4Y7uk4sMDYZGuf8n8blsPt66S83PR3
DyzDAi9Ms6B8zykPs1+8S9qUbos0KutAykTkaRrVaS6Qh3bhgmc2+5EkJPnY
XDw+5LV211secj6enghoy8i4uX/uZbVdTz5DxK2/RM+eg33tIZiXH4L94ANX
76+wvv8EFtcegfPsM/07fPCU/r248yZNP+9HkreviY0iv197Ct6zjxV7ApjO
EzAv3gbjylNYpv4uvHOTjvkHZ26DRd5fFteINuX/AP6tR6zM117m9GkXP4Jc
DiVbmpT3O9Af9H95SPtYfOs69H+4CnbOV78G/acLMLr4pvSeaD5inzHJ9zfA
efWV/u2e+xMU50OxcDAe6VBDgdBUO4EfybD1I1m/0E2noF/1+r1Fuz6GEPUz
XFNE/vaFzfQ7zP4mfS67P4jxGvHvgLcHwrJV2wkR+D5HOewxFulMp5zn27vv
O+RVYROr8sj3/WpZZfLubBta4OB8wgnllretOYz7Y5hbXe5/rqjvmadBnTGW
+CCLO03yM6Zayj2ZxqESB3Qnfo/FN+1PVNDx/PHCgNmQxfT2Y7zHrNP1XCp/
oqfqZAQqqePKIr5dT7lmYuSrHMJIy8ZkTemyZ2rTqKwDGfsZKlgBi50bGGPo
D5EDidUIea5nus/SIGkaDfsjNMbu5pmE8TQPWblNywbXZbzNQ9WvsM8kmzto
3y7A5NrHFu32FVZXyPj/wmtW709vwFQuwejXl9x49g3oP1+A8WaO8BX882Rc
ntrT0nzk/UvQzt4G91XVvvMX8C/eBOvxZ/r/4CKxzT/dBA99RvIGDMyL2OFY
YMcZ3oH1y6XNOH595U8YnH26KW93P4Jx4/tEd5sM9Rdi53+DyRVm51cXfydz
vhsF3sB3YJ4u7xWJ/QjBe7b+2PvxT5ifuwnmA8F6HsZsH7ThI6hCsx8ZEN02
TKJfnk33WTfcng36zRWyRR9jz1X2s9invMjIRcmXLc+d7MJcydbbq8pWZSfE
tizf54D1dSKDMfrWzVmHXfJqsImFPErlqLVJu9mGNjh8vvIaII/1ZLaNue+p
0M/KQvmeZ7ChFSBjlaByTMPiJvH857iWO+71YUrPJJe5Mhn/S4Hvh3LQDEnf
i9ul25RGVR3IM+PZAlYph3aIcbF7KT9H5IAynOW4ESlXR8N8JL+HgnymjKso
K/faKowXiu9f+5PuCyu3vpR+i188B+v8XzD6+XcYkzG/c+f/g8mpwpj62V0y
J8B1++x9ZhvH3FrTEm2owI9Eb5+TOcZTqA3LTdIfn3kEq7dkTvT+M4SPyd+k
vDPnszCvEpLXYPxyFazsnMD9m9Dn/EZnPxIiJziZfzct7bx9ArNf7m7WvoIL
lwT5fCA+7gL0zjzJrRlX+hGsDsrjFO7l/wbTy68Fc0jmB8Y7r4E0+5Ehx8uW
0786/S6hqe9CYz9bFXjTkLsK7Ui2lpL4ZMyd+YPasgnsRA3yfU4g713yqrOJ
FW2aK0ejXetuG9rgwHzlewGZ23pk7qlNoN+fg0e/WxM5Ez87mIBmN8WhYm2S
5yBkMu+r2AIR2Kir2vZ35j+LHFoB6EP+ufp0m9MQ14GOMaZ6iUMbuT+Q57pf
aNM2+yP5ZxgvNn9+oikNus9M7PK0aj7y4h612/h7eO0vYgvdQr3Z2szg19fp
3+38SO/0XzD9+XrlnkwGOn9QboN96yk43Md91tKPbPAF1vefwuLXP6FP5gVe
Vv+ufoTaulEN/xLiM7i/3gSbm2Nl85H8mcbtfIT/usqP4Hkw9ew9WL7/QNIn
87IfTJhcflMYT6b2WWtdowLarWtloLyDqb2r0+8ymvpui75Kbecw5WHCmIcT
GgeVjelj8HRj48fry1a2E6xyawiCYPtJ97Tzfaps43fKawORTazyI9tyNNuk
7rahFQ7KV96Jm76MKLBA0yzwSNskpCxbmQGL1ayRuSBdE7Qa47jmdTFrJ7Ef
WeN6Hskrv77A+kemv03ptkpDUIelPsyNB3hQLsGUK3xTuyPwI2w+QfzA+Yp4
o68ewgT9CBn/r9G+ldZm2Ji6fz7TlJZ+5MxdMBSTrjGFNfVbknF80c5u0c6P
RI8fgvbrQ3aW6sHNg/kR0j/Qj1TPR77CyrkL1rP8/I6tH14FJ7eHk+2P5Msv
9iO4hncJtM15rS/gXyC+pDg/bLRTTdjdj9TpdxlNfbdNX0UOqD6bH8Ue5aj2
aBkcMg/As2vbctaXTSwznM9Mp9PNZ2ay35v8yC550V8qbWKzH2mW1SH5kQPy
lbflpheCjiOmW44wj5MZci6nyUaBSTncqs+HVI1p+ikneLnN4pSfMs8lyda8
p5sC1afbmEZFHRin7Jzj+kQksA6W8E+co/by89Ij8SPEDywUXHOvmBtwfiS+
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
1wbtmvW+sl5v/Mjc3cwzs/6YyapUtrb2p0l/K9MRlfMo+qAg3136YBskjKuG
8lHin2RMoHJBsCnHGVdXHK/3J1qJb9hJx3dFP4Ky6g+0/Hpwaf+AjOFn6JvH
MCdjj+ZpVkLnyLaB/AicD9ysS3O6V7tX0cGPVKTZVL8meVFOmeKebFzggl4x
u1efVp0MBfV0BDqMfL68Dqd8mHNuESZ7Jj98qWqPfL7NsigCOQlGlNeZ/24x
GZbX6NtyOydreu5oPidzEm/X/fpmex677LwJdv9kReqY2ZaUe9Sgg2M2RxFC
WJ/6fJM1Gb/aNiwsE6xdz7N1mo9U61xZv5r6Zmr/la39xzldf0c/ktsfCXRS
p8mG26Jctnb2p1l/q9Kp8COH3gfL+Xbvg+1BbWGfjPFIxX1dy3FAFutK+YZr
2rboR+j8vni2TWTbkxA8fULPivQnOnj8b3xZlwvQVIPuISTU9x6vH2mqX5O8
RH4kCfJc0FPNpe83plUpw/37keyZ+vbI59ssiwIwvVFxTzoAbTgp8910PYtP
158NtkeS7gW2R4t5wUYHSJs4XBxgyj06oL4xsJ2K9VaoqE9NvrEH1mK5GZv4
2hgmZlveQw5LnfqRqvNaK3MOOUrXCp3r7kfweLcO48GEjK1j6u8XypT4rLo2
3Zcfqa5HXjQt9FeYzuH4keY+WM63cx/sgsQnfRN5XA3QdD+ne6L5SI/6nHwS
GDcei170I3R+3yv0+6JtRw7zbJt/adN11L7ilMdTdM10vNXjE+BHmurXJC/h
fKQCtWnVyvCQ/Ehje5TnI/WyyCPx5jCY5fUgIXZuLNjv2j1WKO5R4ZnfLme2
WviRdN6hWXaewzOVqWIswK7Z2xHXpyZf5KGdbH+jOli5L1gD5EbtsXWOchFI
X9DU7Rpxjc7t4kfo+p+F+8gWLIiPbd7/3ZMfaWl/GvW3Mp1D9CO1fVA8H+nS
B7sC7SFyw2tBvu02a3jJ5sF0/8sAb418wyEsHR3UBatIXNwfCdP1t7m7WRdl
eXF1J7LQOUMfE/kOBO2YUP76UVrGhCStED1M1wjYE+AKdLX6Lkdqw7M1WzKW
cNUR40LeiKEhzab6NcgL14WZH3Gbx451adXKMFszZr4Kz7+U2hUEa7OZDruJ
8Jnm9ijk+8//1CCLAtA28nqQrMCasTMgwH13YG5nlhCEPpHhfA5W4959Cz9C
5x398rg+8WBO9aXinG9tfdrvj6C9GOlbXxB6Fl0na56xEX3EcyIDBezCRZpk
ZcFc97i5VbXOlfWruW/inq9CdKE9l2lZrzffqbwf0ehaz8aPFMvW0v409uXK
dETlFMlo331QkG9tHSLw0Y+30pMKkPIqY+58CXBnCoh/UfB+VnoOIUzvjNJ7
r/0RKCY7T4FnX9ldbvK86UK2NRp6eCapD/3RBGZzDSyDyHc4gbnhsGfQp45m
YJD5/9Inaaikf6wEuhR5oI2QR3gA45kGtm+DQu/XzunzUcDOMuB9YQvvqkUB
WMqQPj8zxeue9IwIynUwguncAt+es7KlZ0TapFlfv2p5sbGwATP8bcjqXz8E
q0mrQYZra0o5nZHv2Xavl9qVnhUZY5pTMPAsLJ5tMmd0jWM4M6nOsWf622ca
2qOYr0vSqJaFUCnJ+FQjebE6Wbqx3W/PJLIvbudOaGHPcVw/1iEotWcAOmmn
qrtF9fVp50eovZ8vYNv8OFbBe/SFfbwqxEuw1QkMBmOYqcSuGMTOKMTGazbk
xF+hcyK70dyPElhabD2ol336AxhNkae9uqhF/Vpn5x9pPiEkJJ/FnIwN0afr
LvzjfwpsWlv7U9f/auRRLmeFjA6hDxbzra1Dui7V48f4XbE0ie3s0hGRIzjq
wPXMnqePV3EmIydx2HSWhvGc8+8cmG8aOaGzIBW1fM61iTTUr6u8mvMSplUj
w0359orm9ijn21EWcQRh3cNHzu3cxp7jXZcKWxQ2rE5X1qc532TtELvvsjv5
ucWxHfoJactwvYLVeg1R3but+m0TYljaFrgr7IshrFdLCHyPzM0MUPT6Nd+9
6XXrejTob0U6h9P/aMq1fVCcb1UdSDuQOUlx3asdInCJ73Qa1FtC4iSiLbdz
vPbBdd3GT9BiXf4wz99W16fpvJZL7w8zixKDZ7vfDLdg5M5hKFpLwvs1jvAy
h8QhAPd1TKfb+YzIUWCAc8fRCGZHtyggIbFHtOd2xvvDufPUFZ9Vo/E93HiJ
1fWpyTd02LoRty504DsBR4jYU2HYG8JUNcAi/s9zMT6ECablgnCJSeJQgHOU
zogCsE2D+p+d91UkJE4AjpbbOaT2PBt5LQ1t73N5cX0OP9/jRLTyYGHqoCNP
O8YX+lvEVJeQkPjbgjf0R+nEjitfCQkJCQkJCQkJCQkJCQkJCQkJCQmJ7xQF
Xvnj5k4+7vwlJCQkJFoDeeW1CeMCYOEHEvDUvoC37qhw3PlLSEhISHRFnMZM
24SxQe7k45wPHHf+EhISEhKdQPkieD8iISEhIdGIaMPP7lJOX4wBlvG1OynJ
b7L2KGe5uwnQhty+NuX2NUy7JoZEysfs8nzM5HnBvamMFx05mW2PvxNZ4C43
TBp/Z43lxvgPlGc75TCm5dvyDht2kI8JQZ71eQ7jwlC/6EeQ29ldeNtYyhiH
lcqm8PHDjnJBudsbOXvZnCMKwMHvXBbXopR/izpISEhIHDnS+I4DNeMcSeOC
5ri2VmDOsrilMY3FYFJu3xhWGEtyoIATlpPm+ZhNypNs0ziVeQ6VBFaLGUy1
LN4kcpsPYajYsOa4y/tTnXKXq9MR/G//x//JYmKOSLoZhzHGeh8ojLfA9cF3
DRp/V9lc9mUcxkoazB7j/g94rgbI+xEaixN5kje8qEDjtxoYlzRmMTNp3Xtj
MGiM8fZy2Zann+fvxrja6ozyJAvzb1EHCQkJieMA5fMbbuNbJ8gt0+f4r8MF
aBkRAuX2JbYr5fYNVxZMez0YGSJrVuatYbwtai7u/6Rf4Aah8fH7MKMBJyOw
p70SR3OA8fd5jh7kbqEcc1nCMThKf8tBgJzzE47DGDnfSB35mBLF+UhoT/N2
nMwF1huZMM6RsZHyz3WSSyZn5ETguDqITzc4body/s11kJCQkDgWULs9ADW1
wcglMyRj+Ulq3FeWtokhzLh99TK3bxAKEk79CBfDk3IlchxRlEswxz1Iv4XF
BH0Hvkf8CHI8qfknSn4E60A5uKrzZohTDuNZiSOx6Ecox0xuPrAtn03nbGQu
kewilwxknjfe8s7FZO5lcGQV1flX10FCQkLieBDRsftg7kKMY17VBh/tIvJt
4d/6NvY04/YVxHYWotmPrHEuxHMnUsTgkvL0pjgH2Z8fiQILNNWk+ygJHcvv
5kdCG+13tp61i1zyafUHc/Bi0ga6mecQE+TfVAcJCQmJ40KMPNj9GZhk7qHj
vCS0yRxlBJpB/uZIHxm3r1JYS0nI+DgQcO40+5GYckIOufUoREj3DkYGWtU9
+RHKYcxxqO/qR3A9a8CtZ9EXY/hfneTCIfZgTuZ+M8MAfZGP21/Kv0UdJCQk
JI4NZN6B++39jW1mc5TeqMALmnL7DqYmjemM3L6BrYMmJM9K+Zg5P8JsNfEj
m4H7CsxJOhfKvoocUEaZTU79yDzPhybyIxO6P7LNm/cjGYexvmR75Lh21+9N
crylsVP0I8U1t5DxVnPrWZQrwnZg1UkueRnRuvD7UZkYCvm3qYOEhITEcWJl
zkD1tiszsa/BrETSK+D2tcSc8LgGs+VjDiEOfTBnGR8xdyY3wu/HMNMW4Lg2
mJqecnAz7vJpyl1uOkvGl760QcXzWgPynZdyGBtTyus8mi/AD+PtWTGS94Jy
NGccxkMYz3RwvAXdJx9MVHDWjFfemG25kv/xPzLu5BHMkTsZz3ARH8jyMMGy
LPIxwVCnMFJw/a29XEpYWzBTvdyzW+7mbf7QUAcJCQmJ40fxvkNSQ2+Q0HNJ
e72+gBzp+yEvr0C85WCn+e2B172E3eTSvhhHUQcJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQkJCQmJ4wdy2FumA5IKXkJCQkKiG2JYLhQYDsaguesOXPISEhIS
EhIJrKwpDAZTsFbSg0hISEhIdEOyNGDUG4DiRMddFAkJCQmJbw4ROEofeiMd
lnIqIiEhISHRFYkH834PBpr/be2JREtYhsddiBMAKQcJCYnjRriAaa8HY2sf
J7QiWHoeeL4Pvk/+9QJYx/h9DOsg+94n3/uw3Cyhhdw7/Pf1WJpz2EuRDwPx
Gpas4oLfSH2DAFbhfrz2iZaDhITE3wOpH5nsxRglEK4cUEc96E8N8JZriNPv
43UA5rQPvaECC38F0caMxhD6JsxGU9DtANqZ1yUY8wXxQBwiH8y5ArPpFBR9
AY5tgeksocKaHyIS8FSspw5B4ZfQM0Bf+BA4Kgx7I9CXB83rJMshA2n7aA2B
rcN0asLq2MohISFxaNirH0FEYM+IH5l7pXWyQB9Cb2yW76asbOJb2lu6JNBB
tcPcd/F667OipQeuvz4+2xmtyvORxAd1OAObzreIv10uW/rMapx4ORBEAWlb
x4PAmkF/ZEg/IiHxPWLvfoSMx+dkPD5zILdElSzBnAwE4/QQ3IUH7U+KJeDr
KnxzR8tWBoz6mR/ZB45fDvHKA0tTwQqaHWLiKtKPSEh8r+jsR8g4dx2AH/Br
U3kEGpl3TKzcvGPt2uBYU+j1VfC492KffN/FhcUeaKpbPcZOIgjDkPtERz4e
T8KA+sasWqG/IPZ2Av3eCOamBYuFC6vGQjXI+djkgPMcB4y5AqrhtN7Pkn5E
QuI7Rgc/Eq9sYrsMcII1RKEPpmoJ7cLKHEOP2IzN8n/kge1FzJb0FHAyg0bm
KLa97HROLHZV0LyyRUxCF/TZGEajIQz6PeKvhjCeTGAymYF5hAea0cbqEzIf
G6jgbwqXELOvwqA3hcU6Jn/Wl6eNnI9eDgmsiT/UFAU0y4OqYwSVb0s/IiHx
/aKlH0lWFkzGZC6Rjj9jtAtDDXyBaQoXU86OxhA4Lhub+xqxpRNYhOw5nKOU
tkWIHTQrfUsEjqrl5jMsIRtmkznY2SA/ckAZVqwh1aa/H4T2NO9HED76keZ1
rXZyPko5xLByTVCVeYdzEGVIPyIh8R2jlR9Zg0XG2NPMAVAkUDWsRtvXI/MO
N0a76ICTxVqh9+ZHYKAxSeco5ZdrzsxGNqh68Z5LCPZsBFrOIYWwmAxBD0SF
q0l/T4js2Y5+pKWcj0gOkW+AMpuD4Sw77F+JIf2IhMQOOHHnLyvQxo/QPeJJ
+3sKfrqGE4bgOcG2zmsy1u4NqK0LbHFM4boln3BBbFpxT3dlwnhU3LsPQBuK
y9uwpLQX7OxHWsr5qOSA+zwLfQ6KZoHXvKFTn5b0IxISnXHSzl9Woo0fwfWo
gVpeR6lCOu/QLBtyU47YgVmvD4qxALu4Vp/8/+2dK6y8zpLHxyFHIkeOHIkk
WYNEIpFcs0GSbLJrkah/EPcmSCTi3gSJWEFWkauQSCQS+d1qmJkDMzzncebx
q08yyTnM0F1d3V3VL4oMoR/CMzW4g8aGxup6Z8/ldFukY6sGPd3WqYX9xT7/
fPqP42Y/skjPL9BDmSKwDWiUb5CWN60Jsh9hmC9miR8pfajypX0rEXsBBsMD
N/MO6TrNYwwWWb8+51unMZJKrM0ow+NxGm/rzoAVousHrWM/yU66qgrnQrCx
9KvEhWF6D40tVvrHc2ndi5EBqZmjTd44r+cn6WERVY7INcmfmPDide8WOPmR
ux+9ZJiv5PdigTyFRfsjNfLAhOFESLMUcRQgCEKkYxMsYQ/3Fq4fK0hg7dRx
W0r+R1F9DH09Hv+jQkK2zQ4TpHEI17J/9pkXpF8EGmR5BysevmUtzXktZYuN
OOMrzjXV4rHEEI4m0zXyraY/sUY0r+dn6WEVddE8n65rBpwwm5xn1+K9aLYF
Q5EhbffQTBuOF9+eN9Onrq/8eV3mKC4Piw/8jnknfisWyJMgP3JY+vxIXTXP
IcyLK55dGPpV3dw/RmYfmtj1ZRL31z/q5Dr+xyUV5VlNSzaafiXWHSdv/V3G
9PxsPayGxlChe71GyfwKFY1ZXP9nz7XOQ5jiWV/qz+KzJXsUlz/fOTSuKV4l
LLOA58cCeRpif5banPK4B61vpEZqqzD9AH7UXzMZiv/xyPQrGr/Hry7+Ap6t
B+ZzqFIHht05wyLiRRgWoub5pBIZzWv3Io631okrUdBc2V4TO4L5XZ4dC+R5
1M26/cjZ0BdwfY6oRmw+Lv7HVfpViiDMPsCePlkPzOdQxTAVA93HUOvYg9ef
xNMYdoeNpPf223JPg3b3WIR5Fk+NBfI0yDYZ2/bZ83e1K3UEayr+x93pf8i6
8bP1wHwMuXuAbCb9djvQjsV5D+lyDCvOwMjG9fO/zFvwzFggJ+qqQrXosyz1
5tlpSYYxEF/jfRh/3vHPgvXACDI4OwlaMNdn62Zsu7Mu/A1ZKEum+8N37vN/
LnfFAmkSmItTkSO0LVjWgo8bz6+ZVQms/RaH7horwzDvjTgLKW1B05FpqhB6
J77ODyLGgXj/6VwCzCu4KxZIk8Dz43WcELH8zMMemvuGz9czDDNOcy6G7Mnk
gzgVYlsfictZIRBngrTwM9Zz/zTuiAUi+M01i9xVsNP85tkGhmE+iMaeyJPz
kTyw4YweQCQ/oomzpexH3pJbYoEIFsepyBCYBgxjwceeOydeI/M17GjeG7Az
YZjPoQqhSRL0keA5ZeTAuVjzqMvus0gFPEXC7v6XOjPP4IZYIM3X98SpuAvy
Jc4B0s7ksxvMW/GMWDXfQwlfGbAzaOMz61aAJE2RNp8EcejCcrv7rgkseQtj
6IUPzOu5NRaI4N44FbdSpyQb+TjzMgY5w7yOR8eq+TbEO9Hkbiw1tM8lHqTN
+Vn2n88eTu9hBPF+mzc+5//Hc1ssEMHj4lSsp/AO2Dz0veEM8wDeLVbNW1Ei
NHSsf5ywQmyqF++oYb6DF8epaPZ15s6jf3gsyrejRpnlbxHP4F35lFg1L6NK
4Nr+cLztEcS6l+V/QuwG5lZe9ozZojiNHx6L8o0oU7+NpSfpCFknw3xMrJoX
I/S0MHayiLvsxwXrlHkOC9/P/tGxKN+MKlDZj0zxKbFqGIZpWexHPjcW5bvR
PLPKfoRhmG9hsR/51FiUr6BGkfjN+5tsx0dysah35UfKBIFH+grEe6ti9F8/
NZ0WwzDMy1nhR34jFuXnUyGxjeZ54pr+zsjHSlvSTdH5Rc+PpLDPMcBrulfv
PI86nxbDMMzLWeFH7opFORuH8kvIbOwVF1lRoixLFJnb6Hdn/5zo7vkRoX9J
PIN61AzNTZJ8eVoMwzAvZ4UfuSsW5S/GoXwl4t0Q0sGC36xRdT5Jcf5Nfz6S
wxPvc5f2MLykt5+0JC2GYZiXs8KP3BOL8k95d0ZqyZDUYDKO8tX+SF0gtA6k
2/47tZekxTAM83LW+JFbYlEujkP5HYg5xEbSLt5/WyOPk/M5/54foXlafvxt
lXrQZPIlx7PVS9JiGIZ5OWv8yA2xKKfiUH5lPL5mv0PMKxzEeYWayp74FsxO
EIsq6O+P2J3vxB7UyY8sSYthGOblrPEjt8aiHIlD+Z3x+GoUoYnD9hgnT9r1
3hdWZSFsdUvfyXQ9Qv5/pH/SnR0kSOIAtmF2zktPp8UwDPMWrPEjN8ainIxD
+bXx+OrmjNVim19XKIty5DzbyrQYhmF+k1V+5Bam41ByPD6GYZgPp9kj32Dv
PHcTfPC8FsfjYxiG+QJS2CKOr/aC86Ucj49hGOYraM+Xqje8F4dhGIZhcIzZ
K2FLc5Li1bIwDMMwn0kRQN9tsTcj9iUMwzDMbVQZfH0PWfUHY5swDMMwzBLq
suL9b4ZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGOY26hJZ
Xr5aimGeIds7l5f586hypHn1aikeQI0yy1F2X7D5NWXrUBXIkuSiXFT2PEWS
pMjLlW8Y/Xgd1chDC4ftBpIRvVqYC54h2zuXl/l8alRljsS3oCgOsoV3xeYW
G8lA9MEvOC5TH9aByrFR4XeGaN9Qti5lbMN0YqSRhb20hR5WqPMQlukgIh+a
heb5+lK+Q0cFPOVd7GqFvDdPeIZs71TeP43L+v0uysSHF0RIXBXSzl7sR2gQ
jzT7fL3UoQbpwo98S9ka6gTW7gA3b/8tswQ5zSXcwwFOp7LLNERSrEj34Tp6
RT8r4b+JXS0CHQcr6Vx5hmzvU94/jev6fX+qLIJrGnCT5YPFxp6u8SNfQh3p
137km8gdmmv8+JH2mouD9F5lfkQ/K5MAnufRJ0BSin4Qwm/+9+DHOZreUKYI
zv//2NVaXHdtWLaLKK+v0nVtC5bjXXxXN/7XCzO6P4Hv2PDTasF9F2UPDewk
kuNgwiXZ4qK5e5Fsa/KZT7NGcdahjzA9NhAad0Q+XfMTSkH85lTmUxqUb3Y9
lx2Wa1pnfRbmVRdIAqpTz4Xj+p3x0EReo/fQeEbkSWWtqLRp4MK2HQRHXQjb
6juiTCGyC1WP1cNw/T5KR319lXmCOMmwdpm6l0YawNY1GHaAdKWNWOtH6iJF
6HV0WYr/fQRBQJ9wPv/RepxgIo86j9q0HAdelKOn9Ym8hvzIVdlE24qpvoMU
tehTXtue46JfWU0ba2Rw4Ucp8qJEVc1X6KTsp3SpH7vi+zDFpWpH229M95gK
thsZGtkLYV//+a+Qrh2ozDvojtvaDJfyFvf7KXpWckKuax1N2bNp/U31s1U0
cy9KRwuP5agQGzI2WwPxWZwakaEe/WprVzcHAzbJHEYhHHWLzc5COwSrkDj0
XVTQXTVyX8OWfLKT1m2ZQhvKlu5XSG7q66a6w95OZ+4bkjuFs99ANmNUdX2U
fU62OfmGWJKmmKvSb/YOukOPzFFhJZ0y73VYFrUL34Up1oZ7+Y7JVU7o7Eop
C/PK4SlbqMcOXEUGZNmk+p6qn7F70NhQ6yBhI2uwXQ9BFCO0qb9ICkzqJ64f
IY59GLu2vurJ8tYT9fsIHf1QZT5Mw0aQ5CiLGI7hrpwTkAxkL0xNo3JGuHXr
c40faXStiPrUEDZKyeAoOtrl9RqZq8GKp1IYr8dxxvIQdaCTnYxb+1r6UCUJ
B/dUkum8Lv3IddnIziUe9F3bnkX/CyLy1+I3+x99VYmFveq1fa8gGcR+5l5r
xi3d/thnTnY07UsxQhTNzwuExg7bg42k0cNc+62pvCb5kT1dq+jfuvmUgSiz
Ao8aS1WVKPIY1r5rf6flutbRtByz+hvsZ7eRu4fGb5z3bTIbO/KZ525Ivsa2
wqMvPo7PteDHRyYm5M1x/pbRXO7gIKXxQFnSJw+gC3+nR2dbEGjCLrv9Op69
70rqxnbLQ+taY7LdlM+CNEWpqE+INmOfmyH1Pf1kl0oEKpVZ7aRRRTDkNt1y
Vq4RnY3IO5uXaDvKAfbJETZz7f1xzXYkr8l7gNTekW+1cbbcVQB1s4HSGWxm
zr75TbaoHgbq92E6ouJkJP+e2vxp+ihs+aw9PRcOWejA0MhX0xysuKfzYf18
pPTVHztCdkYRduM0OK1objXlPmfqcSTD4TxyD8rO7I03U9eAGeSL8hqaj/TK
dkwz0mmMcvBaey6uxAb1NbLFzQXqn6rUaSd1uw891w7mZC/o++3FmlQVQicf
tbNobL/EjgzYCVyVuWr6q6Qf/cicXJc6mpVjTn9DdvRGjj5PO54ZKMVcZ0t1
YyaNLFVE86VzwQb2Czp+R/gkMUfym/lv5xNlR7vW9nfhf7vDt/n7LpnwIyOy
3ZbPfJrHi41f31L9NemkZGfaisJVW2mg9m5Qe5dpXjMr14DOaI6aJMnPJyt/
/PRMXuhcF2tgvqN1yjNcP9P3/PiRszmqw6Y9q8GPkSg8MV6hPrKoHq7rd7WO
RhFpS1DO9dOWq17gD8T5G02lsV1wvcZxK6v9SNC1tTnZUTE+3UF34xU+bbge
hxnOo/AUSKq/QA/DeQ36keDSj5DpNcgOKp18aP4hi3F+OwFpz8F0xnltO/mx
m0PMyV76Csmh9+QQfSPUpKadh0vsyA1+ZIlOuzpaYs+m9fdAPyL0o2+P8lO6
hoOY5l9bMUehuZdvkr8763Pargp7IilTehju7/P3XXKbH1mfz1I/IuqX7AGN
27y8RmKbCEbayjkZMT4n257OynWtszpxoCjKz8c8zr8X5NX8KvXaNZ2U/E8z
Tpz3I+P3rPcj8/VwXb9rdTSKqL/L/c+F1EUCz9Khme7g/tYt3OdHBAUiW6zF
i/UcE+GMM5mqx3Gu82jqY8ZeT+X1GD8ifLs4m0/zHrEfVpPP0w8wo+kePid7
s0YzcAYgMeWmH/21xI7c4EeW6LSroyX27Pf8iJjrUJnF3NWzaA5VigswZJqj
2BaMniKm7WpjKwbOI1RpctwXGu7v8/ddcpsfWZ/Pcj9y2muSqd9YVrd8w7Zd
zL9P85dpudaMtefzaubs3bWMJX5k8p71fmS+Hq7r92E6ora+3d55/l6cYbAN
aPrRRt6R1F1+hOalpyObYr/H2ElkVybs0Ew9DjKSx//S2HlzaSeFfFnW2qyZ
vB7lR5o9AlfsMbvw/ADx5LmZkxqmZa8jsfazhRH1nx0Ua0Ri7vPvJXbkxvnI
pE4vdLTEnv2mHyFLAFvsx5z3j2m8Ye1aGYvu747zyO46YNqxq2Kfi+zHVhHP
2VD/Es+CRw4sN/1ZdxHr2N39Biy575KTHK3+27MZM7Ldlc9Emr1iqNROqP31
Ftqr6z0L8tPmrnOOfFKuEZ0NMp9X239lmLH4RY0i1KldyWib0nBe0/cM7I+c
/Eingbf7cK0fma+Hgfp9lI7EOq586UdKxF4wMpaYQJyBcU3yJya80/nGlZz8
yOyU4EizPr7R2n1v0onl/Ridmuplyo/M1eMgY3mUIbRtOz8J0oLqqEAakD0P
ikV5NekM7Y+cytb+ql3f79lBs7WDx/aceyo0agPlgvNZPxlNy35a+zzvKTai
nPrRXFs8Eh/32Ts+odWJ0imz2N/p7LPPynVd/9NyzOlvyI7S1ciF7SU3rd0W
oj66ToPGD6rRHd/VyKPjuRhZgxMXzdlS39hTuTbYG9QPKyFD+wy4uLaRZKh2
dF5zyUK7OU+x2Sqwg/4e5fh9w+RiLXEjYa/RmJAyXiLbunyWlbd/C9nPffcs
V1vuxrbvVJiWTWMmD5auU3r9WhqWa1pn1yzIqxL9gdoW+budYpD9C2CItrv7
D/znf/9tOK/RezT8119/wdzTd5ICKxTnZwvErkZtVbRvGyEpSZwnb86JUPs1
xN5CPV8P/fo9te9H6IjqNTBhOBHSLEUcHc+y3rNMJc63+hZ0zYATju21XdxC
OhFnNQ1FhrTdQzNtOF48vaaRHs/bkD1WxTnqf3tQqa7tIEaahHAMqpvRs4eY
rEc3GZG6GM+jTBzyydKxPnaNPa8W5PU/f/8HHFVuvmvKUQ6UrRLpe9BlUa8q
HHH+lfqfp9OYhdrFwYqQ12Iful1v25w+UpufPzMomJS9/QFcbQ/FcBGEAVzT
hNvpR1PttxR1q7Vy7g2veR6gLuKj7FsotiifsFlO225ltbUvM3IN6WhSjln9
DfUzcVZHasd8N020L29atvc4llZVllgzRLjlPvHb20S8Vb4ZMhf61eGXzty1
rlCWU1bmXrmW5nXxHf12Ps9b7pljurzD9fuguiP5i+K+NalrSqShC3/Klj8D
UdeLy3JjPU7kMV4fz2gz/fRTn+x8Js4rFchpXJDGEULfgW4umb9PyX6kFmmP
/eBJdmSJXA+U47qfPbqemOVUiEzjYh2wvT60Z/EsGX4vL4Z5LaVYK1MH/EWd
I/AT7gPMxyCePdiKufRuB8XNBtpuuwa5WXRG8l5+My+GeS3Ns42bLQ6GDdcP
EYUiHocDxwnuW6dkmN/mGIfDCdKBebRYu3dhmSZMU7T1GAuOk9zIb+bFMO+B
iF3iOeKMpNhfCh52HpthGIZhGIZhGIZhGIZhmO/j/wH5zJEc
     "], {{0, 506}, {402, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{399.802371541502, Automatic},
   ImageSizeRaw->{402, 506},
   PlotRange->{{0, 402}, {0, 506}}], 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3V2IJGd+53udF8y5MeqbvRypT8FAXhilLpbkXGy2+kD54kwNUlPDMadY
I+V6z57iYLJbeAoO3sJqUexNDTtq4YspDKvs8UXiXShJ66mB3YQZdXoxW/Yu
WxKYMgObq/a4MAMFUlNjw+SAV/8Tv8h6qp+MjJcnIqOy3r4fCKk6M+PtiSci
nn88L/G//taD1f/nf3zhhRe+/b9E/1n9J//f//47v/NPfvdbt6J//J/3v/3/
rt//Z//3/3F/45+t/7Pf+d9+63+KPvy//ocXXngj+uN/jv42AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHN59uyZvfvuu/bpp5/a
06dP47+///3vx999/PHH8b/1OQAAAADcZA8fPoxjpNu3b9vjx4/jWKrZbNob
b7xhT548iadXX331ojcTAAAAAC6UYqNHjx7FsZKj2EnxlPv+tddeu6CtAwAA
AIDLQ3HTe++9F//95Zdf2gsvvHD23YMHD+z+/fsXtWkAAAAAcGm8+OKLcX8n
UX2TX8/08ssv28HBQVw3BQAAAAA3lWImxUeO6pnUB8pRXPVv/+2/PWvDBwAA
AAA3kcaGcHVOojH19Jn/b/97AAAAAAAAAAAAAAAAAACQ76uvvqp9AgAAAIDr
RGOQa9xxN925c2dm0th6/t/+5M/rT3fv3r3oXQMAAACA2nz++efxeHku5un1
eqXmd/VMn3zyiX33u9+N353rlqVlAwAAAMB1oXjJxTu3bt2K39k0jw8++CCO
x958882athAAAAC4vvx3/mgca39s63k9efJk6u86l31TKc5x8dOrr746d5oq
/tK7ofKW4x/H80QeAQAAwGWlNlzqC+Pofapq01XGW2+9lVr/oWX772etsmzM
+vLLL+NYx8VP9+/fn3uZH3300dSx8iXzyHl65513FhanAQAAAGUky8Vly66u
Ddl7772Xumwtr+qykU2xqj/eg2KfeWWNuUfsBAAAAKTHTqF1Q6r/UJ8bld39
GMlfdjJ2ot6pPopX/b5P5zXeA7ETAAAAMF/s9ODBg7O+N1mxk98OjHJx/fxx
y89rrHFiJwAAAKB67KQ6Ds2ncq7K7a+//nrqsql3Ol+q+/PHLU+LYedF7AQA
AABUj500j/rcaH6V2dPK1lepv5PGF1S9jSb14VIa3Lt3L/53p9OJx37TtrvP
ND5Gcjw47Z/GbVBaqD7I74Pk0kL1cJrefffd+HOty332+PHjStuubfX7PtUd
n+bFTtp+t79Kw6r74FzmPAIAAICbrco4e4oJ3NhuRbHTeYyzp34+Lt4ImULG
vNZvNFa7G/db69D2q15HnylmUrzkPlNdjx8XuvjF7a8by8EfQ0O/efToUfy5
liX6t5al383zriZti4udbt++HW9jXbJiJ7XXdDGkX/81D2InAAAAXFZl6530
+2azOVU2d2X25DhtoW32nj59Wqq8rBjjxz/+8cykZadNZd4XpP3Q/vmUPhoT
PPmZn25ah6t7yfqNo3hDYztov/W9P888tN3uWCjWq0ta7KRjqVjJzwf6TTLt
RPGh9jXt87S6O2InAAAAXEZlxyjX9/q9X6+jeo6s2Ck5VoQfO6k8rfEmVN7O
erfQoqXVoenfd+7cmfksLS5SXKeYwKVL2m8Ub7zyyitx/JQ2tntV6oPm932a
t/2ck8wjOm5avuqdfFnvmtK8abFT2ufETgAAALisytQ7ufEh9Bt/cu9prVrv
5GKwstsdOpWRFTsVfab6E/WDUlqoD5BLq6x+QoprzmNsB7WndHVnZerb8iTz
iFvHhx9+ePaZa6M473umiJ0AAABwWZWJndQmLa1cq/nTxig4r9hJ2+HikpAp
rc4jS9XYyY0V/sUXX8z8RjGM/+4l/VuxjeujVFebPVHclmxLN6+0PKLt9vfJ
vWtK61W/Me2j9kv1ivq3T//W8U5+7pZN7AQAAIDLKDR2cuOppXFl6ZDYKa1c
fNnqnULa5yU/UyykMSZ8qoPSZ0oXlw6ufsrFSxrbXW376qgjUt2P4qZ5xpxI
k8wjygt+PaO2XfupNNBnao+o/ytu0vH251VaqM4t+bmTzCNattLn7bffrnWf
AAAAgLKKxtlzY3W78dv8PjSuv5Lr76SYwI297ZYdMs6ePj+P9xKV4fbF7ae2
yX2mfkma9JnK9fq//5l+5+IJ7b9+o/kUF+kzjXGutmx+Wrk6F1df5a+zCsVL
2p5528ylSRsrwvVR075qHzT+heIn5Q8dS1fvpM/9Y+viItVTJftLSTJ20jJc
/y2/ngsAAABYtKJ6J5Vd/THr/LK9ysf6zB/jzi/3lmmzd9Gxk9sXfz+Sn7n9
13dp4/ipbK/9UFzg0kmxjKsH0nxuXve9+7f7rkr9k9rJKfZS/HYe0mInbafW
p8m1D9TfGifDp3qwtHhQ8Vba9qbVTSr9FGfxXmUAAABcpKrvxg1d9lWJna4q
115OdVrnJe/duHlUB6UYSbFTcsy/rJgqq12nex8WAAAAcFHS2uzV1Vc/bYxy
f9kqO6uNm8r+muZps3ZTKTZJa/tWlmKwrPZ+88ROaq+YjHtUj5R8X5aTVe9E
7AQAAIDLYFGxU53LrptihzritkXun2KmKjFNGsUsWW3+qsZOkjaGoNr1ZcVC
abGT6tTqGm8dAAAAmIff3kt1BXWOme231dLfl61eSeV0lePVhiwk7lEZXmX/
ZL8e0b5ltUVzVLdTR/3aBx98EI9nV8dY5G5c87wxCetoE6h1aIwMjTORlcfq
zn8AAAAA6qV6lbzYSbHO/fv343EgqtSBKCZQjFZHvVQd73BSnKSxLdw4f3W0
+yui/Vf6ERsBAAAAV1dW7KT4QnUubtztLK7vVnIcwu9///u573tVHPH+++/H
f+s3yWUkubHIFYP44/Mlx+tLm/S95tP+qH+ZG/tbU93vhAIAAABwPaXFTm4c
7aJ6JsU/7n2vmkfUNk1/572TSMtV+z39Tu3YXIyj8cbTuLjJj3nqmF566aXS
7xAGAAAAcDOlxU6unV5RnZObT7/T70W/d++JzRrzXcvXpLjJvStXy9K/06iv
lJZX96T3cwEAAABAiLz+Topv1M6tqK+TlpE2zrfqrtTXJy2G0vJU9+PqfbQe
F38BAAAAwGVTNFaEaGwGxU+KbZJ9khT7KAbKi60UQyXHaVd9kz/+t957pLZ5
yXfJAgAAAMBFUgyksRrUx0jvcdXYDkUUH7k2dk5eW7sk1T+52EuxlP8OLDeO
d0jsNM87qep6nxUAAACAm0HxQ3I8uioU/1R5B5LW79dV6d+hY3irHWDZdWr/
FCOqfsuP2QAAAACgqrzxFdz4e3fv3o3jHcUiftylv/Pmv+g6H7UTJHYCAAAA
UBf1Y0qbRLGTxhdX3U+yDV/evHWMB671pa0zFLETAAAAgOtOMZPrX+Xa97lx
KLImfe8jdgIAAABw3T169Chu86dxJXzJeq28ei7FTmo7CAAAAADXWdWxKRxi
JwAAAAA3QfI9UGqTVzS2hY/YCQAAAMBNoPfwqq9T2fEiNL7FcDiM32d17969
+G8AAAAAuK6qvotKsVMd77MCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAABX0YntrjWsvX2Y85ux7a03rLW5X+My513HRS93UeuqkpaX3SKPySIt
4lhd9bS76tt/yYxHtttdsVZjyZaW2rYVlPWu4zXFRx4DAJynsNjpoL9hW3uj
Gpc57zouernp65rvnn1ie50o3bYOpj67fuWcRR6TRbqssVNavroolGvrNB6s
W7O5brujEzsZj6PUTbou15Qyefi6Xl8AAJfDedxHr+K9uQ7ETjcbsVMxYqc6
HfVWrLHSs6PMX1yXa8plysMAgOtmPNywVrNrQ/cQcrRjK0tLU+WVw+1la6zt
2rG7j24NbLDdseVmwxrNtq1F/z5+vsSU8s6JHfQ2bK3dtMZSw5qt5Wie4ek8
Icuc2eqZdRwNt62z3IqWv2RLjaa1VzdsL6OQkP3b5HLdtu3Z3taateNtW7b1
/qGNxyPb21w9+6yrz7z9jefb6Fuvu2rL7ZY1o990toeZ6XS827FGa8P2px4G
n9ig27Tm+l7017ThRtOWtP1n04rtjELTUseja6vueLRXbaN/MLMO//fV0iFK
68GWra+2rdVoxGm9vLZpeyPvF8cD67YatrLzfL7xYZQHGy1bHxzXeExGtrPS
sNXedKYYdKP935h32bMK99uta3PPW247kUcK8vX4yAZb0XFuaR1RGq10bWff
nzuZdsVpkJ6vJttbLs+4ebLO+/PZ/rnP2c1d292M5ms1A65DecdnsfktPy3H
NojSceq4Lm9bMhq6LteU3P3Y7Ft/43TZa/1oHxJ5rPB6BAC48U72rNNom3tE
d6IyfDMqr5/dW4+tv6p7iQpQk/vPpIw3sMPRyA4Hm9F9pWnre+4umSzvjKPY
ayWaZ9W29g5sdHRko4Oh7fb3p2Kn/GUmJdZxshvtQ8s6vX0bHR/b8dGh7e/t
2n7arS73t+nldN2/OzvDeNsO+uvWWorKDmtrtt6LPjsa2X6vE93HV6x31uxD
86ks1bbu4GhyDz6K7sltl45p+xB9H6V7d3Ays60bw7RSU/Yz4qLjo+PRXO5a
f39kR8dHdhiV/9aismJnN6tsUDUdohLk3o71Bzrux3Y02rd+N4rDl7dsaquj
+L3dWI7yYLSf4wPbXlbcOTwtd9V1TMLLslX2M6l4v0/XFeWRtSheUl4c6Tg0
vTxSkFf3N9u21OrYzjA6jtF3g61VazZcrJOWdmFpMJuvquSZovP+/LZ/vnN2
xTZOz9nxqG+dZs51KPf4LDK/haTlfPVOV+uakrUfOr5RLLY3mhzfcfzfmedw
+dej6KO96B65tGZ9QikAuKGOrHcWG41t2G3ayvaOrUdlnvjeEMVW61H5bjO+
DU3uP5M6KGfyTLMZ3Vvcv5MxwXpUHlzLvYcWLTMpsQ7VlSXKCZlyf5tWTo+2
reNv22F0L40+m6oLOrDNKC7q7J5Mzze1T6pbWrNGa9P2U9el8k/Lmp3nyz3u
R79vb9pB6gPn7PJBblqOFaO1bHO6gitKlqhctdrPeMZeNR1SjCf5abo5TbTv
W1H5p9217W473uf9k+ff1XNMQsuyNe1n4X6fluVWp8uyR73V53kkL6/Gzzyi
bZgq10fn8srSVJ6qJXaqkmeKzvtz3P7q52wj8ZvxpN436zqUey1ZYH4LSst5
Yqerdk3J2Y9ofdNLSmsnkXc9ir7d37LV1U0blDj9AQDXy+FW+/SecmBbbd2D
jqy/NnmuON6ftOkbxLdF185iuh25yvy6303unIl70eG2Leu5YeYNO2SZScn7
3ZHtdlq21GjZ6vqGbfcHdnCc1cIl77dZ7cP8bZvUwy1Ptf9PlpPS98kOtqzd
cM8rU+7Zh1tRWrnvJ8tczuxnkNM3IS8tdTym2rN4U3trph3PfOmg9i67trm2
fDq2l5sa1k0WR8dR3lvWd6fPe59/UdMxKdOGqvx+JhXv92Rdrc28PJKTVw/1
u9nz6kDH+qy8WlPsVCXPFJ3357j9852z03uTfx3Ku5YsML8FpeWc/Z2u1DUl
fD8y+9RlXo8AAJj0eWoqPlK77tZG3PdptL1irY2hHZz1dZL0fsO1xE65y5zZ
4tRnhccHA+vvbNr6ajRvtM7tzHte1m8zyulT23Z6f5962JxeDpstF2/mx06n
y1Ed4DhOt9XcdAvt1z1dzpmUs4Lq6HKXG5AO433bVN+BzYEdnpUph9ZtRuWc
QWIVo56txmWhVhSz5/V5qXpM0sqf7vn5vMtOCNrvkNhpso2pebW22GM2DWZj
pwp5ZmGxU13HsMp1aLL+9GvJAvPbImKnK3VNKTPmRUbslHk9AgDATtt8tKzb
XbOma9OwH5Xzl7vWXfX76FSInYLa7NURO/km9+Cw8bn839YZO0X33ZWc9lgZ
+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
vqw0SYs76qJ6HNf3qc7YLBk7ad+0v/44Isov+mwe1yEvAQAA4OoJjZ1Uhk8r
r6bFDo7/7qis8q7K8eor5Mcj4vr/lBkfQWM0aB2hk+p/ykiLndxnfvu8tNhJ
dSqKGfw2ci520r7675t1479rUj1f1rtoq3L1h3W8K9eXjJ20f+oj5lMauLo2
1xZPaaj6pSQd+/fff3/mc2InAAAAXITQ2Em/S7azkrz6k6J6J5WXXXzk+vio
XO/GZVDZWpNiolBaT+hUVtnYyX2mfUqrh9Jnii/1O3+Zro+TGxuvznZ1ov5H
yf5ZdfBjJ9fXyU8X7ZP2WfVuisUVuyluVD7Q8fZjWf1Gv1eclYyr0vKSfqv8
U2ffMAAAAMCXFzu5saXV70Zl3mQZ1o3J7cYd0Pf+2HVFsZNfrta6VDejdSXr
KlSmvugysdbv9lX/d3Gd+0zldjd2n+vLpM9cPKB9Uxrpe8VEms/tr/7+D//h
P8Tz6d/++Htu3D39pmw9WRrFTK+88srcy0mT1t9J+6P99d8Fpv5iOsau75co
RvTzjp9ufv8yycpL5/nuKgAAACAvdlJZ1u/b5Mc6kjaunR/j5MVOrn7J5+ol
kuuRtDZdi6Rt9fdT/3bplfeZX/ekupTXX389rkfTvuoz/ca988ifz8UR7n1P
aelf1gcffBDHInWOredLG6NceUR1R26McsVEipv8eEifpY0T4ermktubFju5
tJxn7HMAAAAgj18GDX2/U5llh9Y7uX+7sSf8uEp/X3S901WnGCZZt1O3rHfj
FlEspe1LxtKKr9Jiqqz+TvSDAgAAwHlaVOyUXJeovkH1ScPh0N5+++2zfk0q
Q6ucr880jkSZ/k6Ypb5F6ntUx5h9ecuoGjtp25T3krG0jnvasc+KkRR/nceY
7gAAAICcd+yU929RfZJipWR9iP6teocqZfG61T3O3SIp1lH/qWSfoSrUdi6t
HsipGjvpWKf15dK6kuMvSlabPeqcAAAAcJ6S5c06Y6fkWG7JMSAuMzdOhsZ7
CO1npLEPVE/ix4GuD1cRxQhlxmMPoVinrvfrKj20rLz8oe/SYp0yFEO5/mBZ
74FS7HSV8hIAAABwnSlWUPldcVNR7KS6Hf1GMUpaHVVeXy03lkLd9Wsu1qnj
HU7aNjfWYto49XVyY0m4+AkAAADA1ZAXO6mORXFPVn2R4hf15UqjmEn1cln1
NIobXP2VYjM/jtA8Re0I3Tuc/LE6/Pdapb3ryv2t+Mj1P3IxE+N/AwAAAMiT
FjsprlC9SFFbOMVV/vjcbnmqC8qrv3Ht9zRehqvPUl2Mxs7Q8vS9vsuimMnF
O3VOjMMAAAAAIIt7v5KvqL5J3Ltz9Tv/3VTuPVF5bfTcO4b9McUVq/l9fBTL
pI03rjoq1Q/50507d6Ym91nyd0XTeb0XCgAAAMDVlxY7OW5cwrw2e4px0trX
FfVz0jL9WEmxixsrz405DgAAAACXRV7s5Kj9ndrh6Xd+nKT4R+3nVD+U9U5a
xVBaRzKGStZX+TGY1qVJ9VpXefx0AAAAANeHYphOpxMUo7gYysVJqityY24X
Uezkx0qqV3LjQ6h+y3+vkpbr+lwBAAAAwEVS/OPqnDTp76y6oyxujPMqY237
cZHiJP/dsfq7zPaEvmPKp2Wr3kzvt5r3nU0AAAAAbibFIoonsqa8OirVL2XN
d17vM3LvqipDsZO2ydVxAQAAAEBZikMUA2VNRbFT1qQxIM5re6sidgIAAABw
3anuSG3//HEn8uq9NCXbARI7AQAAALjuXJ8p//2+ybouxUX+v9Nip7x3UQEA
AADAdeG/G6rKvMROAAAAAK67L7/8curdUG7cwKwp2T6P2AkAAADATaDxzP13
Q5Wlef3x0QEAAADgOtK7ejWVpfon934rv78UAAAAAFwXap/3/e9/P/5b9UaM
kwcAAAAAsxQr3bp1y95+++2zsfYAAAAAALP0PtzkeOMAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAOCmO7HdtYa1tw9zfjO2vfWGtTb3a1zmvOu4
6OUual1V0vKyW+QxWaRFHKvrmnbXyHhku90VazWWbGmpbVtB2eE6nuc+8i0A
4LoIi50O+hu2tTeqcZnzruOil5u+rvnKBye214nSbetg6rPrV6Za5DFZpMsa
O6XlK5yX8WDdms112x2d2Ml4HB2xpOtynpfJV9f1nAcA3Dzncc++iuWAOhA7
3WzETjA76q1YY6VnR5m/uC7nOfkKAHA9jIcb1mp2begeeI52bGVpaaq8dbi9
bI21XTt29+ytgQ22O7bcbFij2ba16N/Hz5eYUl47sYPehq21m9ZYaliztRzN
MzydJ2SZM1s9s46j4bZ1llvR8pdsqdG09uqG7WUUSLJ/m1yu27Y929tas3a8
bcu23j+08Xhke5urZ5919Zm3v/F8G33rdVdtud2yZvSbzvYwM52OdzvWaG3Y
/tSD5xMbdJvWXN+L/po23Gjakrb/bFqxnVFoWup4dG3VHY/2qm30D2bW4f++
WjpEaT3YsvXVtrUajTitl9c2bW/k/eJ4YN1Ww1Z2ns83PozyYKNl64PjGo/J
yHZWGrbam84Ug260/xvzLntW4X67dW3uecttJ/JIQb4eH9lgKzrOLa0jSqOV
ru3s+3Mn0644DdLz1WR7K+WZzb71N073b60/2beC7S53TUpJ+8w0W2weyN/P
sQ2iYzOV1svbloyGrst5nrsfM3kkkW8LrxEAACzQyZ51Gm1zjwNPVIZvRuX1
s/v4sfVXdd9SAWpyr5uU8QZ2OBrZ4WAzuoc1bX3P3ZGT5bVxVM5ZieZZta29
AxsdHdnoYGi7/f2p2Cl/mUmJdZzsRvvQsk5v30bHx3Z8dGj7e7u2n3Zbzf1t
ejldZYXOzjDetoP+urWWonLK2pqt96LPjka23+tEZYYV6501MdF8Kre1rTs4
mtzvj6L7f9ulY9o+RN9H6d4dnMxs68YwrYSW/Ty66PjoeDSXu9bfH9nR8ZEd
RmXNtVbTOrtZ5ZCq6RCVVvd2rD/QcT+2o9G+9btRmXd5y6a2OiortxvLUR6M
9nN8YNvLijuHp2W8uo5JeLm5yn4mFe/36bqiPLIWxUvKiyMdh6aXRwry6v5m
25ZaHdsZRscx+m6wtWrNhot10tIuLA1m81XVPKNzICpn743ic2A8Hodtd6lr
UnK1eWm2yDwQcnzmq3e6Wud51n6k55Hks7H8a0T00V6UR5bWrE8oBQA4d0fW
OyuHjG3YbdrK9o6tR7FOfB+KyjHrUTlmM77lTe510897J89Pm9F9zP07GROs
R+XBtYIyVv4ykxLr0HPpRJkkU+5v08rp0bZ1/G07jO7b0WdTdUEHthnFRZ3d
k+n5Es/Fj3fXrNHatP3Udams1bJm5/lyj/vR79ubdpD6cDu7LJKblmPFaC3b
nK7gipIlKsOt9jPq+qqmQ4rxJD9NN92J9n0rKmu1u7bdbcf7vH/y/Lt6jklo
ubmm/Szc79Ny4+p0ufmot/o8j+Tl1Ti+iLZh6vlCdC6vLE3lqVpipznzzFQq
BW13mWtSQu75vcA8ELSf88ROV+08z9mPZB5JbbuQd42Ivt3fstXVTRuUOCUB
AKjqcKt9ev86sK227ndH1l+bPMMc70/azwziW7Br0zFdaFGZX/fWyV06cd87
3LZlPaPMLByELDMpeW89st1Oy5YaLVtd37Dt/sAOjrNa0+T9Nqt9mL9tk2fe
y1N9DZJlsvR9soMtazfcs9GU8sHhVpRW7vvJMpcz+zTk9IPIS0sdj6m2M97U
3pppMzRfOqhtza5tri2fjiPmpoZ1k2HxOMp7y/ru9Nny8y9qOiZl2muV38+k
4v2erKuVDACm8khOXj3U72bPqwMd67OycU2xU215JnS7y1yTkvLO7wXmgcD9
nKu/05U6z8P3I7OfXuY1AgCAxVL/gqbKImpD3tqI+xmMtlestTG0g6l+Bel9
lGuJnXKXObPFqc8ljw8G1t/ZtPXVaN5onduZ99es32aU06e27bQsMfVgOz12
mi0Xb+bHTqfL0fP2cZxuq7npFtqHfLpMNSnTBdXR5S43IB3G+7apfgqbAzs8
K78OrduMylSDxCpGPVuNy12tqHyc12en6jFJK+u6Z/XzLjshaL9DYqfJNqbm
1dpip9k0mI2d6sozFhxThF+T0mSd3wvMA4uIna7UeV5mzIuM2CnzGgEAwILF
7Uta1u2uWdO1n9iPyvnLXetO9SuoEDsFtdmrI3byTe73YeOL+b+tM3aK7vEr
Oe2xMvYhbqe3vGW9zfbzvvWpxnFZJDkmR2Fanh6PvDqTWRXT4ahnK8n4L+73
n4idxofxfK3unu33ojzY7Nju2Tx1HZPoN2vJ5+dqG7ZUf7k5aL8D2uzN8PJq
3G6tWbLNXkgapOSr2vKMBW63lbgmFfHP7wXmgcD9LI6drst5Hr4fqdfG3GsE
AACLNik/qI3F82eJ0b339H2Nm1N9NErGTomxIo6Oj+3ocGi7u/sl6rKSkv2d
dm1rJ7qnHo7sWMvf71mnFe1LP+Xmmvvbeuud0scBcMvKiP9U5moq3fPGypiY
PMPetoPjEzs5OYmWGHZ8DtXnobFiG9ExmPTtPrBhf8s2+9ntA6s9j56Mf9Hp
j07Lc4fWU3uqRJkqrkdob9gw3l21uWpaM4obR6npVL1sG/f1WHb9JMZRVli3
9tI5lJuD9jsgjxTkVTcWQW9/FI+JUDxWREgapOWruvKMBW63hF6TEgquBQvL
A4H7WRw7XZfzPHw/0u4h+dcIfTS0fj86j2jKBwBYkMPtduK99npGG5VTpvoV
VImdJsva98fKbfnjddcQOx0NbKuzYu2ojKRxiRutFVuPlp9aHsn9bb2xk8af
3tW4virvnY4h7PUQyKg7m/SNX/LHaM5ytGcbK6djMftj/ham5Ykd9Ddt7XQc
50azZctrXdsZlqkbDCtPHiseiI57s9W29vKabe72ptryjPc3bVn9/v2O38dR
/Kjy7ulYAXXFTnp23e+uWCsq57XaUR6MjkfvPNprBex3UB4pytf+GNhLGgN7
vWCM8pA0sJR8Ndne+fNM6HZPhF2TEgrTbHF5IGQ/Q2Kn63Cel9mPZL4tvkY8
H2evzPAtAADgspjn3ZWTdkXtqNzAI1QAKKaxRZqdvD5wAADg8qoWO41Pjm00
2KjQxxsAbiq172TsPQAArq4qsZPGYp68T7fTO6TOCQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABw5bzxxhtnfz98+NCePn1aav4nT56kfq5l5f0b2T799NNS6aXf
P3v2bOqzjz76yHq9Xs1bBgAAANxcr7322tnfKq9nxUJp3nvvPXvhhRfsq6++
mvlOy1KZ3vFjNGQ7ODiwZrM5Ewtl+fzzz+3WrVupcdKbb75J/AQAAADUxI+d
3nnnneDY6csvv4zL7Hmxk78sfz3IpnT65JNPgn+v+EjHQMcuScfo5ZdfjuMr
AAAAANUp5qkaO6nMrvoRldvTyvpalvs8uR6kU3q98sorpX6v2CgrdpL79+9n
fgcAAAAgjGKaO3funP3bj3fyqF3Z66+/Hv8+L3ZycVhyPUjn0jSU4lH1a9Ix
UCybRsdG9YNpdYMAAAAAwqTVO4XETppH7cBc7KTye9JVip3Utk3bqn13/9cU
2ueoDkojpWVovZ/6MSmN3XxZ9Xru+zLtAAEAAABMq9Jmz5XZxdV5pNWVJGOn
utrsaVmhUxHFRp1OJ96HtGmR4yyoLk/rVBxXRNut9pJuP/NiJ9F3tNsDAAAA
qisbO6lcr/ojV75XXcY8sZPiBU2htEytPzlp2e5vtXv7vd/7vXjKG29d8cer
r756NjaD6tE0FqA+C4296uTSMmS96sPk1yO9+OKLue3yiJ0AAACA+ZSNnfT9
gwcP4t9oev/99+Pyvsryab/Ni520nEePHtlbb71Vakzuumj7NM6Cv15Xj3YR
fYNUxxWybsWaiu/cMdCkf+fN62JKAAAAANWUiZ1UL6NYI1nnk9VeLK+/k+pM
VN53cYtiJ8VSi+LauX33u9+d2eaLip1C4za/js1NqnfKm1dx02XubwYAAABc
dmViJ/0u2b4ur69NXuyktnRqH+diJ9U9hfSHcn2tQqesNnuub1Fy/ARtk/8O
X23fcDiM90PLUj2be9/vxx9/HE9+vZV+p/da6Xfuc83n6of0t+bXMv33BktI
mz3FV2lt7xQb5Y0HobTNGocPAAAAQLHQ2EkxQlrZ28VOt2/fninzlxkrQvVZ
jx8/Ltxe1X25MfBCpiwudvLjnrR4St8rFtL+afv0b22r6sgU+6jNoWsLp7hI
8+tzpZfq0tzn+p0bQ0/zKj5Lxk76d95YEW58iLS2jXljxUtafyf9W9sJAAAA
oFjRGOUqz6usr3L5vXv3pupx9LfiCY1RoO9VDve/D42dFJtcRJ2Itufdd9+N
/9Z2Ki5JG2td3yle8ud77733zr7z98vtr/7v4ihH+6k0zGqbqDRS27tk7KpY
SbGX2jgqhvO/13dK97t378bre/vtt2fmd/Gtv29u+5LxIwAAAIB0Re/GTbaR
82MBlb+TbeT8cntI7KTYS3GB5I2Jdx4UMygGUh2QtlV1WmmS8ZH+9mMk950b
71ztDxXPpL2rSTGY2980ae/GTaazXz+nNEseg+TyXVvAZH2Wjq0bYxAAAABA
vqrvxg3hLystdlJM4McBijkuo9DYSTGLa6cnilf0mYs39bdiKsVPyfZ6jtLL
X0YdNAZiVr2e0px6JwAAAKDYecdOfr2Lvx7Vl7i2fm66jO8fUlyhdnBqK+fG
htDfql9S/KP/az8UA7q4yMWEioH0/b/+1//6bBmieEXt7zSeRBrVA9Z1DFTX
pG1Kq9NTPdtljVcBAACAyyYZO6lPTt77ncpItvHz2wYqJkmO67DoNnshtJ1u
jDztiyZtqxszz/9O3Gf6vxtTz/+d6DP/30kasyJkzMEQqm9yfbOSFDddxjQH
AAAALit/TG7FTnWVp5P1SIt8f9NVp/hp3vTS2BCkOQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICr
6NmzZ/bo0aO5l/HgwYOatggAAAAALhfFPK+99pp9/vnnwfO89dZb9uabb858
/t5778XfAQAW59NPP7WHDx9e9GYAAHDtvf7669br9YJ//8knn9gLL7wQx1tp
9PmHH35Y09YBAPJ89dVX9vLLL2dekwEAl5vK1mq7pfoHtQPTdX1xTmx3rWHt
7cMFrvPqevLkSXzPLaPZbObGTjr+L7300oKPO84v749tb71hrc39mpd7WV3k
/l72tL5k2zce2W53xVqNJVtaatvWpb3sn2+6vfPOO/E1+dVXXz2H6+5lvKde
snwYu4zbdBldh3RK7sM57dPCr2+X8Vy/GXQNv3//flx+Vl3Giy++aLdv347b
hS0Gx74M1TmV6aOkY+ru07du3cq8Tyu+KlOXdfOc2F4nyqdbBzXOT+w0MW/a
ju2gv2Fbe6Natyp03Zc7rS/X9o0H69G1Zt12Ryd2Mh5HW7dIZfLZ+eWpL7/8
Mr7e6hmYrsvBsdPJrnWWVCbLnibH+TLeUy/yHM1yGbcpzbzXx3mXfVXSKc9s
7DS9T/Wk8fle3xZZhkAe9ZdRefrg4PmxUPlZ1/PF9YHh2IfSPVbHRnFuCHeP
Vhzs6p6y7tPqC5XWHwoOsdP5Oc+ywXm77Gl9ubbvqLdijZWeHV3I2i9HPtN1
VtdwtQMoFTtF2380OrTDw8m0v71iS42O9Q/dZyMbHY+Ne+p1c9Gx03VQdB2s
Jx3O9/pG7HRZpPWDceXzvDqKIuPhhrWaXRu6oHu0Yytnz8QmDreXrbG2a8fu
2G8NbLDdseVmwxrNtq1F/z6eWuqJHfS6ttpuWmOpYc32qm30D6JPn38fL2ez
b/2NVWtrOWv902UUzZufRooj7969ezYpvTQ9fvy4UvpU5Y5X6HFRfeLHH38c
/110n1bMrPrG7GXPk76n8270rdddteV2K4rllq2zPfSO8XzH72i4bZ3lVvT9
UlSeaFp7dcP2jp4vOyzv7Nru5pq1W82ZPDjcaCae8a7Yzqhovc+lz19X3k+a
vU8cDbZsfbVtrUYj3s7ltU3bG/lPxXLSX+0Qos80byM+bgPrd6Pt2Nifmr/q
McpK26TstE7ub/HxtKD9GtnOSsNWe9MHdDD1m5rT2nO8u2aN1qbtTz28HEfr
b1qzsxenbfG6ktsXsk+TbSx9zRwf2WArysctbUu0zpWu7ey7vYq2O9qOqeO8
vG2zd3x3TuzZ3tbaJG2iY7PeP7RxdLz2NlfPPuvqM2/OorTIPQdnjkUi3Y4H
1o32a2Xn+TrHh9F9rdGy9UHyyGXTNfyNN96I/75z5058TdYzriqO+2vRfkb3
2ZlvLuM9NeU8Cbx2xr8NPqcKzvncbaqa90Lub1ZwfmSn9x9n3XtqSJOwa2/F
62tIHqnlGlzlOjj977R0+Jff60TX343E9fdkcv1d30vk9ZzrW8Xjnsy3iy1D
uHk2bM3N01qOlvs8Txen+bzlsnQq02qMnadPn8b//uijj+J/h9Yp1EH1EWnj
Duh6Xu55WMLJnnUabXPh8clulAebUX47u1ceW39V9yGdpJNjr+Ot8+ZwNLLD
wWZ0T2ra+p5LxXEUa61E83etvz+yo+MjO4yOyVp0znZ23ZHUcnR8ouva3ii+
ro3H48B506mtm9ow6jmh4hD9rXYW+lzT4to1TmhMvNDjorpEPyZ2sZNfx+gr
jsvmSV83b9u6g6PJPecoKou0XR6Yc/lqyxKVYTq9fRsdH9vx0aHt7+3a5PJU
ZvtWbON0+8ajvnWafh5MeeaTu97Z9Mt6ZjR/3k+aLaeM9nasPziw0dGxHY32
o/vTsjWWt+z51mSl/0l0zY6ufe1o/QdH8T6qDKH23H78MN8xCnjmV3CMZ+/t
xcezeL+qxU7V0zp9nzeG3ncnA1vXfgxOAtdVJXaqluf2N9u21OrYzjCaJ0rP
wdaqNRvTZbHi57LunIjKUTvD+Jw46K9baykqD6yt2Xov+uxoZPu9TnSsVqzn
LTsk3dPPwfTrTvK4ngw3rB39busg+n58YNvLKi8Pg57BObrfuvFRdU/RNVd9
WKsoip0u1z01kZ6lrp1lzqm8c75gmyrnvZD7W8j5kX0NTrs+1pMmYW32yl9f
Q/LIJE0a7fWpa3Cz9DW4ynVwdp9m7+/RMYz2qTvw8k/aNdkze32b57gnLbYM
oXkazVXb2lO6HtnoYGi7/f2z2Kkwzecul83StdKNGa1n/bqeqg5D5VeVzxVH
ZdF1V/OHTmXL964M7bfZG+9Fsc/SmvWDH68dWe8sNhrbMIrTV7Z3onv+6mQZ
UWy1Hl1nNuNEnuSbSR3U2RrjGL65cXpXGCsPt2xz+gGAjXaiY7v6/DlYvJzO
buK5Rsi8s1zfr//yX/7L2WdlYpfzoHhNzypD1p8cw1x9pPLa+7njnhVbzZe+
acfYe64+7/JVr9lIr6sI377o+jP1LOn0+b7Lg2nXrbz1zsgut82f92d2urid
1nhyDj7fnIz0j5+DJO4f0dVxq+3d3+Y9RiH379z5M8pAecczZL8qxk6zmxeY
1jOidFmPtrk7PHvGfbKn9vRdG2Q1pJ9ZV4XYqUqei9OzYZ2pcmp0H1iZbm8Q
FjtN0ub5eg6jOGUpcTwPbDMqm3Z2c1IwJd0zz8GZY5F2XKNy0NZyHG9vd1Xm
i65dJQIn1/fUcf1Qqz4vzY+dLts9NZGepa6daYtLO6eKruEF21Q57wXc34LO
j6y8GNierFKaVI2dCpYbkkdOr8Hr/jV4rLQtHzsVp0WF2CmOe1pndfyic07n
/UHG9Xfm+jbXcU9aYBkifkbXsLWC+oUpyTSfu1w2S3GJyrWqZ9K1U+95cFx7
sCy6/v7e7/1e8FT2mZbWrZjBL3eP97dsdXXTBiXuE4db7dO8oPKI0vPI+muT
WHi8P2nTN7n/uzrH6XNXeVbnZvyTw21bzuof2946rctKX07YvNMUb6rNYnJM
BtcX7KJiJ+WXkDFtFXtr+/Vb185QMXrefVr5JP8Z6DzpmzHvwZa1Gy4mn2f5
R7bbaUXliJatrm/Ydn9gB8fjCts3nRum8mDqdStnvSnpl9lWee68nzRb7hsf
7trm2vLp+D9ualj3rFiRlf46Rqs2fety1+b9Emmcl1Yh9++8+bPa3uQcz5D9
qhg7VU7rFCeD7iRWOjmdL0qn1sbzWKp4XRVipyp5Lk7PlUR6Rqe40ty7F4bW
O02nzaSdwvJUm/7Z/QhJ99BzMDMmjsp2W8ta7mn9UyDdU3QN1vVX11j9v9Pp
xNfcqmP0FLfZuzz31Nn0LHPtLHNO5V3Di7apat4LuL8FnR9ZeTH9+lhPmlSP
nfKvrwF5pLZrcJXrYEjsNNnG5bMyymRblnP6Fs1c3+Y67kkLLENonpTt9hWn
+bzlsll+HxT14ffps7JjUNdF45MrbvJjuarU5ym+56tNeGsj7vs02l6J7/sH
Z32dJL2v22w5p+gZVUafuaB5p/34xz9OrYNx7fYuc72TGx9C92bth5tUx6l9
8p97+ly9U/Yz0HnSdzJvazN5b9mcjZ0qH7+xHR8MrL+zaeurUd6J5tlW2WaO
vBN2j8lYb8o6Qvt5ls/7SYn7wnjfNtVXY3Ngh2flk6F1m9F1bpC/LWGx05zH
KPS5aub8Gff2wnStct9O/qbGtE7d5WHcbiRuf3G8a2sN71ld0LpCYqeqx9NT
d+w0lTan5depDUrsR2C6h/e1zoidRj1bjcsKreiYhD+T1b1Dk2vvrUnPUPOu
yUUKY6dLdE/NqscLunbOcU5Vip3K5r2Q+1uZMvRMXkzJt7WlyRyx07z5q65r
cKXrYGDsdLp+taEax/FEcnunzRU7Fd4PFliGKIqdgtI8/uEc5bJ0bkyGZN1G
3nt4zpOefbkx2WoR11W2rNtds6ari9yPriXLXeuuJvu5FBz70/rD5LOHxArT
81/QvNM++OCD1PolxbS6//lc3Y7rv6Z+wHquqL91bN9+++2z36pdpu6X7l1a
Lq31b1c/5C8zORZFSL2X7sNpzzFVFxUSO2X3W54nfU/b8ybKTEe91USbvXqO
n7vfxdfFOfLO9D1mHF+38scr89Y7I23+uvJ+yrr8+8JRz1aS1/x4/JaA8nxI
27Z5j1FQ2hbMX/beHtRmL1rHWvI5o9ojL2XHTvOkdarxpF9WdA09jNuLeO3J
g9aVTJuAfapyPON22M2a2uxVKL+GpkXgOZha1h8fxutsdfdsvxfd15od2w1I
omTfU8ddcy8kdlrwPbW4bWvOtXOOc2pxsVPB/S3o/MjJi8l8W1uahFx7q1xf
A/JIUJu9gOtVpetgyr8z0iFup7e8ZT31zUoZw8GX1mav+nFPWmAZoqjNXlCa
J5Utl6Vz102/b5P7TP1qsqhcrHJ56BTSZs9d2/24qcw7hNJN8rfq8J4/G4zS
6/SdYc8f0YSd34dqB6m+ibv7p33TDmzY37LN/mHucsLmnaY+Tsk4Qve3tNhS
//bbuinN/XpDv02m0lTfu7/9PmWKvdzyFX+lxbA6Tnmxk/JPVp2ly1vJ2M9x
/bsKx9mrlL6n7aMbbVvbHsb9BkfqF9icjFs19/JHu7a1E5VnDkd2HC37aL9n
nVaU7/pHpbav6L47eVa0bQfHJ3ZycmLj3PXOmpm/tryflKwLmfR57fRHp9fS
Q+upLj2oPJ8YU+E4Y6yIuY5RWtokFBzj0vf2oP06bX+97Pq1jKPNWLf2Uk7s
NFdapxvvb0bbtWzL7UQ7maB1pYxlEbBPVfKc6xPd2x/F/YLnGSuifL1TSFqE
n4NpZau4vUR7w4Zxuqk9StOaUVkq79GpruN6DpbWlsNdk9Xf2Xe027W1Ti+z
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
Dg4uelMwJ7XVU9tJ2u0BAAAA9XLj6/lj4uFqU1tFYmEAAACgXhrPWuXskHcv
6Td3796N/+/+dlPad+7voum73/3upVzvRVN/MddvS+/HCuXGKqcNJgAAAFAf
Nzb5O++8U/hbxRv6rabbt2/bj3/845lJZXz3/+SkflVaj8akUD2XW5bal6mf
znmtVzFElfVeJDdGoP7vxikMHf9B+6z9u2nvtwIAAADOk2KK0Pc6Kc7wY4+Q
eCuL2goqFlDfnKL1X9R6L5LGLdT2KW4SxVEhdYOO5n311VfPaesAAACAm0fv
A1I5O7RNmKunclOZtmRpFMsoLtB7bfPGNrio9V6U5Luw1G4vNHbS/rh0uoz7
BgAAylEbfvc8Vaq0LfHf5eLTcv0yh9aF8qq8VzTtmCSP9UXQdvl5okp+0z5k
vSvITyeta95y/aKoXP3KK6/EZewybdf0rqa6270phitKN3+9aru3iPUuqt2b
i+XSKN8pncu8s8m1c2S8CAAArj6Vp/1ydpm2KOKeQaufe5KW68dL+ptnr+Wo
TKpj4r/btIhr+5VMay3rzp07F1qGS+YJ7VuZPKF8prJrVvsuP/8m39F6mVWt
n/Bjrrr61Sg+KIoNFr1erU95dxHXD60j6zqomKps20IXO12VOB4AAGSbN3ZS
O5uscoGW6/eHIHYqT+/7KdOnRPGRYousMriOk45ZnRTXdTqduF9IkWSeKBs7
ufcfZaWJn3/1m+seO4liYb8P0qLGdFvkei9D7KTr1+PHj+O/qzzLuKz9uQAA
QDi/fJn3vDVrXld2Comd9DexUzjVsSh9y7SHUmzhjklW/ZL65tdRjtP2uX7z
oc/U9buqsZPmdfuWFjsl869+c1We9bvx2FSXU+Uc0fH0+yAtqm5xUeu96NhJ
zwXcdbJsG1oXO80zrgYAALgc/PJlmdhJ5Wb9Nu+ZarKcTOxUjuIgTaGU3mo7
5d7HmRU3qH5gnnG/tFyVHbVtZftPzRM7qezsyupp6XIdYqey9b4+N9aEG9ct
q09Y3Rax3ouMndw4e/6kcywUsRMAANdH1TZ7Kru698RklQuuYn+n5Pbp3xex
zVrnSy+9VKp+SMdOMa0rq2XFDaobKDsmgWh5et+pjn1a/7YQVfs7ffDBB/F+
Fb0/1v9c69F7hq6COmInxSyuDa2msuOLXOb1FsVOystV82TauvzjoPZ5yfdU
VWmzp/E1AADA1Val3knlXz1rFlfmS4udrlq9k7bPvWsmOS16jECVBcv0L3fv
OpWQ59z6PnSsMC1b9Vkq+81bPq1S76SyuY6L/u/6BakcnZRW73RV+jspxps3
dhIXF7upzHhwl3m9WbGT8oT62rn8qbj+3r17QX3v8tY173HwufF00vIsAAC4
WpLly6IygyvDuDK05lW5wMVSvvOKnRTHaDvTJm1bcvLHxE6j8pfqU1Q+1zaq
TZv61ejf7jnzoto/OS4mDakb0m+0re63rqyWFTvpGKieIKQNkcqkWvYXX3xR
bgcyVBkrQmVivyzuxuNOqyPMa7On8r3WnzaF1COoPF4m35Wpf1GeqyN2Ehc7
u3QqU0dyWdebFjvpnFQbQb/9pmuvOk/MXHfsVFdcDAAALl7ZeieV8fyyr8pH
WeWCothJZR+VdVQ+1/xlnhW7tnT+lPd5HpXNFUv48VHWON+L4mKn0O33Y4u8
ukDH9VUrojTR71xfo3nf41O23knxTjJvufZhZWMnjZHmxotW/K3v9X8tL7Re
sc5853P5ra66CS3H74O0KOe13rTYyaWZH6O52ClJz0/SYlnlieTnxE4AACBL
mf5Obvxr/Ub1NG7Ki52S/Z38sQX8MX9d/dWinpE72p60sS6uSuzk+v/4x0Nl
1qKyWmjs5Gg7lEYaB07HrWoMVba/k77X/vj758ZgT9vGZH+nZJtHd1x9ig8X
9d7VLHXHTjo+/vjhi2q7eJ7r9fOKa7uZzONKv7R8r+1IG9ck7fO6Y6c6+rIB
AIDLoUy9k6vf8J+t//f//t8z21Cl1Tv5ZSlX3+SE9itK67udN+XFY26si2Sb
PG1b3e9BKiM0dlL6qW7GPyZqX5dXVnPHucq4Xy6GUju+KjFUmXonrUd5Llmf
4+qOkuNhp9U7JceKSMZOLu+H5DvlkTL5rsx43XXHTuLGh1v0e4XOY73u2Lq8
kla36uKpecezqzt2+vDDD4mdAAC4JkL7O6W1nRLXdyatHiCt3slfl8qiLmbR
/7UMVw+Vx42LEDrl9Vt376jyuXEa/Hd9Kv5y40io/Y9r66Vyov5WWyE/fbQf
Lr7Q5+7ZtmsjpNhMy9T/NSX325UN88Zm0H5ljdWd12ZK32uf5y1jujHRtT+h
Y0gk80RW7JTsw+Vz78dN1iml1TvlxU5l39Pj+mqFTmXeFeti+LrK12l9gRbh
vNabFTv5ecDVXesz/a001Tnmzk3/+YjOR53HymPJZyt1x04uzy06dtL+ln2H
AAAAyBdS76SyhcpDWf2RXD1Asu4m7d24WW14XIyxaK4M5m+7i22SXPs+Vx7R
Nqvs5ehvt3/6zsUIiov85Sk9FXdpOVpX2jgULv7JGmdP86quL61s5OZNi2dD
ll2WlhPaXy1krAjFSxo7LesdOq4smhYTJ+udkvnNL8e66TKou0+MYpdFjVG+
iPUmYyfXz9LlARezuXPZjaPvzkE9K3AxkutnKf45m1xXXc6jTjGEjsNF1DsC
AHCdFdU7+e9t8eMGUUzg+p64dnt+eTfZPitZ7+Tos6wYYhHcc2lt3+3btwvH
9naS8Z7+9vfPtTnTviXTVWU+lefynguntatTeVDbmDWembYpeUyS4wyWGcOv
bkX1Tq685yZ/25VW/r67fl5Olf5OZd5xep7cMamjfK24wY3pvkjnud5k7CR+
21E9m1DsrnPq7bffPjuuOjfc7xxX3+3ql4vGHJnXRb0b142bcdF9+QAAuE78
2CmrzFA0bljW9yH1TioPu3KOyjMhbfbOg8pRKr/mxROuXaGTFzvpb/f8XZ8l
09WNd51Xdlebr6xyT+gxSfuN1pk2pvwihNQ75e1b0Xeh9U7OoscmyVLXeAJ6
h3BWW8fzdN7rTYud3Od+e1Gdo8ljrnPItd/z6flF1vXuOsROon25qHMdAIDr
KNlmr852JUVjRbh6hHfffTee1E5rnndanjfXn8LJi538Mcbc2NiuvsVvq+f6
TKVxY5bVWb53/dNC2+upn1vo2Agh9Q1V3o0bqmiMcvdZVlvGi+TeLatjUzU9
FB8ov5QZo6IOi1hvVuwUwrXjSz6n0L/T4pnrFDspPizT7w4AAOTz29HVXWZI
q3fy26jp336/E39MhcvG73Pu0swf58HFR4qJ9FvXx0ltzvzYKRlHubEGs8Z5
U7mnzn732p4ybXjKjMsRMh51lXfjlpEXO7lj4h/Dy8Lvo1YlPRS3KO6qI35R
PU5oOX9R650ndlJ9mM7d5DOItL5O/rrq4vqD5o1Zcx4ULybHyAAAAPNJli/r
LDOk9Xe6qPclXWWKneood7mxEi+yLBU6zl4VyTKv6vPqGg9jEarGToo51K+t
rjEBFF+G5Dflp0Wtd57Yyae8rxgq2f42bV11cbHTovOinkNd1mdRAABcVSpf
+s9jk+MKzEPL9dujXVRfpusg5P1DRXRsL/oZdDJP1Jnfksu7amVHV8YuU4ej
dp0aX079jeqgetOQdoNuvXXFTSHrrSOvuDH1NeVdj+rKl9qfl1566cLGZgEA
AACuo6z3VuVRu7N523S69x27MQxDxh68qPXOS7G0nkMsMqbWvqk/GHXuAAAA
QD3Kjimg2EV1P+5dsG7MjuTf7t/6v+pa3LvHVPeiMd79Md9D6r0uar1XkRsD
5LK8RwwAAAC4Dtw4jnonWBH9Jhl71DH570G6TOu9qtR/a1F1agAAAMBN4d7V
GlJHofoclctDx0AsmrSsH//4x1PvSrpM672qXF3iosfYAwAAAK471b9UHacc
l4/GpmCcCAAAAKB+rk3cVRpbHekU/2qMiOvaHhEAAAC4SG5sAb0TuQz1lao6
/rzmm+c9wZo3+d7ZMvNeV+5YhvRfAwAAAFCO6ir0niONY1eG6jf892aF0O/V
pkzzzvP+MPXPKrturVfTdR5/zvV1uo7jBwIAAACXgWu3t6jxExS/1PHu5bJU
53SdYye11VMcDAAAAOB8KGZS7KT3xhZRe7v3339/rrZvVWOnedd9nWMndwzL
tr0EAAAAUI7eP3v79u3C8fYU8ygGuXXr1tlnyXHA3Ttp3aT31PqqxE6Km9w8
ihFE25G33uQ6rnPspP1XW0jG1wMAAADOl8bZCxlvT3GQJvUd8inmclORKrGT
+jdpfIhPP/10ql1acr1567+usZMbX0/xEwAAAIDzd+fOHbt7927h79SvpuxY
Db55+js9evQoriOr4rrGTh988AF1TgAAAMACqc+MyuB5dU9+vY9ri5dss5ec
knHWPLGT6rvcepNt9tIm33WMndSWUW0tQ/qqAQAAAKiP4o288cpdez3V/5R9
x5J+PxwO47J+p9OJ/y5LsV2Vdzspbnr33XfjdWu9Vd8PddnoeKm+EAAAAMDi
qW4mb7w2xU2qfypL8YpiGNVr6f9lx8tL9nUqw63Prfs6xE56j5NiyUWNLQ8A
AABgmvrNqEx+Wd6x+uDBg7jdn9r56W9MqN/ZRx99dNGbAQAAANxoiptU/6T+
NBdNMcK9e/eImzx6nzHvcgIAAAAuB7WRuwyxE2bN825iAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMDV8cYbb5z9/ejRI/vkk09Kzf/kyZPUz7Us/zt/PQAAYNann35qDx8+
vOjNAABkeO21187+1vU6KxZKozjrhRdesIODg5nvksvy1wMAAKZ99dVX9vLL
L3O/BIBLbJ7YSdd4xU5pdVXETgAAhHvnnXfie+qrr74ax1EAcDOd2O5aw9rb
hxe9Iamqxk66xufFTvr+fGKnse2tN6y1uV/T8i738Zn1S/vDb39sX/9Xzxaw
rr+3f/PwY/va+8cLWBeqS54TdZ8jUtd5ErZtw27TmhtVtj9l+eOR7XZXrNVY
sqWltm0t+FSvvi9lzHvM60q3q3Y9Les8zq2JL7/80prN5tl9NT92Or/tuBjX
Pd+cl+uWD3AxxzTk/Fv0dl3ea4KuzX5Mo3gnpL+TrvGar9frxdf49957b+Y3
/rKS65nP2A76G7a1N6ow74ntdaJjsXUw9dl5HZ9//50f2K/8+oeJ6Yf22385
z1IXGzv92d5/tt958vMFrOtqGW40o/Lk0uy0smNVcuZ8ZmOn6XMkLd+XdXVi
p+T1YTxYj8qk67Y7OrGT8Tj6xWJdldipfLot9np6fsqcH/Pcf/K9+eab8T1T
98qQ2Om8tuNiXMV8c14uR35EnS7omJ7sWietnOJNk3tGWOy02Lx2ua8JVWIn
d413/Z00X5Jf71Rv7DSPC4id1v/ChqNn9pmbfvpz+9kv51nqImMnZIljp5Vt
2z88tENvGh2dLLxsXlxuvkmx06yj3oo1Vnp2VMvSyrsasdOs4nS7ibHT+dC9
1I2ndOfOnfi+qmeUN8dVzDfn5eLzI+p2Ucf0xI5Gz8sn+9srttToWP+szDKy
0fHYFnX+jYcb1mp2begKSaMdWzmL3yYOt5etsbZrx26btgY22O7YcrNhjWbb
1qJ/T7eEOrGDXtdW201rLDWs2V61jf5B9Onz7+PlbPatv7FqbS1nrX+6jKJ5
01Wpd9L3ip3c33mx03nVOyXLCEfDbesst6J9j+LoRtPaqxu2l3LDn60rWLGd
UV3HZ1YcO337v9nPZr45jX/e/2/2B9/5xL5+72P7Vfe7X/6d/fH3/tR+7Tc+
tl/5xsf2tfU/t+989ouUef/a/s37p/Pe+3f2zX/1s8R6fml/9uGf2z/6zR/Y
r/76x/YPfvMT+6d7X9izmeX8lf3h+39iX/+NH8TLWf7e33jLSbbZ+7l9Z/1j
+0cf/t3Umv74X0TL/87z1Hr6n/7CvvlbP4zW+2G0Dz+wr3f/s/2b2UQI3IYy
aZJMz9PPvxel1ff+5DStBvatvWf2i1/+3Eu/gf1jfZa2iRnivHR2/mVQm6fo
XG01lKeWrbM9sH634ZWjR7az0rDV3nRmHUz9Jsrfgy1bX23Hy1H+Xl7btL2R
H6Hlt9lLy/f/8nsda7Q2bH8q0DuJ1h2V89f3UvJ14HkyPrLBVvR9S9sabcNK
13b2/V9ktA3LTafwc3x6+WMbRH9P7fvytqXdHYrT2F1/d213c83arWbG/hfv
y+wmF6VZyLqn0/V4t+zxLZ9ui72euuXu2d7W2uT+F6Xvev/QxlGa722unn3W
1WfenEXHNnc/Zu63ifx7PLBudNxWdp6vc3wYlQcaLVsfhLd1fv311+3zzz+P
/75//358X81vP1/9PhiSJrOyyx/1nDuzZbfj4aatRL/rZu1EnAx1nDuT393Y
/Bichmllz2ml89XBprXS6kOCy7Y521a4X0nX6JhmOO6vRdsXxS6Z+5533Z7v
mjNZzZ51Gm1zIeSJ7lPN6J50dn85tv6q9nV0tk3aDt1HD0cjOxxE14RoPet7
LgeMo1hrJZq/a/39kR0dH9lhtE1r0Xne2XVbruVo+6LjtjeK03A8HgfOm65K
7KTfu2u8/q9rvJ6TJeXFTronqG9V2lRc75U4fqqTjPJQp7cfxc/HdnwUxdZ7
u5Z+imQ/J53/+MzKj50UV0Rl9ic/j8vsv/jl35tileH7/85+5Tf+1L7zn35u
T3/2LIoZPrF/8I0f2Xd+6s8blfe/EcUYUbz0ky9+YT+JYpXlKAb4h3/k2tb9
vX32r35k/+C3/tz+4LNoOV/8nX2m30SxyTcHv0hsw4/sn/7p30224af/zb55
7wf2rSe/PFtO6djpb//KvvmNH9o3PzyOt+1n0T4Mn/yVDb9IS6GwbQhLk7T0
PE2rKDb65h/9LK7z+7O9/2hf+/Uo7b79J/atD6PPfvZzG374p/a1aHm//9O0
bUxXHDuNbX+zbY32uvUPjuJ8qWtvs7FUOnYa7e1Yf3Bgo6NjOxrtR2XxZWss
b9mBt678/k4p+f4kuh5H16zuwCsdnJ5LG8O0e13YeaJ9Xmp1bGcYnSfRPg+2
tM+6T2Rv62SeKJ32T9NpY2U6nUqd4ynX94B6p+I0dtffFdsYHE2uv6O+dZpp
+5+zLynbW5xmYeuevi6WPb5V0m2R11O33Cge3RnGyz3or0flruj+vrZm673o
s6OR7fc6UfllxXpes5KQY5u+H+n322Q6nQw3rB39busg+n58YNvL0bI2hoXP
Lh21ffefP7rxIvLvhfPcB0PSJCkrPeo6d6Zjp6O9blSWXLbNYV4Zpr5z5+bm
xzJpOHvsk8rnq8k2aHnxFB2btajcvhrHCfOVi4v3K+m6HNNsRbFT0XV7nmvO
xJH1zmKjcdwmY2V7x9abq9bXfFFstR7FVpsHz9NnUgflTJ7rNTdO92Cs+1zL
NqcfEtpoJ7p3rT6Pv+PldHan0yto3nRlYydd49WuQLGPpuFwGF/j0+qU8mKn
p0+fxu9/0rzuPVCa9Hdx/VTi+KnOL/d88GXn3/mPz6zU/k7r/9Wenpb1f/V3
/8qmWt797V9HccfH9s0nfqO+v7PfX//Qi19O44SulvPc0w8/sV/9jYPJOfHL
v7F/fO+H9tuf/f3U9vzkj35kv9p1sdxpXPHwr71t+PsoDvpBFAf97OzfpWOn
n/7E/uFUXJMnYBtKpMlMenqfP49fn9k//60PE+v8wn77N6N1DMIbU2b1d3pe
3tfzlei645ddo2veZrt87DRjPLm+PM/GFWKn+N7SsmbneR2ErquN9qYdpN4W
A86TeJ8b1tnzr1DRtXJlKXvbXDr584z3bbPlpVOpc7xa7DS7mGQan95bpups
xpN6nKn9L9iXpKA0C1h3akxa5vjWGTudx/X0+f3v+feHURliKZEuOsei9NzN
KVWkHNvM/Ujeb1PbRkZpvRWVldpd2+624zTeDyzUPHv2zG7fvh3fK3UP1P87
nU58b9T9Nmcn5rgPpi0umSZJWekRsqyQ/Ouee+/bYT8qm0Zlqe2iRKzr3LnJ
+TE4DQOPfeG+5f32wLai+2ErSr9JvdEc5eKg/Uq6Jsc0R37sVHDdrumac7jV
Pt3n6Hi3lUZH1l+b3DfH+5M2fYOx26bZdo66r+l4xD853LblrL5c7a3Tuqz0
5YTNm65M7KS21xr/R3VM/lQldhLdJ9LaJTx48CBniyWZr45st9OK8kPLVtc3
bLs/sIPjrDrinPb5cx+fWWn9nX4Sd3ZybckSlTGjz+zrqv9IVFT92fs/nIl5
vvZ+Yt6/1Lx/Yn+gj0d/Yb82M0bF6fSbn9ln3nK+/r3paGOodUVxxaR2qkqb
vb+zP/zdH9qvfOOH9o8e/mf753t/Y3/2xXQM91zANpRIk5n0TP38F/YH3Y/t
16b6i6XvV570/k6u7bDpAmHtxqpNh0XuWlQudhof7trm2vLpeGdualh3+Hy5
5WOnyTYuN9Ymz3tOt2U5s71zyHmifV5J7LOaZbS8e11i2zLSaW8qncqc49Vi
p+I0dvs/nT6z+1+0LwlBaRaw7rT7banjW2+9U/3X07TlTtp3TO/T7DkVcmxD
9yOzX5nKfcta7umz4UBqn6dJ90s3vfXWW5lt4bO3o8w5EpImSVnpUdO542Kc
VhTvR+fQzmFi24dda3rLjsvEdZ07Nzk/lkrD4gCofL5yjqP9iNYZ3VPPNneu
cnHIfiVdk2Oao7jNXs51e85rztluDDesqfhI7Q5bG3Hfp9H2irWiGO3grK+T
t03bRffcovgtoy9X0LzpysROur4nv3Pv8UsbE6hs7KT7hTx+/Lhgq9Nj8uOD
gfV3Nm19NUrXKD22U/NWeN/m8sdnVmF/p+R4D7XFTpPl5Nf9pG9D+djp7+2P
H073d9JnP/vLv7E/+KMD+1Y3Wl60Lf/8L9Pip4BtKBM7zYyfkfb5aez0R/7Y
gRVjp7w2e5Vjp8Rv4nqLhq1sDuzw7Lo0tG4zui4Pns9TKXY6Xb/qz8e6T81s
ry/8PKkSO/WnOw0l0mnyWdg5XiEGCErj0P0P2RdPmbJL3rpTr4tljm/NsVPt
19O05Z6Wa6YWlDinAo9t+JgXGeWaUc9W43JTy9b3wvog6J3yac8d8/oR529H
4DkSlCZJGelR17lz+ptWZ8M68fIS7ZHGx3Z0NLLRSNORxauq69y5yflxjjSc
USlfTfbhUHVJrXXb9bejhnJxpdjpqh/THIWxU+l7TOh92V/VXtzWr9tds6ar
c9vftPZy17pn7fkCt+lkYOvN2efPIfsWNm86xTR+X6Ws2OnTTz/NbEuXNZ5q
aOyk9gnvvvuu3bp1K3Cri8aTmuT19O/Hcf6d/q6u4zOrdOz0t39t3/rGD+Zv
s/e3f2PfulcUC1SJnaK449vJOpto+7ofJmIn3yRWSX9HVMA2BKfJJYudgtrs
RXl1LflMS+2Bvd8c9WwlWeaNx6YpEzul5fvTLVA7ruUt66lvVm7/rZDzRO0U
mhXa7LVsY6pdxqSdRHa7xYJzvGwMEJTGYftfel+C0qzqfa3M8a0SOy3yelqx
XBN6/gTuR2o6jw/jdba6e7bfi8oDzc50GTCF2urdvXs3vrcmudhJ40dkm+M+
GJQmSRnpUde54/0m7o+ksujWfn4bsbrOnZucH+dIwxmV8pWGQuhO+vIkG6HN
VS4O2a+QZV3BY5qj/thpauk592XfpIyjernn8Wd0rE/fI7iZaOtbtE1x3K3+
jLv7p/3NonJwf8s2+4e5ywmbN11R7KR+SRq/QXGNrvP6t6Nrv+qI1FZb13n9
7d8HisYod7GT6++k+qswyTaXu7a1E+Wnw5EdH0f7vt+Lr7ur/fSMNXnusG0H
xyd2cqLxpOs6PrNKx07euAi//9nP43EWyo0V8exsOZ+pb5PGYBgc209+9gt7
+tMv7N/vfWa/vfcsdxvyY6fTPlO/Fe37306+/8ngP9rXf92LnX76V/Y7f/TX
NhxF2x9t29PP/qt98zeiuGQvLS4J24bQNKkzdjra7dpap5fZHjNzjPLR8VlZ
YLhRNFbEadvtZdd2eRxl53Vr+/2mxpM+/53+6PQ+f2g91ZOXip3S8v0p3WOa
umYl+unMCDtPXP/c3v4o3ufisSIm6dTUtrk0UH8HPw1KneNV6p1C0jis/Fe4
LynbW5xmc9zXgo9vtbaOi7ueVn0mHHJsw/cj7VyL25m0N2wYJ6/asTStGcWp
WY/LdW90981kG3X1cbp37178nX6j+69/383cjjLnSGCaTMuqd6rv3PF/ExY/
1Xfu3Nz8WD0NZxdVIV+pLiWaZ03zjJ+PGeG2bZ5ycfF+JV3dY1pUXjnbmzpj
p5Jlb9/hdjvxvnU9R47uU2d9nUK3afK7g/6mrZ2O99dotmx5rWs7Z+PM5OXf
onnTFbXZUzzkt8P2+ya5sfL87/32dmXb7CmGCpM4fkcD2+qsWDs6ZvG+t1Zs
fXuY84x5zzZWTsdU9MeJnPv4zCofO9n0eNy/rvG4/2PmGOV/qDG2v/Gh/crp
uN5PE+v4s70DWz4dK/xX7/3Qfu3bf27f+U+/mF5OydjJfvnM/uBf/Mi+du8H
9rXfHNg3o/X+vt9m72d/Y7/zuz+yr0fbH6/3N35k34pivOlty0+H6W0okSY1
xk6jneXoPN6wrBJv5rtxo3med0Ny41UvZY9XPT6MPluxVnTtbbWj32wNrJdo
43WssYXa0bWy1bb28ppt7vb+//buGI1gGArg+F3co5tL2GzWDjZ36GpzAhdw
AiewOYHNZos+vhJpyEsa/ar+v+/zGSiaNJpX8V7kmj3jOe6f20qum4ldc8FL
OU7svLATyQu70Ocor8dUUbfBbLU1a7sNosZ4WgwQbmPt/gf2xfuRQ23W5Zqg
tn8Tc2z09n2aOK8xmr7V74fbTpf9ykwlL5R9zfxUx6syh/BM0uSaY1MbsbnZ
ZB2f+7hs09btPKhqkxfv5x95xk77Oar4KcvYuT/vH4/HLm3oE3tcSY5q73nU
zlGeOi8O7lfr0/xsn4bmK4/NcsZOsXPvkbFjGomFPteU0HNjLW2uCGDM+qmT
GuO+brCovw/T/n2KYaN/AQDIxf09qK/YSdYglGV5i53k3rfmGxijIcVOl/PJ
HHfL5FwzGDb6FwCA/L4VO7mv5cZOTU0nuRE74V8MJ3aS2gpSl68w882B3yRG
h/4FAOAbpNZtQ/5z9LmWuV5VVS+xk/0+AAAAAAAAAAAAAAAAAACEXAGZf8hT

     "], {{0, 344}, {847, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{836., Automatic},
   ImageSizeRaw->{847, 344},
   PlotRange->{{0, 847}, {0, 344}}]}]], "Text",
 CellChangeTimes->{
  3.774355619444229*^9, {3.774357106185348*^9, 
   3.7743571175841637`*^9}},ExpressionUUID->"98671d82-36d8-4748-9dcd-\
91367c7f2e50"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"normalizeWeights", "[", 
     RowBox[{"inputshape_", ",", " ", "constant_"}], "]"}], " ", ":=", " ", 
    RowBox[{"NetGraph", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"<|", "\n", "\t\t", 
       RowBox[{
        RowBox[{"\"\<square\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ElementwiseLayer", "[", 
          RowBox[{
           RowBox[{"#", "^", "2"}], "&"}], "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<sum\>\"", " ", "\[Rule]", " ", 
         RowBox[{"SummationLayer", "[", "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<replicate\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ReplicateLayer", "[", "inputshape", "]"}]}], ",", "\n", 
        "\t\t", 
        RowBox[{"\"\<divide\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ThreadingLayer", "[", 
          RowBox[{
           RowBox[{"#1", "*", 
            RowBox[{"constant", "/", 
             RowBox[{"Sqrt", "[", "#2", "]"}]}]}], "&"}], "]"}]}]}], "\n", 
       "\t", "|>"}], ",", "\n", "\t", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", " ", 
          RowBox[{
           RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
           " ", 
           RowBox[{"\"\<square\>\"", " ", "\[Rule]", " ", 
            RowBox[{
            "\"\<sum\>\"", " ", "\[Rule]", " ", "\"\<replicate\>\""}]}]}]}], 
         "}"}], " ", "\[Rule]", " ", "\"\<divide\>\""}], "}"}], ",", "\n", 
      "\t", 
      RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", "inputshape"}]}], "\n", 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"constrainedLinearLayer", "[", 
     RowBox[{"inputsize_", ",", " ", "outputsize_", ",", " ", 
      RowBox[{"constant_:", "0.5"}]}], "]"}], " ", ":=", " ", 
    RowBox[{"NetGraph", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"<|", "\n", "\t\t", 
       RowBox[{
        RowBox[{"\"\<Weights&Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"ConstantArrayLayer", "[", 
          RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"inputsize", "+", "1"}], ",", "outputsize"}], "}"}]}], 
          "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<normalize\>\"", " ", "\[Rule]", " ", 
         RowBox[{"normalizeWeights", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"inputsize", "+", "1"}], ",", "outputsize"}], "}"}], ",",
            " ", "constant"}], "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<Weights\>\"", " ", "\[Rule]", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", ";;", "inputsize"}], ",", " ", "All"}], "}"}], 
          "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"PartLayer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "All"}], "}"}], "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<dot\>\"", " ", "\[Rule]", " ", 
         RowBox[{"DotLayer", "[", "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"\"\<plus\>\"", " ", "\[Rule]", " ", "Plus"}]}], "\n", "\t", 
       "|>"}], ",", "\n", "\t", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Weights&Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"\"\<normalize\>\"", " ", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<Weights\>\"", ",", " ", "\"\<Biases\>\""}], "}"}]}]}],
         ",", "\n", "\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", " ", 
              "\"\<Weights\>\""}], "}"}], " ", "\[Rule]", " ", 
            "\"\<dot\>\""}], ",", " ", "\"\<Biases\>\""}], "}"}], " ", 
         "\[Rule]", " ", "\"\<plus\>\""}]}], "}"}], ",", "\n", "\t", 
      RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", "inputsize"}]}], "\n", 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"constrainedLinearLayer", "[", 
  RowBox[{"2", ",", "2"}], "]"}]}], "Code",
 CellChangeTimes->{{3.774355684469912*^9, 3.774355760855195*^9}, {
   3.77435579647886*^9, 3.774355829007532*^9}, {3.7743558841119423`*^9, 
   3.774356074408409*^9}, {3.774356145979809*^9, 3.774356154305274*^9}, {
   3.7743562088716927`*^9, 3.774356218947102*^9}, {3.774356295903295*^9, 
   3.774356313803196*^9}, {3.7743563973417377`*^9, 3.774356404588377*^9}, {
   3.774356440222047*^9, 3.774356526828714*^9}, {3.774356595902669*^9, 
   3.7743566203254843`*^9}, {3.774357215081335*^9, 3.7743572936578627`*^9}, {
   3.774357327194303*^9, 3.774357409148704*^9}, {3.774360429690557*^9, 
   3.774360429895699*^9}, {3.774360520125143*^9, 3.7743606223190603`*^9}, {
   3.7743606563954144`*^9, 3.7743606631195602`*^9}, {3.774360694531502*^9, 
   3.774360720671668*^9}, 3.7743607976076736`*^9, {3.774372596228669*^9, 
   3.774372597071803*^9}, {3.7743760608026114`*^9, 3.774376069169498*^9}, {
   3.774380063863546*^9, 3.774380075215539*^9}, {3.7743810016720247`*^9, 
   3.774381009899993*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"6e3d5d87-15b2-4853-bd86-59dcefef4488"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 2.}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     2.}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEcB6AMh5DzN46+ns8O52/ykKzYZYrgi+ccFMs5
yHaAEcpvs7y4kMGZDS7/ZwNIAyucX3tJHYgQfLZ5eWf5u1ng/BnCslwGT5jh
fCNjEEDwL4K01zLB+YUyx4GIEc4XEAQBRrh7NrBGAxEDXH7eF8/5Xzz/74fx
79wFgb9wvhTIuMI/cH4U2IDfcP6MmSDwE84/Cwoe8x9w/qfDSqkPXn6D89lA
1m/4uh/mHoh/v8Dlv/TE7vlX+RnOBwdP7Sc4fy5I+ZSPcH5Eol+JxoEPcP5/
MHgP5wMA8Q17ag==
                    "]], 
                    
                    LineBox[{{-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.7777777777777775`, 2.}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777776, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 2.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.8369701987210297`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[CenterDot]\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-2., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dot\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dot", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"CA\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Weights&Biases\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Weights&Biases", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{3, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-4., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-4., 
                    2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"normalize\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["normalize", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[4], 
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 2.}], 
                    Offset[{10, 10}, {-3., 2.}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 2.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Biases\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PartLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"1", ";;", 
                    RowBox[{"-", "1"}]}]}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Biases", Bold], 
                    Style[
                    HoldForm[
                    PartLayer[{1, 
                    Span[1, -1]}, "Input" -> {3, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PartLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", ";;", "2"}], ",", 
                    RowBox[{"1", ";;", 
                    RowBox[{"-", "1"}]}]}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    HoldForm[
                    PartLayer[{
                    Span[1, 2], 
                    Span[1, -1]}, "Input" -> {3, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 2.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999999999999, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.2246467991473532`*^-16, 2.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., 1.8369701987210297`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dot\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox["\"Weights&B..\"", "\"Weights&Biases\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "Weights&Biases", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"normalize\"", TraditionalForm], 
                    Offset[{0, -15}, {-4., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Biases\"", TraditionalForm], 
                    Offset[{0, -13}, {-3., 2.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"plus\"", TraditionalForm], 
                    Offset[{0, -13}, {-0.9999999999999999, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -7}, {1.2246467991473532`*^-16, 2.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-4.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-3.4, 2.}], {
                    0., -0.17}, Automatic, {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-3.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    1.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-1.7777777777777775`, 2.}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 2.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}, {-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}, {-3., 2.}, {-3., 
                    1.0000000000000002`}, {-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {331., 156.00000000000003`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28.000000000000007`, 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "dot"], 
                    NeuralNetworks`NetPath["Nodes", "Weights&Biases"], 
                    NeuralNetworks`NetPath["Nodes", "normalize"], 
                    NeuralNetworks`NetPath["Nodes", "Biases"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Weights&Biases" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association[
                    "Dimensions" -> {3, 2}, "$ArrayDimensions" -> {3, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]]], 
                    "normalize" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "dot" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Biases" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "plus" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.774381280669306*^9, 3.7746375055404882`*^9, 
  3.7746393339737997`*^9, 3.774642794343439*^9, 3.774642911352525*^9, 
  3.7746487932742863`*^9, 3.774690665357256*^9, 3.774690701700093*^9, 
  3.774690732799941*^9, 3.774691716066818*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"6e1b959f-9306-4a85-80fa-e4cb47385395"]
}, Open  ]],

Cell["This helps to invert, but do not train well (underfit).", "Text",
 CellChangeTimes->{{3.774381019904428*^9, 
  3.774381039768523*^9}},ExpressionUUID->"85f22e9b-a0d9-4472-822a-\
3b3507d5968f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inversion of ResNet", "Subsection",
 CellChangeTimes->{{3.7743496365613813`*^9, 3.774349644569553*^9}, {
  3.7743519499663973`*^9, 3.774351954926311*^9}, {3.7743812437109013`*^9, 
  3.774381246371936*^9}},ExpressionUUID->"c9883fe2-2bb7-4987-b0cc-\
5be716d0bab2"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
LX9ra9QLF7V1hbK6/aGt6/vnQ0XYG46H/94fKLOwh7dhERvVsOt8V9s2w33v
CvNJ7KXzZbRiv8uiPUQe3ZvWdsiXpb3UO3nKy9rEHg1rvd+VHfeF12YurNUJ
qI28uQvZB22qitmWz4OcZ/NTMp6Z597Mw8zDaep63Q7vLDv3lee9/NyO4711
Zv2a99rijnA+rLw/u6x/VZbWT34SS+snxK9LhchysPjqznsR6wEKrFQ2FPyd
JFUPb+b8mzxk/eLy+f0TgvhsmgxOtzZy5Hu1v/VYawm5VnY0Y6q/vzDy3RMF
5/MZxnQh+Xk0CVw7QtXK9wptfkbE0lzd0sCeIH4A/ByKMAyHz835Dd+ZBkXk
w7Ft2I4LP8p+zhmNxGPUmThrx4tfXL6bElmSIM3n61oEQRAEQRAEQRAEQRAE
QRAEQRAEQXxLmgrFwjsfAy/QJm5r8S7Kj19z3M3bD4bFR+jT724saFAVGdKs
QPXSje4fqHvdvEiD/FXhftd4EL8oDfLQEu9lqpPDIwakNrEyOhfl/c8sYxc6
fx915/zu781+3n40Up8+RRZZOB3OWJN2botIaHClrJ3PQ0Nq2b/g1aK2TOS7
1/yMpJd3LAZd7+xbhPtd40H82hRCy2WrzevPhnlenWdln5/P+6P9CWc/bz+M
u/Xp+RlP47OBuH5cgvxF3V6hq/Yh/gRv1CC/Qyv9JtxP0FdfjAdBfDTyLM9N
fxIbT/Yn/DjdX8Of7OXtx0VF6tPvnlPLzyP8qPYd/PjcD/Qnb4CfHfeojvlb
7nmUj3gGQTxO3+blrHuTIPC4TvJMi3vFn0gd6mBFh3qqDz0/d3DiT1i/ip9H
Hwh92nL3fbGmypEVj669jHWxC6mL7YadZsGthnPdaziHvVaO1GUPuO56y88Z
5brsvtAjkDqpnS779XrOft5K+P2dRrXQpm+Hvwtd62LQtS7WU71mj6k+vS/1
6Zfeu85ZGix+nQrLD2T6fWY/Fi+vO8hS2lT+FqX8vMBOtzscn9O3lp5RPIWO
doQ0uMefyPyV+ZCxe7mmeYh0YYC1VSanut5b5aHLt4mOebiqQT4Od/2eN9h4
ohm+puE+PGNJt3y7ju7nwZpG+g187WZUJ5syR5rm3/xsQuJxOp0zzYBpu/A9
W+qlnx308pu3/qTTobZ7HWp+vjLXoQ4n+tCGl3VncfLz0hUYowPsJv6kyeDx
M3v3JlWaHIFlsratQFWy9tkxoOnBiqbBlKsutsru94KrLvag63Or4VyMdHAm
uuy+1GWPuC67Yox02fk5pWPt1P28FWf7cY3qVGpUF/5lojsurr8Mutb64lkf
O/YY69Pzc7fbtTMtW3GuyOHANdEbNE2NimuZKyPNAnT61eL8+1bMozmGOzoX
ZC098leuo32xu7OphX753voJP+O1ywfNZD6cn/HswVSPIu8HTfDtPBh0veU5
4vvlATc65ktRnIe7fM9bbDzVDOdnxitapxm18IybeOzW0TvrxFUjvWVpMOEv
DbVb5uNZP4o/T3UTpGGIJK9QVzEszR6VdeLn07V5Iz3RNneFzonWHYh940+E
vstMG0JoBRxlXeD+Y3K2fI2U60MnC/6kTlmfLbhjfp7rLLD+9cgncV0U5eas
6jVu12ykroPVaQbcatoIHZzR+uatLjvXg1Fgp9deGSKuHXHV5dnPW6FRfRlp
VBe+0DaT7Xd31ubevOCePTg3el0ruXQz/7Q0Z1ezdCqsfXdZf9pibczIAlvp
EboXS7pCe+OTXoNmdIYa16A5jux1Rx5U4WXS3m6XhyHte+ecTsNduOctNuaa
4drlqmGL3BEaSrKrshyvSTzuKRN7edBppPv9wJONVbKFM/KbJBB+XWhXnqzR
WZk8nupL9nIQX5Wl9qLTV+y0Luf+pNehnmqBSQ0crhv6v3f1oTt/wrUAzsua
RXOa2IRymvqoUFcGvcddurozite07XyDPxG6llzvbu0Z+3krNKq1Pd3xbdW1
PXuIuDzVn/DgO00ka+rPt9LT62hno+tvnsfPr8qy4VPUuPqTiX6ezJvDRbaF
9+QBf/6NP1ktD0Pa9/zJNNzbe95nYzknFbq6HF9W6/Eax+OuMnFHnVjTSB8j
de/5/jIFl2lngZWRLQ084uex1F5I/b41fyK0KA9svD5pyhuh68br93/lusuX
7T618CdsjM91YI6877Yzf841SJWxflqbCB3Ue3xRH8bX8CfTvJVa2nu649v+
ZM8ewg7P9ict3wfG2xo+hzb8eSs9QmdTsTf9CdcWuVwuw8dJufLDgj+B3B/b
9a3vyYPP8idvtfFEM1yMT+73J3eViXvyoK0QO71Guot0tfzkcM5sLDIqJqIP
eLlvPpr4KSy1F1x797g633XVME/bm3t4GZf60PO2fqwPPZ7vimGe2H12ujGe
kWFP+j4Zq1/nQRd1n8f9idCPfro/meZtr1E97cPx/QHZSHd825/s2UPwVH/S
Ivcs+Hku9GOPI42OrfT8zwUd7fv2dy2PTyL9eI3XPXnwmeOTh23M9f/GmuEP
+pO7ysReHnD9uy7OTR5IjfQ1jWg+x32yMTyO+S6zH69UKMpNAxM/hr5sjtoL
PjetDnNLvdb9pJ4JHepBY1rMjZ+7OtPpQx/H+tCBA2+0MDdej2+YbzgfFOjh
mkYQa7+c88ifVGL+frp2sqOr3Y1xxnVH+klWd6SA7IKG80nWz+4hS/5EE+sn
wzOW/MlW3vYa1crFG2lUO7DFHHcXp1Wd954de3CEPv3+eO76PshoDny+T4GP
IUwvl0qCYn+xMszJb6WnX/MY62h70sdsS4osrJ9wzd3TWPd8Pw/qcDwHtFce
RGKkjrk16Jgvxm4S7sI9b7Bxrxnu9JrhAdfH7v3Lcrym8bijTOzlwZJG+kpZ
5L5MGc9xd/MHvP/S5iGihXUX4ifSIPcNqKoOx+caJj4ch5X7qvv1qk18gjHW
JhY61Cp0O0AUh/BsB+FoM6HQhz4NusvWVR+6QZl0+0pOBny+h7FhZV9oLkv9
9MV9mU0G33ERxgmSiL+zf5yunezoag+62OyZYp8rj3+fLjk3PNdw5ntZldMF
VpDjD/lYl53HuUTiXsQ8wNlk13Jd9mxIV5BWYi/PVt52EUcV29B6Le3jmcVn
rjvOnhnt6I5v2GPQp2fjIpvr0694XJYnvrjuBN3j+39r5BGLG9fPVvn+u7rL
RxVOP/HBnmufexsXYh59OT2SqY62zWx6kXnsxVjvwnZr1qoBm+VfwPLRNi0E
83Rs5YHQ9R40tv/Hf9svD5yxjnmyuD95Gi5Pw+09b7BxnbB8PUrNcJ1rhgfC
FyuaJdrm+TOW4rFbR/fqhNBI1+FGg0b6ml9I7dN0/oD5M1/nGvQJe3bx889V
Im7gGu1r8ugbN23oUO9oWL+V1bUTrqvtvG/9b1ez/K3B7uXtk7SuP01Tfs5W
enZ0tG8Y5rvadqajvRj8c/PgXh3z/XsetfEsre1UM/zueL03P3ieVzv1mOuZ
3964OqYjiM+Cv2cXdO/Tie+JhdPCOp/Q1Y6oL/TzWF6PJwiCeAy5rqe6/B0O
qatt6jbi6vZK3vcjfiJyr8TRiKmvQBDE+xBnrCeI4xhptn8eC/GTaFBEPhzb
hu248KNs5RxLgiAIgiAIgiAIgiCIb0idIw4jMe8VpWvvqhAEQRDEFiUCw76e
NVdHFszhcFmCIAjiO/ORetX8XN7x+7eljwudDUQQBPFl4FpLrnHGkb+3q1xg
+9G6Zs6Ej9Wr5ucKTc56EOdt2KA3EgiCIL4Q4lzDgzgP6yE+UDeba9hzfzL6
A/TrGXwEQRDEl4D39Zk/OTnZu4J5paZ1y/UF5+cBnh2QVA9BEMQXYtGf7GtL
36Ob3RQsjCC9b52jrVFmGYruzKKW68RnpTz3isXRuIzO9s1daNbeubst1qRt
3w/X/c5v36173QMJgiC+Pgv+ZE9b+j7dbKklxLVQts8j5w9MEYYJiqpEZOlw
mE8KkgKZfxHaKK3Qw7bhRDnKMkNgO9jb3iV08Y5TzY+Wn1t312fLL1RCIzvj
2uqqO4yR2gTWSZ9pGBEEQfxCLI5P9vW1d3WzBXecB8ueEAfxcEa4q0IxYnH2
ec58iDs6C7KtSxRFhXuOLW3LGL6fjMZGJWLXgePc8fHTdX3TrNNz4Nofp5He
INf4Ur0HNL4IgiB+GFv+ZEO/bk+X7oEIoLr6HK6He4S+JyT4iUi9bO5OVJzs
7DoWm38nCIL45fh0fzJ+bArrpML78npuBVyVa/323oOfqa7AjGmyiyCIX5iv
5E9yF+fxOy11gee9Mlkgsi1Y1h0fN9neQ8D3WCvmde6PZc5V35QgCOKXZfH9
k3197V3dbHQaV/5229xkHnTdF+sOfM7oqPfPbJGFIYo3TiA1mQ/bfvv9m/C1
E9W9rpU0iUlrJwRB/NJUGWvvTXX0fnws3o/f05b+v3fpZvPhxpn5HH2z317H
FjQjQJKECJMUgW0jTFPEzJck66Li+2mLDJzPFuKXjBlKhKYBN8mRsXg7l6NY
OyEIgiCew62mNdeQvutG1M346+Oa3R9LKz5NVbF4c/3A82gthSAIgiDuoOFr
JQqstJvTSyyoekhnUxIEQRCP0SRw7QhVK/XsbctHRtu6CIIgiLfQlMiSBGle
ffF5OYIgCIIgCIIgCIIgCIIgCIIgCIIgCOJTqQukcYQwjJHdiHoQ34WmKlAU
3aesaa8AQRAfSlsE0JUDFDNCHpk4HlV4Lzk4pEXmalDfqQN5HzVS34UfRoii
AK4bTLTAfipNmSIwTzjw8w7OLulXEgTxgXTnPrL2R/NLoUF1OLzunNwqjd51
hsq9lP4FelANfyg8XH6Rdw7FOZ3kTwiC+HAqBJfD1Z9w/1LX3/zlvDaFfdLg
T868z+Gez3iRvP2XgvwJQRAfT4PUM6Aq0p8oqgHLiTqN9gZF5MK2HbiODduN
xDmRHH5WpN2d625HBfsewNIvMJwY67IlK3rrr6BwcT7OdXf5+cdHaOMxy1ej
KZEXw5pHU+ZI03z/vP6W606a0DVmAztEwsZmt/5k3Z4EQRDPoG1yoVvC2x/V
y7tz5pmfcc44Hvo+vtQ2OZ4dpKINGubIjhrzQcYFJ95+HeZjgp56WW99MT5P
0HdPLSgjnZY+DiE/A9j5oj32NkMYZigCHaqbiPxK8gp1FcPS7C7fl6gQiXOf
j7h4GcoigaMdZ/5kz54EQRDPgJ+NO57vYk0b17QS59f32ugta6IV6XO6CaPU
lt8Pmi/GJHUWIojyRc31Vb31hbg8Rd895nsKzFt/os81Xr4OTRIgqrgUzQXH
k4Xk2s7ztl9dnadruWY9t8NEl2Y633WPPQmCIN7PrT/hmlbz+ZLM6fYMqdJ/
9P7kaMa7e1J7vXWuhXJ2Xq+v3ibmREdS0o9Pshc//W3IPGLjPtbOX8Zzck0E
Q9ERrTjPq61OztVWc39yjz0JgiDez60/yZ1z19YMeoNCF2vUJj3iTwRtBuej
1sN5n31p/YT5E/U1G6GfRM7yiI1FRlFs2FhLuQSr+9Jy53Zv8Nyf3GNPgiCI
93PrT+rIkHqN4/6sLdutoxGLscaj/qRNLaGHK+bGyhLL0/ZP0nfnffrj0v4u
BWbyhd/wK31oJxvpNYoNYrMfr1QoFvZZ8/mxQzeX1c/kzf3JPfYkCIJ4P+Vo
Pb5rgFvW9vK/8TUI0djUiHR+jQovl21aP/9+b3vE2y/pr5jPiPIXz3k1SMwz
jPE7NHUI/Ty01Vxb3rID5AsR2dOd3/r9nnvXnsv9gGJEQ362CUzlIrSS27xb
g7q5iftOaRtXBFojsU7XObBMhLNvT4IgiPfRoghNqMdD15814LK2njc5bRnD
0ZgPYG1jHFpQTxc4idT64G2ifuruUTRYQba6Nt5ThgYMP0USxcg/okNcJ3AM
G2Feo2kKhBZL22gzE9eWP53OcBaW5/d057d+v+feteemzOdO1k6Y7/V1E0GW
IIqLVR9cxba0oaLioltwbU3u/z5rMP1s154EQRAfQVuXKKvnnAPF9wJ/bPvV
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
    "], {{0, 145}, {404, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{404, 145},
  PlotRange->{{0, 404}, {0, 145}}]], "Text",
 CellChangeTimes->{
  3.774380343729712*^9},ExpressionUUID->"ba9d75b4-bd38-485a-8dc0-\
5835dc284943"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"residualBlock", "[", "net_", "]"}], " ", ":=", " ", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"net", ",", 
       RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], "}"}], 
       "\[Rule]", "2"}], "}"}]}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"invertResidualNetwork", "[", 
     RowBox[{"net_", ",", " ", 
      RowBox[{"iter_:", "10"}]}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"functions", ",", " ", "invcores"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"functions", " ", "=", " ", 
        RowBox[{"NetExtract", "[", 
         RowBox[{"net", ",", " ", 
          RowBox[{"{", 
           RowBox[{"All", ",", " ", "1"}], "}"}]}], "]"}]}], ";", "\n", "\t", 
       RowBox[{"invcores", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"NetGraph", "[", "\n", "\t\t", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#", ",", " ", 
              RowBox[{"ThreadingLayer", "[", "Subtract", "]"}]}], "}"}], ",", 
            "\n", "\t\t", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"NetPort", "[", "\"\<State\>\"", "]"}], " ", "\[Rule]",
                " ", "1"}], ",", " ", 
              RowBox[{
               RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]",
                " ", 
               RowBox[{"NetPort", "[", 
                RowBox[{"2", ",", " ", "1"}], "]"}]}], ",", " ", 
              RowBox[{"1", " ", "\[Rule]", " ", 
               RowBox[{"NetPort", "[", 
                RowBox[{"2", ",", " ", "2"}], "]"}]}]}], "}"}]}], "\n", "\t", 
           "]"}], " ", "&"}], " ", "/@", " ", "functions"}]}], ";", "\n", 
       "\t", 
       RowBox[{"invcores", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"NetFoldOperator", "[", 
           RowBox[{"#", ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<State\>\""}],
              "}"}]}], "]"}], " ", "&"}], " ", "/@", " ", "invcores"}]}], ";",
        "\n", "\t", 
       RowBox[{"invcores", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ReplicateLayer", "[", "iter", "]"}], ",", " ", "#", 
              ",", " ", 
              RowBox[{"SequenceLastLayer", "[", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"1", " ", "\[Rule]", " ", 
               RowBox[{"2", " ", "\[Rule]", " ", "3"}]}], ",", " ", 
              RowBox[{
               RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]",
                " ", 
               RowBox[{"NetPort", "[", 
                RowBox[{"2", ",", " ", "\"\<State\>\""}], "]"}]}]}], "}"}]}], 
           "]"}], " ", "&"}], " ", "/@", " ", "invcores"}]}], ";", "\n", "\t", 
       RowBox[{"NetChain", " ", "@", " ", 
        RowBox[{"Reverse", "[", "invcores", "]"}]}]}]}], "\n", "]"}]}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"Style", "[", 
     RowBox[{"\"\<Net Inversion Sanity Check:\>\"", ",", "\"\<Text\>\""}], 
     "]"}], "]"}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"in", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0.2", ",", " ", 
      RowBox[{"-", "0.3"}]}], "}"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"residualBlock", "[", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", 
           RowBox[{"ElementwiseLayer", "[", "Erf", "]"}]}], "}"}], "]"}], 
        "]"}], ",", " ", "5"}], "]"}], "]"}], ",", " ", 
    RowBox[{"RandomSeeding", "\[Rule]", "5"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"in", " ", "\[Rule]", " ", 
   RowBox[{
    RowBox[{"invertResidualNetwork", "[", 
     RowBox[{"forward", ",", " ", "10"}], "]"}], " ", "@", " ", 
    RowBox[{"forward", " ", "@", " ", "in"}]}]}], "\n"}], "\n", 
 RowBox[{"forward2", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"residualBlock", "[", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"constrainedLinearLayer", "[", 
            RowBox[{"2", ",", "2"}], "]"}], ",", 
           RowBox[{"ElementwiseLayer", "[", "Erf", "]"}]}], "}"}], "]"}], 
        "]"}], ",", " ", "5"}], "]"}], "]"}], ",", " ", 
    RowBox[{"RandomSeeding", "\[Rule]", "5"}]}], "]"}]}], "\n", 
 RowBox[{"in", " ", "\[Rule]", " ", 
  RowBox[{
   RowBox[{"invertResidualNetwork", "[", 
    RowBox[{"forward2", ",", " ", "10"}], "]"}], " ", "@", " ", 
   RowBox[{"forward2", " ", "@", " ", "in"}]}]}]}], "Code",
 CellChangeTimes->{{3.774349677901433*^9, 3.774349786979265*^9}, {
   3.774351062154409*^9, 3.774351062508011*^9}, {3.774351961997271*^9, 
   3.7743519989804983`*^9}, {3.77437554854047*^9, 3.774375591138221*^9}, {
   3.7743756272144737`*^9, 3.774375743771117*^9}, {3.774375841269237*^9, 
   3.774375848889895*^9}, 3.774379493491721*^9, {3.774379531526627*^9, 
   3.774379603183814*^9}, {3.774379637780458*^9, 3.774379759504722*^9}, {
   3.774379797104217*^9, 3.774379814300766*^9}, {3.774379853793215*^9, 
   3.774379857176971*^9}, {3.774379929017819*^9, 3.774380023757389*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"c4cf0a05-773c-4cc8-9340-209ecce0864d"],

Cell[BoxData[
 StyleBox["\<\"Net Inversion Sanity Check:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->{3.774381280868267*^9, 3.774637505663162*^9, 
  3.774639334210168*^9, 3.774642794560213*^9, 3.7746429115897512`*^9, 
  3.7746487935007176`*^9, 3.7746906654300632`*^9, 3.7746907017729006`*^9, 
  3.774690734782627*^9, 3.774691716168547*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"5ad01a05-ee22-4715-a6b7-ffb3d416da05"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393343886914`*^9, 3.7746427948138795`*^9, 3.774642911857458*^9, 
  3.774648793735199*^9, 3.7746906655417633`*^9, 3.774690701873619*^9, 
  3.774690734880365*^9, 3.7746917162453413`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"d8c11a99-58ee-4478-bbe3-37c8f907eb0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"0.2`", ",", 
    RowBox[{"-", "0.3`"}]}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"0.2006225436925888`", ",", 
    RowBox[{"-", "0.30039334297180176`"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393343886914`*^9, 3.7746427948138795`*^9, 3.774642911857458*^9, 
  3.774648793735199*^9, 3.7746906655417633`*^9, 3.774690701873619*^9, 
  3.774690734880365*^9, 3.7746917163789835`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"f525bf82-6c84-490b-9da2-76b413a07ef7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["Weights&Biases" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{3, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {3, 2}, 
                    "$ArrayDimensions" -> {3, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "normalize" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["square" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {3, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "sum" -> 
                    Association["Type" -> "Summation", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "replicate" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{3, 2}], "Level" -> 1], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]], "divide" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Sqrt, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Divide, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sum", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "square", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sum", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "divide", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "replicate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}], "Weights" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, 2], 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "dot" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Biases" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, -1]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dot", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights&Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Biases", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Erf], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393343886914`*^9, 3.7746427948138795`*^9, 3.774642911857458*^9, 
  3.774648793735199*^9, 3.7746906655417633`*^9, 3.774690701873619*^9, 
  3.774690734880365*^9, 3.774691716699127*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"5e901d49-a5d5-4590-aba8-8af1726d9aba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"0.2`", ",", 
    RowBox[{"-", "0.3`"}]}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"0.20000045001506805`", ",", 
    RowBox[{"-", "0.2999999225139618`"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.7743812814089003`*^9, 3.7746375058486404`*^9, 
  3.7746393343886914`*^9, 3.7746427948138795`*^9, 3.774642911857458*^9, 
  3.774648793735199*^9, 3.7746906655417633`*^9, 3.774690701873619*^9, 
  3.774690734880365*^9, 3.7746917169983273`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"63c66498-a021-4b91-b9d5-ea034e192ca1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Experiments", "Section",
 CellChangeTimes->{{3.774338045650655*^9, 
  3.774338046970612*^9}},ExpressionUUID->"92d6ed71-9677-4eed-ac31-\
c4f3287353a8"],

Cell[CellGroupData[{

Cell["Data (\[OpenCurlyDoubleQuote]Two Moons\[CloseCurlyDoubleQuote])", \
"Subsection",
 CellChangeTimes->{{3.774338050051277*^9, 
  3.774338069499556*^9}},ExpressionUUID->"86d87f0c-576d-4b38-991f-\
520c256e40f7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", "5000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noise", "=", "0.1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"k", "=", 
   FractionBox["4", 
    RowBox[{"points", "-", "2"}]]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SeedRandom", "[", "1969", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", "data", "]"}]}], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.7728128440597258`*^9, 3.772812970704172*^9}, {
   3.7728130170382147`*^9, 3.7728130549168234`*^9}, {3.7728132996095257`*^9, 
   3.7728135234012156`*^9}, {3.7728136415869465`*^9, 
   3.7728136902498274`*^9}, {3.7728137729584284`*^9, 
   3.7728138803906045`*^9}, {3.77281393058981*^9, 3.7728139395767803`*^9}, {
   3.7728139940481973`*^9, 3.772813996525557*^9}, {3.772814048601939*^9, 
   3.772814071832833*^9}, {3.772814191640459*^9, 3.772814192814328*^9}, {
   3.7728142647333236`*^9, 3.7728142652140713`*^9}, {3.7728143202267427`*^9, 
   3.772814363337674*^9}, {3.7728143986644783`*^9, 3.772814398951719*^9}, {
   3.772814435666066*^9, 3.77281446577341*^9}, {3.7728150202576747`*^9, 
   3.772815041626583*^9}, 3.7729804348532553`*^9, 3.772988363215681*^9, {
   3.774352172380044*^9, 3.774352173776249*^9}, {3.774380220664645*^9, 
   3.774380230581667*^9}, 3.774380980405937*^9},
 CellLabel->
  "(Debug) In[332]:=",ExpressionUUID->"71ba0fe4-66fa-4ea3-b5f3-9892d0776806"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwUl3c81f8Xx41oqUSDlvoapVAiknS0C2kYpRQRQiGiVKJQJJWGnVGECFkt
dZIt2XvveS93D/e6fp/fXx7vx/vtfc55ndfzfT53k43rGTsRISGhIGkhof//
zbYM//XTcQ53bjmbN/e4F4N0Bsw97Oaw4bhwbOSDAbRZpTa95fIcHhvLO4eM
TtxD937cYzmHrRFv6nKS+nBFXanc63NzqBemfzeorhNJGcu/HjedQ9XlLt3z
y/qxNPjiqbmTc6hjGyaTr9WL8fZpY3mGczj+RUjI82ob3jrI9HM6OofZN0Sc
/ka24emN+2U3HpxD7T+M3yrdnag8+/Rz8745ND0b4VRX2I+iHW3HQ/bMoSBx
hjpq3YqdBQoD+lpzeOWlq5S4VDfmvXK7w1KfQ13fb6EHRtsw1K1QKkN1DrPU
Tdw1kzvR/sSC9MvKc3iIGSMxu7gDYavpwdWKc1hev8S97FsLysxP6KzeOIcb
Oyu9Oo72ImVw0uPhujnkd9/z2ruqG6t+a0vsliHWLj3dpRlt+O6tfxJZmtCv
caSmzrgd792p3ft+GaHXoNHty5QWIu+1zecWzyE3bctWnYAeVNN0uL50/hxu
cRSM+U014/zluWIlInN48c/13BLDTuwlC956CwQ4c8rtkDS7B79VGWhtnxGg
8g7zb6eMOjEsJbxmiCnAA/tZz0brG9E5YMA+mirA7mKXjskvHXjwstrcSbIA
CwJ1vWKI/XX77kSIjQtQ85beNoe2DmSuKdv+Y0iAfm3m/hHj3VjDXl7h1ifA
f0IlPsfvtmBK00VrpS4BfvAIutZe1IV+n9M4na0CXHtg9b0/U+1o8Yz5IqxR
gLu/nPz0TaQTdzrvVz5aK0Cu5lxjgFc7LjoWWsSvEmAkX1XmWX8XDim0W+SU
CZAzNzHv2qZmLBRWpDn8EeDV67r3ds7WY3iP25P1v4j6PFxIj/Y3oeuPwv8a
vwkwz8BFutKuC49GLvgRlC/AbYHJijb5bbjJ09Rk32cB1keZJG5xbEXu6YRJ
eoYAx5o2ln+WbsRGNZJ/WqoA3x85WpBb1ojpi3evs0oSoDYzPHT0VxsGjvnn
rUgQoEXgz5/26zvwYmmtUVWMAB2SnO7tZTSj1ru1w74RAtxYJf52TLUdl/k6
+Ox6JcDviyYk9efV49iF3JWTzwSo12T5/VlMDRbtnvuU8ESAB5O+a+0Lb8Po
lYZHzB8JsLXMQ9PiaC2608J7Fj8UYILenf1XrZrRqHbAq8iHyF/3U7UwpQYV
MtSW3fIW4P3MKtWVtdUoCLqTouIpwAaJveofpxuwxa4MBtyI+/48opQENWH2
Aam2iGsCrIzW0jgU2oDBcpfcTlwV4CGJ9yXvVBvxMj9tgegVARYbuXs9IeLp
tjMTvloJ8FhKdgbj1D+ULtiv43JBgIXqUaulbrYg+WVovfxZAV4aucj6mFSN
pa7tju1nBLhMXupQ+ocmjDNSFHluLEClS7GGCpE1eEv5RvQhAwGm3rRTlLvc
hKfEf+6cOSxAYc9Uh7v6Tag8uOBv1n4BzrdtqaV8akSR36a2dnoC3OS9fLF0
Uj12xCbw1ugIUOt5EjVxqhHzvEmv6jQFhE5T51P+tOBT890qj3YIcLQ8dnf/
70a01wgo0VUR4LiG+WHlihbcJ1lnSd1M6HEicLJgeRPKkNcyP8gT/faV9xhV
qUNqpUOopZwA72Vn5Lk21mLlh1xFqbUCFLyl8p4eq8D3/nM/y1cJsOb3Jfn1
XY1419rQ3EdKgGmrHCPG40rRTC9iaudSASYm53VscK5B1TWDj8YWClByKMhW
y7QO57PV5OLEiPoF1rFO9vXY23jni4mwAN2qwh2fr6zCr9llJxfOzqJ+mGTN
58QyDAuVGvvFmUWdofvaacvK0Mnpkt9Nxiy2qcXkOwhX46GjH2W2UmaRF6QX
ptlXj+sUWNm9k7OoIqJ+2+FlHTKEDhx/MzqLgZT4jY3hZVjTHdpvMDiLfzsP
+FQqIX743u4t1DuLsm8zexmJDegXoShV0DGLDcecVhy4WocWN298dG6ZRXVv
lT4apQ7VT/88sKlhFsNyw93inhThYrWFnS3/ZnH/UpN5CZ5/cXCRmcfTylk0
PqUkvFWlCH+OJiw+UDqLqx1aFxq5l+ObEtJ79u9ZXPyue6GIazm6Ju7e+6lw
Fm/X0kL/RtXj0fsBTTZfZ1HcwLt451A1brxQd00mbxb1nvgUNk7UI1d7nVhN
1iy+6C+Za/auw4YVV9/6p8+iyflR7wDRQsyg5u7SSZlFw+jnEdahvzCgZu7f
1LtZrBU6/0LtbwVaphvaJ8UR+i28bGE3hKgVFCGwiCbih3ArktrLcKndYPiy
8FnctNTi1bfpYhzbv317adgsRk/tdjdfXYlFG+6W3wmdRXMrS131ykKM5pVZ
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
lQa1ojJ8dT7BpIqYX6PEr8C5qDKUaM0WO7yGAkEcWy9+dC/Di1nk6f2fKfDf
gvOW01fKkDR1M9gpmgKSHW2dVKUyTNsjVeO9TAFSvvzHaMEy9K0vfttKnC8z
Nsj03GIpejjNxQ2kUMDtNUV8ubEUK1O513gQPKflaDAc/6MUR0s4tqToUoDT
JCX24ptSLF9POVqxsggdsMlyrXUpPt5ZwRosTIHw3fdkfmiXooyOg2tL+yJc
566bviJViq3OTnJvHRdhH3XfD3bWUkxhNwxfukmGuW5f+4zBEmw5ndCYVUyB
vKLJw/8VlKBvvNUnShcFPBNO07gjSvA8l38kicgPDf/47Fy3EjwZPubf4kAG
Xuf1Dy2NS1DV2uJwzF0KtFyzUBFQKEH9BV2c7lqEaI3S1UK+Elz4dsF2tykZ
zPfuKrq7UIyXPV5/s/OnwOHNXs+21RdjWq5lCV8sBWiMwVMVScXoi7zhYdyE
f/TDhgc+xfh5VNllyYTwj7Ko6h2WxVj8fJamx7cIOsl/39RpFuOJbgpZiZcM
QkHXzj+UKMYIhpWakjHhH26/N+9ZU4yfHN5mN/AsQuTNba0tfUVIDTspqbtM
Bhttt5Anv4vwTmTlft+YRZCV7bx8IKwIB0U1z7T8o8CKgJJIt3MRvvyvnjKs
SPjH8vu+lxeLcKrjJf1MDRn8hqmfjhwuwmNz28ekAgj/qDK8NbipCAV8ir5v
30AG/pQ0Sb/ZQhQvUj9LdiHDUMhm0rGaQqRui51UkyRD7GP7b+MJhTjwO7fo
9Cciz8wbbIJeEr83Ff9l7E74h66s7EnzQsx4EzTzyZkCTDm/hRm1QnR25Waj
dFKgfOtMWph4ITLbT7dIFy0A37/3U2+WEP13s0k0a5PhR62h3XgmYsZfi/9a
t1NAPnwzAeWIUYfFrnC8psBvywbXsP2I3qvPjURjF8BIwe8vhVSA5ydj/LmJ
8/Sy6HqdjSlAb3178r47ZHBt3MAed70AXc7Yf9Uk/Hk1svz1P+EC7AkN8ZJ9
QIYwm+e8Jm35+Gp9oETrwUXYcUz9fVpAPo5mzduERyxC3Po12zaezUejcZGC
bJ8FUG/Nj7Jgz8dPpY5dZxcpUBn9aBcW5yF62HRVd1DAzO5YwlaPPNTaddrf
Yj0FplQY+x2P5SFZK20i+PYi2HNmptZQf2Op3NXupSUybOx0VJRK+Y3IItBs
X7AA774e+u1h8xu32VwPun2IDAfuz0Hn7t8o2T7LfM5NhoyTyaVyw7l4dNPo
dxvCD87zWOu8jsxFjy2GtTlTFGjv2VM/ejkXr5ATnFdKF+Dat7ELqgK5ePyP
t1HhJwownGM6Qht+Yf+l5yxvZyjgofnfNbLvL1zi1Vz/wGIBhPnEh85o/UI9
DseWbW/J8Hmg1yJ27S98eofB03ByAXZ/D5/6m5eDsd23296NkaHo4WU7Y9cc
/Kb+bjN1yyKcPr2FmnIkB03seh3zJMgwItjqyjmfjcNxBTyviX22Ggn8a5aY
ja2vwrtvhFFgXep5r3yLbExauXWycPMivPbgZhfamY1y0n32IY5k4Dtb89q+
Nwv3erGeDsilwHdhH97q0CwMKt/8qHkrBY6QtN7vMszC6YV1VWGXKNCQwbbt
MU8Wrrc0zt/5lAKXvIqj2qsyMWYs8mJBCRl6zz/ZdehFJm7hEFU38SaDy3bV
BJ+TmUgZOtlSTybD36nl/SPLGei0XJ58LpACH3J+papkZ2DYe02u0rsLIP7S
RTHEMQNR9WeMV/085Boq/J4/kIG75kbz8ojrT+4kND6ZjnuvzheFGZChYi6l
9EtsOqaMkGOPuS7Arbx7Ois30rHGlP+rHnH/CZ/99ZdE0vHd/L7gc84L8Nx4
6sLP9jRUElIqvT01D5xSCR0b3qWhYAD7d7NsCgRSLK7d0kvDj3om20+eosD+
wl1Dvzekoe4jk1NZNQuQ5jdkIViaii3KkV963Rbg3NVPU/c8U1Flq8IEz6YF
aJU2tas8norVd6ZvP0uaB3v6NupOegrhtwyDZD0y0Es6XR+lpqDeh0jukpIF
cA8M+dtqm4Jb3Nf6GxLvu/XGRS9Z6RTssc19FnOVAiomkjy8FT+xRUwxxXUt
Ge5TPwmVnPiJvuYrf9x4KfDEX2Snc8YP1KRoLGcfWgC/vaF7Zfb9wOj0oo5w
ezKUlPHJ90Z/xz1f5iVNyAvQePPtCf+t39HC9OEmG9Z5YF/h0Fb3T8ZNa4aT
HupQQCD0hT5tXTIm7GnWzLQhg+7htVcS3JNQ9i2D/0bgAhjXuZtdXUxEpm2t
BtN4AczvMG15rBMxSacz0WJgAT6yPnAuGvyGhiyl/n/XLkBC1LznA+NvOD+X
SfpD/H8Dx2x89tQnYOBeTvmaBjJMt46/69ZMwNjfrj8rp8nAtLsV4fc7Hsks
jrOW3+fhIFf/15OH47GTN+mIpM88qMSZ/FxMiMOv/67GH3KYA0e1tpw48Ti0
3T36lTOVDJ69+sUmIV8xUXh76nm+BXjjUluzkfsriizMf/UQW4ASvtNt+CwW
1aZGvWZJZGj8XtLvuBSDLgzPy8d9F2C9DkxIOcSg8rrKyfh988A/mkvuJH3B
nH2lHDOdc3DGU3H59fUvaPZubPAvJxmMt6WxQVs06h9610gTJPIs8wAPRTea
6OdZgdqv5iFc/5vQ1+LPWMiZ9dL47xzET0vuvHzsMx41nrsX4E6GPG61S1tu
fsLX/4nHxcSToU3j6B13vSjssmn3Zz6bhXm3g4+Gj0fiZ2owS2/VPFxL2f32
tHQE/utgFPZJzYPz+PboH4IfcXD9Em+B+QKMigpmCLCGY6Zx7fuTJ2fh74WN
FQ8XPqBYaaQmCC6AjQ9r92BfKNoWHB9s+TQLz3FpRqsmBENeCGooKpEhikb+
l5zzHl1LN3NRbpGBa/8kH39cMPIkho8Vcc2D1K1BKbegIKz9TzhTRnsO3n3o
ODrw5B1qNTjJWUbNQnJ9ve6pe4EYEKDE88iEDOVs5deTrgZgY4s/N3ybh9vO
D0ck3r1F9xMc3H9DFiB8+A7HvO0b3PfhpjQvdRaczhsf/K3ti0+Tx1aYAbOQ
8PvUpVcS3mgemD/nR/zfz6TlHxn+fYHJfhrdGi4LkBUsES3e+QxDgj+9C5iY
gak1myum057i7ebGhwK98+DTs9plJ+KJagb6loIfiHmm90htaHqID3f8U61m
WYCvfjkOn186o0n4NTafyFnYePt9/lEVR2ypUs/uYJuDcfdRvi8jNrjX//K2
GvcFuHAoKrH5nBn2ssVuOjo2A6rFP5+vf3AJ+WfP7jLaSIYLsW8ao2TksH2E
Y2wvcf2Xqeaj9wp0YMPpPiG+HwvwkIc+07bhOnjO6u2IkFwAO6Oi68fDLEHl
4I/o9MAZaGp+NsImZA/TKfxvLlYsgMifuFDb/x5Aov3wtRLi/Jk7qnVbk1zB
RXGw3p/Y5zXas/+U6e4gops14SIyC2eVNnQbfH4Cqn2PGuwnibypEc54UeYF
JUqxN1LbZ0H1+r63v6aew5n1uefnHs8BF0XlzuymV8D3cdmDn20WDr04p75T
wQe8NqX3lRH59nfrTdFLV17DoyzLvbfj5kAi2YHu7ekHJ2Ml2m7kEfOEZ415
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
fd+NA7NLyPCOTK/R4M+UGD5P87ZuCb3cxSs1OfaFTJZLfo7ZUkKj5znkqph+
ph+f8w/V7CshI5lTZ2arF9CDHa8GDj1eQulb5iJsQB7NqT3ur3W5hKa5Ld9K
Lqn09ejq1Xvvi/7d9d7tD1eS6dCfUbXXXpfQnt9KE0J3cEjao971XXQJPegL
SbhgzCG/0VEqFZklFNu+x/z6gyxa/tI9QbqshFbz8+vrvqZQ+eyd5nNaSygv
dO3xoNupdOLjtL+7/pTQvCPrrk0VrYMj1/147CbHpQ+6a9f1u5BNwYWZS4In
cqnKY7AmKX8hw30+pUVzuNRyyXzy+vdJ1Nx+2LnfSi6tvK+iOH5+Lrm5LBk7
fRuXjA02uk3an0QqMkOitlly6exUr6S0m3kU61m+/ewJLj3KlkmQm5FOu1SC
hf5XuKS3yneE/WUOfQs+ey/3AZeik3LD9cfk0m2djfN+vuHSIu3fcwK4uTQ7
XTlPNZZL1yPuUP8nCZSxrcN+QxaXZnepfVkzN54O8CDnVM6l01fG/aqem0Z9
NreDn7dxabhxxsB7TSn09Mfe9Z//cqn1P5Xfy2XyaOmVuS3dw0ppnNqU4E12
UVSoIOExQUX0c3flqJEZSXT8GWfa2nmlpGq4f+qGczk0dMbL9KOrSok37U7G
qmkpFBR97ICPUSkVayu8zW/6QAar9aRSROeKkVuCMyx4n6kmb+SrtpOldOnV
72JDw1y6uKdu5ZirpTTFPDtA50kajWt5z9d9WEpmnz0930nGUYzTlQuHA0vp
m+ZKozWy2bRjwI6JnnGldDAocM/Q3ZHUeXtq/Kds0eu9eHSwpzuJbk34btZQ
UUo3b28+oXgplaYFZvwa3iE6R30eGhu3JYnStB766PQrI5Wbesv0vgbS3mTr
xZbyZfRrT7j05eGgv5t0Sv6bXEb7q09cPcwNpsflsk5R88soy3mJxvytkbTQ
umwUX3TuOao5dUSbfRYV9ARFyhqX0fJW8+93u6LI1vXMtgUHy+j4X7tdKrGh
NHjYBsHuU2WkYJRkef95AgU+mnDH/VoZLfT+YHbvWTKtmtY+O9ynjBTDuI56
ZunEj4zPKQ0qowNPJM0Wm6WSy4pbtgM+ic4Va7lXFEJjSDHHfMisnDJ6UD/l
7rPAcIowmRO0o6qM+kcPy7plk0KbG/oZXOwsoxsWfVtN7D9Qx7G8xsD+5TRV
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
YBsl++/5CCgbTiWtfPI/d24WZ2k6fqg4y9n28Km4Y+lRY+8ErD7Er+j/l08v
DLkOZ/wz4RmyLvi+dDVR7HeBeV8u+MLwM5rDqul9wrRx6zgczFkybn3CmGpy
uWDXM+JMDs5fdFXaPkn0+7JLbNaP5yA7vbm5aVo1Va9ImuWyLwNKcttiz82t
ptxRqjKp07JwyCju2gidatq966CtZjMHUT6qu96srKYZXdmuYXfSIMm/Pm2Z
YTUlzuuMqi8uxLapwm9526op8pRz1q/SPPjamqUfMKsmoYA3wkuQj/Z3Kfd/
WVbTqaduY37xMrH854wDt22r6cuU+Wc4m3Phoeu1UP1kNVkP3HqXx/8C7pU/
A2LPVdOerS/PJdTmQeOLVcFG92qa+lVj1/k5BTgxIudlza1qGmPWvNZGLw8p
u7SOnfKuJuVtwshEh2LIP3+6cuiLatE+23n2nn4B9tZLK/gGiP59zt/vWaKf
g2fY87UiqsmuSelbg2MBfjsWh2XFVlPd4NFP3rhmwjCGLuxNrqa+rQuc9bM4
8O57vaknq5pGqcxOMOouQcPq4RM9CqrJ4uOPKTUz8zH/xql25Ypq8l/zO/ML
fYYbh/fpXZ3o9c23Ttdf8xmcsev+02+vJufeifvmny+Bsnm4WUVvNf15xeM1
mJfAzk9xhmNfNY19/+26xUQOYlsu/pKWqaFW7ZPNr/SLMGhe8+dHw2vocWVG
g2tXPoxPbfWZo1hDQ0IiRxrc5sIvPtY6VaWGfObOtRbUFEA4QHWxyfQamtT4
OXzmHC5WGF6X6ZhXQyqCi29ODsrH7TvdxW5Lasj6S5y0vOjzVRSbvh6rV0N3
Nsy8f7utADOUU04Gr6+hZ8eSJV0rSuBiOWPNyu01NLsy3lq5KB8ZgZ6jinfX
0PzexDmuWQUY0/W79siBGuqfM/BHz+ACWGpbRfazF72f0Y91747Kx7uzX9y8
nGpIvmC/ebmwDH3JC7dNv1BDRat8E6+c42Cj7NPJuFpDgvCTm7cOLsXTzdKC
bXdqqPftuEFfx3DRfN8usfFhDX2sP+gWKyjE4oqi22d9a+hs/5CRlMbFFVXa
qxBUQ/nTbc6cCitEofXr2a/f1VCu7V3fVcUcqIUN61vysYYGSnCsNllz4NDr
lJObUkMT/7sbbKNSiYSlvCdWX2pI+6mmgteuYgx107f9WVhDb94a7phQnw+z
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.9633157200640134`, 
   1.9633157200640128`}, {-1.5590483409923408`, 1.556711236171462}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.774381285644629*^9, 3.7746375071922617`*^9, 
  3.7746393361388054`*^9, 3.7746427974637623`*^9},
 CellLabel->
  "(Debug) Out[337]=",ExpressionUUID->"e15dd66c-a05d-4310-8472-c5bc43a32cb8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data (\[OpenCurlyDoubleQuote]Circle\[CloseCurlyDoubleQuote])", \
"Subsection",
 CellChangeTimes->{{3.7746396684250894`*^9, 
  3.774639678206304*^9}},ExpressionUUID->"da7d7e97-23b5-4b06-baad-\
93e6066de9c9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", "6000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noise", "=", "0.05"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rawdata", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ReIm", "[", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"\[ImaginaryI]", " ", "x"}]], "]"}], "+", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "noise"}], ",", "noise"}], "}"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "\[Pi]"}], ",", 
       FractionBox[
        RowBox[{"2", "\[Pi]"}], 
        RowBox[{"points", "-", "1"}]]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", "rawdata", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.77298860143451*^9, 3.7729886019360065`*^9}, {
   3.772989177048662*^9, 3.772989234416888*^9}, {3.7746397039034185`*^9, 
   3.774639744099255*^9}, 3.7746417065493402`*^9, {3.774692128314712*^9, 
   3.77469212876449*^9}, {3.774692179582594*^9, 3.7746921844814944`*^9}, {
   3.774692230439617*^9, 3.7746922398325377`*^9}, {3.7746923291476884`*^9, 
   3.774692400092993*^9}, 3.7746925669528894`*^9, {3.7746936794565573`*^9, 
   3.7746936799033813`*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"5872c211-2cd3-46bf-98c2-f11e38a516c1"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
VGlJwetTgWI6YX2YfBhqLjuwINnPhCHgMIh3Rg6rJjewwH7xm+EL3wbRQMfi
mmsmBV/spG5f0yPz7N9zO9KYgnlTvY37n/bhQvV6xetSLIgW/No7nz6IziHV
1zX4WbD8q71QqjeZ9y+hZX9NWFBprBkdeK4P2bue8ZtoEv9t2nzT4nYfrooR
+pRP3n/gFKjKEmFg+rEYlWsuLDg1VXc/M7IfXzuIdEh7U9CwzuZQUV0fnrO9
ZMBZRPh5+2K/YdsA/uC9bp51kAKtf4ZjS3T7cX2lIKNZgAVvnyqsfr28D21P
DBRYL6Tg7TfDnBVq/bjOyztYqokCVY6SFaJaDFRwlDwYXEHyzefQePMyBnqN
BP5KIvs/FdWwJbKGgabtTCo0hQXBO6SfKCUP4IoycXvXuyzY0LSpxy2DgSNa
H6L/aLPg2wWNnxJnGThtYeK2JIkFvdGPFsWQ/uuiku2nlVgwXn95tsGZgboH
7r4x6aDg6/7n79WjiZ7t9k2TOkdBXr259+XffWgtGpigNEUBw6Xn7dOKPtQe
PXlZpJYCjksC3SVeA/ghoGHZ1QsU7KlzL40p7UOjbxGat8wo6Ny441Pr5j4M
WivAlMygIG6g4TcHox+HGJqvHVWIPjB0A5rHe9Gd65DY018UFPZs4LU360Gf
D46jZWS/hQ6uFwk3GMAwB4651/4UUOc7lWMK+jHoSwVHAvEPQcMTkS7f+nDS
m3X8SikFoXzeIXamA/hwFbdYdwALZC8L+0YVDuB2H0tJ8yEmbBWoFxL52Yd9
7s7NT3spCAr+uE/Gsh+13uboXH9Iwe91zX0rpvpwPEn97NkBFmysitdTTu5D
uBcSeSuVBWVByvob5vuwLXpW5uQHgh8fwynFsgdDPqx5scSJgruxpcln9vVg
vHLKKf0NFJQM8p6eiB/AIV0/rphOFqyS9BN5rdSHyoEnDyxbxYKV+pyiT5QJ
nhVcS93diZ7u4je/WTSAonVcVqPmLLgUF3b0z5N+tDU4wdVK3mfx1z7dq9GL
fsoG3uK9LPi9jKe0SrIffUIcea68p2C2MGnr2JI+lHF/ueDmTwpE2mrC/Z73
46qVXoJXo1iQZewkcklyADsXUftct9LQeKcxKUCvH5kruYM/eFJQ1xUf+Y/M
N21Tz+0GMQpSt1joTS3tR+0XCdWPj1MQpelWeo98buLjYv3KiwIbhQav64xu
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.4823286179776132`, 
   1.482139489503562}, {-1.4824818359592147`, 1.4798172197923807`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.774639773774482*^9, 3.774639927828746*^9, 3.7746416921703596`*^9, 
   3.7746420198144684`*^9, 3.774642914924929*^9, 3.7746487968074055`*^9, 
   3.774690666595944*^9, 3.7746907028539968`*^9, 3.774690738189517*^9, 
   3.7746917172815695`*^9, 3.7746921296590767`*^9, {3.7746921803505383`*^9, 
   3.7746921853152633`*^9}, {3.77469223153568*^9, 3.77469224077697*^9}, {
   3.7746923297430925`*^9, 3.7746924162438073`*^9}, 3.7746925714867196`*^9, {
   3.774693673472555*^9, 3.7746936805845394`*^9}},
 CellLabel->
  "Out[191]=",ExpressionUUID->"1ef01cdd-2ac4-4ef9-bd84-3a0c1ced6323"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data normalization", "Subsubsection",
 CellChangeTimes->{{3.7743380789239483`*^9, 3.77433808077223*^9}, {
  3.774338132438305*^9, 3.7743381351419907`*^9}, {3.774349493304345*^9, 
  3.774349498728168*^9}},ExpressionUUID->"5f0dd3ab-14ab-4071-b980-\
0bb0983a6336"],

Cell["\<\
The data is already normalized. Let\[CloseCurlyQuote]s ignore this step for \
now.\
\>", "Text",
 CellChangeTimes->{{3.774349501080091*^9, 3.7743495051364813`*^9}, {
  3.7743811943856373`*^9, 
  3.774381200673689*^9}},ExpressionUUID->"e219469c-0ed6-4ae3-bfeb-\
2ec6fdc8be67"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Mean", "[", "data", "]"}], "\n", 
 RowBox[{"StandardDeviation", "[", "data", "]"}]}], "Input",
 CellChangeTimes->{{3.774338096780738*^9, 3.774338118709963*^9}, {
  3.774351717658801*^9, 3.7743517196223707`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"8b4274e7-9db0-431e-846b-7b33475fa257"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "6.31494856406789`*^-17"}], ",", 
   RowBox[{"-", "3.219202682203104`*^-16"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7743812856968718`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"db3a0abb-5006-47a4-8515-7b0bfcf4bddf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9999999999999992`", ",", "0.9999999999999996`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.77438128570959*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"9e462428-58c3-4344-9423-aa8203c18cff"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train", "Subsection",
 CellChangeTimes->{{3.7743492845600557`*^9, 
  3.774349286608059*^9}},ExpressionUUID->"dd151ed5-aed2-4143-8d1b-\
b951cc324e56"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"residualBlock", "[", 
      RowBox[{"NetChain", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", " ", 
         RowBox[{"ElementwiseLayer", "[", 
          RowBox[{
           RowBox[{"0.01", "*", "#", "*", 
            RowBox[{"LogisticSigmoid", "[", "#", "]"}]}], "&"}], "]"}]}], 
        "}"}], "]"}], "]"}], ",", " ", "10"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"traininnet", " ", "=", " ", 
   RowBox[{"iResNetTrainingNet", "[", "forward", "]"}]}], "\n"}], "\n", 
 RowBox[{"trainingresult", " ", "=", " ", 
  RowBox[{"NetTrain", "[", "\n", "\t", 
   RowBox[{"traininnet", ",", "\n", "\t", 
    RowBox[{"<|", 
     RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", "data"}], "|>"}], ",", 
    "\n", "\t", "All", ",", "\n", "\t", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", "\n", "\t", 
    RowBox[{"LearningRateMultipliers", " ", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<addEpsilon\>\""}], "}"}], 
       "\[Rule]", "None"}], "}"}]}], ",", "\n", "\t", 
    RowBox[{"Method", " ", "->", " ", 
     RowBox[{"{", "\"\<ADAM\>\"", 
      RowBox[{"(*", 
       RowBox[{",", " ", 
        RowBox[{"\"\<L2Regularization\>\"", " ", "->", " ", "0.01"}]}], 
       "*)"}], "}"}]}], ",", "\n", "\t", 
    RowBox[{"TrainingStoppingCriterion", " ", "->", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Criterion\>\"", "\[Rule]", "\"\<Loss\>\""}], ",", " ", 
       RowBox[{"\"\<Patience\>\"", "\[Rule]", "20"}]}], "|>"}]}], ",", " ", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "1*^10"}], ",", "\n", "\t", 
    RowBox[{"RandomSeeding", " ", "\[Rule]", " ", "51"}]}], "\n", 
   "]"}]}], "\n", 
 RowBox[{"trainednet", " ", "=", " ", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"trainingresult", "[", "\"\<TrainedNet\>\"", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Function\>\""}], "}"}]}], 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.7743381783489723`*^9, 3.774338273770405*^9}, 
   3.774338416662676*^9, {3.774338461097628*^9, 3.774338461683996*^9}, {
   3.774338497503111*^9, 3.7743385754412603`*^9}, {3.774349226181944*^9, 
   3.774349260536641*^9}, {3.774350149928953*^9, 3.774350168078326*^9}, {
   3.774350279565351*^9, 3.774350300927143*^9}, {3.7743510994314938`*^9, 
   3.774351112067089*^9}, {3.774351908794313*^9, 3.774351913263958*^9}, {
   3.774351989644989*^9, 3.774352005768754*^9}, {3.774352471336397*^9, 
   3.77435248102643*^9}, {3.774352557727528*^9, 3.774352570067833*^9}, {
   3.774352653975896*^9, 3.774352711060758*^9}, {3.774374173921913*^9, 
   3.774374174447527*^9}, {3.774374957526907*^9, 3.774374960149029*^9}, {
   3.774375005374712*^9, 3.7743750145655947`*^9}, 3.774375096290477*^9, 
   3.774375147705971*^9, {3.774375766046605*^9, 3.774375771858485*^9}, 
   3.7743760782423353`*^9, {3.7743762003220167`*^9, 3.774376200492917*^9}, 
   3.774380047571686*^9, {3.774380180930254*^9, 3.7743801895113077`*^9}, {
   3.7743802411623983`*^9, 3.774380243996821*^9}, {3.774380480399529*^9, 
   3.774380480656146*^9}, {3.774380535038332*^9, 3.774380536049779*^9}, {
   3.77438058751602*^9, 3.774380620929495*^9}, {3.774380821513731*^9, 
   3.774380843026141*^9}, {3.7743809713976088`*^9, 3.774380971971897*^9}, {
   3.7743814235148373`*^9, 3.774381504649098*^9}, 3.774381626531301*^9, 
   3.7743818576737747`*^9, {3.774381906474249*^9, 3.774381909455935*^9}, {
   3.774382097583898*^9, 3.7743820977459803`*^9}, {3.774382253811674*^9, 
   3.7743822836280193`*^9}, {3.7743823435391493`*^9, 
   3.7743823436448383`*^9}, {3.774642684699404*^9, 3.7746426955576863`*^9}, {
   3.77464278266656*^9, 3.774642785820301*^9}, {3.774643044328511*^9, 
   3.7746430473993473`*^9}, {3.774645128919936*^9, 3.7746451329389377`*^9}, {
   3.77464536958634*^9, 3.774645370309741*^9}, {3.7746455690033655`*^9, 
   3.7746455837976665`*^9}, {3.7746456270176525`*^9, 3.774645630290894*^9}, {
   3.7746456641482873`*^9, 3.7746456683340445`*^9}, {3.7746463624688864`*^9, 
   3.7746463772050676`*^9}, {3.774646518879593*^9, 3.774646519453167*^9}, {
   3.774646670078475*^9, 3.7746466753772907`*^9}, {3.7746467071106987`*^9, 
   3.774646707733522*^9}, {3.7746468567018657`*^9, 3.7746468616412897`*^9}, 
   3.774646939714096*^9, {3.774647028903172*^9, 3.774647029712562*^9}, {
   3.774647153276965*^9, 3.7746471732523413`*^9}, {3.7746472511371145`*^9, 
   3.7746472563168926`*^9}, {3.7746474059545555`*^9, 3.77464743478191*^9}, 
   3.774647833885371*^9, {3.7746479601772156`*^9, 3.7746479710558643`*^9}, {
   3.7746485898446712`*^9, 3.7746485925152483`*^9}, {3.774648635926572*^9, 
   3.7746486600451155`*^9}, {3.7746490731516933`*^9, 
   3.7746490751628237`*^9}, {3.774690360853444*^9, 3.7746903609950585`*^9}, {
   3.774690651041534*^9, 3.7746906521655293`*^9}, {3.7746907926150265`*^9, 
   3.7746908011362123`*^9}, {3.7746913858878813`*^9, 3.774691409610484*^9}, {
   3.7746917036380796`*^9, 3.774691707127721*^9}, {3.7746918041463146`*^9, 
   3.7746918129528055`*^9}, {3.7746919422501726`*^9, 
   3.7746919610359745`*^9}, {3.7746920508179245`*^9, 3.774692082275805*^9}, {
   3.774692429262001*^9, 3.774692429695875*^9}, {3.7746926772349744`*^9, 
   3.7746926884679384`*^9}, 3.774693655317133*^9},
 CellLabel->
  "In[192]:=",ExpressionUUID->"6476e1ed-938d-455a-936f-d27f229fcb61"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["10", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.774639387280321*^9, 3.774642797792056*^9, 
   3.7746429152731247`*^9, 3.774643048267335*^9, 3.774645137985214*^9, 
   3.774645371281394*^9, 3.774645585125883*^9, 3.7746456314956293`*^9, 
   3.7746456707146597`*^9, {3.774646366768282*^9, 3.7746463784726467`*^9}, 
   3.774646523788108*^9, 3.7746466762262044`*^9, 3.7746467085895586`*^9, 
   3.7746468631393776`*^9, 3.7746469409580235`*^9, 3.774647030604924*^9, 
   3.7746471746290817`*^9, 3.774647258840479*^9, {3.7746474241447525`*^9, 
   3.7746474364134665`*^9}, 3.7746478349705873`*^9, 3.774647972272837*^9, 
   3.7746485949452367`*^9, {3.7746486466670713`*^9, 3.774648661234086*^9}, 
   3.7746487974991636`*^9, 3.7746490761633806`*^9, 3.774690666816355*^9, 
   3.7746907030724134`*^9, 3.7746907400954213`*^9, 3.7746908029124613`*^9, 
   3.7746914133414745`*^9, {3.7746917174979916`*^9, 3.774691736426381*^9}, 
   3.7746918145275536`*^9, 3.7746919633058715`*^9, 3.774692432073482*^9, 
   3.774692581875941*^9, {3.77469268043641*^9, 3.7746926898661966`*^9}, 
   3.774693685317884*^9},
 CellLabel->
  "Out[192]=",ExpressionUUID->"03a5700f-1840-46b3-ad42-de1ec62e364b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.5999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.5999999999999999}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.9999999999999998}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000001, -1.}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -0.9999999999999999}], 
                    Offset[{12, 12}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[
                    0.4]], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LogDet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["LogDet", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[10]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[CenterDot]\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], "-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Shallow[Subtract[0.5 #, #2]& , {4, 3}], 
                    "Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Jacobian\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"LogDet\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"norm\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"subtract\"", TraditionalForm], 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, \
-0.5999999999999998}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}, \
{-2., 1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {276., 102.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28.99999999999999, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "LogDet"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, 
                    "$ArrayDimensions" -> {2, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["4/1/1/Weights"], 
                    "Biases" -> NetSharedArray["4/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["5/1/1/Weights"], 
                    "Biases" -> NetSharedArray["5/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "6" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["6/1/1/Weights"], 
                    "Biases" -> NetSharedArray["6/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "7" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["7/1/1/Weights"], 
                    "Biases" -> NetSharedArray["7/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "8" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["8/1/1/Weights"], 
                    "Biases" -> NetSharedArray["8/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "9" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["9/1/1/Weights"], 
                    "Biases" -> NetSharedArray["9/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "10" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["10/1/1/Weights"],
                     "Biases" -> NetSharedArray["10/1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["4/1/1/Weights"], 
                    "Biases" -> NetSharedArray["4/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["5/1/1/Weights"], 
                    "Biases" -> NetSharedArray["5/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "6" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["6/1/1/Weights"], 
                    "Biases" -> NetSharedArray["6/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "7" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["7/1/1/Weights"], 
                    "Biases" -> NetSharedArray["7/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "8" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["8/1/1/Weights"], 
                    "Biases" -> NetSharedArray["8/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "9" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["9/1/1/Weights"], 
                    "Biases" -> NetSharedArray["9/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "10" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["10/1/1/Weights"],
                     "Biases" -> NetSharedArray["10/1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], "norm" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "LogDet" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 2}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{2, 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Abs, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Log, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}], "subtract" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "10/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "10/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "1/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "2/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "3/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "4/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "5/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "5/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "6/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "6/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "7/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "7/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "8/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "8/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "9/1/1/Biases" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "9/1/1/Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.774639387280321*^9, 3.774642797792056*^9, 
   3.7746429152731247`*^9, 3.774643048267335*^9, 3.774645137985214*^9, 
   3.774645371281394*^9, 3.774645585125883*^9, 3.7746456314956293`*^9, 
   3.7746456707146597`*^9, {3.774646366768282*^9, 3.7746463784726467`*^9}, 
   3.774646523788108*^9, 3.7746466762262044`*^9, 3.7746467085895586`*^9, 
   3.7746468631393776`*^9, 3.7746469409580235`*^9, 3.774647030604924*^9, 
   3.7746471746290817`*^9, 3.774647258840479*^9, {3.7746474241447525`*^9, 
   3.7746474364134665`*^9}, 3.7746478349705873`*^9, 3.774647972272837*^9, 
   3.7746485949452367`*^9, {3.7746486466670713`*^9, 3.774648661234086*^9}, 
   3.7746487974991636`*^9, 3.7746490761633806`*^9, 3.774690666816355*^9, 
   3.7746907030724134`*^9, 3.7746907400954213`*^9, 3.7746908029124613`*^9, 
   3.7746914133414745`*^9, {3.7746917174979916`*^9, 3.774691736426381*^9}, 
   3.7746918145275536`*^9, 3.7746919633058715`*^9, 3.774692432073482*^9, 
   3.774692581875941*^9, {3.77469268043641*^9, 3.7746926898661966`*^9}, 
   3.774693685703851*^9},
 CellLabel->
  "Out[193]=",ExpressionUUID->"78e6302e-50a2-4eb0-9276-0a52a26b00f5"],

Cell[BoxData[
 FrameBox[GridBox[{
    {
     ItemBox[
      FrameBox[
       StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
        StripOnInput->False,
        FontSize->12],
       FrameMargins->{{10, 5}, {-4, 2}},
       FrameStyle->None,
       StripOnInput->False],
      Alignment->{Left, Bottom},
      Background->RGBColor[0.96, 0.96, 0.96],
      Frame->{{False, False}, {True, False}},
      FrameStyle->Opacity[0.1],
      ItemSize->{Automatic, 1},
      StripOnInput->False]},
    {
     ItemBox[
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"summary\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batches:\"", "847425"},
                "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"rounds:\"", "11299"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"time:\"", "\"27min\""},
                "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"examples/s:\"", "34104"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"data\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"training examples:\"", "4800"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"validation examples:\"", "1216"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"processed examples:\"", 
                "54235200"}, "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"skipped examples:\"", "0"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"method\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"ADAM\"", "\"optimizer\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batch size\"", "64"}, 
               "RowWithSeparators"],"\"CPU\""},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"round\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"1.44\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.14378170001010102`, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            
            TemplateBox[{
             TemplateBox[{5}, "Spacer1"],StyleBox["\"validation\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"1.47\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.14660655922795596`, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            ItemBox[GridBox[{
               {"", 
                ItemBox["\<\"rounds\"\>",
                 DefaultBaseStyle->"LabeledLabel"]},
               {
                RotationBox[
                 ItemBox["\<\"loss\"\>",
                  DefaultBaseStyle->"LabeledLabel"],
                 BoxRotation->1.5708], 
                GraphicsBox[
                 {AbsoluteThickness[1.25], {
                   {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
2DKpqV+B/vyvKlj7BTCXrdrq9EmB/gfA1/8p
                    "]]}, {}}, {
                   {Hue[0.59, 0.7, 0.75], LineBox[CompressedData["
1:eJw1mHk41fn7xsW0UpKtpiyV1l8hJSPJo0laUEwiaRItlJQ9laIiFKqxlF2y
Jvu+PWdNoYbsy7GfVWQkJpP6frqu988/rnN9nM97ee77dd+X1fZXLM6Ji4mJ
bZkjJvbz9///OLDkv/s6hOGSxvSi+dy9UGgTG1dnm04+W4CZOaN/RCsX5cv+
C3tgZQuSJzXw+r0C8twenBZEmHPEi3EZqyn5YMIFkDkVdmz5llLy986gaa+Q
VapajlJty2rOB12F9owgrux0Bfm+G6gcNdJWz67CpXW7X2YYeoKb5x5bp4M1
5H3eMHt16cLcFkTZmvNPRTM+4Lv4VbVCCo28/yYcsd+quPQYHRULHgVsKboF
cdKWA1LiDLKeH7w1cr4amsXAxX+c0i0t8YdTazykWEeZZP078GYsz5AzxURp
0wkNa9l7ABuX73N7yiL7CYCO/HRHug4bZYzvr/96JRA21n5Jft/GJvu7DwKd
rKAI19e4zHCVUkxDEIB7w1rJRbVkv8Hw6Pj6FyHPa1FOL19Wb9MDeFGQH/mb
zhuy/4dQQ6/bubHuDSpo71/UExAKeq8CJC+eekvOEwYSN7Mu7fr4FpdrdIv5
DoaDo6espLN3HTnfI/C/6OXjI1aPoXLUC1UewyObYI05AfXkvI/BWVKsyn1R
A4Y9FvfuM30CxTf0xa5ENZDzP4E/DG4HpGx4h2FLqAu4+Re0eYRxcmrekfuI
gGDLPrXr1u8x/EH0Zb+sCGi/Hy+m+vE9uZ9ISAi1Un9w/W98tGBQ0NgRCUv8
K+3XSzSS+4oCuxcPJQ32N+LjgC1nV8+Phsm7crYV9xvJ/UXDOM3ixek3jfiE
2p6r9lPo05uZvTuvidznU5BgOzpo/d6Ef92m2zAcnsHJdP/9a283kft9BvJG
I+8vlDdhxDfJtmVPYsDBltYZNdlE7jsWzsjsohtt+4CRPsfNHWixUL+zTmXe
5Q/k/uNAczDW+GE69XwqqaFwLA7sXc6tUu//QOYRD3ONSvZlKTRjlPuI8S9K
CdBas0PXyaSZzCcBmCuzClb4NWP0uDbz2OFEYDEhZbagmcwrEfbs/TTewG3G
hp2Q+GF3Eqyf72x2SbGFzC8JlD52ryk+0IImntyemeYksH1bRcfrLWSeybDO
/q6/UXYLvisM+XXtpWQQczScCOhtIfNNhmu2q7/2yrTiz3EdFn8O1oMzMTL7
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
vyo/mdcgkre9f6RAhP8DlDbc6A==
                    "]]}, {}}},
                 AspectRatio->Full,
                 Axes->None,
                 Background->GrayLevel[1],
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6},
                 Frame->True,
                 FrameStyle->GrayLevel[0.5],
                 FrameTicks->None,
                 
                 GridLines->{{2500., 5000., 7500., 10000., 12500., 
                   15000.}, {{-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.5228787452803375, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.30102999566398114`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.1549019599857432, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {-0.04575749056067506, 
                    GrayLevel[0.8501]}, {0.30102999566398114`, 
                    GrayLevel[0.8501]}, {0.47712125471966244`, 
                    GrayLevel[0.8501]}, {0.6020599913279623, 
                    GrayLevel[0.8501]}, {0.6989700043360187, 
                    GrayLevel[0.8501]}, {0.7781512503836435, 
                    GrayLevel[0.8501]}, {0.8450980400142567, 
                    GrayLevel[0.8501]}, {0.9030899869919434, 
                    GrayLevel[0.8501]}, {0.9542425094393249, 
                    GrayLevel[0.8501]}}},
                 ImagePadding->1,
                 ImageSize->{302, 182.},
                 
                 PlotRange->{{0, 11299.006666666666`}, {-1.012, 
                   0.21200000000000002`}},
                 PlotRangeClipping->True,
                 PlotRangePadding->None,
                 Prolog->{{
                    InsetBox[
                    FormBox["2500", TraditionalForm], 
                    Offset[{-2, -2}, {2500., 0.21200000000000002`}], {1., 
                    1.}], 
                    InsetBox[
                    FormBox["5000", TraditionalForm], 
                    Offset[{-2, -2}, {5000., 0.21200000000000002`}], {1., 
                    1.}], 
                    InsetBox[
                    FormBox["7500", TraditionalForm], 
                    Offset[{-2, -2}, {7500., 0.21200000000000002`}], {1., 
                    1.}], 
                    InsetBox[
                    FormBox["10000", TraditionalForm], 
                    Offset[{-2, -2}, {10000., 0.21200000000000002`}], {1., 
                    1.}], 
                    InsetBox[
                    FormBox["12500", TraditionalForm], 
                    Offset[{-2, -2}, {12500., 0.21200000000000002`}], {1., 
                    1.}], 
                    InsetBox[
                    FormBox["15000", TraditionalForm], 
                    Offset[{-2, -2}, {15000., 0.21200000000000002`}], {1., 
                    1.}]}, {
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}]}
              },
              
              BaseStyle->{
               FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                GrayLevel[0.4]},
              
              GridBoxAlignment->{
               "Columns" -> {{Center}}, "Rows" -> {{Center}}},
              GridBoxSpacings->{"Columns" -> {{0.5}}}],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"},
           {
            ItemBox[
             StyleBox[
              RowBox[{
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.083, 1., 1.],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.59, 0.7, 0.75],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
              FontFamily->"Verdana",
              FontSize->8,
              FontColor->GrayLevel[0.4]],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          ColumnsEqual->False,
          
          GridBoxAlignment->{
           "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {False, {
               Opacity[0.15]}, False}},
          GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], 
              Offset[1.1199999999999999`], {
               Offset[1.75]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.8]}, 
              Offset[0.2]}}],
         "Grid"],
        FrameMargins->{{10, 10}, {10, 5}},
        FrameStyle->None,
        StripOnInput->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Alignment->Center,
      BaseStyle->{
       FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
        NumberMarks -> False, Deployed -> False},
      StripOnInput->False]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], 
       Offset[0.8], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Background->GrayLevel[1],
  FrameMargins->{{0, 0}, {0, 0}},
  FrameStyle->GrayLevel[0.85],
  RoundingRadius->5,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.774639387280321*^9, 3.774642797792056*^9, 
   3.7746429152731247`*^9, 3.774643048267335*^9, 3.774645137985214*^9, 
   3.774645371281394*^9, 3.774645585125883*^9, 3.7746456314956293`*^9, 
   3.7746456707146597`*^9, {3.774646366768282*^9, 3.7746463784726467`*^9}, 
   3.774646523788108*^9, 3.7746466762262044`*^9, 3.7746467085895586`*^9, 
   3.7746468631393776`*^9, 3.7746469409580235`*^9, 3.774647030604924*^9, 
   3.7746471746290817`*^9, 3.774647258840479*^9, {3.7746474241447525`*^9, 
   3.7746474364134665`*^9}, 3.7746478349705873`*^9, 3.774647972272837*^9, 
   3.7746485949452367`*^9, {3.7746486466670713`*^9, 3.774648661234086*^9}, 
   3.7746487974991636`*^9, 3.7746490761633806`*^9, 3.774690666816355*^9, 
   3.7746907030724134`*^9, 3.7746907400954213`*^9, 3.7746908029124613`*^9, 
   3.7746914133414745`*^9, {3.7746917174979916`*^9, 3.774691736426381*^9}, 
   3.7746918145275536`*^9, 3.7746919633058715`*^9, 3.774692432073482*^9, 
   3.774692581875941*^9, {3.77469268043641*^9, 3.7746926898661966`*^9}, 
   3.7746952761835938`*^9},
 CellLabel->
  "Out[194]=",ExpressionUUID->"59953391-b598-4f74-9b92-915198cd8b72"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["10", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["4/1/1/Weights"], 
                    "Biases" -> NetSharedArray["4/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["5/1/1/Weights"], 
                    "Biases" -> NetSharedArray["5/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["6/1/1/Weights"], 
                    "Biases" -> NetSharedArray["6/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["7/1/1/Weights"], 
                    "Biases" -> NetSharedArray["7/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["8/1/1/Weights"], 
                    "Biases" -> NetSharedArray["8/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["9/1/1/Weights"], 
                    "Biases" -> NetSharedArray["9/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["10/1/1/Weights"],
                     "Biases" -> NetSharedArray["10/1/1/Biases"]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    LogisticSigmoid, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 0.01, 
                    NeuralNetworks`Private`ScalarSymbol[3]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "SharedArrays" -> 
                    Association[
                    "10/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}],
                     "10/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "1/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "4/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "4/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "5/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "5/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "6/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "6/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "7/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "7/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "8/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "8/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "9/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "9/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.774381286066268*^9, {3.774381431924171*^9, 3.7743815052540407`*^9}, 
   3.7743816269889393`*^9, 3.774381910044753*^9, {3.7743822541960297`*^9, 
   3.774382284079988*^9}, 3.7743823444677877`*^9, 3.7746375074216475`*^9, 
   3.7746393364794445`*^9, 3.774639387280321*^9, 3.774642797792056*^9, 
   3.7746429152731247`*^9, 3.774643048267335*^9, 3.774645137985214*^9, 
   3.774645371281394*^9, 3.774645585125883*^9, 3.7746456314956293`*^9, 
   3.7746456707146597`*^9, {3.774646366768282*^9, 3.7746463784726467`*^9}, 
   3.774646523788108*^9, 3.7746466762262044`*^9, 3.7746467085895586`*^9, 
   3.7746468631393776`*^9, 3.7746469409580235`*^9, 3.774647030604924*^9, 
   3.7746471746290817`*^9, 3.774647258840479*^9, {3.7746474241447525`*^9, 
   3.7746474364134665`*^9}, 3.7746478349705873`*^9, 3.774647972272837*^9, 
   3.7746485949452367`*^9, {3.7746486466670713`*^9, 3.774648661234086*^9}, 
   3.7746487974991636`*^9, 3.7746490761633806`*^9, 3.774690666816355*^9, 
   3.7746907030724134`*^9, 3.7746907400954213`*^9, 3.7746908029124613`*^9, 
   3.7746914133414745`*^9, {3.7746917174979916`*^9, 3.774691736426381*^9}, 
   3.7746918145275536`*^9, 3.7746919633058715`*^9, 3.774692432073482*^9, 
   3.774692581875941*^9, {3.77469268043641*^9, 3.7746926898661966`*^9}, 
   3.774695276250416*^9},
 CellLabel->
  "Out[195]=",ExpressionUUID->"8df91485-c259-4baa-b5a1-535520d9e828"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test the train model", "Subsection",
 CellChangeTimes->{{3.774352820819623*^9, 
  3.774352827059663*^9}},ExpressionUUID->"0a081682-2cb7-4138-9af3-\
39773615dbc8"],

Cell[CellGroupData[{

Cell["Check Inversion", "Subsubsection",
 CellChangeTimes->{{3.7743520818234367`*^9, 3.774352083855269*^9}, {
  3.7743528285076637`*^9, 
  3.774352828875527*^9}},ExpressionUUID->"25fc94cc-6957-456a-8b72-\
7d29079ee8dc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"in", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", " ", 
     RowBox[{"-", "1.5"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"inverse", " ", "=", " ", 
     RowBox[{"invertResidualNetwork", "[", 
      RowBox[{"trainednet", ",", "10"}], "]"}]}], "}"}], ",", "\n", "\t", 
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"inverse", "[", 
       RowBox[{"trainednet", "[", "#", "]"}], "]"}], "&"}], ",", "\n", "\t\t", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", " ", 
         RowBox[{"-", "1.5"}]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"2", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", " ", "1.5"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "\n", "\t", "]"}]}], "\n", 
  "]"}]}], "Code",
 CellChangeTimes->{{3.774349828576951*^9, 3.77434983968331*^9}, 
   3.774350232689061*^9, {3.774351868507565*^9, 3.774351874686586*^9}, 
   3.7743520856507683`*^9, {3.774352280916863*^9, 3.7743523550501747`*^9}, {
   3.7743525250054893`*^9, 3.774352528786915*^9}, {3.7743742507324257`*^9, 
   3.774374255894919*^9}, {3.774374669325013*^9, 3.774374691457765*^9}, {
   3.774375112449683*^9, 3.774375115602233*^9}, 3.774376242281488*^9, {
   3.774380400828876*^9, 3.774380401077499*^9}, {3.77438210964386*^9, 
   3.774382126851447*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"4e3b08ed-190e-4fe0-90ef-ddf365dd4ad4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1.5`"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "123817.609375`"}], ",", 
      RowBox[{"-", "2.632944`*^6"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "571802.75`"}], ",", 
      RowBox[{"-", "1.2159177`*^7"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1.5`"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "155852.828125`"}], ",", 
      RowBox[{"-", "3.31415`*^6"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2"}], ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "266633.75`"}], ",", 
      RowBox[{"-", "5.669862`*^6"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "218.85736083984375`"}], ",", 
      RowBox[{"-", "4651.2021484375`"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.774381360294136*^9, 3.774381602979723*^9, {3.774382101000105*^9, 
   3.774382127576737*^9}, 3.7743824255102987`*^9, 3.7746375341490345`*^9, 
   3.774639364824832*^9, 3.7746394314680004`*^9, 3.7746428538649535`*^9, {
   3.7746429759405193`*^9, 3.774642993530238*^9}, 3.7746431299541707`*^9, 
   3.7746451918289957`*^9, {3.774645425623515*^9, 3.774645435780822*^9}, 
   3.7746456038106613`*^9, 3.774645643829367*^9, 3.774645728143941*^9, 
   3.774648869992716*^9, 3.7746906685816355`*^9, 3.7746907044666862`*^9, 
   3.774690769313299*^9, 3.774690836168542*^9, 3.774691445289054*^9, 
   3.7746917336647644`*^9, 3.7746920298220205`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"f6116abb-298c-49e5-be87-e20d5f6da84a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate random samples", "Subsubsection",
 CellChangeTimes->{{3.774352099799654*^9, 3.774352100375235*^9}, {
  3.774352795155661*^9, 
  3.774352800787465*^9}},ExpressionUUID->"03df0946-5098-427e-b878-\
11ab3e2635b9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Original data:\>\"", ",", " ", "\"\<Text\>\""}], "]"}], 
   "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"$plotargs", " ", "=", " ", 
   RowBox[{"Sequence", "[", 
    RowBox[{
     RowBox[{"PlotRange", " ", "\[Rule]", " ", "All"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"data", ",", " ", "$plotargs"}], "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<Latent data (should be close to Gaussian):\>\"", ",", " ", 
     "\"\<Text\>\""}], "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"trainednet", "@", "data"}], ",", 
    RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<Generated data (with inverse network):\>\"", ",", " ", 
     "\"\<Text\>\""}], "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"zdata", " ", "=", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"MultinormalDistribution", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}], ",", "5000"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"invertResidualNetwork", "[", 
          RowBox[{"trainednet", ",", "#"}], "]"}], "[", "zdata", "]"}], ",", 
        " ", "$plotargs"}], "]"}], "&"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"3", ",", " ", "5", ",", " ", "10", ",", " ", "50"}], "}"}]}], 
    "]"}], " ", "//", " ", "Normal"}], " ", "//", " ", "Column"}]}], "Code",
 CellChangeTimes->{{3.774352102087599*^9, 3.77435210409548*^9}, {
   3.774352154029871*^9, 3.774352187544139*^9}, {3.774352221172174*^9, 
   3.774352238514353*^9}, {3.774352750736032*^9, 3.774352784393464*^9}, {
   3.774352850704413*^9, 3.774352868573188*^9}, {3.77435290881396*^9, 
   3.774352937688102*^9}, {3.7743746388160887`*^9, 3.7743746526097813`*^9}, {
   3.774374704192348*^9, 3.7743747044101*^9}, {3.7743747588009644`*^9, 
   3.774374803923032*^9}, 3.774375970430026*^9, {3.774381323929538*^9, 
   3.774381333828768*^9}, {3.774382171651217*^9, 3.774382220297845*^9}, {
   3.7746394653255925`*^9, 3.7746394697197647`*^9}, 3.7746431911258135`*^9, {
   3.7746433186444163`*^9, 3.7746433223323307`*^9}, {3.7746467825779057`*^9, 
   3.77464678273426*^9}, {3.7746468234218025`*^9, 3.7746468237960386`*^9}, {
   3.774692500111566*^9, 3.774692502267831*^9}, {3.7746936596285744`*^9, 
   3.774693665859916*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"5ff15106-56bf-4120-940c-00e683cf3392"],

Cell[BoxData[
 StyleBox["\<\"Original data:\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGAwAGIeFZ5l/PJvHI9J6x8F0eEcxWwCQJqnYYogiFZZ6q8D
oqcIndjdA6Qn3Z+7oBdI/9t9fi2IPlR3MKQfSBuvZUkB0U9KD5aD6EfLBetB
9LmpUf0g2v/C3ukTgLSP7r01IHoB57GNIPrgLMs9IPqO2ST+iUC67HaoNIh+
67hHG0RHFcmZgmg+x0hLEK2s/dMeRL8WF3IF0WuecAWA6AdHp0eC6Al9izNA
tEe7XAWIfrasvh1E32vPWgU2p9H/HIhuWfTwGoh2UU1TnQSkr5w5ZwyiD2gd
dwHRM1zP5IBo8+Cpa5cB6fMfBTaB6DVPJ+0C0evsDh8C0ff2n+BbDqSZJm03
AtERU+zsQfSFf7oRIPrFI84pIHrHizNLQLSMfCfDCiCdU/HvM4gGAKkIuTw=

  "],
 CellLabel->
  "During evaluation of \
In[196]:=",ExpressionUUID->"86aa11b1-4682-46ff-a8a3-f7af4c81fd41"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
VGlJwetTgWI6YX2YfBhqLjuwINnPhCHgMIh3Rg6rJjewwH7xm+EL3wbRQMfi
mmsmBV/spG5f0yPz7N9zO9KYgnlTvY37n/bhQvV6xetSLIgW/No7nz6IziHV
1zX4WbD8q71QqjeZ9y+hZX9NWFBprBkdeK4P2bue8ZtoEv9t2nzT4nYfrooR
+pRP3n/gFKjKEmFg+rEYlWsuLDg1VXc/M7IfXzuIdEh7U9CwzuZQUV0fnrO9
ZMBZRPh5+2K/YdsA/uC9bp51kAKtf4ZjS3T7cX2lIKNZgAVvnyqsfr28D21P
DBRYL6Tg7TfDnBVq/bjOyztYqokCVY6SFaJaDFRwlDwYXEHyzefQePMyBnqN
BP5KIvs/FdWwJbKGgabtTCo0hQXBO6SfKCUP4IoycXvXuyzY0LSpxy2DgSNa
H6L/aLPg2wWNnxJnGThtYeK2JIkFvdGPFsWQ/uuiku2nlVgwXn95tsGZgboH
7r4x6aDg6/7n79WjiZ7t9k2TOkdBXr259+XffWgtGpigNEUBw6Xn7dOKPtQe
PXlZpJYCjksC3SVeA/ghoGHZ1QsU7KlzL40p7UOjbxGat8wo6Ny441Pr5j4M
WivAlMygIG6g4TcHox+HGJqvHVWIPjB0A5rHe9Gd65DY018UFPZs4LU360Gf
D46jZWS/hQ6uFwk3GMAwB4651/4UUOc7lWMK+jHoSwVHAvEPQcMTkS7f+nDS
m3X8SikFoXzeIXamA/hwFbdYdwALZC8L+0YVDuB2H0tJ8yEmbBWoFxL52Yd9
7s7NT3spCAr+uE/Gsh+13uboXH9Iwe91zX0rpvpwPEn97NkBFmysitdTTu5D
uBcSeSuVBWVByvob5vuwLXpW5uQHgh8fwynFsgdDPqx5scSJgruxpcln9vVg
vHLKKf0NFJQM8p6eiB/AIV0/rphOFqyS9BN5rdSHyoEnDyxbxYKV+pyiT5QJ
nhVcS93diZ7u4je/WTSAonVcVqPmLLgUF3b0z5N+tDU4wdVK3mfx1z7dq9GL
fsoG3uK9LPi9jKe0SrIffUIcea68p2C2MGnr2JI+lHF/ueDmTwpE2mrC/Z73
46qVXoJXo1iQZewkcklyADsXUftct9LQeKcxKUCvH5kruYM/eFJQ1xUf+Y/M
N21Tz+0GMQpSt1joTS3tR+0XCdWPj1MQpelWeo98buLjYv3KiwIbhQav64xu
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.4823286179776132`, 
   1.482139489503562}, {-1.4824818359592147`, 1.4798172197923807`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGAwAOILfsLL+OXfOJ7YZH4URKfsq2QTANIZaXMEQfS9qWE6
IPpJ4ZndPUB62eKFC3qB9FzjK2tBNJfB8ZB+kLwMZwqITuU7UQ6ir96UrAfR
MnuS+kF0gOTJ6ROA9OyZT9aA6FfTz24E0X9anPeAaMOamfwTgfQalXhpEP1Z
5Ig2iN71U90URMd4JFiCaLl2BgcQXSQo4Qqi/acLB4BovtPzI0E0d/yqDBD9
5ph6BYiOP9DaDqJ3JBavAtEmFtHnQPQj9xfXQPSEkFzVSUDabeo1YxD96vwZ
FxC9gPliDoi+8mD62mUgf/kJbwLRJdVTd4FooTNHD4HoC7Gn+ZYDabFrO41A
tN5eR3sQ7S9uGAGiuxT5poDoCPWLS0B0mm8vwwogzcDH+AVEAwBiHbOR
  "],
 CellLabel->
  "Out[198]=",ExpressionUUID->"56e5a343-26da-4e0a-b909-411c0f16456c"],

Cell[BoxData[
 StyleBox["\<\"Latent data (should be close to Gaussian):\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGAwAGIeFZ5l/PJvHI9J6x8F0eEcxWwCQJqnYYogiFZZ6q8D
oqcIndjdA6Qn3Z+7oBdI/9t9fi2IPlR3MKQfSBuvZUkB0U9KD5aD6EfLBetB
9LmpUf0g2v/C3ukTgLSP7r01IHoB57GNIPrgLMs9IPqO2ST+iUC67HaoNIh+
67hHG0RHFcmZgmg+x0hLEK2s/dMeRL8WF3IF0WuecAWA6AdHp0eC6Al9izNA
tEe7XAWIfrasvh1E32vPWgU2p9H/HIhuWfTwGoh2UU1TnQSkr5w5ZwyiD2gd
dwHRM1zP5IBo8+Cpa5cB6fMfBTaB6DVPJ+0C0evsDh8C0ff2n+BbDqSZJm03
AtERU+zsQfSFf7oRIPrFI84pIHrHizNLQLSMfCfDCiAty8z0BUQDAJ16t30=

  "],
 CellLabel->
  "During evaluation of \
In[196]:=",ExpressionUUID->"bc4d8564-1b9d-45c4-92f5-5a822bb49649"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwsnXVcF08Tx08sFBNUbM/uQMWOs7v1h+2p2K0YGHAmGNidZyCiYmCLymEr
drenYicWiqLP47yPf76vZWviM7Ozcbv5ew1r28dFUZThnory7/f/f4ZV7k/t
//+aPQs/+ferJ6udXPv3/+qjnv9Lq6Pqu/xLK+f3P/2Xtrdn/iG/Q0pLefVA
o1//fq0h/STfnFjot/x/83+S1tY8lbTZbAvlr8Z9//errPWXfPV72F/JT/Mr
Tn7XxST8+zU67bCln2qfpL5Srqbk6y0GSdr+7SPtma2SpD3b2PVM8ttt+ybp
zEUk30gVlih0lLgmaSv4tpQ3b0yQ/pVnH6R//X48+ckjlH/86hl+CP96ikw/
pXwtD/K3jxT+Tc8zQp/ZZZK0pzerBj3KR+hLCBR6rVIpJa0Xaib9Gb0a0H7Z
r8irY6K0p98tJvSbFZcK/fpBV+QdYEt57XoA5Q/kE3krJW7B384u6KOYhnzc
D0q+mQP+7MEPpD2j20pp3ximSHnr026pr5wfJuXVrF7QVygU/bz/AB6C8oo+
1Hftae+um+RrX/JJvnZKF7yYe2JEXsahzdDbtQrpERWTpL16AdK/Fekr7VlN
3kpa2dUrheAtc8EXUn5aSmnfONcSfSb8RP/NkknaHuop7WndOsPP1tPk21nA
a+UZUl9dlA08dclBusg5+L2ZP9m//qxM8ylf8z14qVIavH4vl/Jfvj1o4Stp
370P/J9bLu0p4w4JnoyIykKvNjiQ+vfQh9ktq+DJmHiL/rPsF/sxfK5R/tRD
od/I9EPSaqlc4HdXHvBY1+m/ZB3p3zzsKv3ZR58Ivdrz8vDT/RX8h84QfhSr
urRnBnqh/6i74OH9Genf7NZA2tP3lxD92KebSnk9cD74tgZL2iq3lfSE/PT3
7An2uF1B/vH9sNdeudDXwUHSv3F0JO2Hmei/bmvpX8uxC3wF34T/6gWkPXP3
RuSd8CUleNn1WsptOy3y0T0no5829UhPRp5KmomCN9utr+Qr+3Zg3+2GS9pu
dBd8Xq6IPQ0zhB9j+nPJN7OBX91jkbRnPN78F1w3fim/85uDvz9Fke/j9OC3
7n7JV5ocFfqV7aPQ35B9pMstBt/aa/Gn2qOWUl7z/Ax+Sv+i/6XJoK/KAvxL
6YvYW8Qc5LO4m9Cr3s9B+ydzpRL9/X0l8tHK70R+UcHIY+Q9KW93Ow/eQquB
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
EcKfkoN4yEgcLPSo1yMZrzYUo/yVZqwHL1sr/Rl5WP8y95SS8qZWlnsUvE+S
btOIeMK3LfRnHAeeN3gLPWrfZcyXy+zHflw3MZ7VSgM/PcY4582/oI9H5YnH
+p27IuUycE+THvLpktBTkXjdnB+B/l34LlS52lvkaRXrxP7D7IHY/6+BnN+4
tlHaU54756E/pJe0mjgI/7ElEPpbBeGvPjQh/zXnhdSqK6AvYR34mP4X/Vzx
Ad+pqkv/xnJP+PUOEHlrszLgv74bQr/WuZuzP7kQfjz7OvtXDr/jf+FPfZte
kP/3boU/XNz7srS7ju8+tIQYxoMGzE/UIoEXJR2nQN+7E+el3J67zr0snrHS
fr9w4p9LAeDFi/FW7TFY+jeubXXuLQqW+vZvvtO2W5wX/rQGt/guOH0jKW/3
aI//DIuR9o0vIdh3O1vwpB7vR/v58gk/ds66zvpTVsm3RsaD5ytBwp/q6YY8
YzxFvuq+1WIv9mIvybe21UD/iSlEfnYevnNQh544K7+PFPzF3XKSr7xszfpk
hp+SNh/eIJ2jstBvNdKd9c1sIj/tXEvixYic56T+6wqMx683SvvWbb6/Mb4l
IZ+VxcHn6hDkM7Wy0Kt0tCTf0moSz5y0pD/zSAbJV0eHws+75/Czaxr4qcp3
Hea3pvj7JFfi/1G5pLw2wo32//aV8mrZQ8TPg5tdJf8/ydeaLIeebvtYbyyd
TfgxDnOPlBI1WvRhBeF/lGwpJK3HrEZfWXfAb6FZxIvZfcFX2dbg578iUt58
5YZ8Sv4Sfs1kqfH/rtNPYmdpoU/rJ/SZxfleRRl45ISkQ1kfNxeY6KtwDdrf
HSj02sm9wN/3x4Ivq5KO/OuRr2fMRn8tcop8NbWO8G9k+inl1bfOvS2HWwr9
5gnmN+bi0NPSTijri/qgWSfwE8UZbze1E/ot27lH5x76UkcWkfatmG6SNnM3
Bp/9wk5JvnqK8WuCKv0pQ9rhPz83OSPt1hoG/g4Xlv71/e8Zv27VEv7V7pzz
1yPSS3l1PfdUWOMHSFr5fRD7q55c+tPSDGE9aeN8/IUr3/1ZS9rhX86eY35Q
w8I+XbmnQF/gKvzZNuc/jaDu2FOOlcizf3fw/Sc38VPE2+PSTsou2Fuv9SIv
5WJG/FPPu0KfdTqQ+f/bkthPHu5xUIpvEHnY1bk30OiT74ikL7E+ZU45FyX/
L16I+LBgD2nPTPOaeP7M7qPSzk7u9dDmnRJ+lawtiadr3ouRdJvsfI9QpqCk
zUPTsOeb3oJn7WQ8/r7vIJG/2f8l/jhdv8NC/9Y/1G+ySOSj1uK8n3rth7Rn
LOF7SSX0rbSn1Eh0vp/8IPLR1yvOPY1lJG3Vu8P4vQP6zL3s59jHD4p8zPgN
rK/0KC7yNrymYx9N7p/E/nOyP/RwqCW/+R+Ax5XXwNObD5Qv8v6Y0DOnIHio
voj+C6iMPyUKifzsTdxDYuRxQX/9WpJ+kyj0aN7gU5++AX0/yQ1+iqYT+SgZ
2S/Vji1Av8Hc26x9aS94NKNmw1+GjEKvUYr1Le2uLvXNJ876wox3In9tUjx4
PjEIepPWo/8PLgckPXwi40vbtAelvcI/8Cfh3pK2y3FvkV7ntvRvz0zvIvpe
01D4swvUZDxcMEv4N3IGsB6VLSZa2n/Nd2CKn71X8uftQh4XFfq/dQn/fSSN
BW7e4E/u/xD9KH9+Mt6tXL5b+GlZifXDr4v3S7qgN/T5zBX96H/moc/AnZHo
gfNl6tQdIh+7OP7dzDJd8tVjnI+xZk0R+szsnKNXOr6ivy1xjF+LcoC/pDHE
g4OmhMpve+6FsQZW2Cft7We9VK3bWOzPLNsYf9WsqtBrbiXeMdLOXifp8iry
7nNG8tXlbs55Bx+Rj6G6o58F8dDXg+8B1CGbsJdjx5kPbXU9in47gffLo6W+
6fIX//B3tZS3UnF+SisYQXufRhEfZG0HPjZxD50WcHejtH+Z/UsrY/pF8pv8
tvNd8Er0dTkc+Z/NIfpW/J39hmNvdoMfT+f7w4pSXnFpAn/hQzZJO+m5B9ao
XRH/8InvltVLf4PAsXNvq8e3GdLePtZTlbkDlwqdixTsJ11N0Yd+Phg8vWst
/s5cmEv0be+oB96esj+u7Eu+XtKz0Z9iuUl97eIV1pMGhmLPY+sir7RjRV52
NuJldVzJXdJ+W2f+lfV0uPxuCsH/r7o1T9qdwb3iZrz3Zqm/qjH0VYsR+Sgv
2Q8zzrjS3t/r2LPHteDof+Wbcx7TfDRtu/QboeNPT20/JHRt5p4Y7ZXrcmnP
25mPpDixRdrdy71Q+pMc0p/lOh35bW0j8lS2FGf8b1BJ8KuV4DtBc0OC8Kv0
Zn/u/w4+Qtrz494WY9OtBtLuWeee859vVsr/I1j/136VQB8bb6DviqGzpFy3
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
nnX5w2Psqyf68nWjvf0jSK/8a4P36/jjH33Ay95zzveMF/EPJV2JP9v1g/6b
+eGn4zShx67olVrw9uQ09HtNwD8Ft5J8fZoB3pq/xz/1SeT7ae9Skm9tc+4h
TTcAeQdXxt8u6wS9xbj/UY1O80z6T8H+tLLxMvQ/HIx/X1tC2lMqHnbOZ+YC
7+24t1EZckzyjb3O/CCxPvQt5L5403+StGc94vso5doh8FuU752MquPxdy/O
wF/KIs+w58Lo+8Ztyg/j/kqt9TDyd3J+yz47QdJWCu7DNpaOBL8zOF9uT4ug
/AXu07VLXEK/Q3h/QtnmB/0buS9ByYv+9Zi6jA+1hyLP+tyzr8fF0p8/eLTT
rHf0FcV8/lp55JdvqnN/YD0pr8TUhZ+olshbOQS/+YtCb4oLfK9pTEHeZ7jX
2x5EfVt3xR/dy0d7L/15V/GyLfSqz2o548Efqa9m5J0t3e0K/HTayfrLimfI
o8pIua/JuD4X/ivpLv/SakwjSWs+3Jen/Wdgj5Ns8H1uHvo9wj2kVpEE6BvN
/Uuae0f4U9kPVQcfpv/N7DfYw7Mj/5p8H63NLC3lTc/PyK+rGof/2II9rl6M
PNpWwj/tz0h+f2c9ems89qt0Z/yccAd9zHIBf0v6Snlz3GRnvbKDpK2oCaTP
T0Ue19xYjwiYJGn9g/MeyNdAKa8Gb2J8XJceesZudc6LhMHvw/3gP7U/9KRI
xfhedAj214Z7uc27lFcXNsH+LHf0WYb71/Vdp6C3WzqRp10L+Vn5XNgfy9yV
/hv8wZ5zVpXyyjMX5lull5Jv9mQ+m3APffaeiHy8cjwX+XRhP0Wtfhb5jwgE
H+/DwHtPvm9VWw+U9rUnzrtQI2cjvwOhyCvpK/jY+4f5z6Ba2Eci79ranlmo
35L7xNQGFchfvITxts1PybdXc1+g8iqG9hdVA88Z/lA+0Hm37mYy5LOU+bz+
eSTyTv4Xf3ovG/xYzO/N2QWFX/1yXejNOB78POAeeX1kKuQ1gPuRtf5NaT+p
NfPxOyuR717uR1Y+XKK/ffexz5Dh0r7akPtmjW6vsKfrH7D/E27w853zgUYO
lxeSTsb8xK40H7zmtuk/Ljv9PUjGfWz5O0v7SpvX7HcczQ1ejiUjnji4H3rm
ZAWfQcHwe8N5B3heReR/Ji/lJ6eT/u0l3L9rJA+VtP4zA/Wz0r5VmHfs7TbU
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
Txv8ifHb835Snzda4qji79a3E/hj3GDoL/EF/net4T3c5FbM376HXD8V6jd0
5r1b8yzgfNbjfY/9GRxks5kK/V+ngnNcazvy/Ux/Oz/4DMrTCYzXPh/zbwyB
/my8FzejOzH+VuKB9Xs38nNtIb9nj4L7veyXjD+P8a8sj3ifXOAF/lmG+9pq
+cLg9np9pDywnsSJvI28poxDXtVieN/dvD+4vqMv8j6+8Wj0nbSB94avK0BP
QiP4LQ7usZqiMP6gruBoZl5I+8tLwVFeJt8bFiiHf7Tj/YpR6DY4q3UnYq+J
OvJavg95rxoMTnEK8dNuth3/G8x7Aq3cG+h5j71ZPYvC35i+zHeiNfr5V4Hy
oerIo6kJ/xEv4Pf7N/jp78L4vXg/YSv3iY+1hmF/le9iT5X/IO/R88HlfcZ7
WfNUELibDYmHxti56MftA+99D2akfcNZxK/p4KAbDeV78fmNJO60C/SurYI8
vZpTvyQv47sTn83R6Nt4AT6C1ms97VsRn/7XEfmePQj9J4lv9gj5vvoq9q6O
5fvCdn8PrvH6e8jzbz7s41U09qC3Bic5CTwD9WZxcKvLFqOc3Ap9lFyLPPtV
AXc572zs69Jo9ONznXLuFbT3b4u83uYFZ7Qm+2l7fhb4eXWF9nlHg/O6BTwW
9W0j/O1xCngC5Q8gn8e8t1Z9xoMLqtZD/u7NoXddMcoeT/Gn4kd4j+75HHp8
ZiO/TKG0b1AAef31IT6ckngLR4eCA+r1DnyF/k3w32rZ6X8S3FprRn7s2+EO
/FSReAldDoGjWz83+g4GZ1hrynsmPfoKOM9TwWvQ8l6QOKq8/zQ+xYC72x19
GJkGIN83ztjjWHDGbb8J4CssnY0+fKlXvd/C7z3wAey0gsw3An8xFoNzbV7L
R/0ViQtcpAf8tewLbrJfIP5+oTE4hlkDeI9fH9xh9Wp98BY8iQ/G2sbIY1tG
cHATiS9qmxv419Fo5LEDnHit+mns7/ZccDprg/ehL/GFvyK8z1SrzaL/dOKt
cbAf+ogiftv9Z4HL2Gkg8vjwBhzS1mHQ1xCcWnVRGvg8Zx+Cg+ukM/90D/zj
wWbsLW8i9TGujNd1OfaZrSnyerGR9o87gn+Suxf03v8n44UX+pqYGX9+/4fy
hEW8By67C/kcP4V9lfwKruot8Fb0hynYy1viqz2hHjifpYcjv34q+rsKno7e
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
WCb0yZYlS1FmqNymGLsaZgiTW7bsS8juWhIZpkWWJFcxZV+yDsYlW0TZpuy/
3/f9/PzV43bOPee9n/f7fU+vmvP/sJv0JD//CE6XOobvb0bdsfx/9zYnRH/m
zwtkfcuoRPLJMh6cB/MOQn/WNnDkrifKszG9PfZzbBD9k39W4l8NXck/HixH
Ph9t/fLsftAbch9/ib2WLet/vsR5/soVf91fAXl4hCCPlI3UB0WdwUm7G429
pODfFm+D86FMHjhFmaeoNxq+Z9x1N/bQ4zDyCCxHv6k59q3ERxA/RjpA39Rp
2N8gk/lh5aivbzUQeq1t6xG/9zXEvsIcySebrL0q88075FNrp4KD9Q35uHLa
nv/n7pGNvA/7IZ9ujeR8NVPCke+UZtRX6TdlPeNZPvS+qsv4pDkybj7ZKuPa
1R6c1+taYU9Tu9i+PzSRcUusM/HKIwSco1z6GVrBJ/ZfU55491cKuE/Rl8jX
b+y/LM/OLzjvHDKwZ5dZQq/qUA9/+RKM/hcMuCLz194kXjuNEXmZVy9Ab8q/
zC8+lfhfF9wxI/AE+ntOPLM6TcQ+a/0q61mGD2L80Xj0U9ed+ufRTRlXUs7R
33uIP6kjp4l/aX0vCv3Khz5iT3pwEvTHXcQ+tu9mfutC8r/S4BZpni6MR11C
PpPoBypuOxh32kY+9+8p9LNvPv6RUIL137zk/Nr6CdytnBPINysI/cw1Rf+q
SxjxwtWZ+jHTX9ZTt9zBXuuosp8eORd7rJgl/BrfPqZffH49+l24HXlW7AvO
ypLu+E+rifK+euGrjOtXSoKLVVRB8hlLJXfsMWkO/Zx78eBWHUjm/N6TJjhF
lkx/9L/qI/KPqMr580+w7K/kvRZ+rGsGy37GiGKcr48OCr3W3fSTlXhwe6zf
vSffvTcBXLB4+DHCR+E/DbZhv60ioPefatTLAauQz9cr5LtLA+B/hK2f6TYR
nKFwR3lfjXmCfl0y8Y/VbWQ9dWIg+d3TVvK+fiWf76MuV3k/lvsK1shMkad1
6zLqz/o/EA8aX+G8LQpB/22nCP+W/q7w1/sG+vJxAndqj60fsvQA8j4cQP1c
bxb+NW0S9UPtEyIv0/4N9rdKBbdsYEMbvZ/lWWu4Bf/cmId8Dn+U/ZX/asl6
5vEqvB85XHB9FPfTyOvSPBnXh/Zm/8sWwVVR/eI432NsuHGjjmJPT3tA3yZ3
8tOCSoJLZPVuTP5yrLboW7l7CnucEoC9jZ6Mf7Q5znrdNqC/Pz3AadrxkP7w
AXCarCMC6OeM95H1jdL/Yi8Dzgl9RuN7xNeG+7CXEOK/+a0FnCUjG36KvAXX
Rm3XDPkH7QP3aOR47Ht8luCuKDkjsa/nnkKfJbIA/286HxwftTvynlAouCuG
6xjqmS1rBKfF/Oc89tZ+t/iHtZDvQ3oxzgetvS/fqx43y8See5IveHUU/pUz
d7DPkyr6+X4/5/uVq8yf25/46fEO+QfVwH6jHsizketJ/ZjiTTwoo/I9LNVR
6FN/7Um992iWyFMrnIm8h76T/XSHOtSHuY7Iz3Mt/Ni7sf/JCpwXI2KIJ+/J
N9XMxjJubb2OfL1yX6FHu/kb9vjLJ+x9lBv98W5J4k9K/rfIZ2g4uDlzcojf
4wYhz+4+1NvHYsBV2pKN/Fr+J/LVyzcjf3h4AP3cPU893HeU8Kf8s5v6vk4X
sQ/9MP1PY1pHcKRc9hJP+9wHlye0LPXQ8lvY44sb1BOHboj9GFl9GXd8dAL+
DhM/u5UV/rVcW395gxf22PIM/afA2WKv+pVk8ufF68HVOkP9qju2lPct7p7U
gxtMcMHiu0NfhUoiLy2gIv220T/Dz72LyGvYQ5Gv9nQB8dl9PbhUloXsN++y
7Ge5spn69ssh9k9dTTyolIL+0hKRrxEHTlKHdNaPDAXXJ3Ee/uOP/ZsHalB/
qqXBLQomP1f2rYf+2/n0yxYsARftYS3y6zLTRb9GwEzq9X7rsLeObYkfteph
j0ds+erYW8KP3ovvpdro5fKsTt3E+V/TF/l9egp9MdPR75qTfD8qmAquj/Of
1Le5OYJLozlgn1rfv9F//wzsreJEwVlS/tyLPrvF834y/RW9xTXBwdKK8z1I
dy4C1yuf+KfpZYknpf2ht6ENZ6ldDfrXE5bsk+emjpwfGeUSZf9xS7Ffr2P4
Q3RX7DuuDe9/ckB+V28JPdqoRsSD1InybHl0APtxCRT5qTVfUK9UOyu4cpar
FXm2/C3yM/68TvwcDg6aHrMF+6g2C30e34N+WvgITpHq9Yn+a/sIoV9bsK/4
//a3pC0GJ80nk35YI11wtKzhafjLlVRwq/yuEi/CDiCf99uJny6O2Ed1lfz/
2AORr/p+Cv3GuMfgpLUoQ/xxH8/79s+J37c+Cz3WSh58f8k4AM5g28vkn4uj
RL/qyzm277njkVdWJ/idFCb0qlkdiPede0fL+24W9FfBhgM3YiH+cemqyMPS
qRP6SNgn9mTufUM/fZ+OvLvUQd57UgRXz7wdyvmiRsmzHlqM8+9kt93yXMj9
JyO9ndiT6c33P8vSlWIf6sgZ2OvOeetEntUbUS8Wvy24dJb9iazXqiM4blOJ
/0rCQ3C3vovme8jn3QmyX3PyVavuhnyDFeJFv3PCj3VdHP6XvhocvXN+6PeI
P/a6Ig/9rvx7o+zv24V+cgG4c5ZJ9eiHVp4tuING7wTi08IRK2T9TZ/Ib9Km
gPPVifsm1mnN8a/wKtwXaOKyWN7PTbd9/7gj8jPqr8beB8wnPrilI58FHwSH
zloB/9RC+gk/ermZnIfWChtEnoszOI9edVwpv69EfaQ5BQv92n/UH9rJnaJP
bUcY8bjsbfg/SjxQf54h/qn/8YH4EeiP/l7eQP99+ghulNI+i/ykX5Vhsn/R
HPqdJ5PWyniNauRb5eLBmXoSif6PX9sl/PYJx15XPhH9KS8qoY/c2YJDpy0b
j72mn1kk7xf7G/lsDhPcMG3RJfKh007Cj+7twveo3ir+7f4M/n1qiD0Z1wcg
nwQnwYUymtwlHlyvGiLr3BhHvtB/xXxZ36EC58WUEsinZwz2/nqB2Le19ibi
m14Nf307m37Q437g6FXh/DNzV4r+9ZYPiNfn30yR8V5x5I/DPkUK3VEZxOeI
V2I/6q1w6n+vhuuEj9ub0U96U/bb+hX/OnUVHDS/xejX0mK08Os/j3z2Qgb6
uMl9Luv6d3Nlv0Pv0EfHiK2yXvGZ2GPxKpHyfLM3/thAGy/P4Umcf87XxL6s
iaU5jxLWJ8l+8YeIb0veRcn8Q1l8j/rQERw/hXzd/ClOcJn0l9S36kAXsV9j
QDLyatxa5K1o7bCPJU4Bsu+L7/j+4l1pl/B9cIat/nQ7IM9np2E/U7tMlvcf
nISeQ55Cn/mmEHkZEdHy03Em+e+r7G3IpTvxZlGrLfIzcC35SXZ7kY/qfx96
Zq8Sf9c/ncU+/9y5Wn4/by7+YbdBcNIs46j/tZvP58n+P7aAnsYB+MMbX+rH
+h74bw8v+nNvTaFHmQ0/+ndDhV+rmUp+FvKzPOtlapIfP9YF18uy0R37dJ4R
hbw5H7Q7g0Vfeka27GdZ3khwsBS9GusVmynng/EsF/+YnCnxWEvdTj+j5PAd
IodDUbw/1Uve16K4/2PeuCE4gmYM+Z+6o7jsZ5lg+57hU0/0o13n/qxWspbg
PBl3PDjvSqcFCz3HHhDfVzgKjqL1Cd+PjIvHBYdJHVyT/OHRbB95brIB+RWl
yHoW752ch/Gesp/ykPsi+q/rRD56p7fwE/wZ3DXXc5yPSRFBsp53EfM7BgXK
+8E+xJMNx8W/1LxX9JOK5Y4V/b/6nfiyp8lAmedVn3rZYbUu65bPhb/iHuI/
StIJ+l3RT/YRF5rRj469fBC+3Kh/ThwSHDV97ArmzygnOG365vp8H/zRXeRh
HiSeaVUrC06aOqwk88+UQh5z6MdprRxZ/4sv/Zc6P4BDVe4w8dp7o9iT5fo1
4kWbU4nweRh7Dewq9Oq3AvneWM5XcMqsD2397NmliE87I5hfOEr8W3nnQT82
dvIh+X1MffrxRVXBhSs6R/yrMyNZxifQP9DeDpb9jY0F2M+Hm8eEX2f6V1qN
eMHJ0nu+wF4/fIM+63e09UtnI5/KN2z3L+Zhb23sGW+XukZ++rYmXpcoJvZm
0Y+y/+A2Ik/dozb+3iAYeSQX0m+rHyE4ata1Uch76mqRr9o3jPiWmi30qCP5
Xvv/+RP+duA88XDIA6HPyIjF/lpswV6NUfT7c34VeSnV3bHvobME10spNRP6
8lvJfkoe9Z32xE7kYx0zkPhvHyTr6d0N8p+3j8BxbDOAeHciROzJ+rka+29z
F3tTkkI5H7YPi8OOT5Kv5PUQ+Wku45Bfr5ZCv6Xtfr4/dg8TevWaJvm7a0vR
j1lQjHo55Dg4enFOyG9Xe+z71FLkG1lc1tNdOuN/tf5C/xffcz83+jW4c2cc
yJcbPJP1lMcxxAt9sjyrLWPJlzuEy/rqOxX5NNsLLt4vU8gXy34SfvS0pvRz
JrcU3C3F9Xfi7/6ugiNodrvH+VZqirxvLH+Of3abAu5UZW/oa1VZcK10p/nY
Y+Ns5LOU+zbaux6ynrXpVvKhEhPB6WqMvMyIC0K/OaQr/pVaQ/g11vZGPsnV
Rb/q9secT19eyHx9fhzxt8Ef2EfJfN4/cg4cvxnfsL9DdRm3LJuBPRVPhJ+J
PYgnBcOFHsP5AeeH631wDie+xz6GlxD6Fb9ZrJ/TRN5Xwz+SD7scEVwxs1Rj
zoc6D9HPpMmMfxgqOHSKUxbn/S9HwanzzifeuGyX+cbmrfiHXRA4lp6u5EOK
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.2211946249008179`, 
   2.7909955978393555`}, {-1.3460969924926758`, 2.89902663230896}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGAwAOILfsLL+OXfOJ7YZH4URKfsq2QTANIZaXMEQfS9qWE6
IPpJ4ZndPUB62eKFC3qB9FzjK2tBNJfB8ZB+kLwMZwqITuU7UQ6ir96UrAfR
MnuS+kF0gOTJ6ROA9OyZT9aA6FfTz24E0X9anPeAaMOamfwTgfQalXhpEP1Z
5Ig2iN71U90URMd4JFiCaLl2BgcQXSQo4Qqi/acLB4BovtPzI0E0d/yqDBD9
5ph6BYiOP9DaDqJ3JBavAtEmFtHnQPQj9xfXQPSEkFzVSUDabeo1YxD96vwZ
FxC9gPliDoi+8mD62mUgf/kJbwLRJdVTd4FooTNHD4HoC7Gn+ZYDabFrO41A
tN5eR3sQ7S9uGAGiuxT5poDoCPWLS0B0mm8vwwog3biM9QuIBgBqZbSu
  "],
 CellLabel->
  "Out[200]=",ExpressionUUID->"3e8fbe23-3cfe-451e-b883-18c3c67a1dfb"],

Cell[BoxData[
 StyleBox["\<\"Generated data (with inverse network):\"\>", "Text",
  StripOnInput->False]], "Print",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGAwAGIeFZ5l/PJvHI9J6x8F0eEcxWwCQJqnYYogiFZZ6q8D
oqcIndjdA6Qn3Z+7oBdI/9t9fi2IPlR3MKQfSBuvZUkB0U9KD5aD6EfLBetB
9LmpUf0g2v/C3ukTgLSP7r01IHoB57GNIPrgLMs9IPqO2ST+iUC67HaoNIh+
67hHG0RHFcmZgmg+x0hLEK2s/dMeRL8WF3IF0WuecAWA6AdHp0eC6Al9izNA
tEe7XAWIfrasvh1E32vPWgU2p9H/HIhuWfTwGoh2UU1TnQSkr5w5ZwyiD2gd
dwHRM1zP5IBo8+Cpa5cB6fMfBTaB6DVPJ+0C0evsDh8C0ff2n+BbDqSZJm03
AtERU+zsQfSFf7oRIPrFI84pIHrHizNLQLSMfCfDCpA/j7B9AdEApaG4mw==

  "],
 CellLabel->
  "During evaluation of \
In[196]:=",ExpressionUUID->"afa24a3d-c166-484d-a41f-e4016e4d59cd"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"3", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           NCache[
            Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJw0nXVcFd/zxldRxMZOcC2wu3Pt7gALF7tFxBZdFbEVA7HQNVFRMbBrjY+B
oGC3qyg2dqP+vs77/vznvi7u3ThnzswzzzxztnCfkR37p1YUZXYORfn3+b9/
WuV370/+71N97/T836fS9al8Wh6dvsl3q/nnf5/6uaxP/n3amWvv//dppE34
UP/fdzUmWY6/4vXh36eW1OOCnK+sESu/Gzsu7t9xVtKg6/8+1bej3sj3Jw+e
yfm33foo57k+PFH+XrnTSTlP/6q35Xpfq8p5rd+901n/zqd2OSfXz375i/ze
LPtcfpdmxmO57sHXTv+OU2ru+fnvu/mhYYKcL1K15bh7YU//feqfyn6S35+M
2i3nv9gkSf7+sqvy7/faBq8jcr6Y2XJ/5ulFd/99ah23Mx4VX9yU8+V0fSjn
SWrx9d93ZfyeOPnd0KwP5HyHfDf++zQGusbLeUK3/5LjO9yPld/Hfv4oz1N1
5iv5fcMnKfL/rZYclc9c9eT/tUW1ZRz0exPvy/lPjX0tf1+aIs+vZT3L/HjM
/CN/T91IxsP6sVqua/y9cFOuU+6B/E49PnCdXK/n6P7yGeovz6W56DzvuUK3
ZV5azPwk96mvPiu/P+phyfV6jP7FvF+KkftyaXJZfh9zArtxTZMgx6ld98px
s+bcl/EoteuxfGbpJtezuxW7Idcp9OaLXDfARZ7fDv34Ru5zxwx5Xn1f9B65
/t5Uj7CrDg/luTqXknE0Gs18JvZ1tZjMq7U81wX5+9MVL8QOFvyW5zJev7oq
5x/lJvOlz1/yQM47o9cL+f+uy07KfbxPf1euM7LeHXmON8+4X59Pm2S82mSV
+9ZL5pB1oC1ML7/XZg+R8Vb8H32X+5+5KNU/e1JT3xB7144PlOOUvTnl/pXD
bxm/7pdlfrTat/+T+xjvIb+3fp1nnUSsk3Vm+CyV46zGBWS+LfdKsn5t3xpi
9+qyiXLfWmxtGWc7o5ucRw9MOiPH31NOy/P9PSLrQ+sz77w8R5UkxjO2+Vc5
PmY+932km8y/3fdSkozj72lv5fNOspzfOt0rXu5LCzwuf69YWNaxMTrYlvtu
ECDrRLuZ8bwcd1KT8ymN/zAeedphF5OXyjgqlyfL9a1+9eU57bqb7sj3l41l
XRq5n8l8WcNmiR3aT15cke+uC2TcrZ+cxzjTU9aFUmXbOzkuObXDT11w+Xce
7UdaeT7LabSsE/3yIPEPdkgGsTtlab5bcvyyEjIu2sNxzMOAgnL/ms94/OWF
MbLO1Xq9ZN7Uzw9lfIzgedhD8+Hi95QhdZ7I/89+L35LqxaaKNdtPVXs2bhV
T+zRGHf9vRy/9qr4A7vjAblv5cwh+W6NPhwm85eu+Ws57sXDs/K7AVnw231n
XpT/r6PIONp/Vz+VeZl27JDcz++8zGOAIn+3uuXCri9M4P5al5T5VP57+FuO
2/RN7EZbE4Q/OP1d/LfuOfiVHJdnnjyH1qnuW7m/oJ5ih8ZP1xFyvStNZZz1
B8/EPpTWpTjvbm2bPHfO+XIfWkT4FnmO22VvyHe7qfgTpTNxyYhaR5xY3YF1
kD/tWllfsXtl3ds9y4vfNf5Ukfs04orK8aqfJfOqu9fhOZv9xH5rpsjvrBHH
z8hn/JOLMh+7d+Dfg9vfk/tfoJ9nPtxlfjSngrvlfGXziV9R2swVuzD7rhU/
rXsuFHs3Ny0WP2i87xQj37+3lXlWTqf+K3+fnUaezxg9B385dXYaGbfB59PK
eH0vRvx6fx3/MnbrMRmXvPnFTxrTfsg4mTei5HzmyIwyzsrSV/jHrimR8lzV
j8vv1adfZN7VhHbf5O/+eQ/IdfcekLhiuGQQv2lca/6f/N3nIs+75P0K+d2D
dWI/lvcz/IP3ZomX9rvv3I+zB3686wKZH73/2ud87848NKgq9qsmfhI/rqXE
i98zbHfWa98TYk/aslviz6wXC8WPqJnvynmVA5XkOlrBxHvyvBfGJsu4zhgh
9mMsjcXOv24Qv6GUa3VVrt82WezTXDxuiVyn0ipZv2p4eTleaVwUP+2+85p8
j876Wea3anHxr0ae6jIO9nNXGVet2zlZv9aFZxJnrUav5Hg7YTj+bsBleQ67
sD/PkTJE1oO1r/18uY/KhZxlfns6S1zTKqe6Is91orKsK+V6G3letWkesTvr
/Hj80IRest7tg6lkHNRavcTPm4/cJA5r32tHy/cUE3sIqyn2YC7O+kO+T8h2
Sa6TKr08t1ovXtaV2cxb/I35s/d1+XvwZpkvq3yY/L/qn0n8o5l4Eb936qyM
u3G2Cv503V6ZV+PLPX6vP7wmxwVvEH9idL4h/tEqlQF8cbYR8an3OubPdxPr
cU/sS7Gb3u1lfPWyyaxnp72yfo3eGxkfL03Or/bPIutNnbJHrms1Pkm8PDcK
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
1m4NT2faY+Bza2amT2XZYniOanng8yeHM1+eR+A5iuycI+c9P8OxX+0W8pJv
feGDnwaT11WuA+9WdjLxsyF94kaSO/d1dQZ8vm9jqadpcamJD7krcp2i9dk3
bX4R8JIxAr/1XzHWZ7k4dD6nd2IXudfI8daAEPR4B1+KfzQuhrCfWGb21VfK
XBK/qJmPqEs+agEezFiE+lDfKcTl6M30Ae2dw983NCSvPnoO/dm0o+jOKvrh
H+/XIg8ucoN68n7241RWsN+Nas7DbiZ8pm+iQzvyriGfJU6p9dzFn+gdKpOP
/hdOXn/kGnxFZR/4hiRvcPLPv4IrtF30W9iTq4Drm6UOY115iH0qu1PBo3vM
kzhlpzj2JfvalrzwyGrs/2VndG5lKtOfsOUNdbAy9Qz5u98K8PGUPOS35fzJ
b8+yH6zm8Vv8i3HLDxyxpDrr5T79NEbiT/Lp/rwnwqpwFrzwFl7ROBCFTv1P
goyPnb8DuD6unoyLXTKOfKWLL/hm32PsehW4V7t0Te5DuXNstfw+fVvi4r0y
+I/fvagXO+cU3K+Vvo9upsR9eJp6fuQHm9fSj7baoXeIus6+n7UeoLdJh27e
Lp6DeFqNfUaVRjVYN9vDyL8WPMT+zQboQ5zag5ubquyPsaUVdYMdmdBRN6mI
n9hsgvuml2a8dnlTh0uEZ1ZWJ9CXk9IAfcPT7+CE2Z15f8Ga98SH9x3xW6cd
+4FPrsX+DhMCqOPm6Ut8/BsI3q2Qf6n8PgBdsH1/huBUNc0N9MRJHXmuM6nh
kVanJ28OmE49p8U29p9svZJ4NfkdOD6hPX1esevJg34fknmyeuykf2DjKXDZ
hd3kS8c+C89und4o/k3xWQk+nuHYD8ulPu+3+XONefGPIb/ZXZ96yu7M8PST
U4iHPYrQH1DwJTqfKqmFX9em0+dsVH0Bz5DzKv47KYz3IY3dxD4AqT4Qnxqn
EBdqliCPMN3prx/xhX7IEifgY2JTiHtOXuD/xRvQVU6D37WKt2YeJ7uIXsds
e5x6W1IUuLbMMertyU7kPYPrgncqp8i+cooxmn6Kg3kHyf/HdRH/Zgyknmye
Yv86e8oI6jPfxqF/WX0IvmfjTXgMn+rsE1XMnf3hA1aS//uMRcfXIAd51i72
29XydJZ4Zm+YR/54yF3yHjvvC6l/WoF16CPR7zDP+a6I/RjBXtQPOhSmL3fq
E3D0OfY/09vTJ6o03Elf1Qd0AcoO3q9j9HdBt5F2HOOc7xr2mruVxHHzcWr6
o1JCpG6nnetFf8+wwbxX56ujXyXbJeruY/Ki+61GvmV/8UWXMjMMO1m2h/rb
ePyHsnGY4Db75Shw/K1b6BOf7BH/a1RoTB9e3TEOnT76WrtXCLqbR7xPx+g2
F919nS3kMZ6l5f0oelxa+qf2tMQ+Zpykb+D0eeq5To599cfvHCP29+MF+1Fn
DKL+kFZjf6iQo+CKnpvFv5nTDfi/cT3YRyBLGDhs11DioHMS+WKd6txXn5vw
Ldd2YvfpLsMbxR+FH25XW3Cp7nQGHv41/Lp6IYp44Ncef7nrOTx16cPo194s
lHqJnZr+fOvZB/r4O/vhpyp/AO++GUOeUnkf+/G7fYHPel8bPuKmgm7sE++Z
MUaOJD6NSi12YI0e8hc7Ws37vAoqPG/6geQhoU9Zx84LiRMJZ8kzA93lODXk
PjxahyGSx2nuJ8FlO9+hv3dqD0+05wv+znsF+zyOcoIP7FmYddijL+tlui32
b3/5Df8fvlH0cmbqL+zPVdqbuv3ektT/XhWjTzOzK3WrWIc+8Ug+cNXVtujq
X6BTUrM1hYdb40I+cnE3dZalL8BjT3Kia67Y2vE+sovgvlfXyFvy0++klU4D
Ps7LvjTqgLX4tZL5BaepD3iflVEpJzzB9G3U4c2zrNvJNdCvDvTBLjbmgXev
r6GDjs6BDv9kHfi+58n091ScThxad5G+2Ml5HHqSGuCDKbfgvQ9mYh6Oj4X/
6dhttNzvLR1+rmZR9pvb4cH95coofdzmrvdc79C9EBnfz08Fb2oBTvinkpPp
4wr8gd22aY2fCNsC37ydfWmsLxWpD/X8jt9K/4767pxijvcsdULf6DEf3mRF
aXQGbnN5D8P9ReznfyWF9z7NSMP6bT5c7N7eFyy6NzvHGPLCpqvhc7oZ5G9H
akkdUO+9gf62ydsd9ZU7kpepFyfiD3OtZ9xDnoGLRxTGr704wbxG7IZntXc4
4ugX9h0dl1d0TPbUGdjx/ebwTblz8J4at66Cx4ziFYfL/ftvlvk22/DeOSU/
9TSlZhh2POcC9cCpf4kvXUdjF5NU9sH4sUb6a9X/HHH0UDj6/KJb2PdUd0Hn
ebgQ8bxZDsZdu0g/+1wv+hQn3CD+5y0iemltZEF4zOfdqNtOrc1+zdVz4Kc/
rCSv7dsbPvdaCrqgHwPonywzHf3lR/ZlUG9+wL/8iCUutwuhXyUXuh/z/DTw
kOsd+g1D0FGpszqg9/J6QT7V5jXPuS8HeqYrR9D7BBaEh2jEvjX232/433sK
+YHTAPrQJt0hD73yH/ug9f8A35s0yLHfYUP0yR+v0O+adhh9TeUP07+6fxT6
6hevwZt/thC/ih7iPVwNs4Cnxzh0wvW7kz8mHUYX9Gwc+dPeIthhpevoQIql
Rq94pDN5d7VWrJ+ao8UfKwfLyvHW8BD6dV8WZ1+SL/Bfah8f7CPxK33DtmP/
3mM7ZN7smf3pvym9SPCL5neF+OoZg05tSS727WhcAh1XjUHgpkJv2X/brML7
1L4nM7+D0bMp+WujxwxqSN1oGvo9I3oM/dvL37DPUsvm1A1MT/bTuGeg1xrB
/vF2scuSTxlb0UVqGX7gNwr0hf9L64JOeeY56pnjRzHvtX9TN5g4k7rLEj/G
/X1a+NiWUdjRNvSZ1tFg4lPLP7yvJpj+OG3mLPz/oDWsw8TbwmeY+2+yn8jh
7ejgZ7jz/oPT7aizL9rMe2uqt6RffP0e5u1kV/zIlDPE7bmV6Ocqwz5AaqNk
6jbf7jv6wftTz/DODy90wqKvKLE1+UJmb6lbWSvrEU9WZYcHPLKL+uSFT+A7
Jzd0kgFlsN+T43jeEvDg2teM7BO2Lom66P0Q9kkcWk7qPPpVm37QCS1YJ1Um
07dx0on33cVWZz1OaAYPUTQSfcQb9g8w/nbHjx6aKfZiZuV9hMrreeio7xQg
vg3+wHqoehk/2bsi7znZmVd0Y6b7dvpdLjbBP9+sQb6wbTv1oc0VscOG1Ous
NR2oX+YpQ10z82l4i8IVWC8xj1mvtx19D1MuC44ylvQD//SGV1dGJrJfTsWv
8Ds/zu+Rz0Nr+d3nbvBEhc/RT3XdE75zRCt4pHsZqePWOcU+e+l64z/i1vJ+
pcLMhzW0Djqsz3vYp22Eg4+Mu47fz9QWvrPmNFlfdtfT6EiHX+d6bQ/CC3VI
ol647TDr8fFl+hHt2/Ah9z/Rr1RtKXbwaj198alnw1e5s7+WUeoB62VAb/oD
5zTivQ51eQ+d5XaWfSv07hL3Leea6KR/NoRncgmjvlWK96oqnjdZB5knodPt
GgCf1rQAOOHyKbFb9VIy/uXbcQdeZ/9+5WphdBKDu9Pv1CmZ+sfTh/Apf8+T
H1bvCC6pNlfyPysEXZuVpKM3KzKH97V8fCbjZFaqy3tIt0ZUk/PF9iZvPb0I
XeDhEeSzvhuZn9HDnf+dz8yWgbrHqXfk0X8H4W9HTxe8Z31fxDrOMUR0iuqk
itTzqr2hT9n7Czr4IHTmerMZ4JOY/exvUaMOedrmXPSxdK0u+7RYXd+TN5TP
I5/mNXSu+ugJvGfoUX34jZ3s16x0K0w8PebJuK98CA48t5765Gf6pq2X8dSB
fm+FJ8g6if08mk6AZ/jahedpvQLe6NZV+NzAbqLLUR859nfK+QId2ce65KP3
u8K3LQiFxwk8JnjPLPKOvqEU+muURuPwn33qy75C6lT6E7TD++Ffa7Cftrol
u9QptIrF4FuiHmNXR73wb03ygocCurDvV0QrePyBA+Hl5mZmP8PUjYk3Cvvp
aJqD3/i+DZ2G1ybqwEENwZ2DWjr60qPoS94dBB5KOwse2fgJH3jii+h/LM+O
9C+sM4XH16b6oy+vpFJ/eZ4b/uglcU1fyPs5bI9fxM2U/+CJHqGvNWp3JG/1
aQE+7HGAeRn3lv3qnEcmsP4qcb/ZvqL3PeIJ73mkKPqlW6VYl79zo3O+/QK/
W5n9GNQUJ/hUl/b4m8Mq+XWNheRNf8bJ+YzdLdGx3CrL+zHaeNG38TuB/D9N
BfKqtU7E/RbrqIdcSYQHrXCJ90QsLczzXYb/UkIcOo+oroIr9dBdfK/nQ93n
Wjzxtd1j9FtLveBpPavI+axv2VgX8ycRf5veZ3+JMfRNKAfC2Z877Lbkl3rq
Fey/1/gD8WMM7zu2AvoQZ79+YV0/bwxPVADeRL2Si7pE1BPypOvlJU4oF2oR
z+qe4noTW5FvFfIDP/mcQSdzMIG/V2LfMXvMIfLpApXQAR1gf0u73CnqICuG
Sb6i/cqB3qtAAHjt2VP0qSPpn7RfF6V+6l0Bu5p0iH77HP7cV/U27C8UjP5W
+fmF/NBnAHinZRrico/e8EqDSsPXjVuDP93+lvpu+IBd2Nl4iftq4Y/C4xi5
QyW+KKXfwJ+U389+UAt5n4Xi9ZS/D24yTM53pwv1xD30L1m7eT+Slesiccsq
eIX1eJO+hZ2lZV8sZfJu8NfWZOLSlyGcf/wa9o8+UAn88H4w7+EL5v0b6tLJ
4LA2o8iv+5aQ932ZsSPRV4Y8Zz2MRC9re3WD337Wm/p3M96jbMyoTr6VMpL6
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
0cdoa+K3lDWZvFTLS9RH0pSH9E21R9CXVcmjnrvpzed2LqE/q8N+KHlMPnlA
Xibip+QdwnyJ7WL6009pxJVDnzmvHuuoC0bjryF/8Ca+Pr+5XPy+YGcRJ5Rn
juyHW67Qd+7G918esBfcwfQefc61xei9Vv5AT5XkhU7sRSp+dF8NuGl3fMM0
c45wPxVj9AnTdxBfG3407D81+Ghvwo9Iu2EHvMZ8R3iSRujFNOdngz86G+YH
zy2jvijjxLxeUB+xT1N/bDu4qHsh/H9t/NDks+fgn5+tIH6EG/Y8LukgeAnl
cEPq0+Xe7AX6MU/wj7oCg97jjhP6tM9Lha+adLgc+XCojB7JLR8dcqvFvP+W
tZaI/7+lI33iiRGcd5PeAldUPafhb3CwOvjXpUye7yJX6s7RVeDzN1cnPxp9
Zj68axx9+RLwDv3Gy9Qda7+DlzU3BccMbgGP79qDPP7LDH4vZCpxqJ/hfa55
iL7g3HLmKOod5k+nHeC818bwvY3C0Zl8GgIenDSD/q/5dOJT2O7/82MAHzl+
FJ+x0jUGvCeWOHQ5DF4pK4T3tZZh/+Wp4+B6heBkSkkePuDx7BdWlzqiC9DV
Fv9dc3cQdeTaP/x5av468RwL36E3K1gDT5vbRejbpOKP+IXNbQR+2tyDfVNH
4Od14V/5Hs3v4g89ZwVzCSV70fOu94AXM79MP973PbxS01DmdzPaoftu1cPg
qzoC/Mq5pYH3ThT1p3ZGBPXYmKdcXwOVfBrYgj3fi27jF3PYBDxEt4488z6D
Pr9VCn1yf3x+dWeYv5YzzZgnWMecpu5Lb/L3kL3Ey2vd0WOvq8Tey5xC8vrS
rex1KMAPUA6N57xM8kef83iw0B9IA93An33GwpO+iqeODKxOf3z2OfjExFLw
5mVrRF7XH81Cn5BaFt10MxPeu2FB5L2Wj+gj235gPrnDNfSNWxrCi85yxT82
8hi4gmzws39uJnB0fWQiPhtPXxIPzYYxp5L1TPR3sudcnuul+ex/ulYHfGd0
JDh11m2+x8SL4vlJn5/iD++Ui/9yD3/mV65M4PlVHAi+fGQ7PnUupfRXd/Hj
VtICmJuv+Yz49jKK97qMtfBrU8qvpD/7d4S+pkp1vv+sQvA4TTT9SOpP6r9c
5gk1e3rzvqWgO9Yu/g5fXOcKearpX+YDP24nzpQzFXFLP0UiTje4AX/i4lr+
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
gK5szDV4rWMpzE80Pcz9T2APoTTjlpjHknezn0wZPIU6oasncXqhHtz3fT74
otEZ6qI1N+EBbDXszXpUW/ihKVvwdZDXRLF/6GEbcO4yvziXSZ/oH3vV5n24
/xV8KcWM5+KfwhxTaDZxpcFk6rnXs8ALnrHHQnrxTjxPedhv0WfJb74L3ZKm
8Bh5cvhi9GiXnPDpNT9PfddXFedb4/OFfXPHL8DH7H4IntHqGvV392U813rl
wUPHz0KfG5wLj3qpIX6owW/ALW4PBD/x9WD+fJ1B5+i4F53n34bUG+Nb8Vz+
OBGv99N/yS2/0t/3KwKXeOJEflyhoouItiQ/7IkDV801Z/7gqJHIl/KfYO5n
5AH6hOBb1GOj6uPvOy8avK1sJvh5r1z40dFvRJ6T7i9CP7dwITj7p2LyfXgw
PJzJQXHu9Gmr+F7B89CDR5Tjz1V5vBdWUcSXnnHwM4kW4PNvzGaKn6/fCR2d
4sT11otjDu23wb9gw09xv+X9scyZnKsJ71/2G3VQg2VirkTz0Yu6e0V58n7y
e/QIy76QL5pO5H6fHw8Pf/qbyMeawYvgB6s/4j6Ow59D36G+mD/XPvJk3uJP
OeYXPaqJvlx6+pe4U8jeD639VHTDeSbMh2QloqMrzRffR14XL36P1Gwj/tgP
FYHbaG4nUAe9fQ5uMOYn+recPfBnSw+LfKYv7i54M3lMNHhOPvuqNYor+6j6
XmOv9fkh3Jen7cCRi5aBN3aeSL3kkSHul6qfLvKG7kAq9XElR5EvlDXDibsH
/1H3Zf9Bj3KzFedhP7iMekLi952ZiV/KOlv07Is9qae3XoWH/2PIbw+c8IFJ
mkU/uuc/fCE6O5MfSmzwNXhj0Ec3GQ9uNPId58ILf0t9AHO70sJEeCTtU3S1
chj45NI1Aj+V9z3E72PbHHjvPuxRldqxz15KwK9GMTnMPHq9Z9RBeZ3hqTvb
gLMZF/PnI2Pq1kj8NDQL4SPUaPx71Ee8V/q5z+BpO5SHR2vcFTxjyHN0/M9H
GvwjV7JHYe0DPu/HGPCYluiO5HvdxLnXTDMmjjwYSb48PhAfsW4b0W/VfsYe
Mc954JF92oNf/HYQz1m76xG85J8G1M0fplKnh93AL+X5f8zZmOOvoTc17INs
dwB8pI0fuJqJgl545EPy2fJm8FxHFlF/7WrKXOesRHHOdVcvgzPefoyvYtcR
8NsNLqLTvTgU/eYRw74q/Vb0HbPsqY8LyC/aTkPxG8lgT530rBz8kj/+X/r+
6eT1lr7otIzy4FUXvGAP8Ykvgj+UVzqIuKaOG2Pwn8WvWj+yFfE+tCw4sPcS
+ISWS9jXVWEc568cOlLZp66Id9oT36g/+07EZ+NiU3E/NM4moj/W5Y5jniX6
P3QDRU68F1s6817cCQMv9b5EXD64mvg4NoM+cY0f80LnrcBHLsSIvkp/7wG8
sJnMuf91k+fSgrk03dZg9k+bmKGX0hpw8VSFvdIr1ovnoM0w6OFqrqSvyCul
b615hv42c7SID/qAJ8xDbU6ABwnqw/exhJeXzzcifrg9oa7705f+cv9+fHRe
FaMj2dYY/WOnxeB+L40EHqBUNswvFen4fQUPiY8e6cQT7xL0Xi/XivdbbhBB
n9Danfzf6AS4Rb3B6LWs+qMHU9Db6dKZ+1AdJ5LvMysxzx7igc6mRVm+bxj3
X/uxCH1Cg/fURUZn6Ecy8U3RPunA+92yAe9ruXnoysrFkdcPfaAeKBPO/FHR
HfJmrfe8N9/WoFP5MgJ9xZut1Ol2I6kH/7JPRp4+jniYWAHfsa3NqGv35TDn
tagsvGLiJc6jQ33O1zJr+h+D7kgenEKf695O3BfV6j/mDY2SyFeToqjbFwUx
N5pRxPeeuEXkLf2yzcTdqKFiL6dc7yh4z4f51OuDN8PXPL6AnqBrI6FrUWOa
89x9EtlfGauiu12zmed/4hH4lzYe3GT9I/SC5vHwwNVtiFu9soU/vT48l/q+
dxHnf1cNvk91fFW0/wWQTw/Ekpd+zKGffdTF4Lemgm+4JfFc9p8mfkytA87a
spT7efoRezjWR6OLsW4Er+sQDn770RQc3rQB/a5XOvXFBfy79BPriuejvrZn
Xi0tmfjWAv9i5fkG8T21ryL8xL83TRTnXY4qEjiTLHuB+7z+RV4s84j+Moh9
bGqr1/QRdVKIL24u8L5pncC1ZzMvLw8pS//14Q46EDdn7m/uiGLeu8X4bea7
0q9ViQVHuL0anrH6DfF+at0qohMPtyZOTcYvU2dr2Bdasys6qrMp4NA3jci7
Z9D7aivgC6Beay5wTs0e5gHlE9HoEBtL1LnTPPB/ME9j/vRXK/qbD/fRV84x
zItMz4W/k5+J76eOlfFjt7tI/Xx4Bbqfv4/hA8JjqQfbdGKeodFjrtNVI/oF
/ZaLvHfJ4KXa/l/4+ZC+zF8l1eY5DG8p5oqVmDPMqytvwCPmzqafDK+EzmPh
Xupwpz/UGUEP0PeMnwHu4b6aufdd+eI8KmGF1Ff238Avz79Gl+V/k/nNXbfA
wdq/wIcgBf8NNeUJekebC3xOByP4ss9J9C29ranLx7YkTi5di89qbKco8eda
B+q7oB7MP1g3RxeVEA7fme8j5m7081vSzzjksjdl0RX4tJKr9PPT/Kib+ycR
v3cWwyNGaqgjpbuiHtNf3om/yXBL9H1+cZyrvpMM+lMN+WdfAXE5YQs4d688
UW/rtuair1vbhrxX/Rb5cvkf6qyz5zgXDrNF/pV9DXvLYxqD97SyAu80L2Ee
6za+q9rT/dBnn2XvtX5dEb4RgXHwiI27MSc5DLxBjnRHhzkMvxhthTT8TU+7
814kj2L+dYYNcfAKfnTK3GJ8ZprvpL8bbEscm5UKX3L0GDqJN/nssXFl7l7q
EsVe44pPqevX+8Hv7yvh/ld2I5+FtSAvlsxl3vbmM3H9iutS5lX3GcP/9T6H
j3t1V/rrUQY/lfDbBn1ee3RgI0rxm8pCl6g3fsn5rfM6Rvx3r7bUWwdrCl2E
Wn8Y9XB1lc+9mUp+cbWgzhg7i3hcxv02978m96/vHr7Xdfo1/aZ34AmnmuMz
OdqWc/B1ITxZPHuo1dnMMemcosBtNu0mb5ZL5zrzXfEjmHYLHfyBJuz1HnJb
3E/5+SbwpObN0TcHrhTvt0Zzmn8fNBw8eIcn+MuIh9SNcehU9aYbybvD3tCP
fp/NPLMffLHOOge9cLxhL7LJJupLG3AGpaEP9/l22fL/+57yKfy+pPy7zDtO
X8b7ffUEvN8X/OiV1p3on35fpD9qnUmdZFKW93jq2c3i9w/aQJ2ZGgme6xiy
RPz83vHoJy53xMdh/xHOx72G7PGdWoU58Zq1wNkczeDdwu6QN1pfxN+2zF36
qaOVwS8mufB9Z4fTt3ul42OSEAPvVXEmOPIw/Kyk3kH4O2yzBjczp/7QpK8j
758IwKdicEvifAUL8JWEx+AWofeZc2iyi7h9kf0Dyuo1oj9Qmm1kf0bzROqn
V8sMesaSteLnq+aKuWj96ADmovctxJ/792HiklUL5mHrVkBf8KYWeq1+DwTP
qqnbl+u0Tyb+Gq/ifejmLM6RGmnKHoxNO6iHj1rhH19/J/E43Z45iBWl8PFh
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
xxDyxJeD5PGA/NKz/w87Isqo
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3.911943197250366, 
        1.4569865465164185`}, {-3.5063316822052, 1.5373460054397583`}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}]}]},
    {
     RowBox[{"5", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           NCache[
            Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJwsnXVcFP8TxtcC7ESwYAUVu792rIndChauGAiigt2eioWNYsdaKJgYGBhr
dyF2rQqo2F2ov5/zPv651x13G5+YeeaZZ2aL+g/p0C+9oigz8yrKv9f//9ma
vXt/7P+vxocMz/+9mpOS5NXw6vhNXm81+/zvVTuX8+m/Vyuy9r5/r7ZM1z/U
//f9lhfeyvtrPh/k/y16nJPjVLRd+veqVxt1+d/3tOQBifL6PPT1v1cl6HXy
v/8rxt+P/94be/Vn8v8fHY/JeQP+uyO/d5vxgeP7OZr/vn8x9rS8P5H/q1zX
0nLP5Xd+857Ie/NVBlOuL/bnv/eqe6Prcl0xqvXve2rwYPm+ed1Z7svqvGuX
vJ5vkiKfd+yq/Pu95WrGyfUtninXp/Uade/fqzUkWn5nTll3S677nPJI3me2
vv57r1+PvSzXF5Tzobyfqm+Q+w3IdU2OE7Tjl5zPK/SK/H/j949y3R3zvZL/
r32WJvd9ZMth+V6ZevJ/dUFtGQez8LgH3P/IVzJO4WlyP4pyTebHcJn6R14r
TJHxUO6slPNab6/ekt+3fyi/UyMC1v773BbhvFquo+FBuS/b+15yv2p5xzty
3ObTPsn3Mj08JccrdeiYfP/Ib7lOpdqlC3K8bE2uyO/HHZN1o/gnyHkNs8tu
+XzGrAfcf9Uk+TzM94t8b6r7Tfl8Q0PGb4GTHFdb9vG1HDd5qtyvEr83Vl6f
p3ss/x/R/pFcX+HSl+R4jaYly3WnFPsk47fQ+Zwc12vJC3n/SZf7MBOTE+R9
B1/OdyTioRxvas8XcrwDi+T+tMPZ78l1JwbJdeuBW+V6bRU+bpTjtMop161E
l5B9YKnp5fdGl+nXZbzCisj600vPTyfr6egX1nt8AOfp5yTXbxR9K+On97gi
86M9yXJWjv9A/SHnK3pOfmfbslb2mbV8EfPYpJDMt1IjUvavWbo66/70WLlu
62LtJ3L8wkW+y3uHlJPMb8fjcr3rCzDOHrPlfLaqKXI9Ws48sq+U4XPluo0O
Fxm3MT3FLujuU97Ice6+leNrX3tek3nynnBE1l2JorKPbWfmW3J8z+GyT8ys
hc7K73Iu5HhLA1Lk/1nbyvjaxi/6gJ0YL+c3BtRnPNbHyHyr5bPL9Shtkpmv
wBmmfL/By6tyfznnss5L7pLj2HZ2lX2hjz/xXj4/VkLGz3h0xknuy8VTjme6
DZN9YlwegH2IyyLrzowscFvOO6Yk66y6jXk4NUiu32j4XsZDiR0h+9w2ru1p
+V4PS8ZHyzRY5tksP0jsnhlY56m8rn0v60irEflMjvc0hPuLPCfrUfn9Sq7X
vFBG7IEybq993hekyv367V8q/3dshr1Y8egU6y0P9nvHS9kPuvMeGUfTbVUS
93H4gByvaAEZd2WkIp9r+fJjBz9OkOtTWg5NlHk+UuKvfP7zm6wbc2WY2AMt
7q/Ybz1qYqpcf+XZch9K57pvZPya9pd1aN3Kt0u+n76FjLNtarcDcrwJZX/L
7+pO2iLHrTJHrsMWuTpK7iNn+ZtyvKSmYk/M7unlvmzFNuMnzPYyHmazTGvk
9dRu2fe2xA7Y3Q9V5TqNy57yfdujD9zXgwLsX7+fMj9mwzT5neZ55KT8/8vz
8/J5520yHkaFe2Lvtcy67A/95ALmp0shuS/DqbDYFduwcFkXet81Yqetpfnu
yjj8d172nbG54wX5/e3OMs/Wtowyrqp7V7k/bbav2EtbwVkZ/42THnQ6079X
bWAvsR/G+0RZz2q1IrK/zJ3eX+S+0k9mfzxcKsczVmdlv15KZT15p22V75lH
2A+znRjHCcW+y32NqSp+VjkfJ35Fz5xF7Kb5rS7+tWSPb/K9yp+WyfHurpX1
o296I+vKlu6c7C/r8XwZFzXNuiHnWTKP9Rochp8dc1DmwXwZKOvVtvKz2HFN
uS52zzjfDvs5vZesJ/X2bbFn+uVpYkfMfnews4M6yH2bLZ7dl/OfG/lW5iFq
sKwfc/ElebVKbpBxscq2TJDjDnor61MfPCpCjvPfc9m/qsMS+b7Sw1PmySy6
/YYc91vfz/K7l4vFvtrSfGQc1GFnsGcN8APGgBTxs1rJiXJd6mZV7Ig+74rc
h+ExVO5Dcxsu+0G/bdsi95+/uIPshxeed+X4mdJdlXE9WkX2lRXXWu7XNj3X
WdblaLFD/7e/2IOa3eV8hmdjGQd1c2HBE0bHZoLLLL/psh70SzVlPWj3c4kf
UddnuCjHLZZZ7luvfw2c5+2LfbwwXva98foO+6YSOFBdkp37Mk0ZNy1XGexT
7bIyz/qq3WKXjN6f5Pe2po9kHZjT1su+s037KHZVGXFB9pXysZH4J63XWpk/
PXyj7Ed1z6WXcv4R7Rjfqm9lP2t/YuX3RrsNMj7m3iFiT22OP2TdKoHLZb6V
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
+XL0iEqBXOJnzcOXBS/axoyT72vL73P/o/PLOtPvP8NO9a3Keov6IOcxNriR
Z773WuyFcShIxtla15zjn3EBPy3bB55rewae53gUdsbbDb+YvzHrqlYHsR96
kI9cl7K8Hv6oXZDdDvSFf5ncjXxv3dPk96Nc4BWDE2S92lKvC76yjX/O+t3p
LLyXfjsX+3vs2Qg5TrMmYi8U/28Sb+kjmS81Yzf47Vyr5Hps3go6q+jvomfS
PHbb81be6OF2exG/3H2CfewbKvdr5jmNX3s8m3jMb7HYW9MjB699uuLffxyX
67ddfgeP61sW/FdPI/9fuxS8yIgn8IX6e+a/bh/icc/Xsq7NEwe5vzKz4auO
PESv0i2DzJPRQBU/rg0sBa5scFz4ei34BHraPsnET+1ywNueqirzZVmzGL+Z
PyVe0Wu8yGH++//hkuCcSgnZ/r03NC/2r9MsdJDpnBjfxF/sxyqB8Bm9dxMf
tJlK3upPbomjbSXh8/QKY/A33eZhJyaOyCzn821H/LK/ATrcsEjy3yc/wD+2
CXvMvI+eKZ//yCs4z/xmil839abkW54Nw/8UHYI+5tqW8+zfSoIfrCKn5f70
+tuJ15zng7vqwhuohkqc3m8iesCsfti3WT1lnSo+NbHz0/3Ez1vrD5DPuxpK
PmTEDlm3muNo4qfijsSRQYPE/mpH1rOvDzyAX3KvDt5OisfuTvXBTwyqIfdj
1VjPfhzXjLz1uufoGIrsAH8W2Iv+o8fLW7x3lOOpwyrLOtRzd5fr0lcPIV7t
qMELlk4irve+B19+9Bfxwowo8ribvsHDjE9knfasyvlmhsFv9XoBb3B/hNyP
Wrc5urEe6Ff1XWflVU1NZh2NuT5Pvt+ykfh5o+114t9pb7jeykGs771rvrBO
POCxjm1G1/DtxBg5782/HPfxEfGfWrmCzG/P+vDnb7NyHLMQ55ngiD4noDrX
cf4vdrdUIclv692nEp9Orij+yDYFXZuSgbhQ+ziC13qTyJ9N3Icep+ME1lnj
/fBz63aKfTQSr7NvL59qJd8rcxYe9Cw6O23TQ3Dqp7xcX55q2CVzGnHYhbO8
z5GZ+3iOvVGrP8W/6K+FrzWmtifeScyJ3Q19i66l/XLhdaywSLuucgl2q1c7
ruN3sugR1KSL6M5vrT0s41jhmbzXbujY49o/yNdVrIVue2sI+ZPTHvDGA2K4
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
N/bLlp8U8+rSnTfgEVXmsPfD3kTgVPKL3fCo6xz0vM1t6uaF4Oq6FnHMvZeX
MWeZ+p76qmUZc86R+JwpLU6L+KvbkU8fHxgG7n9tB3VMxmPuj8s56qkulfCR
vZ0Cb/KqBX9+Vhvi9LJE+L7mmiTeb0v2SEo94T1sWqFPOL0Y3uwoczfa4b7o
ZMadZI9B0gX6les9RRxSHcG/RRmQQjxOK0HHMmAUvo2ht0Scl/N20rd0M0XH
3WwD58OLvYJy827kn/xi+MpNG8BhUp7Cg218JPBEZXY75vxqXydeD/BFV3Bw
L/oS73mijpDmzqMe2m1D/rO3pt5SlTIXVeUX83F7vcXnUuc+R68Y8pF+498O
9px/6E796n2SOqjDTuY5j0YwL/tF78PbCH9RyWg0/Gl4MxEHVW+mUq+3KmHv
T9+dxKP/mqPvOqXf7148Cv7v1Sv0cwZT0UmWJYLPFunQsewO5HweKBXnXTJ0
J8+/6kQdWTuc+5X/hD3yLReD5z/pBY/Q6gz8bamGPPohAjwzpxhfo3+d0Qef
KIP/KuqC/qatIfFo/HPhgyQPaY/eyU0R8VH1/gP6vZUV8bG92Bl/qLQRnP/N
G/XnAv2tduMp8MYJGeT/y+/QKQ7+SP89/gq+ll7N8ZP7pp+nvc4eat0s5pik
9kngjc/YKyJnZ1GX1RqHH0HwdfQW/04IX3ulaj57Vr038/zdW6EXCFgm5op0
1ifpz6t60cfe7o/eesQ96vcVg8EfYraTdyNfg6+Wz2Yuq+p44k2r7/CxFzTM
TVRZBw8x5ys+o01G0pcNMDIS3/PQLeq6vNvM3b9M5HseyUHvW4IfveTZlf7l
93l4kUu9wFVXxdHfufiK/R5S2z/kDV0CeO7X6YvE3782jnrtPPFe3S8Dfd43
5nLV/8zA9w8wz6L2MkEnG3OL5+t3Hl6p0m3qm/yaxINpnfV+jm/xm7o/GF39
pjXoCk2DmVuYi5+V5BWEDvJKY/yfqwXxPbJPgRcGlcBXNW4j4ojKuDq48IVC
cI0uHuDdPqn4TV9g/4Dubbyo23XJG/BNcjcgfm9QM8/YtTxRPCfVIzEXrV47
CZ/13fPJl2eyyYNlev37/2tQxM85tRe91pUCwbNKDbzAsbvu4j1UjqX/qNSR
ObsE9haoX++i3um1HJy+w076ycN2xOuycniX+f7wpCfN8Rm/qfelmaoiP/0J
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
iB8tPUQ81LVbgc4kZoL4XrJFGuftiA4ez5c9bboVe9Ah2ZfTl3x5y/1cj/+G
Emon5pF1I/uBL+fsI/912kIdfrURuNK4xfg8z/BH/9H5OvMzTVqgG5q8E737
8G/6fbob2Evw+J54bsqSZmL/t8omXfx3+VAY/fjDc+Sf+xHUazHM6ao3sM9Z
Op6LL17Hb8yHOA1j7nQdPuGaDa/x81zwS/xc5YI/5+d+L5FPtV+60xflacCr
LBzpVx76gb+8XTVfPKfP89FnGDAXot27Bj4vRb9ndFdlfs+xZ9Q34eAiOqO6
wpdc6faF/NptK/yd7iO8ePO96KUn+1IHTjnA/Xk6gXPfrzH4au517qNVDnyz
xS76CJMwEcekFOKKbvYI/ntZOnFgUWf2QtXFR1kT0ZX8/W47uOkMH/TtfUbi
h/LNCf+/2FP0/Q7F4nPqGuWxn8HvFzqQlaWiPlD/uQx+UH8nvFP8YOYlctzA
oX6CLyg3/uNcud+BZ0+HN5DrN+Jzjn8j9Gay5U34vYxbxOvZx5mHGvmBeFOh
OvVNr2DuXfN/5G+Dz+BMW8HPtcdOwAe0PUj9P2IS93PfSnTF8egLlM7Ml2g3
+vLeKzUU88vyHebWVSNCiX/3b4KnS03wU/43Gh7V9iV+qUf0Ps1rveDP9v3g
vL57I/QSkj/zCNoh74zE81X5gluFRoErfToEX2lfDj8+5QF95q564v0oIx/C
p66zpF9Z5Q9PUs0c/tC+In5dazYwHzNuGvOXDreIOybV0aUYtuJzOdUhHxWv
wQ8/ZB7P9Wc/cc7ls2PQ96XMoW//3Aueahw+5KoRLvRrQV/AWcof0yc13Cee
u6qWjjp+1GN4k6wm6FrezobPjPpGfk8op+4oTiD/hcGLa51TqDPaTYS3+cNc
hy58Cvseb5/C9+a5Ae/v+RDiceZn9ILn1oGH/EkUcyk6E1vwyPP/cT80ceiQ
fK+TZzzM+B4d1MzfLEHPoTSfyJymayR1iKoSOpUda+nzcp+SF8ovU4euWIev
V0Fv+Ck5jbmt+DzqxCMnOX+XztKv561ED7MY3YLs6U3/McWPOizlL+fh8hPO
x6gA6tP+7ekz5tXl99rEk5/v4Aso1VpJ//pqKbhKvVfiXqpyPLknaXvxC22U
KvBH2boufFIBfhXy3Dz0roGh4LN3zcEpfvXg3Jiyn04dGYkOcIwn/pXG7KnR
VNPP8314iW+KObyKpnsouNG/ZfjqyBv5+yOIw6odR0W+kSZawUuuTUCvfmYF
eXoZe+xVN/dQDwyI43z+x15dpV1VzlVcPXCRXugDdb+3c78tq4qfr34xFXzg
TqLwqVLfOUddMGQKurUfZ9DrjD+ILmXsN3ig8HLqikqPwSdt16L/D3kFPpXp
ie6iyi/iYoXd4MeGH/C3//ACfLIavm0qN0PRN8jVcpg3rp4En94W/kA3PJJ+
MWgg3/udTH9ha02dvAq/LrlkJL4B3wbCBxaPhEdcbMw9PIrvsLLpCfdm+ij6
ixbgzJqnTZgvHn9a5HP5exB9xll36oYmEvfCux7z6CfwT1ZPstXrZojPcoAd
fVH6UOrmqzPhLayHsWe9SgOR57U3JqIHLw0GHw+P1+OQu7j/n9Exapuwl0I2
+4pO/uct8KYnqex9lreBH1hME/7q2tP446hXm+njySsRrzQp5vDajm3AzR8n
Mqfecw+4jvkp6qfsMuZ85pgzZ9n3J3Nbo8L189dfmBc/ngDese4M5/cZekjd
1UnolAbo53UmBOBrYDQcHOtYXJp4flor5rN/M0ek+/ZT8OLKLOaD1D30exQv
3kOfWfMweNzaS+jsfvdD/7CVukUy/Cnmg1VWo9j/YFIG31zLGTw+Vf+eLTqL
9yHf3QauEXyW+vHWWvwhZh8Xc6XyaPyHVdu8ea/2yezZtBoETz90K/f4aw/O
5zsdcy/mp+FXTzKPJM2sSPzIe8l5b5kCz6pBt67NfEl+9sygzv65irhnMpp8
VNadenej3S7x885dJn4b4SunPfaSuuZec96PTVfqwPOl6JdXF6En2V4fn5gB
4JC6Oj/RUzWZBp5g01fP477lvztVp27NnwifGB2tn8fZDJ7i3Jv59/tZ2dz3
FXz+5sPhKV1eEddrLOTzZPZCX5Q1DF+tejJ+8vNvUuc+yUd32Lcr9WuUG3xg
xi/e2xAj/GVmbgNvjJVnifMQXkxcqHhYK/6+/Sx0gB9CmNPpORcc7WgtfDQq
9KLP8gGnU61vhu/7xn96nUJ9+NH6PeExmrH/S23aFB//G1PpR3e+Rddlvkbw
sNJmeFiVdVPy0x90y7rtTsz55O3HD/hvJPqAoVvRt3qliDpSuWEo5ivlN9+5
N6e2UddPMyN+PmxJfVW1LvmzG/7J2nGbiWOvt8L7PTQgfx3eTnxxrAe+2eYl
9zj0Enm3WjfqgzNL2Ivgcht9wP0y/A4/bMdn4EApew163mZuP0+DrjvPhjrK
5hT6zdHLObfN7Pg53Q6gM7TaQ3/vuJqfc8QVnOLRPuqLrt+oC5vq/QMTY/Ep
q39N1OOyYRv+XulU9M/L0dFoBsVx3iu+o94994A6/VFb8mFKG/Yft3pDX/Pt
KnzEzQBRL6vcroMH/foOP7X5BHHlXXdwxIN/8BFaYi/28Kr/tcQfZt8P7otP
KnzuyElCryfdOIE+w9+X+Uhre+JEi/bieSo5meianAbjS/CxhD4nqhK4++tX
8L49PQTOoXNoSx3rshMfCgvmHCSbPM6BdJU8evw8erbQXcwVO1qC+8y3vcN9
mI+edquG+bmj0+hLW4/ivDVQk1eKa4v/rtm7j33odb2ov423kM/ONETX6fiK
n9eYfWvamv3xGamqiHimG6Kv5xf+Es9f7Z3Hubcvox+s3JW50+tz4KHbU/cr
w+pRR979bPS/cyB1PwR/ltgZPi+wFnlsewk8/cx+3EOfZHgYb/wOpUbuIk5q
TM2EH4K6xT38Bz3OUB9VNhE8lq4S8+mafRfhTa7mcl690HHKn2uJz6GrMg3c
t487ezpmzl8tfs62jXz+sD7Uw0MfgydvaIePRschIi5oFy0iD/9xEbyR0uED
56RTNnHbwJ38ffQE/cvoGOadDMjjmtInzKOdaYau0vgtcXrrUvZQtWGfmVRF
oQ6xqAhv5Bqg5yfdwU162lNXueUQp5fhEyrZ46Orc7CB1+8fhP/lpk9Cv6Ur
ABdU/FqyT3P9M/wI7OAFlbuB8KaDzOj7fPAbVf/6Dv+a0wc8ZOt/6PXsmjA3
1ni4+P26vVO4hyUR4NJpJ/ErynMjb657i19Y3gZ9vxCIruXbZeKnexP6Iasv
5PH+Ddh3b2KC7u8lfmaa9IXUsz/X0wc0fEVe3z+de/38Bc+nIB2epmkyvGt5
XeK4cT79c6AferKqltT7ZU5CX6FqHsv3LGH/gazR80UhjeA5GjgKfwPVv/fk
c0t03NpPmeLcqecsop/vcpv7+Qa9hjxvCf2Xoy3zKBkSuE7LVHDufnbMRZWe
1esS/5Evs+/BRw/swf6qwY7UzRNWoz+rkQWe8aoqusajO8iLGT2pf+q1g3fr
n8E+yg53eQ7+7vAykpvov+VNt/S+i+HogLb6MQ8Uwfy/asJI3ssxV+qrtzXF
+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
4aXgLvRPC7cSL18eBN+wdgOvHVfKnEtreGNtJSPwRvMs5kbKm4N/bRwMr1Zo
iY5DI3uJz7c4jLzS4aDoK7QrjtEXxdSjL4s8y3Obgs+znIN/mDL/Dzr5n/b0
hX3Ri2v3XOC5/orm546JA0fcl0w+Gc2eKOkE+3u1T3eIOlVqEUK+6rdW6Ivl
ZyvhN0adAser2UHww5rWFuhb7uv3ZdiF8R6Su5I3n/4GX02uDb/53BD+NnQG
92X7YHSvc/TzLxVqkd/LdHy/fP1cYvh7cH4fJ+rql9bgGPO+8V5z2V+pjHXE
l65bJere0Obc25gi6qayyWO5/5+o/zLzxRyVNC8IfLQKPueaygb0cUOCiGvT
LpL3a8Kb6drjS6oeDH+vnvSCOOq2Ws+HvxY8inpvInPdzlvQgQUvJo7LUWJu
UH6zA/3qIOacdF6/wXOTP9EXDKDu1WyyJR8cOMBcYLVj3Oev1Gvy3wH4jFRJ
J98Nc0bPMLkO+6dWu4PTLdzO+7W+i8/zaPTn6tj36J/+6jgnV4PROc37JT6X
9lUP+B2brpxHlwz6kSM34HUfF3O+e8ZzPv/sZQ/W7DPE+fa7iZPG/8CVU5lf
kQfEcv8GFYDPn3dGB37hKvkr9xF67ncrmXsMfUi+7hHE/as700ic92PzmE9f
O1jM2SieP+hPrySj1+hsgW7b0k3g4qoeXvo+6L3oq9VT3cjnth9E/63YxaI/
uJWCTu50L/ifUQOEL71q5Ey+Z/kAdKTrc4WuVGPUEj3N9Bnc71Ib+o6D5/FL
2XCV91rzH7he3kN+zuNW+AtcLuSe7awKTmi9Ed+HpfOYV57D/jfN6t7E14Jl
zKl+Pkm88y7Ht6Ogp/i+uu0HhU5OqXIJ3+gKhuw5uPKGuGkMrqip+5D6rEEN
8BxlEjirxpTP0+w59dzKAHSVF/EZl1tmE0/rtIWfeWVFv3J1BzzkhsXosh7f
RD+wewb9/ej34OmW+f/4fPHoqYvwbdT+G8vzs8yCN87mXukcPJmraZPMvTsx
RvBJ2rfNyEP7vcR70O0/hu59tRlzi20N6T+2vKcOyLSljt7QAH253Rf8aH6b
gwtlsk9adooX702q2gm/vxkrwKVmM7ekufsO/a2PG7qVtePpC7O3gy9aFhLn
CsG3dGuvkO8nVGbv1J2q4rxpffU+vgsu4pv24gt5rmJD8Pcl1ah7bOqRz6I6
i/5BdXwq92S/Xrf8cBX8v0NV7o2dGXX8oAfUZScy+PMlM/Q+MkPJ17aVwI0M
B+LL6x5DPXonWswda4eg71ePKaKu3mEt7p3cRAbfqxuKzmn0P6Gr0Tx+Rz4s
XkvfllDIees9gPrUXL8HtHoMOsDa4QJXUX+0hK/OHowOq+phkReUNeNEPlT7
9aI+X1eVOvzjavZh9TWkjqi1BvwkaB/9QUZV5s1iY9BlfkzHRzswER+D7geZ
6/3ymbjbaBrxzKgX/gmO0/BVXooPuab/Os7xESNxT9S7zjCvtmA7PHrZLurs
qGsiXqqsS8CXv30Ct/NM5D3f3cTc+MdB7GvTNiMe/nxOP+T6mH7inRvxxTiA
OJS0Dp2HSzq4h1+hwCuVrM/g3v068r4M5oEvZz5Flzzfhvza7Tj8yLLJ+E5l
FeCfZPAWvKzfxHni98Zc4fvPa8q5LbgI71HMHIFmyEn8tgd3gTdoX50+tdsa
EV+kXwuWi89RXo84twd9k+7ndPJ9aSp7S9dn46fRwxX+zstE9L9KkxD64xp3
0P+oMjeKv/dPR1xsnUN/UduGfN/TGFzm/WyF8zMTPvZhY8GfqZs9xcd0bG+t
+L5HRwm8QjGxJT4Nbg1vUwH/avWmeuShHD/m/RO6En8rF7PnZOAi8tHXGfDu
b9lTLb9Ppq9YN0nsv1M71qdOl63YqzlkArzoKuaINUmbqL/U1BWqLaPxa3L+
hS4tLx7/DYsn/Lnzwey5sMgkLu87BI4TniX6dPlAf+aovxegO6lSBP7kwv5D
7bBQ6njr95yDTwbwaJeWM2/7LQ4d9RYlVvz/uvfR3WVtZ4/1uADy9b8O6KgH
XdX7dOKTr7mdC2/p4Ufd9W4OdVoxPKOmoxH1YWpd5g+MpsEbxl/Af352qejr
1E0SiCt29fFZbzSUfNLdl3s4ge8tZ9iCIzR/R7+ScRMePKgtesehkfz8n5PQ
e23+hz7BfTJ4edpM+LT9GlEHKXvHowsZ8pT4PvYs+Hrz3cxHmo8B1x5UJJ6f
pJoHDnnckn618w/iUmQuOsAd/pzTrqfhH9OeElf/aOGty02ZC1L9woc9az/5
0H8Mc1YRq4gbHzoxvxLUgv5t9U76woln0BPXmAae33EVc+DH2KugsWPuXVrJ
XKlqmBm+dmvd6WMC2TumWF3GR2heLDroMwbgH761Q8Tv/2yFjtZfvy9ZHU6f
WYFzKc+3og5t1pD5kc0DTMTPi7zJefe6zPzpwCzep2OIyHu6xSuoy9TwgpJX
Os+jlitz25s84aee19P7AZ0VvJIc40+f9y6Qed70WsS7mm1FPJP3XCSvDKkC
fn1pD/55xp70jbO5P1KTkzxHY/wwlQfl3Puj1EGqDh3hS5JMiDMnXfl9ZePh
1XotwTds5gMRx7X7PcHjR3ynrsy0hKc9B6+n+lERX4l2e8G5XeyEDkaOa0Qe
S63D379cIOoO1eK78FKvhnEOwwLoxw/jt6nqexV86fg48IQFR+jPZHxM5IZx
4K3d4Im1wz6I56ct6sAceUYwekenePx5X07meRRVYT/G7abM801gnkXpX0Zf
PPs1fdFlD+ZVivdQF3RWqHf2PUMftfQH8XrhZP3+SHgq1TcH9PxdD3JOBzXl
nCY8BP/YvhyeQL0QXv2xPf2TD/6XUvX+1E9F+Fhr0o+iNwixw/c4WhHnUntg
OHn5SUVwv+geM8XPqT0Uv7nnh/V4f6C4v1LMHPSIq35TpxyKB1fxgReRLK/z
HkMbck9u98aP7M5Q4tzGTeiqBizrzvubS/6f4wy+VS1ql/icU9GxyTlq8I2L
edybj+OZi8xYR9/Y/OOv0/8HBpoGrA==
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3.9142398834228516`, 
        1.5360735654830933`}, {-3.5068676471710205`, 1.604716181755066}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}]}]},
    {
     RowBox[{"10", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           NCache[
            Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJwsnXdcT/8Xxy8pe2+RS2Sv7H3N7K0Scs1ssrcrexOKrJsRMrO3i6+RmWwZ
1wpJNiH8fs7z0z+fx6fP53PHe5zzOq/zOucW6TWsQ9/UiqLMyako/17//2c2
e//h1L/Xj06v/r1aU1/Iq1mi43d5f6fZl3+v2sWsz+Q1pPaBf6+G842P9f//
are8lCTvY3w+/ntVWna7KL+raFz596pWG3v13/e0l/1vyeurwET53fXEl/8+
1xNyfv73Xr+jP//3av3oeErOH1D13r9X+1Q1Oa5h+qe1/h3v5fZzcp6qTt/k
ekLLvfr3O2XXoqfy3nrrZMn1Rf2U8xdudEOOE6nacp6X2+X75hAn7st7zx75
PLpJvHyeyk+R31c4wH0Gz/kk171/zAO57h9b5XdqtwV3/r036n15JL+f3Oa7
HPdG1FX53cCsj+R9kL5Rri8gW4wc39j9S65/04trctwTPz/J93193srxHj1P
kfePXx2X75WtJ5+rS2ozvoUmPpTPz4x5K+M0L0Xux+oYw/x0Cvoj35u/QsZD
ubdazmsXjrkj89L+kfxODQ5YL9cVuXClXFfFjXJf9vsecr/GNJd78nnzmTI/
auzj/+R4qTz/43e3U5jfK5fkNVOTa3L+Radk3ah+F+S8ymnvvXK9s+c+lON+
Hf5CxqV1ra9yPNv1tnxvuPFNPl+STo6rrfyUKK8vp8v9Ksf2R8nrq1RP5P+j
2z+W+3YtfUWO12jmS7nO+GKfZV0tzX1R3t9c/lquZ8FquQ8l6WmsXM/NqXI+
/USwzJ82vftrOd6hZafk9V7mBzJeX4tw3Ulj5Xrt8p82yeetssp1G089ZR9Y
Man5/alNsfL/9O9+yPd/LUr1bz0p1f6+5D4C5Ht2lnRy/XaRJBk/vds1mR+j
1ocLHP9NsrwvclF+Z2xdL/tMCVvGPDZxlfm2KofL/rXTVJd1b56bINdtX679
VMalYCE5juUSf1aO86iazJ/965msQ7XofDmfUSVerkcfllH2lTFnoVy3ni3f
F7mesD1iF4zCQe/k9X6SHF//1j1GjuM1+YSsR48iso+VdEts+b/7KNknyljX
C/K500uZB7vU2XgZ94xtGd9Jyz5iJybJ+c3+9eU+tcnDZH4s59eyL7U2L5mv
AbMt+V2DN9flfrMulPWmNbGwSwW7yb7QKiV8kHXwahx2qsL5dP+OY+wqI/dn
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
mgp/2bKRnEf39JX9bBUsDf/0ILXYIbtEfVm/yuBT+ItVBxlva4bwB8b2GmJX
7MWlwNWT4uAJmjOv6uUT4s/VDYVkvvRbS+G5dxeQfam7rJJx0pq8IB6+0xq8
duS1HN8eBq9ivbgh16Fu/UM8N+Y78W21HLIftIrZ8JMLd4sd1DL6iz/QSsXB
xx1oLHbTOuImfkANvwR/7aFhn4t3Yj9nc4cfcU8Hf+a1TuJ+7epL9ulsH3hw
o7ccT/WtBL+7NEVwm+3DcdTra8Vf2KufSj7AaLYJO3M5CV7wUCPw9MuhYo+0
1nWJa+quJQ5MBZ9o5JtPvJWtFn6z7EHs/bMh8IZl18m6NAt7C/42F2TETqw6
JPbRDlwi69P+lUbss72wm+wH61XWbTIfPdvDQw9NK/tXuRhoyOu46g847lZZ
H3ZGZ4mT9O7OYheU+sSLxq52Yg/VWAvcOzhZxkU59Be86HMd+/mh5Bj5Xbts
6+T/v1zAl7fCwen5bsHH/plInGO4yngqsdPgv8qlIp/Sdjg8f49Y7GhYL/yB
7QWf1bOE+Dstdx7mNc0t+PFOmwU3mm+OHZXjOmXsL9fjFCt2Rp9aDzu0qb78
3uxbj7ix7UfBI0bcTxknY+JBwbtGSiX4VK998CspfcElk6Lxnzt+cP3Rrt7y
/4yD5HjmyRLib/USdeGTS2yHv5gcLPOuTnxF/L9uO/OyPeiIvF6cl8znRcCV
xZqI3zVSlxa7Zi3xx08uIA43h57DDvRuBN/W9YbgfvXxdTmvmhwDX/fMJP4K
K4+9PjFF1od6Yw1x2uPnsi+VZStk32h5h8P7aVfwa+kKiT0xcrxgXb7qKPhD
mZsJ/JWmSJB8v2JemW8lop+sB/PKL0ve3x8m+8L024T9UMbDuy1cKMfVv6aD
329g4zfadYLv7rQOnmKMvyPf0Qw7uSc99xX0Dn744Cji2vN+++V83WcL72gc
byn70zr0DN5xi71B7uP3fLl+9ecDeK3Qj/iHV034fuOlXMeoFaz/osPwC27z
xX4qvxYS978nz6WeV5nHhynCBysPbPb9kxjw5TFvGX+13Qi5frvWf9xX3syy
/1Wv59jJT9HEJ8XvwisOaih+2XzXdKm8Vt4keTzteXHioL654DMDm4Pf4i/h
j2Z3kFc7uT28TfNPcp126bbwIU4qOH93btlP2ncXuR+13lbs/pesso+MsX/A
Q8+vyTrRsvY+Kd//9EDyR9qoD+CDybmIx5askd/rbVeDz/w9wXvFfgl+sst9
xU4nbhD+Qc1VlPzLlGLwa11rC942XerJOBtpn5B/6Rwm+89uVUvu24hvC3+Z
qiO8TIdR8l7b0kD8sDVqMXG7/xmux/yGXXuwRO5LOfTkgIxvxknsn1KH8cc5
9sm6sfO/J+48XQscclNnXPvlEz+oDgnB/swcK9djX3YTO6FmKw/+3uYs+0Y7
2YT9sfE0fi9bJPPc2wmc//sj+zX5EfzvvBXwZa615XtqzTDi5qwu5Du8J4KD
q9bFz9s3yYsM2uSIX1bC591YI/dr7z8kdsE8kF3mUSmfh7z07o7k6RYHEa+k
2rJfjlsvjxxf21kMf1jvK9e/Y4zEUfrMicRrdTyEN7FmpIBzPCbDUx+sLPNl
lWlLHrumH7z76T34+2MxEndavbZj350vg9s98jJvV4PkeHrlRfDtb9IJX2Kf
HAlf06Y5+Lehl/g1tUUUduTWUfKLY9Zil1rPdcQnmWRdW3WLgG8bDAf3FskM
rqn7i3kLzwKPcH2a4GR180bGod4t4q3NxbDLJVqQN8k/SnCCXXgC/MXJFfBA
ipeMu6W6Euf6KxJH2heHw+POy8H6X51F7I0+Yzt5iyVjsF9Pu8H/qCnghO5p
ZL+bHTfKeNjFXuxlvR7EH5SoIOOsbLhHXDY5EXyeajs8yO2T8PnndpF/GjQI
vObaC9xyzYN8wkA34ofDmuxT43d5xsn/kNyPsuCS7Ae70uGfjGM0cV94MvMY
84HxLZQjWs6bpo7Mk3HvCPPRsLL4XyUiETve+Rz2uNZT4aes9FngyytWE3yj
vq3CPDcJEB7Eupwbfq1Qc3jylId83rl+G/l/19Tir5UsVqT8f0xP+NJD08kD
/L0r+Eo/OxH+/+481seiSsSBbTQZD2XnANk/xt9A9tXmveDZTVXAdQ3DyYsM
3AEeOFhJ8Lie9Qr4ZkMGwWNKnbLoDqInOOKMtOyLVfZC+f6xhnIfyp9J5Ivy
dYQn8Psl/LXxqJ2Mh5n4DP55fjA4uZu/4EE7/hv5QffeMg/mYA/wV9BS+J+F
MyVuULKp8NnRJnH0+hLk0yOb4d83FgJ3d3rLev17CPvY1HU/6zMC/n/5Q+z7
wHniB+3MlYhbHt6S8VH/tpXf2eeLoHs4FnGbcd+Gv74/A3/71g1eoG1R8PT4
CuIntEav5XvmqD4yr1rzrvAja8sTD+a+J/Gu+aQ8cUSJv/dYH/OxKzMiHPnM
ZdjHXdWZt+9liCvTusk8G09vkdc57wZ/FZKWPHjnMO7r623W8Z16cnyzEvyV
3rC++G+9cmHGp9Qu8NWpxbLerPUPNsr57fmyj4zWRbgf/x6ct5PPTDmuVpw8
Wz0Hr3+3IPv/v15ipxWPb+D3WUuxk+0s8ZPWg76mHKfeQeIGj1aCq/QPn7B/
5+fBvy4sx/EGjZJ5M4oskvOra7xkv5lj2sHX5fVkXOuUgOcdmE/8rvVyA3j4
ZCpZh8rm3oxrj9bEJ/3SEdfk7Ufebs4C8vjFV4A/2q3ErvQKw67feSD7UKlQ
SXhnc+Y0dEUDO8nvjH01yf/bdWSd69cXOeKLOfLemG3BM2cdD94K/Y2fuzCH
/bd1KH4+eIf4I8O48Ij1cp/xn1QOe5Xpo9gvLd1AWUe2539ip+zcI8jXxX9m
XfY7gF14lIO8Qxl0HEoreGalk0OfVOa6rBNlWlryQD3gA5WJn+AHKg8Ue63u
cxL7ac4rjF+vrsDLzYT/U9r24zrHteH9raXwtBnSwSPvGkIckQm+wHbdAh9f
aTL550652cezPcFHk5bCl/ypLPOtjJ8OP7QrWvyV2iIT+NtaDI8SnJdxueEO
b9bpE/mEuivhVbbmkfVldFol92vH58Lfvbzn8u/4mvts8NXbEsxThWLsq8hp
+PG3Tuiw+nrDgw2ewfocUEZ4L+1IAe6nYTv5npa7+z75PLUfeorE/LL+zWLL
0GmsPg/f93gDuGjTNniXrb0kfrMbbGSe9HLkWzecIf5su038onGqBfe1fS55
hiPlwdGXzqGjSvuDfNXB/LL+7XJzHfZlC/mFI1PQ6QSCL81Th8Nl3qr9letW
W1QhHmi0E1xVNrX4cT11Y3iG0Brku/QX59if81l/JbYJX6x/6I7uJz/XpRxK
y7zfzivrQ7uaFT583CTyG+N95b706Xnw11f9BH8aTTeC6wfYYv/sqnVlXSox
w8EXH9Nx3HBfeTXOv5fxUtT/5FVr/kb2s9ogDr/fazB5wnh3GW+jrD9xsPNH
5jssAh1KPPyHrWWR+bDsEHi4v/M2cP/HZF9YdwqLvkSdWRI/pfuCHz8yHtY2
+GizeE94hvzbhX+0Cr3n/hZel/Pp97+JvdcTihCvDW5P/tHILOvEmDuRuCyC
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
hzcpdIz4XilIfrkP+TSj+XH8yccQ+pHMWyL2XqlRU3g9dek4eOV5F+Ajh5JX
NMP2E9eczUjcOekbfnb4RnjiB89Zp4998Nuxmam3dtuL/rHrJ67nhA/9CdYe
xB5MTxB/p+WcQB+5bl27yP3E+6HT3riG4xd3Il8cvB/9XJci8Kdf6MtnRGxm
vkqNg39fEoO//VFR1rVyJYHxvPUaf7V7I/71qzO4I+4+da1RI4ivPBuJP9Ga
TYXfKnGJdTimIvGB00zyqCFbyG/lPsj+m9ua/Oir3fihDJHo5Ds9Ebtjjbbh
LSYmEQdumAH/m3ES/mO5Ct553g9+Omkmuo3cceRHTlRAp3rqGfbm4XCxr4bH
fvIxRfKgIwp+Tr1Az/zEGZ9s4stiFyS+05aWI/83fTl4OnkMcef25tTBJ5dk
vUTdJg9Stx33kSsAvOgTzPrvFQie7RdE/tElO3rnYevYb7d8hfez/H9jl647
owf3oe+hUi8TvOvx/+AJLl4Gl+wPAC8spR+vUrQV6+OIm/AKxoFp8H2fGsv5
lHnB9MOw2uI3XccQ//d2FXytps9D3ubSfeLhHjWYv/L5sacvB8FjX/oKX/o3
FB3vqRDypnWbgycWjsRO5V4t39ePRFI3EBAGjldmC1+iV4yDZ02ObSu/80zD
Oj/Xm/q8frPJy2ffTHyUfiZxzH+5+J7nGOKpL5cFnymfJ4D/VtDn2sx5k7hu
Kn3i1G19yIP0zg0ern4LP35lLvVCtVqS59+5jnV1eAz1N4Fz4BWmzkbndmgR
n398Dd44EAaP3LQNfqLgXHiqcW/gt4IKrJHXjG7Yvap54c2mvzkhx7vVUeq5
TPc26JBHPKW/3qe++PeAqlx/RCt4xkdlyZOtPst+fVGA/pR+U+Fhcy2gX2im
d+S5SwwEX/506LqaFWd/dy7A+GU7I31F1W/P4auu7kCPW9mV/MSBRfD7zcNZ
j62D0Xc1qYWesVNzR/2GP/rzF0n0m/jTiP47w5tz3MTJ4OMuQfDla5qhi6ib
QP1O2zUyP9qAgxIvW2YYcUg5Rx+LRWdZ94+WEDc/fgtfuSM7esNGH4m/Cy3F
jjS7xn5IdYv6rOQZ2MOem8jXRzWA1+xQn3zziR/S11v/eQk+1GrB+h+6n3qX
1OnIb2/dgV/cPYm8dLMu2Mn+6bArMfWpY7CqU+f+tTJ1koMncJyhZaTPoLqo
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
DQuLXlpZ7kb8mtIFPnxmbfIk10fSZzkuFL+j90CHvPoLeYW5/XhOX8RM1u+Z
0/BnShzXvzSCPMC9edT/t6Qvhl5rO3mLa6E8h6NhHfxkqC/r//hP1scVR5+G
sLHkJRqdoY/D5QGcb+MSdMfL/OH3nVPR58mpH3n6Q3XY1yt8XP6tJ3vGR/Ld
CfTrMZwbkSf8fJ3xqjOY/VT5CPH68kDyxmM/YVfmuoBfNQ/0WdfIHypDj5JH
qlGdeHj5cfKbNebSn9z5uNhttd0tzq+mZlybXaAP0Kk41t/KkeKX1b3lyF8H
LEHXdLAWeKnKFeYndDbj2+4yeo1b0fTvLbuTeZvTl3HbuAj97vDr+NcWl9Ah
r8xNXef28ehg+k+mb2ieJPRr784J32IXfU/+ciB6NvVOLfrlBTUkrkhezj74
OwPcNPmt3KdReRB5yksvsV8LnoN7e9M/3tZ+0a/3LDyBnf4HeNizN3jcJR12
a0Yr7NKcjuhd5t5i/6aZRb+RfcOJV5MceXvv3eTbtmSnXj3zLPQvbf7Iq9KK
vlb6M/oqGv3W4A+d/Okjl3BL+CyzsE1c0p++BdoM+vsbBzfD89dqAf4+GsW4
WN7YnwdnwYlzeI6k0Yg+QIqXo8++2yP6NxTuy/oYB3+sm5PgVZNbgSucfSVv
pb3KAj/nV4jjHIlFDzvtF319Wl0n71kFnb8VN1bu0ywND27W95P1pZYdyHjd
W0Keu6wPzyvMQh9Oc0JzdCrKJJ7nccoJ/eqz6vBkk7zo65V7O7q5xE7oubt1
pa/SvpkSF+g3qmOvUmfk+ZbhRcXe2ce+43+7XMNe9Kkk61x/mxvd2NhI4v66
TcgL/aS+2HgZiQ5zSyX0+53J19lh7elr6ezAg2mWMn55K+IHhyZhBw+9w+84
vaGP2LhFjPdqR31c0ef0y3n1i7ixwTnBN8YN/LOR2AU/0PA0cdjRMvSbuXOE
525kz4S/107TP75aD+zH1XX0eW3AfChDeB6Vfi+KfTMkHfjswi32w5WW+OFv
/WT/2PNvgud6Jsj51MftRLekl/pIPiQf/JMxNQZ+1tMJXuXVD/J4eRx9XK6H
87y7ocvAwS701zLfjgYXPvQXfG7MbQQPGfyGfdtJY3zP+4nfVzPUhDfMja5I
TRvKOmhEH0W7xB3sdlwT/OzDZdjTpq7EhWdCeO5MPPZFTz4B/zGZ/v3/t3fw
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
eVP6y03uCr4If06+5vs3eGj1LM9ddEFXqpSriH602h7qC2ftw04O6gdP/ZG+
i9bK8dTvPfIGrza+g/5l0VjqS9SP5EdDgnj+vHsAedAqGbBn7xz1FYmR8MQe
Q9g3rVzgwzrfIT+dti88Yefy4EuXU9jrvZ3RFTWsi9+p05D1k+M583U4Lf1/
g3YR3+y5R13BudHUt8/w4rxfeqI7rrOEeqlBGciXzCzM8c7Qh8jKHI5uIv8g
8FmOj/Tz3DqSeWhGv17Nu6LoS+1JlchfjV5Cn76qq2T/G/XI81h1JjPvvpfQ
M5WuKby3vfU+uHnxC3jrsn/R6WZMx/4P/yk6KqtGA54j7R3m6NfXkHqISCfy
b+dG0Wcpsw/74mQZ4ofskdTfO09GB+Ph54gzHfUnLfrCC2/Hv6inj6KDdWlK
H4wX2ckrnf4q9tROeQ9v2fcm+t8Os8ljZTiLfazkS366agL9pjo+ATdXHEYd
76sN1E9sWIPfeVed/l9npxJXHj8udtp6wHN99K2+xIMhI8jDtcyKLvVQLPMe
fB3+L7KD+CGj1Vri3aUB1FNeqOmog4pHlz+ylsSfxkIf9PeD66MvqVITPWfI
DPjjVxbxx1FD4mzj3BnhY9Q2/cnbBlv47WVPwJdLu5DfDuzK9VfNL/hdPcjz
qtVljji1/Hjh+dXwXeghj92AtyiaXdaX/nQ5+tyAXbw+rkz86EpfTKvIfHih
fCnwaJn3Sd7BiKsAjh35EHtX7jt54LmD5P7NOjuIg8tM47p9ZmGn8v9knX24
jT/LF0NfqI5HsftHzsA7ZaNe1ArZDO7230t8VDae1/gm6ApPeXHcYtQbmJXz
OvpXOfLB39gHys5A9FiP0pMXOz4Z3X1yBZ5zMdGPeW7bkNc0MdRp5U1FPqjv
fa7vHPkNI5D4VpuVBv/8ZRe45RV9weykQ/ilsL/o9Mf9ph46Ar2lsX0duuuR
m/9X03nH5fT///8iK5FVmXGJJBUZWVEnq4zMrBJXVgqRFaGOvRIyM3IIiaxS
NpeRkpmZUY6sbN5lj36/z+t+vn+5oa5xznk9x+PxeD6e5Ldr5fjeoac5B48s
hU5Kdg8gLtbcTB1/biU69ons9zHmPOJ8vYvle7ZAr6B/Uob5lzrZ+CJNe07d
2Yo5ONluDHWqb7Cm6ykgH5o7VBTn4oBMHrJHpyVnsI9PcZkh7rP05zM+ivIi
+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
pJ18wdEjDmj+JBHgJWbsqzKe2waepthTHxe8AhdxHYSeyu4temN/fJ31a/M1
n90U+nt7fC71P/PQy+qL0avX+Cr6a2lVE+KaL3iAulDbPzm/OX3n3JI8H6aH
Nf1niqjXDPqR1Gll0ZEaXauiV1+H/lbZN5b8es2R61GnrOiPlccjwYEOVuK5
/uBCXDnlRlxu4Iyv3sDL1O0Tl6CXyJ/Jfd7ThT7c2RrftQvrRV+lfGVvs2wq
iefe+PE6OEqzU8S9TZPhs/LKwi9PDeZ5TVTw9Z+xlvxRgj1SOodlnLPnv6ib
Hc8SH28NF/FB6cZcq97Cnecmpif5vpLGyxc0QNfd5Qn87aq+7K/Y7Ib+5PN2
6vT4MeTtU5ruZeEMwXOoLswvKZ9l9ADzckR8NHimMNe5pog+4NUqznfnKOJD
y27U1bVPktdCguBDHliJPYK6C+RL/YG65DXzcOY+hlTj+dg6kPz2U8f3rdeB
OPYuT8QD/aBe9GfzKnFO3sXy8+XQYeid65H3S4YTl+LXUde1L0c8sMwjT729
DY9g9o664NNKcMDPA5mbd9iGf0M8vIPyl30y0q8p6EeW4b8s5zwjz8Z1E9dD
P3UWcwbGy+jFG9fl+Uqpjy67d7C2x3Uv9ZZLG+rYuBrwr1dHw4ulbKCPNvh/
5Ny4MY9z868ifn7RJnTy7/9bID73ojTqpE+z0c8N2MT3OZ0K/p/VQOha1PVN
yT/hO+lXN6vgDns2Mf9xlrkDdUE96vgZt9ALFm9BN2ZlC65b2xd/+gL6ZeOE
T/CrMVZ8H/8pxK2oEMGvKZdjyXM/Z9KX/etAv5aELkmaEE++O3QGnCjjDDr/
hnboHxd4o4uuYqQuV2zgc5os5Hu2q0E96VMPfK9nCjrcMPA4Y5Nr7NUpNZlz
cGmv6OOkue+oDwLj8AeK3wzun7lTPO/y2k+aH0tfcPjXrsTtGjnEn0nsY1P8
XzL3WmsvceNPacEbGqZd5f0mMy9v8H4v9GJyfXRshretqQ+nTYNXinmHHnKv
G3VTSDB6KcconovNyeJ8ys6m6ESG1WeP1usmnIt6pfCZa9cJnty4F9yyS2Xi
+sQK4MfVS6JD3Oi4m+vdkPnSE+z9NYaVRO/Z5BzzdkfwQ9VlZIBDp99jP+9M
F85B4mPiY8c8fAFrSOxDrJ6FvuXaUnh83WNwv4WxPIdfWwi9n67zI/AEZ73o
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
gce/yd5Z/WWZOB89Hz1hDSf8iGo8Aj8+CK9oPLcS3LXRdPhPVZtXKb5I/TGv
LLx55Gp4xf6/mCOc5ij6K51dJjo1x8XwWB20PS3mI8H3uu/mfcaWA89JYv5H
b5YKH/rFBNx9QTvq7phKol6Su3lxrga0xl9Yvxre49YUcAJT+CW5mD2RUmXm
wNXOi6h7dO74Bpyuy9zKvb7kadP67F8+7oif6P007lPPA6JfVk6voi5dyJ4l
3fcezPMPSUZv0nY6+HhsKH5u0yuC3/bazZ7af5l87ucVwKUix4u8agw+zjlJ
SGQet0oM93vkavrNBfWpdzyzqX9a/GSf3csLxH23cOqn0IrUMU1vUvfGVWPu
YCu+QmqeKZ/vmRnz5gb2iBkiQsF//s5Fb+snUc9OdaQv7M/cpb58f/wQ1pyh
/62kzaO9uCjyr/SJOkhKQTeiPz6J6ze5SJx7XavyzG9fZD7ReHYy8cYFnwrd
RHP42SZd6YsdwPH1Ifh5q3+ZjzA6bEMfqgskD5lmU9fNu0/dpLdCdz3kCvsV
wj+KOCZPCmEO6c9X+NfRn+CXh+v4XuET6T+/pFLn3D/Dc1eJ/t8YSv2mNr9C
XDqN77byeBO4hEU0+urD7B2S+3jCp45fTH3w6Ts4pnoRPDm4AToYW0+uWyft
+r5oQ33Qp5x4PpWzX+BnpzOHqCvygG++iN+M+s2PPv/8X3SZtcdz3YtSNZxw
OL4aex3QOWyfwR5dtxLofiySiPeHfhPfk13Ffnal2QetLv5B3E3G309pbkkd
M6MePHtAW67nt03gE2/+UtfdjKKeDfuH7qdPA/G8qcdOi99T67Uhj319Bh6i
sPdLXsP9kKo3RUf/G58vpT57OQzn9uI3tApfHF2Fxvi/WuNnKcWyd1650pl+
ZdYrruuDRug6VkbEifvaqh/9StJI7st3U87Baivm7isyX2kIbk79kdNa6DwM
nWfAz53qvFq8rpsFeN6Zq/iSPs4F/xqEn5CxSjvySx38xdSDJemDKtDf6572
Q6//jjlHxXE5eP/5OcSnYavht89F4mPQF39b40QjerHEaPjRMehG5Q31qbNu
PSW/eLnDY5ZYjN9TyaXk47Q44uTn6eA2+7O4bsl9eM56avq4uWvRaTfQ03dE
+cHrfg9C112B+R/d6VM8P/uc0HWlnEAnf7U2z2O6H/4XZtO4Ll6e6C/Ovub3
r6roDj7n87kDak8VnzOHPQTGX+HivBor4wskv+9JfzapAz43A8HndM+T8Q/y
7Upf0qmIurejI+cpg3lOqcYP+sqfLuD1Wwbw77lWxPcaSi/xPgunM9/8PUn0
Fbo397lOD+AJpJzX4Bpm3Xlua+RSX8XfF8+vbloN+sIeZvDlSZfph38vFq8r
r1iB/+Yh5vPk4eyJUl5J3J+26IrlxqHw/W3WCn2x8VkMecT/LDrpyi6CH1a8
LNAP59yBh6s6necztiPP0dM/Al81xlrSBziWIb5Pmcp52cm+QPXARnCbERL8
zDcVfUW2Npc46z38crQzPlEzmB+WproQT+5p+yu/V8SXzt2E+zKlEf3B0ufM
d38LHinO4/3P1H8Hs0W/Jc8Zj148KQIdVNlS9HE+48lnIeAKchV4M3nGIvZC
rPiLvvrYWXAKG3AX1e+14FH0B1bBY/gdoD74spXnc0cEeyjf7IKH6M+ck5qI
36Ju82f6gr7UvdJWO/jjI0fAbfomwZ/sucrf//WFVyqXCB4xuB15L7g6c2Tr
PMDpPu8U91exvsc5Ht4Fn8i8j/QJ24Pg6a9NQuc05zd4zLgu6FptuvA8jksC
v7njo80NPIePHvOMePn3APhV2Hn824akgm+lhgneyjgEfFjvs5z6tklZ+OJ4
dH7KZU1ff/ExPMKbGOZx2j/iPlVowFzNpC1lxH04MUc8h8oGfB+kv3Pgiyyj
mGfe3Ip8nvQVXWtCBM/7Uk/N38MNHm/VOzFXJ/+QqIfr4B+qM3YD9/fvS1+V
wn42o1Id3HLjRaErlco0gcedPJXzXdSQ5yI5Hb+UzdfgwRf8JL/dqcbz7nST
+c9MZ/jt3eXxRbXeAo68ZA7zyjPZ/yat80THc38Z/lYW/vQxV5/Ap/pORac+
eyH7M8pdEfFDLVGaPQdX34CrmgaQb3a/Z84m8RF4x4Nk8sdY5s2lzs+o576H
cp+W3CJP/jxM/Ra2Fxxy42/0Jdd2we/naH5EwbfwzenBPLHO7wvzG7r1zJ8l
V8A3t95dze9hJNfP6ii88XF8tFRHL/RHzrHM858egV4sw5Y81DlJ9IvGw/hP
G5dVJv+3KE3/EfeeOuCgHTh5dG3+/uwLPhevXOFTOjan3/pYjJ9K+Tb4/U1d
Q70Wps0tHX7HnM1eN3zaZwWQH/yGUcecyODvgR+I25nDwT8Cy+LrdLc8z9tQ
fHzleZnwmS/+I0+VrIvuqJIduPeP/vSb8mTmWpu2Iu6ZvuV6Hw+lXnAsr+nF
KqMP7f+QOenT+zlXH6dSF3wfCI5nZwIec60v8+keS+m/Lixj7njuMHj5zKv0
gzetxblTem6lbqsxBd56eDH7OZ+8g78u2CDuky46l+fNsy96mGrsAZUrLgWH
tQwXuIr+kxXzc8cHME9WPpW8tmGUyId6v26c143luW/56zQf8NL0lVXwxZYH
HCL+bKxEnF/OXJf+UyL71gJXwed0Tkb3F9ed+1OdfKyW6QYf4hSC3/OSdvSx
vTeS53eWhZf2qyV0Wuo8fBrlRwni9+StViK+y0+eafMkJ8HvP66Gl7y3NZ3P
0z9evK/Bljj4M5/z5PqEfuKdG7rACczlGbft4T61T+S8++UKnw1d6hf60p6t
8Vv88UX8vyHJiC45siG8gvspdNfLgtkPefQ+9Vnlt/CG0ZPnid8zXOV7PHAk
Tq7ZSb9S3oXz6XMGv+0BHQRPoLaqyHVzXy/ii6543krxOr9qwu8loW9S2obi
M1OUAJ616ThzNNGuzIf+bCP6X9kmFJ8zl7v4DJQ4uEW8XsVn8LuLTuKrMrwZ
vmRdTcFTs8JEnyYdnwbe/twGnesZ5k+ldP8g8fmO+wu8wlDdjnroRzN4m5HV
4dW31qTPS/JD9x3dkfhbtgA/z7DV6EzbnaDPfNuE5zgvljwVGyT23+mdaqHH
jV0i7rcxagD8+1rmiA0Pt1J/6akrdHHD6aP2/eQ634ric9fJg2/wmsScoMVB
4vKhFOJLeDnqu3Bb4nfVHPKuqV7UM2p7/DsNg9n/rVi/5zn4XAoe7cpKdOtf
V4DnKcbl4v9r5KBjq/oSft2nM3m72IX9uv2voTOf2xxd152L4OIew+iDmp2i
Pi2AZ5QcylAfJtSgfnsagk4k6jL+82FFoq/T20QTV+xr4Ssfl4OeY6I2TzmD
Pl4NNqD/bPRO3Cddl1v4/41vwR7xgXPhJX8GEZ+76Ziz842jH1gBLyoflpi3
PDCGesznKbjKgAvg64+SqJcm9IL/6f8cPkY3BxzylBX5vO0Pnpu5F9HH7QrA
V3fWOeqpwbngqOUC0NktrkTfE9mPuiV7C3xBADoLw+C14FMG9jTpvrZk/nv/
bnytkhKEnlitFAKe33oteMSJCfT59sy9yzUeg1cWz0LfsMED/C+QvWPGrCx0
i+mTwYci6qNDOby7hfj/pzeFPsLYYSDv2y4c36DMPE2PWoe5nWPf6Z8W9DUT
z3lmNs+Ldxbzp/2OgrPNmCnynrT8NfPv+oV8nl6J6LirusKjb/XCPyK/puYj
eUHwSsrSAPC/d9o+mn1VwUWrtBDxTEnKJP+2Lsf9GwhOpKxrSH4I4/zINugR
DIvxydUtfI3+22jFfe6RwXOw2oy+4pkr72cM5HoN7o7f3bSHIo4bDnsJPF4X
OJD6YN0X8PjtDeD1GmnzktIBcMoSK4UORllRD53NUSv2P3W6+pDvx553aYyW
704zH6lPw29T1+MaOsnTo+DH5qWhs1DwMVHqrmCewB2eWBr8QVw/tfMPcK/r
w6k3bcexX7pqZ67H83L4GX1tgI+H5zD4CMM3cKzXvJ/+APtuddc8ea6mqbze
oWfw/kt+UMfOD9b2R2o8VWIW+fHkOnRtJxvQr0a8QteSvQJc0XY+PpVPHJij
mfcK3LRib+a0n+NjLSceA/cOtcf3uNd55qzvz6POySsJH724yzTxvSzh2aR8
9r7LITvAa6oMRreyJZO62Hk/9VYfeBFd5nXu45S61A13PKkzbaehvzjxlesV
nhgqrv9i5oWMM9vBx1aI2CP+P8SSfu6kHj4lIwNeaORYfNd+m4OvTT/0+9z/
A5VyPJA=
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3.914849281311035, 
        1.5831453800201416`}, {-3.506932497024536, 1.6599080562591553`}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}]}]},
    {
     RowBox[{"50", "\[Rule]", 
      GraphicsBox[{{}, {
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           NCache[
            Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJwsnXVcFmsThlcpuztXUdAjBorH1rW7A0TFNbEP2O2q2IoKJtaigh0YGKCu
3diFwRpgdyvq9znX6z/8wPfdffaJmXvuuWe2WM//2vVJqyjKzJyK8vfn//+Z
Td6+O/L353unp39/WpOeyE/Ts/1X+f1mk09/f2pnsj6Sn0tq7P3703C58r7O
/3/azc+9kd8v+77/+1Np3vWMfK+CceHvT/XfURf/fk5L7nddfj4NfiXfu/Qq
WT4fk+Pj39/N0/rjvz+t7+2PyP0DK9/m/g3kuuqKADfr7+ej152U3yOdvsh4
lpZ9+vd7yvbQh/K79dLJkvHF/JDPFa1/5e9Pe7Nqy+cmr5fP2+l+f5TPd9q5
U/7/bMOUv39Xf3VW/n7fco3jOcNmfpBx7xmZKN/7tVHmw0o77+bf342Bn+/L
79kbfpXnuBJzUb43IOt9+X2Kvk7uG5jtslxnzI6f8tylHyXI/8//8eHv73q/
di/levcep8r13qbEy+e8asv/qwtqML+Fx92T6x8b+VLmaXaqPI/V/rKsj955
ym95nkyLZT6U2yvkvnbRyzflum3vy/fUsMA1cj+3XMvlZ+l18lz22+7yvMZk
19sy7qbTZH3Uqw9OyH2HvTouv1+6msr6XjgnPzM1TJD5DD0i+8acelruqxzt
tEu+N2PWPfl92MAn8n3vfz/L58oWuvH3d9153Be574J0cl1t2YdX8jN5qjyv
ErcnRn4+TZMkfx/R9oE8d8F/Lsg81p+WLNdNKSHrqi/MfUb+/nbRM/neyCXy
HFbbR1dlvAXHy/30Q2GyftrUbs/k//eFH5GftzMnynzU9pJx601HyXjtch/W
y/+3yCrjVh96yznQDqWV7+v1F1+V371ffpfPp4amkf2Y+pv9Hhcon7OzpJPx
28XeyPzpXRNkfYyA16dlnryff5Pfi52R7xkb18g5UyLCWceGBTmPpSLl/Cou
VWTfmyfHMu7zNR7K8xcqLNexXFOOy3Xa5jwh4/7zUPahWnyO3M/wSWE+R2SU
c6XPnCfjtqpl+yT/H7JR7IJRdMpr+XnnjVxf/9Ltslyn8YRDsp4exeQcK+kW
2PJ39+FyTpRRBU/LeMve5bxH7E+R3zO2lvk1xoczj8nj5f5mvzo3HftZ1seY
9VzOpdYqmfXqP8OS79V9fkmeN+s89luJI3Id63MXORdGo8fv5H4XBsn8WZVO
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
zTFBrqMPKSN9BtXQ4uD/UaF8/oWjHmrRC87HuIzwALnGi73TH+5Ez7pyDfZ3
B33R1NOvybtuoU+dsXQePNmXAtTxl9yIvuc9/fpU33Ocjz9deI67F9Ad2jl5
3nG3ma8vFbFfo+hHoY5cTh/cc+OxP5H30Al/Hkl8WPQ//O3Nt+Sdik4Ufk37
SV5c8z4qdtV6sZ0+zX9WEGdk8RM9mbItHju3uS788drS1M829OZclZlLnjVF
Bx80HYT+9t058vKZxoDTKmykn0etf9DRLfvEefWMRn8W+gC/Oeo7djnrEsGH
2voTsi7KuXbkf+Myox+5kMrv/ZdSj3CtKHb5Vx/47s0ZqXN54oJObpwPvFbj
A/jFcYOJl1zmCj5V1Zzg9ZmLyS82m8c537oQ/5mH/md2q8XEV+o58Pd94m/1
iCf1fbMaDJPrlpgInxCUD7w5ugJ9ODv0pW/zXX/yDUvWgWsW9UZH+awy+KVV
BH2tPF6JHzErBEm8rNerh/5ihzt1WT+8yOcvrowd8G9PvmmoG3nV503QF9y6
jH5lUh3w/6v+xAVpZ1MnFvmdftb58qAzdvZFr/95L/ZmTST+b+MN+BarB+c6
9GQ/ORcv0qMbPVxQ+n7qKy+iTyn9GN6kdWGxH3rhEd/l87Mrs1990sp49aAJ
8JxfvxCPflGJU6e8p5/q/M7k4cMC8GPNQsizvF36mnPZU/axVrk3/nhVEfKd
/1F/qwd3o4/Opi2yz9UJc4gLNg6C169UH/57+2q5vh3ykjrWAHCVNYr9ZV1X
JW7U59P/wPj2HDvkNxE7MLo5drPfWcH3VvGW1L+75YC/unQE+9quHn3n/ssA
/3kxWuyJOf4b5yPTGeL18qfIg616iE7GyEBeaW0n7EqG9ORfwsrKftGuOdb3
nAt1F7Veg+/blwen92yH/YjIRf/cpemlj4UZlQKv0ToLvPmserJuavvrjGPK
S/IeYWfAsfVfE18YbeW+5qT91IEmdqIu6F+d8X58Ln5FbbGIczpmK/Yg8C59
KjYORF/S6xX80Ddv8I/POnRrbTYR/3+MBCdUU+FbEjvSl8GtGLxfxTvEo8dm
gT9HoCPUHurwWj1+4h9LDiEvUzQIXU2Io7/3Gndw/4py+PWfhdDZr+0g+Uut
/D3GfTCJOHJfM/IOdfPhRwqOQi+R6yx1/FcPEM/0XY1O6nwuxt1+MfHpizHo
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
lLrUL9Q1qsv30J9pfgL4pGp54o9tecgDfZ2MfsX2cP0732bxZ+g1X7ZhXY3a
1JlVbSw/lZpnhC9Q8/RlvUPLw/dt0OAJP3hQRzbnFfvXiiHO31SF+ty3BefK
PMZPoi9VC3gt++YX4pnhA8hLXzok86SWdKMeOVtV4rTf4+j7c38N/c7P5uP8
pB+KrqbdePyibzb8dF3eX6N4NhOcoY+KkToE7RHvRbLDsrGOfunl88bZbg59
3ypHf7/s8DI9kqhf/gQuthPXoGuZEEVdyk7eO69X1+mj/fMs+HfYI+LCbhHk
/Vdt4r2SHS3i48hG4P51FdGJLiwt/YH0s7ynRXUPQ8cb0VHGqZcoiZ6vZW14
7kx5qRfNNRW78Lgb9VWjH1Kn+Okz1+3TEj+6PBN8amJfzmeueegnn9+GvyvX
zlF/7yy4xyo5mHyRfos8fmw8uHPJMPicr515T0/TfvRNGa7L+dC/uRInJA2S
9bYK3Acvlp+Nf309FT126jzWcVID4t58DYnT9/L+KGP3YfSVLSaSf+zfEf78
u4GdC0yPXY8Nx2+l0OdVf9QOOzT0B/mPPvQzMBesxs4ULgSvPh19qX2FPrLq
sHzY4R0e6GfCYrle0hh5D4O5up/oi6yO7dE9DHDM2+m7zOvuJsSjwR6Mf3wZ
zmGRGPbJ15boQx51lfnUnnuRR4psgq7ba5zYI2vWMfIyt7bT36LnIM6p3po6
NL/s6MVWFse/32/HeLp8wS/GTAHnTK/G+81fzpHzZzTwot63x1twxt7z5F0f
mtjJpfnxu/d6ybzqq4qi/x36kjqXdMOxN+68t9ty7kd/ijKO90G57SI+OfGN
eTY04s0jA8gr/kwn/lzPNoW64KCf6MLfNiH/H5SumYzz5G6e42kX9DtRE4n7
2n3D/geeBg+1AO+q7QuS5yg6innNZBO3NUePp8f9y3OcoI7fKm/CI6zq53gf
3W/4vd8R5JviguFLqq6WejKlXxXi0m5ZGXfyeuKBpMGSTzLnvuH9BmVW0Eck
eihxy9ae8KOPeZ+MebY0eY4MLuJnjM3ku60kP85z4ETmdVQkdZFlEqSvndLZ
S+ZJ83Xkb56XIG9tlmd+TfoJmPHosZWkcPxVuB9+PqMJrpiZHf3XTfrv28l1
2O9T6AtmVOsMrgvYAH/Qbhh8UJGS+KWBscIL2dOq8jx2EebbMwgeOjiK92Ln
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
A/89C98VffXjog6Tn/E5jH3xY9N7N+X5tu2Ij+S3daJvl66wj1n6FyPyqbHf
Q/qIdRZ87wUdOd+rLPBZKt1W23c7jrjQcgB68dHsX9fXfUr/4z6HfnL0SHwW
4mPQAQevFp/HYMa8jJw7CF+LbXWpR04/FefSWCqGOepGzUXeVCYGEn9i+gj+
Std5Fns+80M4t3P2i7pSZ1UXPUn0CPrQPsx/K5bglcZLhfg/tC3D/skpo/B1
bH9S/Fct11TkAckHPlTa3o37+y8dXKP6YxE/1P3/weusLbVFPI8nX/BJ7W2J
D5UF8xKGt0nUtXb4c0ots7W8fwN9omM34tulyejd/S2FDlz+ojKP4p8Mr98e
3E/5vJ38nhEKrpdbAh2flMx8xqsjzA8PGQjv+vIouOTDB+iTdaeYC14MDmW8
4ggPN6AjebjRZ95Hv6f0v5k68Oab++iLlkrwVz+SyMfdX6JHGY3/idKrAf3X
7xXMZQedBq/4Gkn+3Iifv3ryM/1yOfhzdaKePrQv+1uUL4eZoxhlig4kGl9P
6cF6fu7dTY3PQF8lb6qPvuykN/s3HkXRFxrv4rNVFt2B9LY3z3FAC/KD12Vw
No9M9nE8usXc7dgr/P4fhdzba9nExcHoDo1KU/x3lj/C53HvceYSB4SB/3Xs
Q75vk4kPVdIL0Q/rIxtSZz6YBN7aSg/eMAYfGjm/FnMVp9Anyb1DOTe+E7in
pvjdKEdC4CknLiHenF2Jjv6EMzrByn70MwEr0Q964Gut5k0nf9WewL1qZSHq
dHWfD/e5Uyj+jvd7UTcuTQGfuXeDed0FZdD5ZDDfZkg/gk5oTRQ8+/JRu8XP
R4Vz7ixsqYfG3qOfH1mF+ZaaLeinckrzPU15CD7TwR2/uU/XwdGG7gWnvBVA
XfBxBrrhnTnU559n0ReN2kHckv/xPg2vmafLRNelT9byXuES/MRUC3HO1GuH
qF9eRwg9tFx+BPxqdGl4fmd//K6aggvpPU8yZ+FUxP0tHcp+7uFHTvF7Uulf
zsr4Dk2ozlztzKPktXGj0c/2L8F5DDoIX/zNkTijzuTe2Oaxn+VaNv1DATi8
MUdBj9/2IDjPmePkkWH5zDfWm8H7bDZK21uxgPr5qrZ/IDqJfXd2CcSBwwvE
edT3ekCcaWPOfOOCXyKfG2rWwY8huT7/vu9B+Id9zznvmweGiD/Pu4J/4O0h
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
/LgGPhS+I8YMX3y8Go7Ex+L2F/qfqwpxPnwResLqjvBb1cHfdPHwivqja+h3
Gs1ChzefeRX9oUvwn/3KwT9NWSGeq25oIXMqMx3or/ZvY77NHV9MfSdtT4vF
eHiKvvv4Hn3KgeccYv5HZ5pIHPtSCtx9cQfq7vUVRb2k9OqDPjS5HbjopjW8
XmYAc2h1mbtXiiPoQyoxB27sDq8sS13Zy2dXnfxToRN5unx97k2yA36ij5Ko
x/ofFv2yeiaCunSJtmfpYz9089eOojdpPwt8PMqfOftZ5uhwB+wT/YfuXxrf
c44Z9cmCyUvF75uUzJzC0z3MdQ9ez5zB+LU8/8X1icPyXfZtXS0Q/Iny7yL6
t87sW5f9zaljmt1Gl7uzKv3GdnyFjC/K8/6yTZk31+9Grxjqz99f/A+eq1Nb
6tlAB/rCocxd6ioMxQ9h3Vl8Jitq82ivLom4Zoy2go8wbwu+nTKd8zD9u7j3
hgrF9BmVCuEJP/hQB545Qv051QL8t2lP9qc7sB9SSr7B+14TTT1wLQh9qORL
Hip/l7puIf5y/9uworseeY356eCPIo7pKuLbqRv+Hf7V+xN40ViJzxU8FX3Z
l0TqpV1J/LvpX9DTa/Wb8VoSOtUza6gnnm9Bh2UZLvok5Sh7h5RBvalnJy+l
T3j/k7mAJpfQ1fSdgI6udW/qx27a833VDtw7kbli+fZ7+NlZzCFK312YE72q
+c1U9eQ5TvtG3TloMvFiayK43vOx1PO77eGNx87S9teVwDfP8hDP/fAf8lxm
R7GfXXX4gN/MkV/E3QT8/dSWVtQxs/Gll73IQ8aCLWLPhfquSHvfq6lng/6B
sw9qQN928gz77Oq1gzf5kQ0ekjQcvb/NX/qZas2or//g82WIqqvpe6K1uhRf
HH2LJuj5euJnaRiAL4B6rTv8z9w3PNfH+HXo14Tu5Lx0ZE/cL3B2w8/yPK+1
1txDc+Yr9ZNaUt/dboseu3QQ/FxK97XidbtY4tN39rq459LzTPqgEfgJ6Wp0
IK82mUuf3CePftysDv1x1hB4nve3qS8dVrInqyR772WnFcS7Kv7ic0oHXoAL
TzWgF4sLxx92nqYbvdoAH8rbWeSpHl3RBX8PY67AdTH4p2sU9e34JfAUTRPh
5Te355xt0viW4RHko1FW6JQaDMc/5Kcfum4zbd/xmRTqzAOO6LrGnwUPca1J
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
           "]]}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}, {
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
           1.6]}, {}}}, {{}, {}}},
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{False, False}, {False, False}},
       FrameLabel->{{None, None}, {None, None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       Method->{
        "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotRange->{{-3.914835214614868, 
        1.5777275562286377`}, {-3.506932258605957, 1.654662847518921}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}]}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGAwAOILfsLL+OXfOJ7YZH4URKfsq2QTANIZaXMEQfS9qWE6
IPpJ4ZndPUB62eKFC3qB9FzjK2tBNJfB8ZB+kLwMZwqITuU7UQ6ir96UrAfR
MnuS+kF0gOTJ6ROA9OyZT9aA6FfTz24E0X9anPeAaMOamfwTgfQalXhpEP1Z
5Ig2iN71U90URMd4JFiCaLl2BgcQXSQo4Qqi/acLB4BovtPzI0E0d/yqDBD9
5ph6BYiOP9DaDqJ3JBavAtEmFtHnQPQj9xfXQPSEkFzVSUDabeo1YxD96vwZ
FxC9gPliDoi+8mD62mUgf/kJbwLRJdVTd4FooTNHD4HoC7Gn+ZYDabFrO41A
tN5eR3sQ7S9uGAGiuxT5poDoCPWLS0B0mm8vwwogPeNg0BcQDQBtqLUt
  "],
 CellLabel->
  "Out[203]=",ExpressionUUID->"5681b8e2-c58e-4a86-a530-320dbd5aba55"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 212, 4, 67, "Section",ExpressionUUID->"2224c134-276d-45c7-94ea-4dd0ffa2d06b"],
Cell[CellGroupData[{
Cell[817, 30, 158, 3, 53, "Subsection",ExpressionUUID->"05f03502-7a93-439f-b1ec-147fe6302be3"],
Cell[978, 35, 297, 4, 34, "Text",ExpressionUUID->"5f016171-0170-4547-bb4e-08190d5bca0a"],
Cell[CellGroupData[{
Cell[1300, 43, 11359, 222, 569, "Code",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],
Cell[CellGroupData[{
Cell[12684, 269, 518, 10, 27, "Print",ExpressionUUID->"74e5bcd5-a7d3-497e-bf76-e4b8424d3440"],
Cell[13205, 281, 67287, 1357, 79, "Echo",ExpressionUUID->"f441063e-9abd-4ae1-a479-d88af185a107"]
}, Open  ]],
Cell[80507, 1641, 2082, 48, 65, "Output",ExpressionUUID->"ddd4fc8d-a4e2-49f9-986e-fc50a348a431"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82638, 1695, 158, 3, 53, "Subsection",ExpressionUUID->"5fc1a659-7ea2-45be-9d2a-2ee30cfa2795"],
Cell[82799, 1700, 184, 3, 34, "Text",ExpressionUUID->"b4441762-f85f-4ec0-876e-fdad329a009b"],
Cell[CellGroupData[{
Cell[83008, 1707, 10289, 255, 825, "Code",ExpressionUUID->"0fdd1362-68fa-4a31-a308-0d922c18858c"],
Cell[CellGroupData[{
Cell[93322, 1966, 475, 10, 27, "Print",ExpressionUUID->"557fcebf-9378-4bcd-992c-cd44bd0897d5"],
Cell[93800, 1978, 41555, 795, 79, "Echo",ExpressionUUID->"64206732-1b68-4c37-9230-c9466e6bd0c4"]
}, Open  ]],
Cell[135370, 2776, 1032, 21, 52, "Output",ExpressionUUID->"98b18e15-336f-4564-8f8b-35a7f67ba4b0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[136451, 2803, 160, 3, 53, "Subsection",ExpressionUUID->"4c78c069-2755-405f-b87e-88df1552e418"],
Cell[136614, 2808, 24900, 414, 186, "Text",ExpressionUUID->"adefcd5f-97dc-4869-b34e-f816c3af1db0"],
Cell[CellGroupData[{
Cell[161539, 3226, 6281, 127, 375, "Code",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],
Cell[167823, 3355, 457, 10, 27, "Print",ExpressionUUID->"909d4767-5660-46b0-b7bb-589e4fa8e242"],
Cell[168283, 3367, 44902, 876, 88, "Output",ExpressionUUID->"222e47d9-aaa7-477b-9f6d-64d4e2ac0a46"],
Cell[213188, 4245, 91753, 1695, 88, "Output",ExpressionUUID->"717b9d9f-0fe1-4102-88dc-3c288b57b011"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[304990, 5946, 210, 4, 53, "Subsection",ExpressionUUID->"97e011af-ca93-4cfc-a73b-844ec84d1c77"],
Cell[305203, 5952, 9702, 165, 90, "Text",ExpressionUUID->"103a692b-3600-4012-a7e7-fa38f8df8b3e"],
Cell[314908, 6119, 109149, 1801, 896, "Text",ExpressionUUID->"98671d82-36d8-4748-9dcd-91367c7f2e50"],
Cell[CellGroupData[{
Cell[424082, 7924, 5221, 114, 501, "Code",ExpressionUUID->"6e3d5d87-15b2-4853-bd86-59dcefef4488"],
Cell[429306, 8040, 56233, 1160, 88, "Output",ExpressionUUID->"6e1b959f-9306-4a85-80fa-e4cb47385395"]
}, Open  ]],
Cell[485554, 9203, 197, 3, 34, "Text",ExpressionUUID->"85f22e9b-a0d9-4472-822a-3b3507d5968f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[485788, 9211, 268, 4, 53, "Subsection",ExpressionUUID->"c9883fe2-2bb7-4987-b0cc-5be716d0bab2"],
Cell[486059, 9217, 17856, 298, 160, "Text",ExpressionUUID->"ba9d75b4-bd38-485a-8dc0-5835dc284943"],
Cell[CellGroupData[{
Cell[503940, 9519, 5857, 146, 447, "Code",ExpressionUUID->"c4cf0a05-773c-4cc8-9340-209ecce0864d"],
Cell[509800, 9667, 466, 9, 27, "Print",ExpressionUUID->"5ad01a05-ee22-4715-a6b7-ffb3d416da05"],
Cell[510269, 9678, 56697, 1093, 88, "Output",ExpressionUUID->"d8c11a99-58ee-4478-bbe3-37c8f907eb0a"],
Cell[566969, 10773, 573, 12, 32, "Output",ExpressionUUID->"f525bf82-6c84-490b-9da2-76b413a07ef7"],
Cell[567545, 10787, 100114, 1822, 88, "Output",ExpressionUUID->"5e901d49-a5d5-4590-aba8-8af1726d9aba"],
Cell[667662, 12611, 573, 12, 32, "Output",ExpressionUUID->"63c66498-a021-4b91-b9d5-ea034e192ca1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[668296, 12630, 156, 3, 67, "Section",ExpressionUUID->"92d6ed71-9677-4eed-ac31-c4f3287353a8"],
Cell[CellGroupData[{
Cell[668477, 12637, 213, 4, 53, "Subsection",ExpressionUUID->"86d87f0c-576d-4b38-991f-520c256e40f7"],
Cell[CellGroupData[{
Cell[668715, 12645, 2744, 68, 150, "Code",ExpressionUUID->"71ba0fe4-66fa-4ea3-b5f3-9892d0776806",
 InitializationCell->False],
Cell[671462, 12715, 100282, 1664, 253, "Output",ExpressionUUID->"e15dd66c-a05d-4310-8472-c5bc43a32cb8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[771793, 14385, 212, 4, 53, "Subsection",ExpressionUUID->"da7d7e97-23b5-4b06-baad-93e6066de9c9"],
Cell[CellGroupData[{
Cell[772030, 14393, 1648, 42, 142, "Input",ExpressionUUID->"5872c211-2cd3-46bf-98c2-f11e38a516c1",
 InitializationCell->True],
Cell[773681, 14437, 125000, 2065, 393, "Output",ExpressionUUID->"1ef01cdd-2ac4-4ef9-bd84-3a0c1ced6323"]
}, Open  ]],
Cell[CellGroupData[{
Cell[898718, 16507, 267, 4, 44, "Subsubsection",ExpressionUUID->"5f0dd3ab-14ab-4071-b980-0bb0983a6336"],
Cell[898988, 16513, 285, 7, 34, "Text",ExpressionUUID->"e219469c-0ed6-4ae3-bfeb-2ec6fdc8be67"],
Cell[CellGroupData[{
Cell[899298, 16524, 315, 5, 48, "Input",ExpressionUUID->"8b4274e7-9db0-431e-846b-7b33475fa257"],
Cell[899616, 16531, 277, 6, 36, "Output",ExpressionUUID->"db3a0abb-5006-47a4-8515-7b0bfcf4bddf"],
Cell[899896, 16539, 232, 5, 32, "Output",ExpressionUUID->"9e462428-58c3-4344-9423-aa8203c18cff"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[900189, 16551, 155, 3, 53, "Subsection",ExpressionUUID->"dd151ed5-aed2-4143-8d1b-b951cc324e56"],
Cell[CellGroupData[{
Cell[900369, 16558, 5496, 98, 285, "Code",ExpressionUUID->"6476e1ed-938d-455a-936f-d27f229fcb61"],
Cell[905868, 16658, 106306, 2010, 88, "Output",ExpressionUUID->"03a5700f-1840-46b3-ad42-de1ec62e364b"],
Cell[1012177, 18670, 154688, 2696, 88, "Output",ExpressionUUID->"78e6302e-50a2-4eb0-9276-0a52a26b00f5"],
Cell[1166868, 21368, 23903, 481, 455, "Output",ExpressionUUID->"59953391-b598-4f74-9b92-915198cd8b72"],
Cell[1190774, 21851, 107069, 2007, 88, "Output",ExpressionUUID->"8df91485-c259-4baa-b5a1-535520d9e828"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1297892, 23864, 168, 3, 53, "Subsection",ExpressionUUID->"0a081682-2cb7-4138-9af3-39773615dbc8"],
Cell[CellGroupData[{
Cell[1298085, 23871, 219, 4, 44, "Subsubsection",ExpressionUUID->"25fc94cc-6957-456a-8b72-7d29079ee8dc"],
Cell[CellGroupData[{
Cell[1298329, 23879, 1668, 41, 141, "Code",ExpressionUUID->"4e3b08ed-190e-4fe0-90ef-ddf365dd4ad4"],
Cell[1300000, 23922, 1950, 52, 36, "Output",ExpressionUUID->"f6116abb-298c-49e5-be87-e20d5f6da84a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1301999, 23980, 223, 4, 44, "Subsubsection",ExpressionUUID->"03df0946-5098-427e-b878-11ab3e2635b9"],
Cell[CellGroupData[{
Cell[1302247, 23988, 2886, 70, 213, "Code",ExpressionUUID->"5ff15106-56bf-4120-940c-00e683cf3392"],
Cell[1305136, 24060, 668, 15, 27, "Print",ExpressionUUID->"86aa11b1-4682-46ff-a8a3-f7af4c81fd41"],
Cell[1305807, 24077, 124949, 2066, 393, "Output",ExpressionUUID->"56e5a343-26da-4e0a-b909-411c0f16456c"],
Cell[1430759, 26145, 696, 15, 27, "Print",ExpressionUUID->"bc4d8564-1b9d-45c4-92f5-5a822bb49649"],
Cell[1431458, 26162, 68837, 1150, 423, "Output",ExpressionUUID->"3e8fbe23-3cfe-451e-b883-18c3c67a1dfb"],
Cell[1500298, 27314, 692, 15, 27, "Print",ExpressionUUID->"afa24a3d-c166-484d-a41f-e4016e4d59cd"],
Cell[1500993, 27331, 244697, 4088, 737, "Output",ExpressionUUID->"5681b8e2-c58e-4a86-a530-320dbd5aba55"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

