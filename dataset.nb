(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3600020,      64047]
NotebookOptionsPosition[   3594065,      63936]
NotebookOutlinePosition[   3594437,      63952]
CellTagsIndexPosition[   3594394,      63949]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Examples using change of variables", "Subsection",
 CellChangeTimes->{{3.7728146645008173`*^9, 
  3.7728146870834603`*^9}},ExpressionUUID->"87337af6-f5dc-4bff-8981-\
81ba89099865"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Integral]", "0", "t"], 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "x"}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], ",", 
     RowBox[{
      SubsuperscriptBox["\[Integral]", "0", "t"], 
      RowBox[{"2", "y", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "2"]}]], 
       RowBox[{"\[DifferentialD]", "y"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.77276301030916*^9, 3.7727630317019353`*^9}, {
  3.7727638171526546`*^9, 3.7727638383815727`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"82dfa91b-7333-4bfb-8cc5-f642e388cf04"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`t$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`t$$], 0, 10}}, Typeset`size$$ = {86., {4., 13.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`t$18082$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`t$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$18082$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> {
        Integrate[E^(-$CellContext`x), {$CellContext`x, 0, $CellContext`t$$}], 
        Integrate[
        2 $CellContext`y 
         E^(-$CellContext`y^2), {$CellContext`y, 0, $CellContext`t$$}]}, 
      "Specifications" :> {{$CellContext`t$$, 0, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{379., {71., 80.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7727630332172346`*^9, 3.7727638387605643`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"b1b4dff8-3b3f-4c29-95c4-22dc579ec317"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7727630377511063`*^9, 3.7727630941633277`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"80295e3c-af49-42a2-89ee-bb33f8e0861f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVy39cy3kcwPH1U2qq9aWLtFbnIU26kEc3D7w/Cpd+oR9X8nNLPyTRzi76
bpOuZFwMpZl+d3G49eux0K+hH5LaXJai5kq1YmRldlrSzv3xejz/ejkxjgRH
GxIIhMBv/W8+l2G68gC+wbnAq12vV0OLnBIQTtkJEny3P1OjBv0jyW8UykFY
Hk2qezuqhvwHWY4mlBPwizszbEyqhoT1rMOfHXmwrdE1yCFPDfIvcdkTjldh
4aY6IZOmhjn9Qy7jjjchKEJOr0n+AMVPCpPeOdZCRYjTIk/DcSiv4PUnuD+B
euYl7+vzVRALXVffM+XQqPdPp+WPQaLSdVhc/hJ6zW7RViYowdwp3WXgx0FI
V6fPBm8ZhvPWHdTi/cNALLqcQEh+DYz+0PtGnaOATlddexg1AEmt6YwjLirI
uRtHTPJRQNVRYojd1nGgBOSEfyh6CcX4IZVH+AT0CCZrooi9kFY4s+PT+0kY
jZRzlAPdQJAPooYUDSTZNXNCJ5/B0mMxx0OpWnjdhwXsInbBiDb3Z4vGf0Fi
SuuKHJOBnzKecylpCjrzY1fltHVA0Ah/OZk8DcmLAwucTNpB1cxIfSz6AhVr
8txFVY/AndTj4LPvK9j/Whu/Mb4FzEFLV2hmobzha2Iltwl+Go/87BxGQG9G
yQvsCh7Ai6YDBpFuBmiLxV/PT7xrhJozLXspWgPE/V4/34tSDzEmrEGZzBB9
8pOrZ6LuQRQTryEKjVD2yYjtdrZ34IfY5bIAujGi/nnb691cMTy1cbNg0UyQ
5+NakY1ZNdSXp11zMzJFvj0VKbbhlYAbULd3vjJFnvbEs4v2icBckeKbKJ6D
3l7Y3zfNvAXK607ZhWwzNEh96ndk5gZkL1toXBs2F1WV7B+RXyoDvjCmjU4x
R4Z5Sin7bClEZu+REcfMUbAguNWwoRimNpXpCiUWyMx6Z3f3+0IYVnofb8ok
otBe36zQiTwoWb/SXkqfh0Ty5985GwtBlMEixa6wRLzkQOGrrFzIDIvyN9Ja
opnmZNrInhxYoyi+mSm1QjWZ905SaJdB4HpNJPW3RtanGs5J4i/CyQdZAv9a
a9TIdfTwCLwAgfZhZU+WkJCwum5eqfvvsDGxbReJR0JrOXbMoiweFC5mLOnU
ktBRRejmkunTsKT5xpWgXTaIQuKtYT1NB/6KJuoziQ0iV3rn2Q6lQYzGuKud
iqHWVquhiNlUYFR9pPAuYGhVRIdLopQLCWkhM34XMUSef0Dz5j4XWCHiXuJl
DHHurys/WM2FM1rWef4VDK0u8Blj53KhnKb7kpuPIT9c76Cic0H3UN9z/TaG
guDm7lefOcB/RsxqacNQkf5M4IJlHBCWHo473Y6hOi+d+VZ7DpQek/n4dmDo
1Dk8Js2SA3ds+dMdMgyJ7/aNm2jZoIjE4uTPMWRCWK/b1sQGl+GFPkPDGLLv
Hh0Y38MGD3EK+Q8lhvh9ExEpO9iwNqNfFz327d+yaCtxMxsCXPIr36owdFix
OgO5sYF5iEKenMTQP5UCV9U0Dux1p3TVGgyRVovsSj7gkDFvqPuYFkNhKdJD
+4ZwEFSUnpuawtDHvfWeqnYcSlKNY+umMWQp+LvsbiMOt3dEe7NnMPSiMzXp
bBUOYudHDhtmMUSnM3MYZThINEt1ej2GOh4GWKGrOPwHSVJHUg==
       "]]},
     Annotation[#, "Charting`Private`Tag$4453#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772763052165996*^9, 3.772763094641073*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"cb27ec8e-7cbc-4935-a341-393451e89cab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "t"], 
  RowBox[{"2", "y", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox["y", "2"]}]], 
   RowBox[{"\[DifferentialD]", "y"}]}]}]], "Input",
 CellChangeTimes->{{3.7727631775247774`*^9, 3.7727631807807417`*^9}, 
   3.7727634742368455`*^9, {3.772763555728012*^9, 3.77276355716121*^9}, {
   3.7727636171999474`*^9, 3.772763658529688*^9}, {3.772763694478862*^9, 
   3.772763697151827*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"b9830594-90f4-4367-a6ae-0e9eb3bc2115"],

Cell[BoxData[
 RowBox[{"1", "-", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    SuperscriptBox["t", "2"]}]]}]], "Output",
 CellChangeTimes->{
  3.772763181367882*^9, 3.7727634761745453`*^9, 3.7727635575411882`*^9, {
   3.7727636349619865`*^9, 3.7727636612031813`*^9}, 3.7727636977764144`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"f156bf38-9487-4067-a46f-0b0f518fb4cb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["y", "2"], "=", "x"}]], "Input",
 CellChangeTimes->{{3.772763351850397*^9, 
  3.772763353813275*^9}},ExpressionUUID->"6cd38048-a909-42da-8264-\
0b92ad0ed2ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "y", " ", 
   RowBox[{"dy", "/", "dx"}]}], "=", "1"}]], "Input",
 CellChangeTimes->{{3.7727633555835447`*^9, 
  3.7727633828547544`*^9}},ExpressionUUID->"130c6805-872a-4ed3-90c1-\
0cbac929fba8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"1", "-", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      SuperscriptBox["t", "2"]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772763439363134*^9, 3.772763462479261*^9}, {
  3.772763708989083*^9, 3.772763726427287*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"0ec16479-bf26-475d-907d-22272c67b717"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
IIofO2Mo2v7c9qrjqqK4e9tL2x7iO+cjptpXiaKZ7V6jXuKkkzzWH3eLourb
6ck+4pN+KalaZqI4HemlyaHP85ODkyH7RTFw50Vr2mm/M+7ssBTFFbNLy2nn
Wh2vKD8lio1OUzcpuv77Pix9fV0Uj5kuHPlDPLr54Vh0niiOR4q5DBC7vY72
KikUxSd9QndpM5ZHsrpKRPFs95Mc2kJyQQuWV4ni6PaeCdqzxlz1S5pE8bzC
qcuDxCueGd7t/COKn0+rnh4izlTYpsAaFMVvebz+tNdE6j7THBHF4CtBj2lv
9NUuvDgpip7bKr7R3nlEvkuMKYb1avVGw3R9/xtcrakghvNvNUqP0OfZj1Nk
qiSGn8r0V9B25u0yvKgihkZOl7fTdqPaLIuXieHJrEWXaPtVlF03XSeGhbv8
mmg/vhzVfMFUDB8c1bw2Stz+a6Nrka8YfoxryBqj84muiVP1E8Mn6dWVtGP2
HagOCRTDkLSgNtoWVWcXHr0thtENZ3jH6fOdGvOOL14MLwu/0qddf2lKfkue
GF6jmmpoa668uf1ZIYk3O+EL7WDOf+f/eyuGFwU2cmgbH1lS9atKDLnaQ2Jc
+j7bau7s80kMa99u1aNdJJlTUTZI1scZWbQXVG0ZXDYqhvF7FEpoe3jXyUZw
xXCEI1tHe8NI5zl7Xhaujovvpp3TOltWhM3CE0858ybo+Uh0djRQYyFzyS8X
2pJHeO6nLWVht/87T9pnpAPKpJezMMEzNID20oAEmZ7VLJwVUxhH+4njh1K/
rSx8eeVxFe249Zrzqo+wUCW+d/Ykna8x04trzcJwDQt52j8Ot3er2LMwVeaV
Mm0Fz9s5Pg4s/MNS0qGdUDq2Hy+x8LfM3320H+4oingZxsLkpa5htEstoxg/
wlmoKOIfRbvjrJM9O4qFOn/84mgrhSmtPhXLwsDXO1NpP2q+2aSUwkKW2GAl
7cdH9syKLGOhvWDNBO1yR3X38koWXn2fwztF3wdeAh3D1SzE0jvCtJUfZWXs
aWDhowGZmbSTuueZsr6zUGKlnSrtJ+d+hnqMs7BYcq4J7UrvN9yUSRZuWsXa
T7v79p2jbQxxTFw+cIi22iu9FWuExNF862072skTyfUDM8RRk6l9kfaza86S
dkvEEYWY92n3rjvkeU1DHJ9unxNLW31w80D8CnEMl5n38F98q5mN33TEsf/r
VDLtx/Ay4sBWcbSBjbm0E8b+yBkfFkeF0bpm2j9Tm4NPWonjhR7tVtoK9gU8
fjbi6Lo65CvtuI9B7WUnxPGNnnoH7eiXSxN1XcXx2My//bQjT51cuvKWOMpI
fGBO0/OuaBK9J0wcdx1LYtGe27qW7Rguji4JLmzaEQai/Sn3xbFx1sR/tG8v
fpKh/EQc/+xIlKcd/P33OplicYSLd7Vo10a8f7amlNSjfUSbtsTOLNn9FeIY
5bpDh3Zgng/jzntxPOPUvZ62f9SiEolWcVyXWbeVtq/p0e18Q+L4ZdBpL+24
Ha3mNqPiuEf97n7aufqmDmVccbRIzDxIu3/9tlt+vBKYmN12mLa5klrTDLYE
qrp9saO9fKTfSlFNAs2UX5+nbd/z81qnpgR+j1t9kfb9rx8fJ6+WwD3yMZdp
C5fncLS2SuCRVcu8aX+J8Ly45YgEuX8OBtOeGeB0X8ReAlNwVSht/au2BdUO
Eqj+mHGHdvoxA0EzNwl0rLKIon1zjVSIbbgEXu7e85B2wVL+DNUHEhg4nZRI
e2jhcBMnQQJzlf4m0bYU/TzfJU0CK+eapNBe2Rqb5FstgcsXns+knaDw+qfy
Zwk8FMXN/pfPiQa5yg4JlNbe+4b2uBvfdkEGG79jRDHtNPngTjNBNgpqXy2l
fbxExidRjI0J+7ZV0P4kql2oN5eN6kfO1vzr5/Mii7tybDTTaa6lrbdnx0TX
IjZ2Ky78QPtVpP0qv+VsFD5p3URb+cdVR3VgY6LkxpZ/86IS9ax6OxtPzy75
QtvZbez45f1sdDNd8YP27vd7lZfYsTF/scEv2ssWZv5qdWJj5DLJTtpizjPj
/T3ZWLM+uJt2qXTd/N77bDRm1XNoXykIiNiezcY4V+z/19/w/INqDWwM6BwZ
pN1x6q+sKEX2y1IZoR25WeFHt4gkTmv0jdI2mmf6sFJREicm9o3TLtscyOCY
SWLB+u0TtHUdyg5K3pDEjN/kuqLvz7czCxzyJXG+vdsU7WgZK8V3Q5KYmC4+
TfsH5X0oQFkKXUts/lmxOPGO8UEp1Ou4/88HRtMt2QFSuGFf4T8HLylSrc+T
wk615n++FNw+WT0ohd4lv//ZdoC/rkJ1Bt4z+/vP1vVcV5VDM1D96/A/W73o
l78RNAMV6PTp79WLBZSUzcC96RP/nDegNDY9PQPNZ0/98/95b+aq
       "]]},
     Annotation[#, "Charting`Private`Tag$17747#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7727634577707753`*^9, 3.7727634630936117`*^9}, {
  3.772763712378781*^9, 3.772763726921926*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"565cd58f-21c6-4ba0-8806-7e5cda5aab3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"2", "y", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      SuperscriptBox["y", "2"]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772763524470544*^9, 3.7727635392300835`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"44bdc431-a7bb-47cb-99b8-c5d824b68e3d"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$7758#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.772763539733735*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"e3dd7b3f-9539-45f4-98e6-9790e25935d6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]Two Moons\[CloseCurlyDoubleQuote] data", \
"Subsection",
 CellChangeTimes->{{3.772813761600793*^9, 
  3.772813768406598*^9}},ExpressionUUID->"5e309b92-9483-4458-b46a-\
7a906d394649"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", "5000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noise", "=", "0.1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"k", "=", 
   FractionBox["4", 
    RowBox[{"points", "-", "2"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.7728128440597258`*^9, 3.772812970704172*^9}, {
   3.7728130170382147`*^9, 3.7728130549168234`*^9}, {3.7728132996095257`*^9, 
   3.7728135234012156`*^9}, {3.7728136415869465`*^9, 
   3.7728136902498274`*^9}, {3.7728137729584284`*^9, 
   3.7728138803906045`*^9}, {3.77281393058981*^9, 3.7728139395767803`*^9}, {
   3.7728139940481973`*^9, 3.772813996525557*^9}, {3.772814048601939*^9, 
   3.772814071832833*^9}, {3.772814191640459*^9, 3.772814192814328*^9}, {
   3.7728142647333236`*^9, 3.7728142652140713`*^9}, {3.7728143202267427`*^9, 
   3.772814363337674*^9}, {3.7728143986644783`*^9, 3.772814398951719*^9}, {
   3.772814435666066*^9, 3.77281446577341*^9}, {3.7728150202576747`*^9, 
   3.772815041626583*^9}, 3.7729804348532553`*^9, 3.772988363215681*^9},
 CellLabel->
  "In[120]:=",ExpressionUUID->"99d2366b-03db-44d4-9dcb-abca59e5308c"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
UXxLx/PxrtMyqyiwLjJwU1scnXiPq2IiGyjAvfwLw2Po+NjE9958a4LXI/Jn
DZ7SUTPm/heyHRVSlZworHA6PlL9N9WwiwZBc748TA+l4/euOTsvbKeCda9A
0TGIjgu/16bIBBO8FhkVrLhLx+cSwrLIWRosios59cufiPf+9eevB6gw6tM3
ft+XyF9ffemNSQqUntp2f58XHd+2nvL7Tujl5Y4bq6bc6agdFP5Ga4wCXlKV
2R9c6djuu3OzZzgFjo3JHLNyouPWAn7ITncqKFWdH1zkQMdA4+QNji0UmElI
vlVpTcfOosZrOwU0aA2gL/E/S8eDW57uKibyn3Ee0nea0zGy2MROl0qF0H3h
B4dN6SgZsTtvkz4dHJa1d786RkeVu6tDo25RQJu24frJI3R8T7v9YM5iKixp
8FgoYUhHac04l6AaKkymFX4q0qPjrMaHltA/VKh8KKF3TZuOd/H+ox36VHjr
dLpNRYOOU+vL3E+N0sD3wDuPbjU6Jh053vwxmAam6yYkorbTcW65VUqnDg02
C/bGH9lC6CcheOqoFBXmdAZqzigR+qwrmZ/vT4e/ub8ashXpeG2tiUWfPMFr
lPylS6vpeNrnmmxCCB0eX3USWbuSjnh5a283nwZOx7/ENS+hY+7oS8uHOTTQ
3TKz65EMHa07nE9wfOmwXOJorZ4UHZ8da+OPErxND8Q4MCToGHT54Qrpj3So
xT5uiigd2f5NFP+vdEh8sy3KTkjDjKg5cnqedLh184bqMh4NRygTJMsyor9a
VJbXMWmodkYlc9cagld12fP3qDT06l9wwKKLDuKy1vS9ZBrG6rid+ShGg15S
cvjkGA3ll9ulPdKgw7da+saEIRp2Fc+YBxHv9TQJii36aPjtwt5rg95UcA0K
N5fupuGyRW6Wd4l+csC+nVTWTkOJFosnuoTeFXQ3Bvs103D1uZNm8ZdowJC/
umZ7Aw33WgaHK66nwy9WYe5AHeFvY8uKBqJ+JDVLnIirpmGgntN0/kE6BGSd
HjEpp2HFK8tTC6JpcDbiXcDcEiLewh0zBgQPapcnlhcU0FB3S6W48Ss6LDii
kemRS6xbmfNbH9FhcOP9I0pfaOic2aBzaQUDikV+/+tMp6HnKruGxSkErz3y
N558puFFk9zLjl+o4F7oJHvoIw1zx5beI0UQvL748pkXT8OoNJq5iz0N1vnM
6Ge9pmHyfNnzFSM04Jw82un0goaqxmcP7telwp/tz68pRNNQEHk4b1UoHVIX
9Ev+iaThvn5+ULMbHYJGtyWGhNEwxzQhjuRIB+vKG9r7Q2gY9lXrZ08cwWtC
ZRM1kIavOk+ZZ1YSvAbIXkm+Q8PjIcGmEi/oMHrOeq7NTRpKxnY3VwjpUKr5
+fXi6zQ8f2e7pFCCAS+XMtRrPGnoP3eR78rXVPCiQv0dNxra39/wy+wOFY79
Dr+ofomGb27Yu+5YzQCltHbB2AUa3vbuaWt0YMBM6Mbn7+xoaJrEII3+n9eL
V7ebn6dhUzPnzaHPdMgwKKqStKRh69LOvHMaNAhdO88WT9OwwOH5E7YOA+z5
p1k+J4j7Iww6RYeooNXxLlLVmIbN12soRy1osDh3QqXvEA1H773X9nCmweQz
DXxuQMMUGX9y5gcGVHrctzymS8RzsvH0VYKvt8d+T4to0XD5t7qCp1UEr5tX
PczbQ8PHYs/+m01ggKm4s6LbLhqerKxN1QtkwOaBL/nrt9FQxOPTs3l2dJiD
MyfbN9HwyrT1jygmwevro+OPN9Jw9zoD0TRxOny98TzwwDoa3rBxnWqkUeHx
mX55zioanj735bzbRjo47d6e/d9yGq5K8n3g/pIOejI3jS8spmHqd5mlJQME
r6TKgZWLiP2un9QoBxpM18je+i1Jw/sFIYU2Wgyo+WS95IE4DRc+ETU/G8CA
hPuf07Tm0FBj4+RU/gEa+NsxDKcFVDRqnll5XoQO5vv1uz9yqBiY03Lm1DyC
V/nHPucYVPxYmOS5kUEDcVa7tCyFijnJpV/hAAN6mzZ+qpqkovHGkFU8Qm/f
Mq/q3hqlomy+Y7jfCRo8fVzUumuQinZLBlUWStHA1XWex0gvFWnLjmorXabB
gcNmEm/+UjHNc2Wo/VMGKGyMf3eqjYq3bKwNu2kMYMxOaMxroqJEW+ncckkG
/OrWaCj+RUXm9muWywZokFRw38Wrlor3dluX3CilQUDs79lNVVSsM3TsSu+l
g6X3qrieUipSZuNq7ah02HXSeVd0MRX1vJaeeeJHA8nt2TVG+VQ0M1bsWu7F
gAFJob3wKxXXWtAOS3YT/XXkKPdrJhVDYbub2g4GxFQ8f+aaRsWC36Lfiz0Y
4P6+f8u6ZCquQ+M8u1waHL6zvbwlkYqFZ+usFxL1d925m+fC3lHRNK9giaUW
HTgahIheUVGpY8pD/QcN/iyRC2c+p+JoMUfXfQfBK8V6Y9ozKvJl2W5Gbwle
f30uso+gIioHyqf2ELymMsyWPyL8/9OUGRBAh72h+qSfD6jY632g8/1vgteL
jx8E3qNietw2qeYfDBjV71iteZuK8pXNqQP1NMA1SrkkPyq+5G6RTx2mQRzv
qkmiNxWbH+cVBqjS4Vp70bDlVSqOhXiWSKYxwDhnXsDCK1TM+rhNarMGE5Se
mS2vcCb21VRW6kfSYcY9PuOGIxX191xUUm2hQ6vx5OEdtlT0GIrbsKWKARmb
NP8NWlFxc0/hzPg3glexIL+XZwg96DREW8vQwb7/t4zpKSomzaEbJbsxQatk
1WcxEypavz1NS/dgwuLXzvqFRlR0N1++1nGM4NUvu+PqQSr2jZgZlKkzodJc
6KmsT8WRZEsxoSLBq5qxZJcOFVnx9J1FRL3wXRSb8FSTih3z7rsciWCC6WS/
1mF1KjbdUj2hsJMJm2u2N/F3EOf/bjY9SKODyKebl7+oUtFyrur6lGoadAZW
ibqoUJFrlHv13WWCV1u516s3UNFlueCirDHRX3Vs1JvWEOdV9AXLLZngtDLl
Z6g8FdU9RRQXWzFAj8m4oLuM2O84bLFTSIPlTfoCmiwVI14IQJ/oB9MZj2M+
S1Nxwzo2WTaW4DW8Y5vtfCp+F5P8NNeBCQmXlKqWiFFx3rhiw11bBvgf8rSp
naWgRlZW2DURBphtKGYG8Cl4cv9c5gST4HV2XuQeNgWLRp6v30PML+LdZioT
NApyRuxYNf1Ef82PL4mfouA1icDMzAsM+PZ80uLMBAWnn/xbt+4yA556aU4v
GKHgu7dFkbPjBK+mQaGl/RQcqlYGtWwGGGxrWOfbQyHyoR5jRqeDgqRC/tZO
Cra+sE7eXcQExrDzyf4WCh6X2ldozSf6a3n2WGwjBSVVC+f8nEuHpHjhveP1
FNR6nLTg9CY63L1tLC9aQ0G54xfzC4n6aGkV++VbBQWl9ZsUSruYsEtj4Kg7
UlDsAMNohxwTJJfsGNhQREGd4f4b0pEEr9M3/TvyKPiv012nPpEORfVViyOz
KajgIK009zYTYlLk0gwzKLiwsKlMWZsO7iE2htwUCrqYW6XbVNPh8IWUroxP
FOx1+Rku0GbBOn2m98UECqbfyXT4IiB4XW0gveotBdcvVpYYtGPAH+7jjw1x
FDwQIrkpSJwJKW0d+4NjKLjkZKkDh8hn0FelVu2nFBwtudLy25zg9amnOyWc
graXd/4LW82Cve7F4kmhFHz1+7fIs1VMWGQ8/935IAq2DSfG25MIXlXMNeTu
UvDigmaK1SsG4Nz3v6v9KcifPmkXQGVCXN+k821fCib7vxo1JfR47bvmrJoX
BV8+rb5afZ0Oxq+CXoy6U1B23lL3Daos2OjXsPOtKwU37s6JfDDNAIGZQs1p
JwruCXO1aX7LhNZdLvbzHShYJpuwbK43wevCr5zv1hRcfGZI+YAtC0InhE+9
z1JQdIPhe6YBE+x/GG/ZYk7BPC8D8+YjDND6GFvWa0rBS14TKg1sOiwOHLCK
OUZBmWhZtTeqDJi02UE7eoSCx9o8lqQQ91Vq+4fNHqCgSP6RN+JTTHi7onpD
rh4Fs3rYV+0rGODLkCu6rE1BiaKn7tt2E/31j42ZogYF8zX1JWSABZszUiZb
1ShYmbTTZfNJFoiEM4PCt1MwKSZZylydAZ0uBqsNtlBw3/uN/m2ddMg+GJHD
UqJgdK6JzoO/dAhf33k8XZGC23epGpG/M+GiUGnYYTUFC69fdxlewgLdLs87
K1ZS8OpR3vdoTRYszy9e9msJBRvCLv13RIwF0zHzM+7LUNDDbYXzSnuC12vm
h/dJUTCYwdPaNpfg9cT7XrIEod+NWs+2/kfwupXk+0GUgsOXatop3wn9y3qu
zRZM457mT3f1FrHAsm6e6RrGNDqypGPVOQyQfBB/9+HkNL682BLeEMSEIl3N
LPrANAZtDpCdVWGAB/t3n+3facze2Jsb0sYExS/OcnV/pvHkAj2fowNMaLos
NNhbO4037UIVbxUyIUgp1ut96TSuFRS8u2tJ6K93+wep/GkcPaKUXt/JhNEX
Vc2+mdOYk/Fbr+Q+E16eshEbSJpGFUi+8YyYZ45JMfeYvJtG3Tuq1fLXiPms
8rFT/vNplDyxWuy3HxMyApRiN0ZM44strpmkaaKe7yuuJoSG0cbZeS+fsmAx
zYzNvTWNXy2CdCdkiHqdNrnJyXsaqRcMVC8lMsHXKehs4+VpBM5woN8Woh6v
U3ik4ziND67X7HbYRrxnR3ZBktU0rjQZLXzPId4vynhC7tQ0bg8bVH20gQV6
xwdW3TGaRoHUXZsfhL4p4v7HxmAaU9bkkNT5DEhEudtmmtMY5/wWuc4MML+Z
kl6yYxrpHpvEV1JZIK5u0LNFZRqrgy0wtJUJ30gdC5+vmcYkGfMNVxYzwTXJ
U09k2TQ+8e+5sP4EMZ/Yz796RXoaD9fVyAdQiXlE/n1829xpHIgsOVS3mAV3
mzUbDfhTaPFEOaithQW7IhpE/qNNYczsdacf71gwcNhFbeXEFOqGK+eIuhD1
SWTWIah/Cj133BApUWDC4cLYqKmOKax4qzK/K5gFXO8dFVaNU7g3VDvANYCo
N9ur6ZU/pjB4Q5mY23IWnB+1UdqFU3iasvO8wRWiniQwzV/nTeEMO+DhckU2
lJ6LCJbImMJ9zRFqYWpM8FqqnHft0xQ+fXrtv/+ciPn7d/FI95spnL369V/K
MaIehJqvMIqZwjssF52SboJ/A9KRr+FTGDGg0bjfheCdH3RjbdAUcisCQroI
e5M5CimP/KfQdv5WvhOZBW89vnYyrk2hL0lP4wGywHTzsQX2rlP4oyggWdGH
CSIDA9o/7aewyKzrcJEVE7Jf+1/RODuFl2nkgu9WLLh4ZvGbBNMprDn5zMJg
nAnLZVLrpY9M4VfHo+0+oQyorTGY8dObwh45DZ+jY0y4db9z++DeKaTNz/95
ls2Crfuv2Z7YTvh3MO4JzYsFvcz5TwqUpvCdZYlcjgwbnma+R6XVU3iibJPv
WA8LDrjuozxZMoUjEwsM/ETZwNjQqMhfMIWVgTTbuiomJHW7nHIWnUJv1xuP
QqWZYBk7G/iHS8a4mr8vlmmxQPLki+z9VDJuVTDUbnAkeJXcOZg8Rsa6sLpf
apEscK+oXrKkj4xJP/rsHqYyYd0d24MB7WTcc0ZbzpOoP380WD7jv8nIpAkl
g4h+cJ8S8cm8mozb4JKZFp0Je1KV2/A7GafF1qJxEwtGLnyX2JpLxstHqw61
8Fnwcs0Zzdh0Mga9l4u9uYgJx9pJLnM+EvfdrzvkFE/w+vRBnNtrMqp21z3K
X8GCDOPVte1RZPQvD0kpPUvUc7Ec7oEwMm6K8p0VsAheS46pZgSS0abui6O8
LBsq/QbPyd8kY7+t8FKxDRt81W6FP/AkY+ufyvaX4WzYPLm4eNqFjK5z593K
PM+Ezo+ppHN2RD4S5UsM97Ih3PbAmmoLMnLlejslKER9XfnXRO0EGdH7cr5F
HTH//LkW8OYQGR8nL3T0u82ChHDJzHm6ZHzg4BSisZ8N5ocS/nntIWO4zYaa
2K1MEJvdJ9u7lYzBFYfuzcljQl5+o/7RjWR0fNMZcTaG4NXr0rWcVWT0UOmu
3b2QCQrbRBLXLSbjZFHwCl8dNvwaftEUJklGGavzVhl9BK/xO+eyRAh/u4Ov
PDrHhl1WP9QdOCRcK97HLKlmw8Biu4v10yRcIiZRFHGADTH1rBjNURLq70pp
/NLBgsMhkVWJvSQ8Ylt7odKJCRxQYS1sI6HZz/lD/buZkMr9rnLzFwkjL8zz
9T1H8Pr1jOVQJQn/NswNzz7OgoXu5FDTYhKWSa8/dryJ6PcqwfmFX0k4TZZS
PVXLhmt9q8eV00h4y+NwoTMxvyq9ypF/lkhCh18Qv/ApE9rMjhsLXpKwUu/k
7/0ibAhZOOTv8oyECzjtomaGbND6cSut6SEJB25drY4aYMPkvSXduvdIeOiD
zyinhwFvtdOkU/xIGBsfnZJQzAZTxgHdpVdJ+IPkmdy0gQ0iGX/d7zqTkEKh
33fXYUG2i9e7CRsSGm7dH36M4OPi+gUNZ86QMIN+qeCkAtEvuxJmS4+T0Luz
6eKtjUyoidHate0gCdOnB7dPE/XO/8Qf+xc6JPx46IMVqYcNW+e7PhNVJ6FP
c+sH1TQW9JSJlLurkjCMnyGPhSx4ciuO1rGehOFbH5yieDLBYO+ujQflSRjI
M/tlp0LMm1M/zDJlSbhw7f1tWQEsSPps92DVfBLK2wm9ll5mgoUjOyd4dhJb
yrd8EiP0K7n6yTCFNYkMmvLtf9YEr60qy62nJpH6lE8ojgnuT0oO/xiexOSq
T5maDILXoxZ+u3sm8dv1aQkmwfMf0ankty2TRH12crkZz4L7xcEd8+sn8a7L
O5M4ot/u8V0j6VMxicGfvTz8iPo5sjNX61/hJG5xWnOp7wAxv40fv2ycPYnu
Jk/3hzSwwfjD0KvclEn07Pz9MOYsGwTWt38qJkzivMpv/42Ns+C/5UsF4XGT
+PLOsc4t8hywa0zbxv4fxeYdj+X7xfEkX0pEIWmiopJS2umkEFFWZUdJIoXM
ylYys4qIhlFm2WQde++99+OxefCMUvzu35/3675d13Od63zO5/35g/80eg6c
Y7pLogO391W9+2+m8foifWP/W0KvV3v96p2I/TR1W5ZeEf7671nhWdtpHOyK
730mxADR7E3z0U+msTebI7A/mg7dFlF7txhNY76S6lGtPir4HD6v8kJ3GgX2
73sdIEPodazZhaQ+jV2e+x+3O1NhPtIkVUVxGlMjxVunagi9ajCN5F2ZRk7X
6vjkj1RQ5w7bKnJ+Gt/Kq/HGxNBgQ+3xq0ES08izMYycY0uDrFdVVv9EiXpf
35qc50yHR5cMYh7tm0benUV+TxSoIMCgt7VuJ9ZL3Hwm4iYd6lL9WWDLNLbI
qxYfj6SD82OR0wn/TeMxm2ymWhYaHDuAD3lXp/DUqZXnRoSfDA/cCXWhTqH0
jOZpP2EavPswVzk9M4XLR7ODDCzoIKfmwbgzNoUysl1rrF40YLDvOVTSO4UH
59UVv16lQUJ5ptbR1inc8E9Z4MQjOug43/D+UDOFQ7uu+c8T/cVxjpTLXDKF
Vl2abj8k6ICLDtNPf01hdPGgdd4JBlgm8ezqSZnCOg1BMn8ewd8Pk5Rk46ZQ
ufNPDY8t4a97ZRxTPk/h5Ofzj0qI+ebR3Zu8M5RYnyQdLaLCgLPBVgMeb6ew
JPCJ//ICHaaU2Lcsvp7C4T0zEtGpdIj4Lxr0HKeQ6WNRUQKxv3LReYsqa2I9
y31/latowPSi5ctJsyl0PK98JIRKh9STps2fDKfwq9VTnfBCwl9nmdZv0plC
hvmK7fcMwl+/h52wUZvCBa1yH5V1NKgykDAcUiDq+e+X1ZInDV4IVAcrShO/
RzPkrMZjOoi1GZRlnZ3CZ49PrGd+Q+jVj7EseHwKG6wUDd4hFfyvBRzwEyH2
f75+/mw4oVcm0TuMPVNI6baoeaXGgKVc9DDkm0JvxUlOEWL+xlprZDdwTCHn
h/uX7NjpcEd8nnyOZQp7vr4WW/lDA7YJD/7Yv5NYR+Zr/+NDg9yvexS4lidR
Wu/nQEwsDcx0sp6/nJ5Ew/yNJY4Ev+7lvZkwPjKJX/7a32K5T+i1gdSj2jOJ
PLRg3nqCF109HdkLmifRkrteMfE7DSSv8F4UrZ5EoRaWXRqphF5XksyCiyZR
L25tO0sAHT5kykSuZk+iFWvXwxjifq6b99Wb/JzEF3KZKePXCb2KWq+2fZvE
xpRzSa7MdEgeYT92+dMkjvAojw9I00E/Ilo/8f0kupqyNb8nzs9950IAn98k
HlWeYFN8QIfSLa1Frq8m8a2m2WmHBBrYVJtSZl5OItw3KQy+QQcR9/VCmlaT
uD92nLxMpkLXxXC1UtNJNP0gsrDgzwBvmoS7+P1JDLLreFdzjAYXU6rTw7Qm
8YAHS9DNIiKvmNwb26BKnCd1S15ADh2+Cv/msZCfxO1v+Gck0mig3h8g2wvE
+auTZjYNEf4aKmord4Z4Jv/yMSb4Kkul6Fuq+CQmN+A2hVYaPNqk2bnr4CTO
sj8/d0mBAQJl86yeuydx/dqmOGo9Deoc35xd4plE8xfCWz4S/OJ0Zq/J3c2T
aBxZXEwRpMMxSlZYNfMk3gzkHw9PIvSacLNGcmUCDSLWvgfy0iD4wfifz4sT
+ORALaNDnAGye5yOsE9NoOeJvV/499KB3smrazs8gTHk3ttyggxICEz2He6a
wEen9O/lEjynrShboNQ0gcLnprbp/KXBZpb+2ezKCeQrehb7nOAfLLTeI4wT
OLVl7q0FK6FX+83Kb7MmsNSq3/Qi0V/CJ2KcfydPYMb5l3xFSIf26QspD2In
8Ocv7fbofTTwiG0daoyYwIsMy6pedTqc1X/MfeHdBK4fSU0y2cWAKX7mK998
JnCr/Jd3nkT+iWgJf8btPoG7d1RFqToz4KbviWiHFxN4U7zmgs8lIr/K1bSS
LScwSSVmcBdx3tS1exvUTSbQPlRNxvEkHQx//ZYsNJjAvJqR21uBDrxWgUaH
NCeQ64Y/i3UWDSrFDoW8U57A2UqK2E9inr4YL6pYk5tA39vzjosChF6/aNJN
L00QfMtzeIcwHfq0FkQ6Tk2gLO1jjzcfHfy3eWpKH51A5gUh7S1PGSBdv9cr
af8EBg9vHAwapMOSR/av7bsmUKDX/Wk9HwNiLytPuW2bwG98UT1imxig8Wdc
YG7TBMYJOKreJO6fLcNJUWv9BAqav3n7Jp/Q6xM+h7LfZDyf/Ovx0kE6mIn8
SDpGIaO7kE2vMzcN9gzL9odPkPFoupCujScDmsL7Of4bIqNSj/i3twTPuN2y
uWTZScaca7bWBqVUOMnJYd7XQMaM8qI3++XoQKqM+XytgoxcmsWtwuI0CHW9
2JRWQMb8ZU/5ZGK/6xfa1u3JJKOV56dxe2NCr8uPJbySyEiqrHf7uIsOP34w
31+OJmNKoCvlBFFv/Ucfg/Q/kjEY/jumSsxTbqGTpTVBZBQfieMQuUeD0t6a
pVPeZJx9KWKm7Ebo9f39/V9dyaiRP2TaF8kAEeU/tzY/J+PDKJsznQcZ0MUW
9NrOgoxqq7s6VoMJvZYcyhoxJs6n/KS/q5kOFx2Kx2/ok/GM0j253Vw0mDul
tf3XHeK94KfFHm4GfJlfuLb/Jhlfegh4s7xngFq8p72/LBl9Fm+cfU/kO2bD
ffF/LpJR2LaDuYyNAZm7crqNJIn6pjz85EWsb9yhvKn5CBn15PmV7NRpIBBA
Pn9RmIyG5OD6sDQG1Ck4P/4uQMZ9rS3FMvcY4MS8PWLrVjLyfK33arAm/LXg
R53jRjIq9gQ8sHOnw7Ct3L+JdWRsN9lTZEzk5+DjA0dvMcbxSpwWeew3DWSn
bO7i/Dh61ZDadQk90aM5/A+TxzHb4y2nM5EP4/Vi8f3AOBpVvs+++oQB2tul
FtZ1jKPv9SHe/dKEXpvb9pnVj6PjC40DZ4zoUOhtptpZNo79HatVCfJ0sJDZ
4HYlfxw37BSocdxAB6HVj2nJ6eMYt32UtM2SAe3ZJ0f5E8eRU5+HU7KNCq8t
a7e9ihrH92Gf4kN5aHDmiKHMfNg4hqjMyrYT/TI19sdaO3ActRM/tL0m8knE
p6DYcs9x5Invp7IPUuGm5uGO4y7jKM6bc/gxwSPrtpb8F2E3juYNzyMfVxH+
Wqt1htV8HEVbNHeGejHA8DXF+NnDcawfmRihSRF6Ba8P/XrEfiyR+e6/CL0y
9lXL3x5Hv2++RvUEbz1Py/mdrjSOW6wkduyoZMARM5XDe2XGUUFfLozxiAF9
Bya0vS+M42xFwdd8MRq8HXT2oZ4Yx6f8i1e/EvW+HLY93+DwONIvkayirGiw
qPZzplZwHIXH2OyiCH3Ebr62+8yOcSzetq/38Fk6aFQM3IjiGscb/dp295oY
wOpi68TBNo6P28QiVFwJvZ7j/Gm/RkLxAp7dgr6EXpdiB0dpJKz6JUDnInho
T7IUl/IcCRcHyq+uEyP0+rD9ci6JhHMPH0dwvCZ4eN8TywP9JNx1w5p2cpAB
J3s2RAW0kdAtd3esBVFfUnBEy0otCW3W1EIClRgQekOS2biUhMvUeLufp+mg
wFp3siWXhB/fKqmyE/yxUmT4QCqNhG2bNIa5CP9LfrHyLi6ehKev27UyL9Lg
rmRw+bavJEzakOxwrZkGXHOHaU4fSEgV+7L0kLiPku8lB6f8SbjpZeAOlnt0
sLmnrXH7DQkfnGSsvrIj9Lpz8U2REwlj1ute3EHM4+42r5wjtiTkEctIU/xH
Be+3gpMhT0h4tH9f99x/hF7lf+1Yb0TC8q0fH5DmCL0yqV5/okvCCM1We59P
hF7zJl50qZNwQ02vPK8joVcbl8SriiTsezqrMjLGgA3H+Pt+XCGhS2qxzl5i
vmVO/NwscJ6Er5KfNDl/J/QadU3qtQQJOxLfio10MmCH7uCTBVESTvCV9MT9
x4BaXrtPOvtIeNO0V+OXMQ0cGzkbK7aT0Ohsxee0OhqIe31bk9hCwm2N/XoV
e2kwdOXS8cj/SJjcGXuU+QUdgv62G7CtjuGuqUNBWxQIvWY9CbSijuEjix5r
QYK3qOYsJQMzY3jmSaJw+TcGxB+KXFQYG8Pnmv/8skiEv45KCmf2jqGgV4La
izIGcETWqe9rHcMDpo85hB7ToPDOg1c+NWMYNZJkk8tGA3Ouvxm04jGc7DG7
5vmXCkI1waR7v8bQ6Lyb1bANDVrdj/DVp4yhtdCujmIVgoelSuXOxo3hDQnD
cqsMOpyha9tFfx7D4Dyn9XNhRH5NWfzOGTqGmq2ZO8P/0OGjqXfX87djePJA
iNIEwfdK+4U2kl6Pof+r796nCT5bN/DrnIrjGJ5qcpvg1adDSqiqaZ71GB7x
q+V9Rvj7A9XJ8INmxHNe26cHbTTgZXetDTQcw+PBDvM7iH4qL+P/+1d7DHOl
XmmlE/7x3ClF7JHaGFrxX7m1g+j/w2fl9VoVxpD0c3zM+v/5lTLod0l6DO0W
1ELyDzHgbaJdYfzZMRSyftE9y0wDaaMt8zzHxzAwWazFOpkBi3u+73URIe6j
iUOJRZgB0V2XVKb3jGGLlAfz2EuCh4M6XO7wjeFr7f2dj1RowKr0NLWYYwxF
Bfmf2m6jQx7LfyNiLGPo6q3gE19Nh8cYufXD31GU02gNWrSnwa7np64yL4+i
coOIlzKRN5pO1Fs9nR7F2uu6ob9M6OAy8yCme2QUb/Z/EE7SY4Dkt79tMj2j
+PpIFm06lQEk/XcsKc2jhF++4+MepMGHHWKnd1aPovqBK7nPRmmg0Fr60KNo
FHk/MtF86FT446sTSskexWJ9ufHKKAYkyy1V6v4cRa1VhfnOSjrcXefDqPw2
irJ71KT5jxP5NVfo0MlPo6hXWV4Z6Efo1SpX69P7UVxXOOroz8wAq6Nq3hv9
RlFTfrznkSwNDpInc61fjWJDcpIHawcNOr+4Tg++HMUx2kRlLgsdfLR37FK0
GkXBG9r7Wol8dIEnVSnLdBSnTU3ctxgyYL5e3lHw/ihym7RY3JYl9PpmKNlX
axS7fbvvi2jTQEXafoCuMoof+k9U6ygSel3ZssVQfhSvJL8+cqmM0GvGd2gA
on5NR7T/Ejz96ClYnDszigfr497JuxJ6Fe38EiM+itrnvxqPU6hQM/y0ecvB
UbQ+lUSbIeaf48f/1r/cPYpNcgpSZcQ8F7/96cQ4zyh+kY57XDBH8DDnaUPV
zaOYK301TSWFBkFV9cH5zMR9cJscPlZLAzk3ozKRlRE0GV+SCSmmAe3Cv+Wg
xRHs8/5pnxpGg+/UdwdWJ0dwo7v0wHuCf3R+it0xGR7BkTDPP3LKNGA3KfNo
6xrBhoqAwJMFDEAh3WxoGkEXznKjN2Y0sOhbIidUjiDTqx0nemXosC/Eh58P
R1CSdFrm4Cc6tCkLK7hmjeCtdrpG81Y6vN6Y93wmeQRz7ZrrylupcLZULUEj
dgSPivfCod10mHSY6imJGEFTsxOJJ4j6hp92Yxd/N4ICJj6Xv5+hwY2FHRfD
fEaQzlg3UclPg9X4VLMN7iN4LCFByO4OwcOGCpHmL0bw/bUpmi47De7vHq7v
sRxBA87Tr8fLaMDXab8qazKC7vFitnc96VARwHUs1WAEfWfXVpPsGWB3PU5/
l+YIHlKU+Hkoig5HNlwOeKNM/H5/E/q8Iw16CzqLFuVG0Hq/ho834T/+duYU
vUsjqBWoUvuDTPirBKtQ9akR9NtnWnwUGbAw9UlN8ugIiny7fZiZ8N+YmNPu
n/ePIM9UhKl4PRVu321I37RrBH8bOzkKX6EDG//DMZttIxhwOsn3uxYNfjX/
4xneNIJyfoorH98R/urzXlZp/Qj+eLVO0m0bA3bLHrXN/j2MMRGlBmmEXhtW
y74JUYZRvnjb4t9MIr/m6Hb6TQxjZtN9FgpxvyeeLbP+HhxG1p7mVYVXRH49
4nv2Qecw2t47l7LDnAEhJGGTxoZhfB+XLPmNlw7XPueFna8Yxt0HGhQEiPm4
oqleE1swjJuFM9ZdJfJR4tbpP1yZw2i02qArTPCffp3bEYekYWT0ny6uKmYA
l4eALjl6GO2vihx2OULwMKT5qn0cxsCNzn9vWTHA+rdCQUHQMPJ/iNkrSfjZ
gfThWVHvYfRlnzvBROTvLrPne965DmNrdFCz4lsaeB3kVl6zH0Zj6/Q3iTTC
X4finE0thtHlTCDrehsGzIZdTmk3HsYPz3xNtxrQ4JN619Bl/WH0j8wvLSb0
qMphwZ10h6hH2+47ti50WF/JemX7TWL/fbKvK4k8meXy+Zmb7DCafpfKkyJ4
6uH5M9GzF4fx0g0D9jcEXwgsN7RqSg4j1zFFq87thL8mP9xQdmQYm+uPOtcd
YMBL41XJY8LDqHzhusnpZCK/CoYYhQsMY1NA45ooof+hnqMhLFuH8XBN5BML
gmeD35VXWGwcxosad76kFVBB5qYevXfdMLI1dPSYEfWlslJFrjGGUDjpwQiF
4Pm4Yl/NtPkhpFyneC8HMkDr5X6v3eQhZBZhruUg+n3zqfxfngND2DawIJXh
TYOCOfWppfYhrDmbYvM0mw6WcdMC+vVDaGcfyJnMyQDB++6KNWVDeHtB894j
dwa07NzpcCp/CHeymDgnKxD+2p6W9CWd2C/KWONtAR1O+1/vZ08cwr2ps7/C
txI8LD/CYRc1hAbDz5jODxH+uv7FpZGwITy6/VZwNpEvFfO5zW8EDuFPr7W3
JCkarNnEf87xHMLo8PkXNGsGpByTbhJ2GUKjtTKvUMI/DSe71vnbDWHTsUdi
A8dpwBNtIfHn6RCWxtb6viT8plKX7b7RwyFsVoizyyL0Yc/3JahJbwhPW5nN
536nwaGmM6UXbg9huzJQVzYTPOzVuPRNaQhNBNL34mMG+F013r9VZgi5vDp9
fjgQ+fXf6i3HC0P49YeY17IrHShZIa8nThDnFWGdKCPmc5SFeJb64SEMlZcS
7U+kwp3DFeOFgkNYJm/F2Ezo4b8xve2HdwwheDy5P2hOhdxI6rX3XEP4XYpc
tTRC+KuGn/06tiE88Czkk1EKwSdC19U6VwdRUEsGdYyI/nz/PD15dhAX/SQ6
r5XQYY0tnudV3yA2pkibKhD3+dChy0a7dhCtHg743EygQ9U8a+fx3EFseLUn
wY7gyWOGZ86yxg9i14a/2rc4GBDQ8TCsP3QQm95Jfz/4meB7hZA/6R6DOGLE
8UNfkA5aBeU63jaDKHD5meSlX3TIPU7NN3gwiPus4WD/VRoIxuzfc0Z9EHmW
jvdSCL93337LmePKIHIEXq58v40GY97uQ6PHBzE3XXyd8wwNFFfTpHP3Et9r
OjYkE/2RbDkSFcA5iFfz801ajjKAh8S9wfjfAJ5/Zxt+jjiPjaa0kdTMAHbU
Q1fFTuJ+ai0qtvUO4GyQq2rSKypcgi8iU9UD+DNCxL4piQaf0xo9i3IGUGOL
6qtPRP7+7+DaZMj3AVyNOnlObY0Gj8LEFZ+EDOC+/bMn9H/SoXHz3aSrrwdw
mnVfxQlVOhx38eMQsB7AI/fHFi4IE/64lP904f4AZm696OCiwIDfD2caK1QH
sP7XgOjqOB20e3ZKRF4eQFJGhkH/AhWKbygGWR0bwHYvsa35kVQQLn6xpLBn
ALt5ClfPfqKBt2TCrX0cA9jkdynizDEaTH/vzqSt9GNWm/ZUDdDhxs6N2+un
+tH2Z1zULoIHM96etY/u7kfTLlfW10Qe513/qPt5VT8+z58fiSfyl4NN6HmV
7H7c0PSoM4eo18BExceD3/qRS8tWQnYDDUCX9vfvu37cm2PqHdNNhW+NB+62
uvfj1oXhQ2+MqcB29TbGPyPWX1KUkbhBBfOsV/tc7vWjS0Ci3x7Cr5oOZbje
UenHa2ljstFrVDgTOToiBv1oNthT4xpIgzCubTLM4v2o/OVz0g3iPH/cr8R2
7+rHc+8vNLOp0eAe3fK/FPZ+TDanGTiqU6HU9Kuxx58+3MwvPcl0geDbgaYq
3ck+3Klxv3JbCA18VNcdPtnVh+fGciYO6FNhtuyYz8bKPpSghFyWPESDW2f1
ZwYz+9CcJ5D2RIPgpcS3N7Ji+vA+lUuVROhn197CH77BfSge4vFljyUdnIJm
txi69aGH1N8EkadEPmTZbXnOsg/Vl8Zf7RClg9xzpZYtBn1Y/Zjt2Jw/DeJm
Xp4cv9mHjPe1xn/v0WCLQeK7fKk+3Go7cyjFlwoWrT3UILE+tHJ2MNhiS4VO
uU0aJjv7cIfdM6lGUSqcyz2XA5v60GjodyC5ggrhR0128P3uReecB04WUlRg
+vrhxQy5F49KL18qI/jEkKeqt6SjF5lua5r+l03w3Bv6xbDyXlzP1qs7doTg
iZWDn8wzerEu7EriI0GiH5/eWZON7sWUS2wZL4h8ujz82mBXUC+6HNrF4NOj
we3bmcWLLr34be1kwdV/NMivGhOqNu/FK1aH5bNJRL6+yPPq891etNvgyzTf
RvDVz6skmxu96EEzPh9RRYdxISs5pYu9KEGbXihqpYN8SNR3oSO9aPbMbld5
AxV+bmxh+72jF81/ztSkEnmOy5HJtJGtFx+t3ZLqJPK93cLx2lh6D8Ypm911
I+6/29BAzGG8B39Irb/7K40G5zv9/dTae3DlTtDNlnU0+Hod50TLevCVo5H8
LhIVmAvnlNfSetCm47r7pRk6mErsSW3/2oONHt8SE4j7qY25sTUpoAevRy8M
C2oRfMLvaOXmTHzv4zixex0V3vkktWk+7UEt/84whcZloK72njqm14OJQlUH
BJjpoPuMPZRFqQdjNFLWd4vRoZB0ntF7vgeXXH2NXxDPB7RMtdIO9eC68JEw
qyLCz+rCcj35e9DygeGaKOHPE1C9U5+1B//dPOA9cp8GyukMh1O0bowfX5Hc
s54GKQdFB9hJ3Ziwy8P8BxcVtodrwEhrN26xciDp+VPhOcebLzkl3ch579hV
1l4iP7tkMfmndqPO5W8SJXFUkF4m3Tf60o02CpyXWm7RINqYt+yCfzcOl1bd
eEHwxqZemQNbnbrRTbp6YpS8DI9vWntMmHXjj+Zkeio3HVqKo8mFOt3IIZup
OWRAB8lTrfLvr3fjEaPXzdwCVHgftz7h8bluLLD0JAkm0ODvzhPsV0S70WcD
eZMWke/v+t8z49/ejalFig96CJ4vXx9YP8dCvL+6oWxgichHtkXi5ctdKOxR
OuRsSQO/yXn/j6NdSDEXb60j9p/X3UuxbOnCvxPzHnxE/6k03VSTL+5CoXsf
HNYT+SP7qlP6npQudAm6Hc/8ggo7spN5qJ+6MDqgWT/4IQ1cDvfb1Pp1YWPE
9L9BYr/hyM2dXx26MEeqdoq8nw5XuS+etX/chXfcTcOWhKiQ8Opx2E3tLhxk
2Fz5J0DkD0b4n/0KxPcKXPq7iPt/9rhGZ+VMF0a+PHb+ZTsV2gZ+5zcfJPZ7
LxwcTvTvBbVDe+J4u/B3PeWC3i0qRJRrOjtt6MKrFbzDolQqrJ71HLq11Il1
Ky56MaFUMErKlj4y0okJ07npHwm+rNhLjmJq7kSFA+xH/bJpcDSYj/jrTmx8
WlPs57QM/v/JGf340YkPd37iEyby8sJzm4pXkZ34QmDD61vlNNCYjRHR8e3E
E4eVD2USeeiXQZunxMtO1L7eF1rAQYN9bcxTrKadOHel39eQ6CfXaycVBzQ7
0XT5sm/hMypM5N5PyrjWiSErVxsHbtLgungQh8/pTrQb79Ez3ETw9tfip/cO
dKIqs9Q12fdU2MpLaTzD04ln9dL0k9OpYO25T4KTuRPVnb5q/EfM594V5aAx
SgcO5+3kcuqhwkVz56XcoQ4c2yvf7RhO8MfIj1uBjR1Y/efGh0Uif7DcGcg0
LuzAwyVXDAUDl+FhNcf2S8kdGKBfp6bOR4X6i1L2PBEdWPDGTSehhArHUsy6
p7w7sHAm85zgCxoECEecL37egQ0PeIa+1dCAHlL7MfQRsd6WiETVCBpobVr5
+0SjA3m48qM0NKhQ5Hj4roxcBxZfdpS3O0zwB0ULBU51oAvfyMbdd5fB84HX
PopwB86/km+1J/xoqjPHtXIr8f2NmDBuSYI/FCdGIpk6MOgKs+gziWVIK9wu
Y73Qjmq73jg1ei4Dz4lrsdcH27HlsM3KYCgNXsba/ifY0I4rCokznx2WoY//
mzE9vx1p5/OW2wdpcMm3vao+sR3VW6ZEs2KpELu24XBMeDsKRfeoihD1/M9K
0ueFVzuKzB5fUqpbhifjhjMq9u2YsVxv3faEBo1awTdEjNvRc+v8CeXFZThd
X/Lj3+12fCt+y+BY1jKEXl7c0ibTjhbcdZPZxHz5nS5omXCyHSej1xmpE/PV
QES1xUWoHVUGs486u9GgONzlpAZ3O16IdGent9NAlDPl3dF17ehVXs6vmEoF
b9dBKvN8G7p9Km5LJHhweplTo6e/DXeHbP2USswftUeXclLqiPdB6jR3Vhpk
9D7Z8SavDb+OUHIVfizDTuXIF3oJbRgpZaHOTsxbh5K63pNhbXjhYrqfIicV
Rk/9vbjJsw2fe6y67T9NA9n4I5+GbNsw4sHVzemEvr/t0lnLMmrDu9ydaSUq
y8AR4G3gd6sN76js/qZMzH9z5txiw6ttKDQWVr4sSoMO20mh8yfaUCxtOF4o
ZxnOTPG/4hJsQ1ujZluWomUI05MnjW9pQ50qkn041zKsa7aTK1htxexLhgIu
JstwT+b79+DZVixV/zLzkkKFquwONtO+Vux34bz1SHcZDh/5z/RybSsu40Ov
uH9UCPx0qpYvtxUlDlDSSISfLXIbic3GtSIHJ8uvsR0Ef7x+51ca2oq7U70+
m+Ay5DFK58I8WvEhh6aauwcNdpktKVvYtGJfVUXsANF/7oNCqXIPWjGF50fv
SdFlIKmpbd2tTvy9o196MdsyyFW4Wi1Jt6INl2Hd2Z3LkHwuta36eCv6+z06
nBOwDFuSh0592duKaYm/cvSJ89nu4wq15WzFbWtHHO5dWIbOYGAo/WtBsLiX
FuG1BJdYzbWEZ1rQ7XIHKZLY78uLT7m/e1qQSTLQI7l3CZjm6nc2VbegxaXk
vuORy/Do3j+Hbzkt+On7+thPCUtQ0yY24PCdWC9ll5t7wjJIyOuCekgL3q9o
fOJE3G9Qns+XQ69b0E8pPuvo7BIsi+cxrbNuwS8CjhaJD5ZBJ2rqfsf9FtT/
R0kYI/J0Pq9AWZJqC0rfSTUNsCR42EvhgPvlFrR7Ol66v3sZXv+199A61oLb
X4or+tgvw4x5HPnYnhZU4I+o6NKkwo3RTvn/OFpQxqX/aJYMDX7eYU3oW2nG
DXIW32JJS8BXc5o9faoZleQlxXOGlsFO6qGZV3cz3jm0dsa6chkGUt7X61c1
Y/DEmpalDRUu7y8XP53djAdvntm2I38JvoYu+2/+1oxjPU5HXIl8yMa+nzLy
rhm9927d8d82Kpg6qav9cm9GjVHfDD3+ZWimuKX7P2tGltC5tOp7y3DCKI3n
4b1mDLlzdeHeWRq86xq2uajSjCJttSucBH+vKHJ3boVm1Nx4/6X1/mXQxctn
J482Y4TBb9npjQQPn7AIw13NWNqbIMVruAwHvn3+8569GVtiDEmc7lTw3dGo
Y/anCQV+X7/ImUPwsO9q/pXJJoR0vxN195dAeZ34nh1dTWiaardvM3H+LCs9
5/mKJrxtuvVcM6Gn7WTfofLMJlTyLmA1+UYFJ+186YiYJtz97vIlgb1UGKqf
jnoW3ITir3PJubVLIC29c4OCWxPufPl88jjBu3EZ1432WhLPdyOCfSOWYZPo
iwqqfhMuWdVl/ClaAsuP8SJ1N5vwXUFMw9epJWjh7PaMkmrCIVU7r00Ty3DO
jW3KXqwJAwLKfzEJLsNH6hlF5Z1NyJz0XDL7DhX+PjJOOrCpCU9eUi3e1rkM
lTlHdzIojWgdbx7vU7ME3p99+2MaG7Ew6PQBC8El0PSY/qya3Iiv4lnLPqcs
wc4n1++vejfiZX4BZrsV4r7V4/cnPmrEnh1P1Q++WIak82xkDblG3PXnTLDk
yhKYCxrHb9jfiGuuS6Q9uARSbBWPU5kacXfhnruZscT8mN8vfnewAVXnalzD
GcvQ0O6+sKmgAXWtDkQONy9BYP5IWnZ4A5aZ03Rl45fhVrS0zQP7BhwV3cRZ
srAIQt5fznDfacCpCbqeRPoikCzWfhecbEBhH1XnesK/0zXu5ptyN+BRcbqO
R+Yi2F4qcNo+X49NZff+vaIQ9TqwS7qsrh5VdZRMXE4sAevml8yWCfW4GMrC
3upB6HOxu3y3Zz1WjZ+v+0Ts96H7rGeNUT2GvvOUcyH6R6co9Lrd1Xp0y2TY
VhpQ4dB32ub9gvX4b9s+rqOE3mf8bjc2rdah9cOYmU33CZ63zgh07KtDpUfC
16z2L4GjzrZbh3PrsFakic0weAkuX3nG1xlah1naxSb8/5aA81Bzl7tNHZIe
dOTIBi1C85bjH4+r16HqWQHqjsvL8I72Vq//eB06C4kv8Uktwf3+2b3enHUY
/PMKC+/vRThQpjRyeqYWI0xPna4keHQpITFmtLoWt22x+vKZhQpZgZuMA77X
4lNfz8rcvGV4ZW9ySOp1LZqwNDxM+74I1/Srpifv16JLlv4Wzs+LsElO5EfI
5VqcLw6/lDS5CF1iHhZX9xDr89ACKrSo8HEb6cTCSg16/rYbO9S7CCZ/rlIj
umvwILuQsPP1RRAbjspWyK7BaLeNvxdjF2G+kukF7V0NGmbZei1IL0HBD4OL
0c9qMODjudaH5EVweY+ryio1yOMQKjW7vAg3HfYU/z1agzK54ifExpeA29DR
PZ69Brf8IXdYUBZhUKFP9s5kNbq73Tr5QGERoo5fYGOurEaDEIkcy8AlMNoe
XvMzphrNWUc4vlouw8lVhq+uWzXWnXDw1Hu4DLQxDeWNBtW4vfO5KhN1Gcpq
s7izpKrRU6TykNjGJXiTxtt2f2c1vrAUFaRzLsL1MOuQLb+r0POB6qqF0hLw
u7Rq5ndU4SfXf/FmjUvQ+/DETpOMKnx/xPxa8PkliL8R2M8bVIX6W3grnDUW
wUxy4XOJeRVSPJaCuUQW4dhO5fvmN6pwdZ45klG0CP+YfuzfdaQKm65PWEcR
ei2a2EyuYqvCx7cOUSbyF+Ft4+N4m/FK1OPdcHZNaxFUs2oeC5VVoq2V3o9F
xUXYG3lIvPFrJZbTLEQu7l6CEXfPhZfOlSie/8tt1+ZliDUlp4nqVaKAzdHA
8IBFsFKVs2k/X4kbhPc5KlOX4PTZ2DNu/JX40CKNdYPwEmzYu+GPOK2CmL//
zN8KE/ODxTC/t7UCPe72vP15cBm8Z4qdPFMrMGBKZeu/ZQpotu6TPuVfgTP/
fTx+npWYH7nOzCNmFeicyXouo38RJr8MlL+9XoHkn+0+K4R/Jr2R8rwgWoGF
j/Ts3ldQ4MXTiOsTLBWo3fo27vjUIkjdXtn8frQc37mhLyfhx+suajdKF5fj
+LPQqJ3vl6BB6Ffg3Kdy3MlX9lPiCwUCN/Lf+uhQjpRjo2/fSSyC/oItn7x2
OXZzl0LVKDE/Otu7ls+UI/tKvHl7CAVIBZIfv/KW474Mkb2ViYuQHhOsd3Op
DOVb5PAUoU87n8W9K01lmFskkFH+jAIyz1RHvv8oQ45HC/9SwpaATSsl5pZv
GYbZXkrzd1mEdthizGRahoNal8wTuYj5cfDpoR/XylC2yl5V9PAi6HLUT2sf
KMMm9avNexsocGj5yA9W5jI80uE0xiywBLM93hYZQ6X4rVCxf5yoZ27x5Il7
haVoaMbf3+61CE5x8lSOiFI8a4q/S5gIP/H/np37vBSf6W+5cDGamB+2/70w
1ijFPduuzpEOLkKLrtFFnlOleNfWo2FgfhE+Xy1bLdpKPFPiKtcVU8DwsHDx
k4US3JFhKv7xzSIc53ZzF2gowYlE+7V+wm+W6EOylYklyDhe9qnWZwmyB4DN
2qsEf4zzpPCqUeBV+aeafcYlqCOY7dDsRAH5pH++9TIlGOwx/HclnQK8wbrK
L4RKkGPU5dPorUXofp7HLbKuBO1VzX5ovluCCAOBttb+Ygy0liqWe7EEJtee
h7jkFWNQcHtnI/cSHBXv0jwaVowzHqZDZRQK/OE5s7PHthhlxFT2dZ6jQOHK
+36PW8Wo8rtuaKR7CXxGlj+fPFGMb56akSIMKXCzWv3+0JZijKKy5L9bWYSt
KWn7/WaLkCtjIcwheQkGQ7jJ52qLMDq4K/pT1yJEO1rEj8cV4ZdHUq4LoxSw
eND4ONijCD8xInKuWFJAUlFc/PKDIuTrGnsi+pICdAm/hRnpIoz0K/szb74E
ZfwzaWF7i1CSI8j8KhMFtqy9n/L9g9h11TrThtgvsU7dfDwTkYXt0oOXfxZA
Ipx7GSwRraMHTQu4liDHuNE+TAxxvaiWyM3MBVA/5fdvkVyIj073PTkYQ4Hu
9YpuStGFGKP9sdqPmG82TWys3+4W4m7RdeX/rJdgJbLCZ21HIe71Fz8aSugv
9PErLq32AtzpvU03i/j9u89deZ8WUICdGiKZ4q8oEP3fOoHNSgU45x6XPdO2
CNBW8MmItQCvhce9tfFbgvKvL4WxJB9rzcsfWectwD3zc3H8Tvn4hc006U0R
BcgX6WLPzuXjH/YMJzuiHk83ZabWLufh5llTZ50SCmzsenb6QEoeLl1Wmy5f
WQD/2ON5To/zsLXopQZv0iIcsZqDroN56BxJ40l/TIHUy0llEiO5+ETL2sWI
exFucJoq+ETmYvUtp+r0xQVo7RVpGNPMxd1vX30Xp1FAK56kdoknF4+VT7Hf
YqcA1Ta6M7TxF96geBi5nFmElzL3dCnev/ADh875q5sXYfvWvcPX5X6hYrZ1
8rPuRYgc7DOKYfqF9a4xuzzPL8D+5PCpf/k5eNte6M22sxTAF5rmGvY5KKJz
Rq7UZAFk5fmWU07m4DbWxx8aiHk8zNtmv2k+G/eHNO1lIeav8WjgP8OE7P//
/3eqyeoCMKcquxUYZePPYYOiDB4KeDlxsG4XzMaq4FumjE9EfyjV+lj0ZaGj
R9XkoCgFEnd4cdWEZmH+7C+WXB0KSJDl3gurZ+GrsB2GM2ILUJ+xQcCRMwv/
MEekZVKJ/nAr+dRRnYkXjH1lazsXoEfZRfj460z0LK+kZlougM3uS3FelzOx
XO6iwzYfCqxMrYiNrmTgvxH7j98I/wzJ+ZV6MTsDjfuYp0QTif7wsDsd8iwD
E25WlevtWIQc9VN580cz8HxKTOGcNQUuEYyoMJmOJtg7/UpjAcrnUsqiYtKx
dXKeg/3kIhjkP1X4q5+OPuuTTy63LgLZS6zh9s50jLNpuF9TTQE3jSm1nx1p
uG1u1SL/5zywHYjrZAtKQz+zs4vxQhTwXzTSvX8jDV8e8LlvlkWBw0XCw3ls
aWh16weHDe8CpPoNG/GWpWL3z75DjkQ9lXQ+Tz11TkXWvAdSDsJEf4jqmVed
T0Wru28cWSwX4SlNYFmQloIRHc6eb4j6LJd22b9MTcGk3RfXPX5KgZeBIf/a
zFIwOiVZw0uEAnz6t9zERVOwY8lFd/2zBTintZ+Tq/InHl/6T8RfkJgHy5+3
l0r9xEMGp4fmiH519N8paJvxA89w/X1cHrAA3odDDx868gM7zkfzvr1HgeLy
rZJ9X5OR+2qU1EmiHxsM3kr58ydjd0mH0xP+Bdjwd+O1K/5JGHq4Mo3Zeh64
Q1+rUFmS0OewpHV1KDFPTzBpxzkkYmnuESkBwQW4Xe9gqLOUgArx+3U67Rfg
/iOGGadpAjK1eiaEdFHgA7O1bfFQPFLFIrhellMg9tO8s7VGPEafPnfkKaH3
vnOPvUQa4jB++orO2SOEH7eNB/XIxOG1Q6MqLDYUoJnfj/DL+46Laku7r1cv
wFH2gdjLJ76jkz3fbU2fBTj/TevnUtw3dM55/EEV58FCuj3n295vePv7Bw3u
P/Pg2KdSohUSiw5pQYc/E/3tbVdXu5kjFgNTHN8kcixC8Vb5dnSPwbgrE9y0
hXloSC4dePYnGkU8nL7cn1sAFgWYOGAZjYnfZKtfhi8A91gupYschQsqx+f8
yhdA3vn0is/dKDx1GJL7dxD1EEjbAO1f8dKN+CL3OKIemUc5FxW/YoebbPhT
bwqEqcRvjy35gmvKMTNppQvwbXq/oOa5L9ixLT5WmWkefnFI3+Yz+IzvtH/g
60cL0HL17COHG5+wOH2b9IUeCsw8P/Zy5HwkMj8iqfsR9dBOOfhWXjQCB9bl
6r6+uwDW47u//uD9iLvFewXE/1uA4V28GTzM4VjWv/fV89uzsKK2ufLFwgfk
yTS9O797AR55MfcM9Ydi8bn9C1asc+CGf2bkakMwJiVGZS1qHiKolLWknPfo
fk4g7HTAHGwUm9y67ds7ZPBz35bgWADh+0MHngcHo5L75poFBYJ3PnSeHXQJ
wk3IxNddtwAJDQ2Ksk8D8fQrsj7r8CyUbai4m6gTgPXIIXvBiAIPbF+MCgW9
xc70wSfWRgsQOvJo47yZL1qlX4qLbJyBZ8oax/KueWP/hYgWfSkKfMuTvf1G
yBOHVv5ZOpjNgauo5Ev1f6+RweQj5qQ+CxnvhL7u7XLHn9Mh5dQz8zCxjrty
Os0V17RnXYs7FsCjd7XbfKcz6m/bkyF1aAFm03sPsDW/QHbPPj5XZsJ//HIs
v3jY4iVDrZObMmeA/eH7grMXn+FihxbnrPw8jDmMbY0afYx396gOMd1bAJXj
nxJabhqitGP7Jqf1FLhY8vPVf9a30ZUh2Sp9nAIqMb5Nnw5JYA1db7pEaxa+
TLWcfVqoAHzizzCP2N+OkzbTznYXFL4YSTdrLcCTO8V3z4cZg9lM3EZ1Qk9N
Le6jG7ZbwLXbMjFq3TOw4/e3ULN71rDsxvIiwGkB0vfVKLYl2oPmBpvvH/kW
4J/c7NoFmgPYU4bds7fNguIZth7VLy5wLK5c3ahvHrbX7sh4Xe4GVLPvf/h2
zMDFu0fe/pp6BTdVtgvcMZuHjYsXH81ueQP3aw4Ybf++AOKvb14RPOUFiYPr
Sna1zsIffoNdt7V9IDdXUPGz4wzsTbKkeTr7wVfFXB5J/lmYAfem/Bh/6Oso
fCJdOA99JtdvM8YCQEQ1rP3jyDQ8Pal+JYgeCN+k2z0OCs3B7X86x8Q2BQOL
0yHDOkI/5IoHuyp2vYOMJFMxHa5ZqA94stHg2HtILlGLOKs4AxnatrTf0iHg
nPAf6YvMPMjtdx4NvhUK5MH4ZN+oGRCbe9N01PgDbJkSjDrJPA+YHVBQ+TwM
1OLHRT5wL0Csa1jCPd9wIM0Yz4+9mIOzilGhK58+guj+wIS7X+dgD2/iq/ep
EcBxoYky9GoaNgymWx4riwTm2g8Lfg8WICQu/251xyd4Pe4ldu3YAjg+K1c0
nPwMzdvVN3K8nAW2PcYRq45fwOnU1Hu+FEJvbtNBiqxfYXLXkiRPxzTMkc29
PgR8BUu7f691n09BttKyM2lHFAwfTnkmaD0FCan2tieio0CWu2hnsto8WPH9
M3MWiwaNM1lJoeGzYPzS1bAuMxqYh6Z4gsLnQHuIRXsHxIBS5F+rAuMZEJb1
VnlYFQNsBXuSBMTngS+B81q6aix0I5/GM90ZGOQMllrXGwu/X/iGcZnOQovV
dskbD77Btj1PDO+/J/Te9fFw+Ow3mNwpsS5Gexb8pfYJkm2/w7+HeedaKdPg
FhWzXXJdHPDIS5+OWCX6i/UQp6tXHNTNP2+M/zMLl8ySNzRsjQdGBseUgPIM
sDZLrAhExEPeEfrGDzpE/5zKohgfSIAJ3Z6nIf5TMBd+fiLjRwJsPCSpYkuf
g+y1wgGms4nQsDvWo3PPDCQ8uNp+szgRMtw/ZJavToNVdWXtx+tJUFy7fEli
aBoeiiuVTLQmwYi55To78Wk4HtyUc0ovGRxK7v4aMJoCYcatn27jyVC8/pVu
tOQs8Ol1xzaa/wBO151/Q8aJehTrRez6/QMc7cpqcds8tBwcCTJx+wm6RyfN
s2/PQINsukwvSwoYNG6JE2abh2v2VHS9ngJaBo7cMfMTUJxw5oKofwowlwkc
LdGdgwP9z7MaWlMg65rMlelz0/B5S76EDX8qnJYYmtVLnYINV1aTduqlwgOf
WHslj1lwtL4sWvI1FeiSp80EMmdh5Jtb9KPxVJhTEUs4MDANOt1le7YcSYMn
W8SVimKnoZ2dNTzTPA025pk7L2tOwrlLCry6GWnAZTnCaq4yBekWPgHrf6fB
Zv9SyU2PZ4A/up49Xiod3tPNL/pcnoHA9i1vlN3SQUYyfm5kwxSws6mtp1Wk
g5L62p8EhVkwP//OMYI9A8Ra86MfJUzDpFkH44pKBhT4VfboWU7Czc/81pPv
MuBE9VRiq94kVDZrz/t3Z4BW/v1k67ZJOLIh0vT0nkzQ//Xn57ORSYg9PUjq
u58JjmXSG4edZ2GPieA99++ZEKW53UtmhpgWHw37Ds1kwp7Wrw/PxUzA3/pY
jabjWfCjdOb3n3WTcG/dRIutTRa43JPJ6nSehN4Th2/uzs2CxWdc5RfzyXDL
yKy6dDUL8lW0leuqpuBX6A8Z06vZ4GoyEHimawpO1Cwgl2c2yGz3iJjNIUPo
3xMXsuuywcxht3WP7wxwHbPJ0uPOgRNxfTUxe2fB5l62xIY7OSCjyFFk8WgC
5oN/JyWE58B+9vL//uyZhkcVF0RVB3NAb+2U3TpintUzHKPpwr9gRUNwOG5t
AuSOFO359OgXPKo6UXOwYxIS9daHyyT/gvwx7Y+8utNwIECGd5ryC+w/F6Z9
/T0Nn0o8AgJP54JbSaTZhstkYKZWsZ99mQsdhbZ+HpsnwUGE/c0AEu+tAgRZ
isgwrHVj/esNeeCdH+by1JUM2r7+jkcU8mCogm+3hM4MtBU2M5r98kDspbxk
w8dxOEfZZm3fkgebivKm141PQprwnfk92/OhIPGv0VGtKdh+54NpuU4+LMm4
clbcn4IAzx7S4y/5oPld6cGO6XGg5u66t5WUD5ff/VXjk5gG89m7fTmHCmAm
ecKLPWoKJvZ+1dB/WgDVxzfadTlNwA210RaW9AK4J1BdePQMGSpeHbiZRC8A
9UPpfWp5RH9kG1erXSwE4ThTEdHbkxAzGS/z26UQTl3ffOtQwgTs2TWDn8sL
QevEl6vXzKbA/ab4BblNCFkOPft1iX7662KRNXMTIYP3x3dy4jTcS0+TIPAD
XO6k8N0TnoAe0nLSuS6Egux7AnlE/+713cljwVkEl5trrh1rmgTd2HzV0uNF
UA3nt/MKTUJYoZ4/n3oRhGt9yG8IH4faztU6E5si4HC9aXFHggxslM+bCkKL
YCZx99jtexNwfpO0PFduEZzhUVJq2DEOdsIjrw37isBQvbxjJ4UEGRfdS7NW
i4B9OPx1lCcZxm/vZ9okWAxsAeViTI7EPDIvv6R3tRiwLnKd0dsJuO350CHF
qBj6f924wa47BUFfWXOZPYvh7RsuM0lhMpTlxtHvJBRD69qLG/KqJGBqUziV
UFcMBkoGIYtWZLg0O/Xs31wxJKeFX68JIoHFf74pKtwloD+9MfuL3RQk7z06
F32yBJLa7eYmosZh8GzDEfrtErDnzuSMrB6HXWrmJtftS2Bq19mK7E0k0HrM
9T0yvASEm9tLfw6Ogc+r1LGF/BKQcTXbzs03BVWRakIygyVQkMU1F6hJhj9Z
S/qhTKWQ5eoyXcNEhjNN7yKnhEtBZP/oZOzqBJhMnuqVkisF5bHMuS7Lcfi2
vpM/8FEpPFUMtv0jMAajO+3vjHmXgpBM77F9LiTgPbXj3ZnkUhiRb3z8/QcZ
1G7mNns3lsK+WOWtslvJ8MpYZ8sApRQ4FcN/HPYm5q/LXyUJnjKobs1mOc87
Cathkd6vTpcBFPcMyChPwPH0S1WdmmWQQ8ntKh4fgyd1gyxHXpZBb6KX34fz
E/CZ5HLVKbIM+JH/9/tXJOhbFXRtxjLIjvXpLM0aA07+0sL9I2VQIah6WPfY
OChJPPhrt6Ec5DYNXrgWPw5e11nO1x4sBzOXy366+hOQZ/jNbo9COTy237zb
PHECGA7XMi0fl4N2tsaLzbvJcDhkYrHMrxz+fHR1Sr5JBuOfXsf5U8rh0oH3
bTpEPWKqDj993FIOh69mric/HIWO4drEwmXie+7pqrfPxmHbitkk9/YKmFM1
9/05QAJZHk4Ro3MVkCR6rO3f3glwO/rzQY5OBdGnG28O3Z2ADDmVKHanCsgr
3sw/rD0OFH3K4N0vxPusOkUmv1EQfx60O62kAtx5a3rp/uNgEHRSh4VUAflc
JRSZcTJEJrZ90GStBJpiz0m11VFoLLPpSDxUCbGLh1stVEZh8wAfz5piJVAb
hvZukhsDBXq2qtrTSiDHZBi72I3DSy4t/9iASpDDQxXZwyTIOfSnjpFWCR1f
a7zjOkkwdeXjJqX2Snht2qWuLzIBIroX5T/TK+H37+xi6qYxeGDT/3pxRxVI
vav0+L00DiFvnUplL1bB5eVWV8G9I9D6fS9T2N0qeFHrjTrMo8BSXHRpxqUK
7JTy6j5yjcGVnnsOEF0FZ3YO6M8WjYP10vrcoPIq8GNMl0e+HYfUzTF0EplY
X7n7VrPyGMwdkD11blM18Joa0U2GSLAPxp/5ilVDWO/mu9RsEuhpvkkZvFkN
2p79d2npw+BvKTp3wrIaLqemv5/8OQZ13tVHPIKr4Ss50FLFeQw2xpiadGcS
z0/MU9fUhuFCAft3sa5qMNJWiJqkksC+I2nM+U817OahPx0LG4GE+RtCrbtq
4MADgdD95DEgs83rH4QakFHzpRqykWCHUEDk83s18GYio3g2YwTuXJDorXOv
gd0R5+W7h0ch+FYL/75vNaDs9Ox6Uf0YlD+xumNVVQO9ulRXR6ExWP+G513F
VA0szS8q/GczDpJfMpt3cNRCVDrF9f3cCFj+urPlybFa0DB5HBurPQw/WuhK
Raq18Dbb+Uld6AgMTX/w3mZdC4csP2P7xSHYzXK+6mFILXz5c6WqiNCH8p5e
ltycWtDafac3zGsUfM84XOXorYXnVVn3uD+OQKHKbleDf7Vw9YyMy/zBUVgx
KSxM31sHuRqCuZ7RJDjrrv/3vyt1cNc28QzfrTEwjVh3XvtBHdS5CE7JFA3D
98yvdskedeBWoMg9mz0K3Q1XMtfF10EcJ2uGTvso8E2MLqrX1oGVRqXw641j
oM70+vj32Tp4v3lALpZrBF4LHHz6Z0s9OAVtIp0VHoWSk5WJN07Uw/Pq3cYr
xHrLSo8mv9yqBxp/3NdoqVGQeLhRZNm2Hj7FnFDueT4Ehs4JD66F1UOJ7d38
RqMx+PJBMSo8rx7YR9W4ZXXHoD91ZnC2vx7ej6nOubIOw5Zav93S6xqgkcXm
+TP2EVAaE9d5J9QAw1v/arAR6zv9a/xAlmmAn+INkj8FRyGPz7LjvHEDnJCl
Pk7nHQLGsa08b70aYJtre38m/xgcVkhXHU5sgGs87afqZobB+P4tf8mGBpDu
bHzutToIYS+pdW8WGuBK4dxTsf3D0PEuZFPv1kbITg3o07EaArYfZ+TFTzUC
3x73oitNgyBb2fXaVaMRIlvWZjd6jILb0PPStueNwB58YZq8eRgyfgswiUY0
gu2a7OSX7n6gbM2/9LKwETbYX786JD8MwmJ6Dg1DjaAl62n3JXQAUoTW+gKY
muD0m30XO5wH4ObPxpe5W5vAgdM55KbMIJAvfBEYE26CwYP6b23LhsCjyuIX
x6kmqKPZTuqw9sHe29KaZ+SaIMPW63hb7wgUDHPTDTSagNTiSmINHwWNpyPv
vR/9j6bzjqv5f994ZkkyMiIhCpERISO3HbLKTmSmzI+ZlcwislKSmQaVkUol
42rvvXfn1Glrn5KV3/m5z/fP88Bxzvu85n1f1/NKpcf768rMW4XU+tNPJ+B0
KrlYHKvs1VJCDraXM4rsUslvRaNLZYKQtPqvOyr7OJV+n/uRtP5HCSU8V++r
/SaVDNbohl2SE9LuCa3vjL+m0pS9Zwr/ixNS55CoVVdSJO/fFup5ZISQXJc4
1b0RpJK2S1yG4Qshzcowu5nTlEq7DB6eCnhXTLmmM8Z36pJGc1aaH7o/s4CO
fJONH9c/jawMFG45mJdSn9O55us00qiiuXDRoY2S+dTNS/b89DSqHzNwken4
UtK/d9rzpX4a7d6fH/3VR0AVw5YvTtuURpsOZC6LTykha58hop8WaXR0nFf9
moQCUtWtvaR+No2c9vSR2f1VQEGRn9RW3Uyj/X9DXINvCWi94c1QyydpNDF9
5J39nUuppcjE1PVtGlkeWhEc71tIN/dN6IhHGvU+dv334Ed5NP77n8fi1DRa
XZCcY72giCIvJ88eVppGqwITTGVVBbSzz7N8/ZY0MlxTsa4TCqnTk8Onj3RN
p14e58wjK4rJRXOe8qMB6TTW7ugIryUC0g3sExQ5Op1EstBL7iKgtAXC9fUz
0qm576ilUz4W0n8p78WDlqXT0YZNL8WmAuphcslhvnE6dSR0M5YfKJnfVUZT
9u9Pp/cpHxtVdxbTkhOj0u6fS6d7jyr7vT2aTyWdxIe/2qdTfKil3aP8QrK6
FalY9TSdPJ6unHe8Zx4NVHF809c3nXpbqmyabZRHH17uWTE7LJ1UAkjJZ30J
rdWZXrs7PZ3eliysuWhQQt9Cu9vdKksnhccrK7pp5dONlTljg8Xp5Cn7OS9W
u5jU81/GCLtlkOuiLadlDxRQuNkps56DMihCd8JAGRKQScvSbtPGZtCSEgfh
kIoc+mk92H3bzAwKuL788yW9LHJWqFlwbXkGzfjZ62/sq2zSfhgifL8lg1os
b+7q/riYUjVuXCg4kEFTTo96nvU0iyz8tgzvdj6DvhrcuipwLiBZ0vo68XYG
hYcpnx/bKYc8E36bbHqeQYPFEb8GXMkl2pT06+L7DPrVaVG+w/JMKhI9cfEJ
z6AfDRoOq+xy6OSRQzOzMjLIvcX4+VkqoQEdc3M7RBmUu01rfIxpMb216205
ti2DPst/M611zKAVgwQDjGQzqbv/9z4xPvlU6+YbcFY5k1QD5Xz/DMygK5Mv
rvXQzKTbpq+/G53Kp5FfDJuTZ2WSYe+uhxwnZ9KnZSPvthtkUujosdqlzsVk
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
IUyfZLnmEV2VeWGb2a+QQvXCJ6qXfCB1+6OjO0YVkm6vJSOeVYfQl8ELo8ZM
K6SV9k8nGCmCtngq7TZcUkjhCn8Csvxe0c8pos5nNxZSYXAv4eL1puSAAFd3
80KSCxb9euMWTdorrs5LPl1IZ054uGVt96L43PUl3+0Kqfru8JNWsV/IYs/o
82qPC8kkL7qLfdJhdG5uG2rwppCmaDj9WvA9gJ6fj/l0/GsheVW6reyx5wNR
T2fjpymFlBD5tiCz/T5yH5j/iBFI/ry2INXu2X46qT7TuampkJr9vhckjnZB
7/c9Zqh0KaLN12y6vXwcSm/18rMW9S+iTfNnaJbM+0wr4r2PH9IooqG7V2rt
f/eFyjecVXKeXkSPbO/viTJ7jCtlBn5h+kV0Vdhy22eDMVT/G2pYu6mIZn+3
6Nmh/oE+/f7W0H9fERmGvDR2fXYd665/uTX3bBHZl/5np3nMh1oG3JpgfrOI
5JO2NbcJn9PdF9sS7z4pou7FqX4PbYJo3KRJ+z+9LaKupq/XVAeEUNynvz3K
UUTC+ZeX73D5TDuXpr5STCuic9mNdl7XXpFM1nN93dIiGl/pIa9SsJGe7ThS
saOliPYkG1lsn2tLuvXzr97oWkyftobLnxr6HNln+ql/GFBMoTqjZx4Z5kWH
ZcvCi0cX0wRfw837M76Q4n3/HXK6xTTld97aE09f08sRV2SmLCummDwbzbqd
AVj8Zt2zLcbFZPJ1WPa40y4QzdSYe3V/MSnozGk3cLAnq+jWwrfnJK+vX8kV
breBytros7n2xTR1Qane3wN2CChxGtL5WTFZb45Pbq9/i7UH9n4c71tMt2oP
vjco+ICm9hmb1ocV08559fsv3XoKu6ty38+nF1PijsgXi8fcI81+eY6vyiTn
/tK9/gYjPSj8qZdOuriYZDVbvavCXtH28WcyfnUrodWqVzu/1HOjH0HLj2oM
KqEqwZtbJs63yHmRSt/VY0vode81RePb39P0tNp3p2aW0PGFQ4qPOPtRytbP
q14sL6FjD2W6m6t541DNzbqELSV0b8MCN90eb0nWcuvN1gMlVNfqauvU4UEe
XSaOH36+hAweH+nVz/0lFt3piFt6u4R8XHsVrC2ypaKhKeZHn5eQrMsa8b7D
tjjr9Uz28fsSurUge4mTphf1n/6fZ1R4CaU8C5TXaTlF/uHzFjdklNCQO0b9
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
sdCRogsf6yTr6UfOa6E7iQNmHLQXQ5rnQopRyk/aJd9vAue90LqIWb8LSlsg
zYOhxGU20YF9W/CE82Iou7OOneI7MTI5T4Y+ZR/2WSNqhgLnzdBrb9H1YzEt
WMp5NOTlMiEtSfL7S/NqSCdLQ3AsW4wgzrOh8dXHO7TuiSHNu6HRewUN7hNb
MIbzcKgLfn25dagZ2zgvh0TfPdL3/m2GNE+HDj26eSZVMj/SOW+HVLdHKOV/
lawfnMdDj30yO9uEiLGA83pIZ5HnyBrDVpzmPB/a9rDJs6t6C95z3g+tfKXz
YdJHyfrBeUB0+/yhGtmcFkjzgijzZMXJ7QvFMOE8IVr24ObRx+ktkOYNUdS3
EepVr5uRyHlE5Fq0fOxjdTG6cF4RqXfKGyAStUCaZ0TmW/qYmUjGkyXnHdE3
v1eWD/dL1g/OQyJR1dxum1pbUMl5SWR6+sYQq54tGMZ5SmS2zW7Jz/fN2MB5
S+Rfu/+qwKUZ9ziPiQ4891UYpi+GNK+Jeg7f9SJXVoxOnOdEY2/aRlj5tECa
90TOxY7qF3PFOMJ5UHSl5Gjc/L1ivOK8KIpYNUWu4bMY0jwpOukx4P2Vz60Y
ynlT5N/6fHTsSTGkeVRU4bpOafgiMW5yXhVdSFI9YhjdggjOs6JIw66LAhub
8av+X94VjR8edHjOdzFmcB4WnQ6tiov0a4E0L4syg2V+JJxvhSfnadHQaGf1
e1YtkOZtkcseydFQV4yBnMdFXu2pFxudW7GS87roZ3pkfVq9ZP3gPC/K3Nk/
+fX+VoRx3hcZjBnzeMwEMaR5YPTZdfaJTsIWOHNeGB38Dzd3qrVCh/PE6NTR
97NiH4qRynljVHT2cm4fyXw9xHlk1Pp60M073VohzSujHbmrQ/suF8OT88zo
2sfS1ePaWiHNOyP1L3viP55rRRHnoVHbyrv3h0v2s9Ocl0b25+NssyTrkzRP
jf4Eza+v3t0Cf85bI6XCzlfEXcWQ5rGR+YHm9tRUMWo5r4188+Ny/1NqgS3n
udEa+XMHoyXnHWneGw3fp7G80liMMM6DI82XqXfs+7VCmhdHa4ef0l15V7Ke
cZ4cXSWbgNSqVkjz5mi2ys65hpL1azLn0VHQix+Dr+8SI5nz6mjG8+AdWW1i
SPPsSNYsbcela2J057w7Ovb11n3riFZI8/DI2iH8/IaubdDjvDwyK5VtPH5H
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{524.7999999999997, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.9633157200640128`, 
   1.9633157200640121`}, {-1.5553331992805992`, 1.5558798943738372`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772814461911932*^9, 3.7728144670320024`*^9}, {
   3.7728150422658315`*^9, 3.772815056560614*^9}, 3.772881660484823*^9, 
   3.7728817308389907`*^9, {3.772980431215993*^9, 3.772980435794736*^9}, 
   3.77298147334299*^9, 3.7729815064903617`*^9, 3.772981540251092*^9, 
   3.772982397182037*^9, 3.772982556340479*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"44b41d22-fb11-45f4-b5a2-31d877574e6f"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "data"}]}], "Input",ExpressionUUID->"d6ef9274-ddef-\
4c5d-80f4-c039dbdf6b8a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Circles dataset", "Subsection",
 CellChangeTimes->{{3.7729817128894916`*^9, 
  3.7729817151863847`*^9}},ExpressionUUID->"6b2657a6-e234-497a-ac67-\
6a8995513b9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", "6000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noise", "=", "0.05"}], ";"}]}], "Input",
 CellChangeTimes->{{3.77298860143451*^9, 3.7729886019360065`*^9}, {
  3.772989177048662*^9, 3.772989234416888*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"01225747-25fc-49f6-b181-1efb08f6ab92"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rawdata", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ReIm", "[", 
         RowBox[{
          FractionBox["1", "2"], 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"\[ImaginaryI]", " ", "x"}]]}], "]"}], "+", 
        RowBox[{"RandomReal", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "noise"}], ",", "noise"}], "}"}], ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", 
         RowBox[{"2", "\[Pi]"}], ",", 
         FractionBox[
          RowBox[{"2", "\[Pi]"}], 
          RowBox[{"points", "-", "1"}]]}], "}"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ReIm", "[", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"\[ImaginaryI]", " ", "x"}]], "]"}], "+", 
        RowBox[{"RandomReal", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "noise"}], ",", "noise"}], "}"}], ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", 
         RowBox[{"2", "\[Pi]"}], ",", 
         FractionBox[
          RowBox[{"2", "\[Pi]"}], 
          RowBox[{"points", "-", "1"}]]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7729817270905247`*^9, 3.772981762898815*^9}, {
   3.772981804814736*^9, 3.77298184974158*^9}, {3.772981879898945*^9, 
   3.772981937920809*^9}, {3.7729819787765656`*^9, 3.772981995606598*^9}, {
   3.7729820358878946`*^9, 3.772982039576032*^9}, {3.7729824052554493`*^9, 
   3.772982515174549*^9}, 3.772983260684085*^9, {3.7729834971132407`*^9, 
   3.7729835170488443`*^9}, {3.7729883334474993`*^9, 3.772988339958112*^9}, 
   3.772988456973641*^9, {3.7729885490608454`*^9, 3.772988590749866*^9}, 
   3.772988768714817*^9, {3.7729891974088984`*^9, 3.7729891997301755`*^9}, {
   3.7729892591725297`*^9, 3.772989275471272*^9}, {3.7741946438095474`*^9, 
   3.7741946644470177`*^9}, {3.7741976550539145`*^9, 
   3.7741976603062053`*^9}, {3.7746385599076385`*^9, 3.7746385603759017`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"51be7a05-f3a5-4198-abb8-12e35b0a5a82"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
Y2U0G8srnD3PfmMieKrl8lnTuZB7eszMg/hqa8Ll4t+32TDm1j+0+0PF3hc0
7fBrTJxpsY22+kfHrQu58R8JvjaNv160jfBW+WS/1rybTJxesXvugxwmDls2
qMY20RFyKiVgcxYbp0966grOMNG7aKHXujHyufBsrkwdHQ4vBpR8KHScTHs8
V+0uF1euqMyun8fGZGLT68ZtbOR9mZP1bx8DpqFCy7WlDOg3WGwuD6BB5WZX
98R90u/6B9aq3yHna032cZtP+FrhY/Wd5BreZLV9AsnRoS1/k+dw2HhSv9WK
lc5Ekd1IEGcXG2eeH5tpYctF0ZRhU0vCX63+4UfF0gxMbvz5rIXMVfk/KfON
VUTXWmYeXnidjTu/V/hfD2Vh4LqydlwZg/TOE4Z5K1lgM+vTth2mQ7NGdy+r
g4F9lHvnWR1MhGVGVavtIJ+LvvnAzJP0mYMCni3hg6siKyt6KxM/V3QtVxBj
4eW09Ojbj1igzbv8PO81C1ary8q0k1hYmP9x+JAdE/dffbpGd2dAYtm6ClMm
HZEKS9iupgxQqyiLNpP8eutKxTuWNPGXyQpPzVoGnmT6/1zhx8TslhCMP2Qh
/W9siwqfhlTuqQZmLAtTGdFzfn5kojYo8sCCP1zIamTddSN6Fp0mYfY+m+QI
iyNZJy8yoWc1s+GGFsGNh+KkO4uBCHMny8PiPGyX6zHS2UjDrCyXJ5dWczBv
fhzf8jEVRy+5x3e2MeH/x/tOmh0b2nb7J7vXMhGn4t0mMqJhVeLopjJ7Jgwf
7qw5zmWCvWbJC0OCs6PSn7+bE53Mi+vi/hnjYvfS2f+9vkN838HhXvFNFvpW
X3px+wMTnzxerM62YsL0h4l3NdGd1ZXXQ7h1pFfLKB2ZzqVBra4w7J0nB0Nn
KPjSSkUjbePymNVMBMlZ3vqWQsPPi5eYji5cnH7f43GD7DH2/FG5u4u58C9t
fb39KwvnFmV+NW1lQVrz9lslcRrije7tKSC6+3nuiPm+o3S4n2z6u+IZB8O+
Dy9pf2GhtnFqSPpqHn7umEK1lmHA/HvRm/g0LoKaM5J/uLOwp+v0dft/RD9k
11pFbaPC2Nvjbul+JhatdV3SSnLpta+zjp0vY2M/X75p1loqrOplxXn7SK4Z
nfhCIznYYanCnko5FtQUOmxLSQ6YpyU1hfKNBdfg4VU1nQMQM52/bcs4F5OL
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
uXvNi4pt7Xg7ReJejBwbXntwPs+/HU8/ec5YI03Ot+jHBqXBTpx4vnRpXQAL
J+9vVn27iAqnN94cBQ02nky/6Bgs3o4YQ7mTpvkcfBsynu36i4LpE61v2F/I
fsM+2PpWvBUZztaJmwU8sIXDj69z2/Dxi0H996tcGJ9PaZ3yXzt2rJ6+f8ss
LjICqn8eYXSg8rfUB1N7AZTfj/76nECF65qFm6X+///Dp7wcfCbfiR/bYwPK
pgpw0zLKuViKiu5sriovlYvx14fYSr87cePKivGOvXzEyFLGdZNaoDHFRWJY
nY+jF1JaxUZaUHfz14epOgIcrbNb4B7fjqUd3IKsGzy03glJLQzrRMnAibhq
JgdvemQN1zxvRWHn1VtlfWycPu+y6eP5dtQ6aNCCd3EwrmP3aLyEBvsP27wO
kXzcWJJwO7KECiv4hhxYxUb/xZrTNtNo+FKyQ+lUMtF7z/7tOzPbUclcxZZQ
4qB9j9/U0MVUbM3PF/u0lYcZ9am91qspeLrDuOIGyZ8fvFktVgU0WK4KVd2x
mo3N/3w3tV2hYI695ouOZRx82vmwL2RdO0oXXy9wr2WBMmzRc+d1J1pXaFNf
7+IhmjflzfGUVlDGbsrZ23OQYRxyJjCdCrdvRyqnTvJgv8inZPWpDqzrMFqw
m85Hp6b0h7iVNOweTlq+yJOcv6eBUyZLxba2NNdFBjyUXrg4SptGh8nib2F8
Vx4+GSz6sUajA+wDRYpRqRw0Sro3H9hGgfjS+acfiXMQVUg7wpDthNsqbTvt
9WxIi8151budBo2LbmPSa1n4vVXu45Rr7eBuqFf13chDZfGyovM3yDyaKw3f
7WZhR9C/wOyTdOSfCplyoo0Dme6489MqWtFafbFkxmo+cqXXRK6LoaKE+e0m
v6UL7rw22aogOiqSxzxb97GRPS6799tkK1L0Vja/UeFgzq0mq1jrNsxtEKwO
tP7/9y08O254lQrJse07n9WwMBL56uZxGSre6CXsvHGHg/cdd6Z1PWvH4upY
qYAmFlgDu62fNbZD/7jY0s+hPBw2vXQnzr4D4hNZh7LOkHmajF4c1NmJA6ZR
i6au4OPIt9pE2cXEz5/bDcjrcCHteWCXdyAVU3gx203SeLBZ3GjwbGY7Hm13
uRVfwEf4b9cw8w1ULM2KWz1mxgfVYluufAcFvED+8/WzWMj9cSQs62YbeIt/
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
R91FO4l/3jXkL99D6nffK9F3iagLYq+8hjOpHEjIfHtTeqQLbuf0X5v0MjDo
xG89rkd8amOU9OLBLvz5FHRa2MZEs4/25SvtTJzkPz945x3xq8PHHt74x0bA
aPuEKJYKseiLcd7WXXi/3eaX+Hly/pFH8nU/6NB58OzLW3kG5GW+v7cZYCKy
Wwb9dVSEVu/0dDrTBTOLqVnX3lEhetpwbelHNtZfdg+zoDIwp8+hNkWai0ZL
HaHDMxoi8wqfC09yoJJ30Zpzj4Zdvzf5n7NiIqGuuu7obSZmWi/UHSU63fHq
xiFfwn8UOs9Tj0L22d93pwcR3rq29+DynbYMDMUs2iZzlNzziXkgK5RJOHe/
+S5j0qe9apwdq1jQm0Z98vYkFamvEt2rmeT+3b9fjS1j4mLx6K/c2V1kfnwn
1P+RfmYf1XC+xMauVeGyAj8a7vN3Vf61YsFNZnJWDamjjqOn1l1fJuKPnT73
51sXKkwkfR6cZIJqptfrtIQG3dZtYw5fWAhb4LpbX4KF/lf+qbrEP43HF4tb
JZMcSLPq0ErogmHXpJT1fcJ9vSlu0a/oUHGz7LUpYiGt5co+R7JPDT47f76R
8KWE4NSmS7kMuL50GLa/S4fl+aaS42lMfNOQ2WNo2YWLmScXihNfWvmdV2iR
S0XHs2T3JUfYSNM7WPhBnAalrn9K5z27kOvhtnieZhdu/vZ/vjCT+KL46Hbr
PjrWaKstOmnRBednKQ/WfejCp9KqsGNv2ZhyMvN5+ecuHMupGjleRfw5uHaX
whgLnh3m154KyPuNNry9Y8mEmKnpoNFqDqLXn5y3l/x8df+6XWXzWFDSTpHX
2kM4y+zz/P+eM1C9583sM/JswoPqJ80WchCTrXB73mXCeRNa1Dlz6fi2JoF6
RYmNI7Q53ofNmHhlnDXEJ/VNMo14vjGYzKvIFduXduHH9Mg9iiYsFF96lMPY
zYCiTvPw1cNsVC3LfD52m3BNQ/jwso1s3H74/TjNkI1Z2ybXpLcw4efe+jgm
jo6SLwqPL85mQjni39q0GCZUaV8e97gzMEvXNa5qNcnny0Y6lcSH5yprVq2Q
YmOHp63DkqYuRF6evHo3kYG4L2PZH+4Sf/iZFbszjY53z3NcgnLZGJ8Ud19L
/Om4cIWT8AYdyi/ftT5JZIHxpOpXrzID5icdTtZ+o6Nl+FvuWAQbFmYp0ftJ
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
jd/vGm1Eq9oQn/fKzJLwj+YFo/nDxL/bi3gyDofJfDq6+UfJUCCf3lr8jPhV
9vOPKmdSOtHrugXbogl/lG768VWDAjWnGeKLjHkwv3+Muc6vAYen/+peViDA
PIkWDi2lHYNTC80cyPtTug3mDhOeOryvvDEhl+yPySYyIWVt2PjaLTmf9HNJ
71rGyNIGFMzyy7Ty5+Np4amCf7/rIbC44u1QxkWppJuh0t4GPI9Tl6op48A8
4MzftW8boLcjndZ4RIDEiKk5n3mN0LKKrtFewYeV9tJcI5UODAT+kmiYy4Fg
/zUtb/dOrDgd9qmqko1byCvbIt4Cz55dQVtm83AyVnXht+kUXFyUfiFluRDx
DgFKxXPbcH1H3rHUCB7ClQXD0Wtb8Srj9k0jgQCbK09JK4oo2CjZf63qBvHP
0XWt8uJNOHsp+dTCLxw8+PY5JFK7AUn1H/h3Z/IQe2pT6iKLZhQ7pR9Sa+Uh
QmzJninLyfm/eu9jLxbCRd/WgEb0VtAFa6dNHLwOKTWadaMZRg1C2ej5QsS0
+lnMtm7HnivPrDJ3c1Gmvt8y0bQV7iZJV6zbBJjzb5dbk38b7NVXJ2deF6JM
w+xB7/46uO3IFzs5ygctcPfGhAtthGs1dB+c55A9Zu77JQPNuFfd4PX/f6f9
aad2UWh3B4KZNjfZjUI0NBaorkmhQNnIr3b5KAf3/6WINr/pgNm+yO0ikhfr
xfJWWJDXn5rcZ65sZSN7dGi8IISCpCfTTMI+8ZE3U8ddk9qCLxtfC8tu83DF
c4OJnEM9lj25Lf9uuxBnxK757iolfqP6wlzNRIibrkFhxUc74Oq7Y7teKh8J
dXsmF94g+rLf3lS1V4AtvIrjc7rr8Ee2+lX1CyF6LLsTu9zr8cL5cmnBBwGC
EhrmGYt3QEHlSO6JKTwkP1GhHNFoQ7uGvM1YpQAL/MbnWto0ocnNRK3nE/GL
g5OUne2NkJ9bZ2nXwMPO8vcvpBxqUSYjVvr0IAfrv8S30x62wZv35tN1MS4W
9ehzjwe3IcY6LW+tDRev710pK3tThzdB1RlspgA3g9R1qn+2wHZq3RYtCrn/
Tw/jC+n1sNk0I2ePggiVrWJf51bWYuR5+a7SKh5ct2lJdrbUINvvidu6f1wk
zuYvsQ9vgKXDkGxQFxetEawzFQvIPB6Y+zzMQIgBdyMP4fpmUN8fFt34wMXi
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
KuWPxdCtWlDyVRSeOBNe1vW5GMvIA2eRwpuFRM+ONXa721xr4Hmdm/roOh+u
qvdfn9PPg7HZcdv4pUIMnl06i6pcgdDSJod5hN/ETTLnT52ai0aJwbkcXRGm
Bzi7vbbIR25UtFW+xnvo0K8Em5D+bxczUflnJsDJ+7zzjomV0DMNvla8jwfT
DXr7sp8Uo2x0ztBp3v8oOu9wLN83jEtSyU5RSRqiQUtS4aKpaH6RzFBKtiRJ
yCYkSUglO3vvXPbe3umdJKlUyEqq3/P706Hy3Pd1Xuf5OQ9H78PBUxFqOo81
8/Go2WKRWwgLe6KU2+/1VmBUwlmntEA2Ts+zHfbLl+AaZnQL+zwX8xUNH37u
bUDpJWVnZwe4mPNSysp27D0a7z5kY0rwkVhKpk9ffilWKf7x01bkoojWm+V5
hhUITtFTpv+4uN1VTfhtYh1ukrtRFXZ4CIs/kKzd52rR/c2KpiCCj6s5X98+
88/DuqbLSF7FQd+Fv2+yzjbgddfztELi/KWXt9TdSC1GVUmxPd+7ODh9ofmg
zoo8tHRxd172i4ukwdNhYipZ6E/6Zh3CP4TTe7cez4kvxYhX64oWRIbw1OUQ
9Um3QjSseLb332oOBqwMfXlsaRVmtjC9LNKJfrvl+naFgkrsbqatlRZh40He
vdUxa+sw2+q+82k/NppU6T6cCsjG79+/+6nGcHExcMpXY4aY52pvUtYUF71f
6B8X4hRi5ifflNxCLjYf0Nv3srUWn27KCllN9HHL4de72gl/Gb89O3f9CAfV
Psg1c68ivqxOPtH2iovPVX6abE8rwNhunpmjd7jYcuru1dNuFajyM7h2pJGD
E8nNP3Wu1WBF4WLIdCob/+s1DtxbWIR3Ticu7ZdkY/YycdtzKzLQU+/qZrVK
Dv64rLiOv7MWbe3Wh2jpsdHxw2reO7UleIH/lUuyHxfXD0wWLJ/Jwo5Zc0Gj
G1xM+O9H/6/+ArxazKv3Q4yNIwX0O7feFGA13w/jXz4cPH/rfWXVgSLk6phV
oyEH97uKVzAPZ2PHUgUXeWsWtnzj26ZJLsCvyXamM884WEV7cUw7vwTfPehw
X3NyCEW/FVgnL6Tjhbs21BR9FtY0bFTMDKvGlR8Wx96z2GgglnZuNL8Y3TSX
nSpfx8G0D3OeNFoR7qyJYvGNsTD9rO2ZVTHl+F5U1LvVi+AV3pI9cpa16KBk
DSufsfFIwrWFO11FGMaUeB5vxkVmr5nQI1IRuu3e/ujRGw4+szilHa2JSHuy
5OcYHxdTCjT/Th1MxStteS32TBbyn/O/cMu5CKXre1dyvVhYJPvntuiBGpxh
561zuMJCr31Pp1TFq/FO8tELX02GkFf+ksT8yQLUk2q6t4XIw9/h/JEWoWXI
d3LHmT3E/MwcvKaWiiXi7jGTr03rhvDNp0zL9rFCTDrMcC1cZOOWnG1hg26J
ODG6WzRkLRdDfvqG03yKUTCiYlnCL0KPVoUr3iVUo+PWghLVWRYqj210V75U
gXbfdJ51qHNx5GPzXoEdpej5QcWBcZ+LmWIqyeHrstBsm/3tB9eIvrC3XGl7
Uzm2hklq/ibySvmJyvn7yu/wMbkjcr08F6OumK213laEH7tVDszSuJhYv/S1
mEc8SiSUPzkbwsZbNdy2ccPX+EXscHx8NAcvxpc6mWUWYOGTtw3Tz7nocHyY
XlT9DpsUFoM0Vg3hXPsh6d0X89GJOZ6l50Ps44Xxa/ppr1Dz1BldoT1sDLhk
rZI1XoRSLodf6F7noiH/VuaPFZVYfeFooxSx/5EjMh65P1+izYqXosuXsdB3
Z8D6PZl5eFfoflgtMS/1LJfVo9fLMTLtX6i7Lxfnz1VlknJSUEbTAoMmWPjm
5zpRr/xyDNzaLRHHIvwkyTDRTyYZXw2u17jBYKGCloDWO99UdDnYfiCZw0JD
F3/GF/ZblBpbpZlJ+Mfrbm39FU0V6HQlw3axh9DHWEZ1xelktFRycxQN4uK1
ZMpjvx9ZSPE9H1vE/v/n6FZ029qUoiDVVXrVXTYyYkjHXGZLMVJut2/BLi7q
JvVo8FLyMXhUs3pLPAezH3PPbXgbjwoulX93VhH5MXO1elN3Kqat0bh1gODj
OLPIW54p+Rh9cXHuuAAXI3J0LI5+qEKxgPFn7pdY2PyrzE55Ux76bdUd+//n
4AkztAYu0jNw0TnI089jCCMUso3Opldh8XBw4nHCv19HrRXOmC/EqOhHcUuJ
PpUybmXmf/MNXh94u12ono1twyUvEre+xStX5mWthYeQb7RW0Zvsi+cV105u
aSf60tKATdt/l6KVjRlVfgsXV9ib3GxgPsZtu8mfL4lxUKEw4Nkd11Is/das
uqDAwpsfR17dCyrE/G8i/IqnOKhXvKCnXPgWE9p7f/bc5OL0K7/c6v/eoI7B
yQs7RIj5RPqzvpJysd7l20Eg9JhVOFcusy0L23df23V/Nxfb112vuQ6RSBn+
pVFO/H31iRemjBsp+PH3WkE1FRautt0Z+lM5Aw1PvuDZOs1Ch29u9kl60Ujb
7CFZLzCE4rEX9199WYxvzV2F//3h4g2paqvx8Szs1KZYv2Ax0ewTtTd2sQhp
Dd0bvaNYCEcCXCKCC3DhzfCvXk0Wxl4WPGr1IQ69Xpi3G48TfDO2wc8k3QlP
BGw0yrAh8jnnek+GagwuCZ2ibZcZQp+gtXc32BuBrkIZuSeVhVLmvwqS44PR
TDNSykiKhQz/QZmcH8WYrNA3n/+JiWHII5Nl4o+u0XOGxk1czJspr+X1yUWq
+9YxLeK+eZtOnP6THYfWR2eHtksNYdTVIr0Tz4oxXvdLn94jDlZ7dVxKpkXh
swMsCQ+CF4+4hG7uMkrB9yQRrWlxIl9X1fA58uThkf0D70ZEWSiTWfiDFELw
w3vWnmsdxH63ZNAPNb/AjUt/H/9M7O/WeruXLfbFuHGmxVaEzEQFJ5K+53Un
FAw9mvB5OwuP6f+mpQWXYHNYu6e1OnE/p9+pJXp6gGVRzpXXRN5LyIwsbF2T
i6MlhZqPdhE/n5Wcaro7CT8/Uro7voyNn6LFHyrM5aJ7ofj+FD2iX8k8zHj9
wxfTtM/+8dpA9JPNQ+a1LHs45hiaJxsyhDu/zO3uORmHzzYLPEnVZaEg3x9O
ue4TDHUkBVIluGgiaPupR7gQfZ9+Tdw/wcSt48oz2uvycPfLZ/+SCf7f6cD0
2PgnAX9J3VWYZBD6NSyoTZfNx03klQkN9UycNM36KXk7D2VdLe3bCD3YFpYm
/tpUjGrFTOrkE8LfucORaWrRWN3wh33xIAvddX48p+xIwGKpmeXOy7k4Gar4
plw+Bidvvk4zJfjRvUr97h9pS+QD8ZuSxPyi7zY6OBonomPFqqDJSSKP8rYK
3Hn9EIPPXF/d28dE2cpzFgPyJqgxJnLz3AkOvlk1zN/LE4ssgw39V4n7iHPi
dWyjFaKrSOJ3jgsLefQUQpw+JhN8bZK1KDSEjp9UhTO9clGNUdl6z2IInSYy
R64IO4O08Y6TXgSfXf6g3cvzMQWLmlP21xH8OqH1XGJUzheHWztsLPwJf+FZ
U3TO8jEss8icfkb0oX9GlUeinhSg9bmM1pHPXLT2pW46YRoCRu+CU7aqs/Gp
iRZXrC6f4NcFbjiHjT9ym2hDR5IxleK0+fP/P1fQU3XlznuBqFStl2/jwUZN
07e/FGUC8OPTSv+tBN8cbV91bXzzC1C7ChYxPkOoaX664WVjOn4frugXfsfF
8K8Fps+vZeGzZ4oeJUS/FhgSX68km4oH2D8Oe8RwsLl9KlBaPAxHq01uVlE5
aD20xb/JMRyVi+THrb4S+d1ald946Tlc3iR8lrpA6Mlo6kh0pwOOHpOPV/rM
Ro+42P8M7BJh9pJ/iafNELqZL05lL83CT4x3y1M2DWEvr/+qsYh8vLVxfd+T
/7/nwFI9rtY/Hi7VnGjSlx7ClcsCU7a0PoIvouLcxd9c5FlqWnfAPAErftwf
co8ZwvQXlLXPlB7DeXfVBlui/0T/UPPzfeOLAh9jltvcI/j569P+Oy+T0DZA
6vmwKwsj6Ac7dAbu4vF5itsaMRb6bOi80r8hDoJU8y8tRBP8nrAvYyr5OVhG
nO3l3h/C8rIimVIhD3AxN3CyGuJgwdC93Nm/z4DH5JD6SisuiuZK/oiOiwTb
yrj4nfxsHCz6j/JzxB0Mdr3SOfqdiVwTUYu6wURM2/egrWeYi7FS509SWX6g
skOmzi+L6HOV2xR3FsaAwBJBbtjtIQzuT2QLbYlBZdc+gdbp/7/ncPXf8JxX
yH9ok5+jPRdz3/MxDkmEwEverR5zg1ystKvzvc9OBvfF9vZTJ1h4aLc5SWTH
PfwgpxVgFjdE+LXP7hzTRJiUTIvuW0Hwh/cHeqViKNiOSDrPveGigmbzmVKr
FDQrz/yasJyDPkV8qQei3sIzYZPZqKtE3s+N7L3nnAZlWpTqXoJH7AvTVc6/
TgETUH38aQkXZ0z7vb++ewl7zfN5ls+xcfLTXLDNbCj+53st6M87Qq8HMgUy
twcB1/jkEnkXQp8KIkJnLdLBQ1qJhyrLRbpEyVx8TiIed+nanmXMRn+svyi3
PQxlrgI3meCxr38Whqa90uCoueDF3/u4KP+UWxd3Jg3v02f9msOHMCN/9YEG
uX0oamDaLCxA8POVudScXymQk6n7J6SHjW/WkxPdF1+Ar6pWjXIt4U8an1ub
TtrDrXd5EaRmFoomDB82HbgGSbBNckMwGzvHBxbGA5PxtEy05dO3XHzY6XPV
kf0UneqT7/qpDGF+olXX/k4XmJQOq9Ij7o8nuJ/DXf8MLwvP+w2MszCmPnZe
SPsVvFQ9yOv8lYODvTVsBbFkTHlmrTZzbAifqQuY3olNhOuK9XZVVmxU7M3U
+tqWiBnvLFesPsTGtaW6oWs7H+AYj1282gwHj7wWzRX78AY3n2rIuG3PwuOX
m4XeCmVCuVnzbGQZCz1WBFwwuuqOmvOtE9UEfzGzwzTF1j7FcNLK2hiCt95/
+SBoqOMPeodz8xRqWZiZaBMmb5gDvttzJceCOLiaw3YsfpAI8TuuSvkRfVPU
ZmbDw5kX4BGdi9+Ai/yGpZs/no3BkuI855VT/38vh9Te4dXvgLCIzAPOBN/V
LNXs7LEHF7+hmuAeIq/Q+zXZNA9Mbo7UxRB5lrBe+5ZacjB0ifnH/tEneEB/
5xK/1XF4TvCUusFvJqpVT794GfUcbg26Xv+6hLjf76rKnPOvYUt/mLmvDgcX
SWWsoxZxuER2U0zrOBNtPtpHn26KhJ7kVrF1H9jokhH6agctFbT2TW9sXj6E
ao/K/j7QJuY/yDnGaWGh09kXUz8PXoXIb7er/+93ifuDFpqFE0E6g/x4gPAv
HnPeLbdSkyBGIipeOZiYZ7ucyurYzbAk7xvbpJngydBmUyv/RNjp83jTBXNi
Xx750j0c8sBgu+rV+JVc/B5iJ1/KkwrfzT2vsHqYuCU870y5bCbwLn+L00T+
xN6Uu2eU544m6bT7o4Re91aE6O7/7I4TAupGmkw2TkjtV/69Jh1MLjgdTe9k
Y23Duj1vu2wh6YLK6wNFLJw6o9YcUp0Mjqt/PP/Dw8bIX5/ZJbVuqHlu3HN9
xBB220fEryPu12JoWML2Ehe7PK+eu5RUAJqnjE4MnOGgXa4jNaXmEaZbz2x/
LDGEiQv3Lp9/mgatLwy+/wYOjj7ffDxHKwMiX2Z8iyd4hMbd0WxxOQbGApOW
0Yl8HGedPmUZEwv3DuJ+p37CX9t0nodHFYCOoZR09t0hlEoo/+5y4RHI2s9M
Zxxk4+6VX9Q1dfzw3I80/n5XDvK2Xwxt+/oC+J1fVAbbDmH89WbD0vNR4Bl0
fV9rCBdV0fq4T+Z93Fmb5RYozcV9lyLEaKI5MF61uhYI/mQauG3+u8sHPwjl
lXmfHsKzF8eO6MSmw4e1fyL8CR53r1k1PVr/DBSfvaOEEvvsOLS+WulhLkRy
Yw/dX89Ga1Odh1q/SuB1qJbOnc2EHt7dvv1K3RP1Am96mnkPoao5Fq/7ngBH
6R0S2mwmOqxMTstdzASZpl7SPwU27nz3qi3Quxj2fXN7HzjDxeYMn5gbMhlA
Vjm2dEUnF7e12QXLRbyDJR89WjcRzys61/PPptYR66zEde38hjCwf2hiKiUW
TEIcaoxqCD61Zy75/SkUmnUfRcvo//+9dPbzl569A5PNc0aLFUTeSvJ93aZb
AJH9m8jfizmodnXpz97eIHgZXOtVFM5B56ur7o50p4DwreGLd/SJfn+A/5HX
4D1o67x6/PU/gpeAKmkkkguTN3d43SP6cv5lVYEjw3fA6dz8RscbQ9iaoeh2
OTAAlj948ICtwUVxF73lv7uz4Hy09X4gvm/2LUKzjlsGbfdrve5946KafeeZ
/N9Z0HjKd+Wi6RDKdt7quOhbAq0NNaVXDQge4H+ZnypbDgU2ayKbt3OxqGKw
339NJnyIeN4huXoIPUYnHi+nP4clFQeeCDWwcM6ywtFifyKsXxl6JujgEA4o
PdbkJxcCh0S/L9HLwQ+Bh/XXyyfBiVEpL0GCH30Efp54vdUDRvfGdgjQmbhJ
4I33odwKuL6oLpiZS/Sz2S3k23z5YGaeKDZ+dQj7Px7+8Fq4ADLOxkTeyebi
bQUPTeZkGbwr9PNtdGBhiqr0vum9FfCcb4PS33YmKl0ZCt8wng8LvbsVp4+z
sPYvqbvHPQtYM1XHLeWH8KCCu+7v54XAc1WgaoUsB50kXD+LTsTAar3jR8rj
uOibMf2kx6kU1qoHPeT7ycXh9qTb5ZGRsEVSPkY/jugbRxRH/n7zhcQZl/Ay
gqdNth410bpXBO1R9f/1SnFQlG0b2az3FGyEGZdGKVz8Jfx9SdxcGsT8533o
tDALo/WGH5iOJMK8jJr+lDQb3+9TWql0KhPEPVIkigjeGf1w80tkShnMbH56
yU6S4I/L1OaTRZUQY/Tn5swcF5Mkl0cmGxXD1uff33muGMLhm5LKfmYZEGGW
kBiSxEHXn/GLpI4KkDmokd7syEFKL09XgXUaONxbJz2UzsWQs4JCW4yLwHpF
IdwMY6Ij87+ODXn5ECj4ZO7+exaGUUr0ks7lQPJpuxfbiPmXXmHyqJW9h/UX
lW2VAgj+KrDws4srhrGXchmxRD/xFzXSLJyLAhnyt8DbKmz03bVb48byMmhX
cLlwexvRF8bo9S2UTBCY3ia7R5PwF2WD2+5db6F0603dXOJ5tvOmelGfJ0HW
lW3V2gSPkyWvzxW8zIdF6X+Pp4h+7y63U6dENgXuXyo+7r5zCH2//FF010+H
67+/XOQ6sbB+h8uZ6qk8CHxxfXo5g4nCfq2mBR5VUGh8gKFN3I/ajeTMWxvy
YUv4RiMR2SHkbr2undkXBzr3Gt3DiX5sfGi1/g/7ShAtOsIofk7wQkNT8dC1
eLioNysnMMLFeOWYKVP7PNDA5/THAoQ/FY4lb9RAmDnF9zOgkfjaKKthrrgG
RltSVC9f5qJyHCVEZmUNxKjbj4+asNC+aGx1wUkE+xqB8uzVXDxd4rcqXr8Q
VrwZt0y7y0IWPJze0fcetkzjP4kdXHy9+smOyYtv4QhjcYyjNYTeae+kV4dV
wSqP37/HmQSPuxilPteqhXnnVn7rJ1x0GVHZ17s9Dy5pzrIFib5i2brB4OR8
GlwW3kFKEuZi7UzmNKs6FQ4c6jxvo0r4A3/RwZN382FJ2YxnbAwXty78EO8J
KQdd3sWZfa5cbHts0VDdWwrSgQblFc4cVL8/WGI6VgmlDQ1K6m+I/JfZdG3B
pxJufTy4T/knB7lVyWt6/ssAbtbzOIsgLsosE7MvN6uFxMQda3sEufjpyLL7
/3TLoO6lchXTiYm75HfI0tfUgtHKygC/VVxMMJ86E9tXAil+dLuaZg6mOlsq
TXpVwzWdEO+kfiZq5l/MXj+eC0v+BUfuNWGjidcJs7W6KTCiVvne/ScLRfQM
0nof1QJd6U9XWT4X/Xmpm13V62BvwpPZ//dLzYfex/s5pXBMojhjnvBjadrD
/NojJXCevMTkC/8Q/iceZ+1w5D1c0l2vKxTFxNOq+pdJnyrgLt9H7096LFxw
1/ep21APp3KT39oR/cJIqizP3ikbZuSvHwqSI3hi/5BEem4d3OnV6hEb5GBE
/K/ye1PvYMVW98MhJ5j44MjrrFX0EjggrhPn3cbFnCW2/yUwC0BGvEfJeyML
aY8VUlqi8iCS1W6yL4uL9eTg3dET+SAx4ppaTvhloPHYLYE370A1zXA3z/Yh
VOcqCNiZFsL2xjNLhrgsrFO+klRsVAqTW1PtDhP6gW0H6eNrC0CgZYIn4hUT
SevPrjlGyoAdRe2vPbYRPL9kJv22WRl8K7uooUv052m5tf+4EyWw/2ynmxXh
V08eIP9Vvno4ps9p5n/OQY09r77+volw6GjIYReij4hPSRWfVi2FlRXym28S
vExhK3Wur6qCYqds5Evg4Jqn9bNntxdBUdCY8DdHJt5fLduSaVwDvKbT1QzC
X2K2vnpXrV8FDuQ2la+qTJwKM38jEloGo0csLryxY6Low/vxXHY+ZE6+9WAq
sVHlXvm1vpgKCDSNyu0k+OLpTNM73+/VYJ+zcihei4t7+c4uDfhXAwF8VVVH
vbk4W6Jt6P43G24U8szNZhL9wJo7G3c5B+Zz2y/fVeKiEjvfQepAHUgwbEpv
fSZ4N/W9ea96JewXfS1aE0nwhV7f7H9Xa+Fy6O7FpwS/FLasWrErohR44rUn
DB+zMEu+4EXGk3ooGZw8nPCFiwfvCgXyj9SBf2VZ2P1kLr44KmtwKqgWik/v
fP23kI2qkn8r1Vvywac7pufiajaa3W76GPu7DC6FDaib8nNQ6upHiydheaA1
uWwJq4ONp7LrDm1IroWd0+FbthHzVzj88a90Vz18EzrKeu/BJvxNzbahshis
BbaKDsex0XHNBNm/Ph80p/KWphF9Y7f5BbsjTo1wnLyJx8ifyCtBkbWnVYnz
5AZwDhH964uCyKrH7+tAaE0OK0ZwCD13C/lSVN6DThgzlucVB2tvQd24Rj2c
kzcROjTIRI01ibfjIorBwIva8OEbEwt8s2q8ustgOjizd58CE/taBvgzf5ZC
8CkjxXphDpKC1grJNdeC5d6pJqV6Fh69u8tV7VET3G0f3Pf/96QqX3v5LmVl
LUTOG2i4H+XiGzXx/xoRYR7YjzcbcYl+aJ+se7ASGm+mO0jbslGyTmz4jXEh
UETQodOMg0tvq1ueWVEBAs/Vju8g+P2p0AblAoMiuL41PDTkExMzf6hdepxZ
Dzs/pftu2MBE/tWRYk4Ha6GrS2uJoCAbXw1suWqvXwkFxm6Z5WZcjDHo9buz
qgJWiDFg8jGRN4f+bksizv/9nr253C4OZpAGGnJvV8HVaJOm5USf8dPb9dGT
mP8mYSVFKXFCH2Ze50W+VcCttm3+yj3EPgjRigQtqmFotlowPpqNuVJKmvOc
Ili7rCxacRsLs0sdX85taYL1hktNebsZGNjx6OGnWwhHPJ4OnL7BxHei4t+3
b6iFJJJFot8cA4WuPdAfIvjI98tP+xo9Dh7ceU6TYdcMrr/jxG6Ls/CudcDP
nD/FQAknpYTdZuPfrVZZKwIawCT02ck2ou8cZsaHCJAaoP9DieaBCDZasjPH
P6x6DwaTrvqKFly0CzySMdCO8FRSUbX3Dgu1VXcviw+vAnfqXpVr6wm+WlkV
9U2yHpLs2N40GhejDDOOPyPm40JPFUwzZOLLs6Lq2odKQepbDp9LP+G/Re8D
ZeMbQU3QYqhWh4u2k8ZPd2lUQmzZ3UCfRg6arFno6mtpgik0nfzkyEKhitvv
DjoTepP68XU74Y8yQnnu9JAy6DSPUN8jzsS7Zzxn08tqYcqEJhIcT/iFwJb7
w4waoOSc7ctoZaNfgqm3XGEVpPt9bB7ksJHkNZX7mN0IDPELIgIEjz3ddXfd
1s4quJH1dp+jFxc9l3Hax0YaQLw6JcqI4EUupyPflV0LooLz62mmHJy/KUvb
l1IL1ZOhbuvqmPja2Xr87P1K2BqiHF3+nYuD/z3/cfdXPdRohhwbe8ZA5/Y2
hYOCleBp4xrmfo2D8c9XRhWENgNP7QTlWywLvQNerG6Na4XZRcNwznYOGhtV
6Ow1qIPIs5Zi9cDC0vsJe6wMGmDrxB+f1kEGns6ZlpmwbYbM+o32UduYODz1
E/3Uq6GFX8tuFS8TnUJHKRviK8FV/x1fjRsTJfYXPxfoKYcX/fMFpT8ZmJYd
IR/X0wBpz2wmbOS5eOXV2r9r1ZtA+M/4Q78swt9U62faxGvhYBfJzrGcg/s+
v3GtDWuBqCOZ/LzfWdg9IWhBWd8KevWMESlVNvr/jEidTkXQXzWTcqeXi8+8
gy1vz9ZDy41zRo+oXESRNxQt4QYY233ygn8BF0ONznwceY3QWhrXfTuDg505
fSJ6znXw9ulgvVY7A3M8Qvy7LZvAoTPaVv0WwZcnVx8ubGgEfmMdT8NxBk7+
8K6fUauDBC0N95ocLt65DCJVOY2gGMN/92gF0S9j7K9y99RBNUtM8CHBF3eK
03q8uY2glB2BNBkOdjvi1uID76Fjn4uLE4mBnpsrd93aXA/jq6INRAleuuJq
nnJNEmHR7cYyO6IvCWpfkTrIaABrgwHPA9lMFOBPk3iYUQ3je5LC5gy46CF3
9GGzeBOM0DY8Eq7kYrHclUcOJi2w9il81i3hoondoWq3e81wyiV99NNKLqbb
rdm2e6EZTAI338z/xcTQm23HRO7VwKqVnPfbCF5IpNZKTenXAqn7h373KAMl
kzt4ei1qQCyokk/DlYFqZFW5JT6EX//peR1sxcbFXdAUXdICdnN7Mw5sIvTv
XGWU+KUawv6LeBPgwkbbxRYnilQTbPTnNBT/ZmPywqyDmXg7XKuUWiU+zsZr
RYIlzjebYGfAe90LUwz80EnXfqFSBxskBnb3+XExcqWNm711C2h9/PV9epqJ
koP1zvNRCGcLWJIqiWxMMJCXXy7VAL+7906uJvL+jYKcmIpCMzhQwvbPEf5+
flZ82e2dTRA2K9jEb8nF3YYbhG8/6ACjLbmegaNMPC4mb7HWoRnemHnVPtjB
QGtGSGNyVD30pnstHylg4MEYh+fzTh0QZ//LsPYVA3PHRL6uk0aINvwjrKTA
xUvi0vupWU0wODC4r/4jAz9T/PWezDXBO/EWM3oiF9PST/gqaDXDbj5nrwNh
HPSeL/8sHFoPpVqdh+oIXmRvvF8p9KQR8rem+jkQfPcz9kRg/fUWaJVtvmIg
x0Sd2wYJ/e8Rrv/Tl5XezkLrWLn/PGtrwWzISW/ZeSaecT3WOKDaARu9uCeV
ifviC5RCubX1kH+NHhTOx8GTlV9M6vhbwFrm3p0oQl9fZdx/G79ugOzalKMv
aRwMkX8DK9pa4JXf4Xb6SS4uL+P97++2RuBeTL3I0uZiB+/Fpe9/doB/TCRb
foaN5x7c3dm5uQ4y4so+q35h4rztnMAoswk+Jd9SEiD65+m0v5IWN4j7P68k
+qSTjafLpLczaY1gJewcMVYziKWv1XnqBxqhIintxpLvTFRea/n+ugeRBxJ8
Z6MI/Rw25tsWxmyHpi0lY2uJPvBK0H0ov64dHpfZG97uGMTdF8TW2AZ2wK35
O4YpAxzcv1MJLcQ6wKX3T1yaIhNpb85dKbCuB+4x/6TDoWy8f3RNmhuVmHcE
aXPxBQ5aqdHHfFxb4NSmgQeh7mz0llHZln6jBfKtlipHbmXhls2pE7S0BiiH
IP2TBSz0/1WWeC2lFXq/rJaKI/qmxM+A2P49jaAnPKA7T/QnIT6poCH3Rmjb
MFQZQ+S9Hu2ph0Z2Awza+XukJBF+9nKoudCvBXRl6texCf7VPLv69/lvnTD/
5ZN7qQ/hP8m7ef0I/VSmHLxxic5GqeXXZ394N8O2JP7DasVs3HXmu1uAbwt0
Xnon8p54HuELs3rdfk1QvnntSl1+Lo5fV5t7kNIIArdi7xhOclBAMuqpjVE7
1HaHFN4q42AhNXgq8nQLeHxqLh4oI/htokx+OqYVTE7lCETeYaCMQECjr1cz
DG/f5F5GPF91T/33qMhWWAhb3DZD5IXzN+nNu392gaTFgnCuEQPf7R9cLfK5
FQRnbb5y5NjYJPLB+XhuC4wdS918zZqB9Y7SG1zdOmFb6vyNNwQ/WXs8aHnV
0QjUGxuzHYj7e75pX+sOQn/VR/Iurb7JRGvZYfqZwC6oz+YLGifmG/xdseFU
XBu4vViht0DwtdbmetErpu3gwTkf2egwiIYBj75trGoCD9aOs2O3CD69JzJ/
a2MnRMmfkua9xEU37U9r3x9rgCC+xLnqPgZafna48sKvESgJ3vQRexa+PHd+
2bLSJrjmfWjCO4iDjNWh3XYWPXBrye1tL6IG8foNbaHmdU0QznPdxf8AF2Pr
xTr33emEl/9UwnV0GOjQM233lvCTKaO5NNsaJirt5WisEOiA7+1zmglEnhe9
ecfnuLsRNIp2OP65zMArp/ckCFt1wcjJVQdn93Bx7SHri9OE36U0d2tpE/tR
xjN1J35/M3xY2rH2qQoXkwdd6JNCrVAfbHZCj+BxvrL9Z5XGewB0B/LSrjHw
y55k0tc1TSDZl35Yg8gXXeuItC30BlC8trL+CpmJbg8kPi/v6QBf7xlrkRIO
npUJMlbM6oa+eea3dY1MrDzsHTz9uw2om/c+HgpkYCFlz7bzq7qg/5ho07F9
bHz7k85fdKIXDq86dz44kDjPXFy1+VgjDOprzW2/zsHLYw4Kg/LdsDdxyDzg
Fhtdj3Rxd1m2QNfIldtzZxnYFmSRILiyCyp+PC3Jy2GgSld+qVV1N6xPkNj0
zXkQL3433iEn0Qy8ivmdi6Mc3DTtI1JS3AU1dRn24w7///94HzU603ugVOqJ
U2/8IDb77eb++d4MefnLLO69Z+KpR3a8PsPNwFdvPL6xgYVJmUucX55ogTKS
go6vGAPnN8ycXujoAbkwuezXhP95TNxTnKjugZe8LY6eeSyMXla2bOm1dhB/
KVgiupuN48+Vfq990AK8k8U/pn0ZmBr+zHgfk3g+W08f32E6LvI6+Nq5d8H2
cK0EXhk2ku8XXdCc7QJK0w1Bixw2Dr/TurH/cy/wOojIPVnHQWodOW0ZMe/K
QyVwcpqOx/74vdp1sg3+BQXv10ofRNfhxAqp801gneXyONeYjd2v/IzyvrZD
UjhTYvD8IBaYb5Zp9e8CPhvlABLRb+ynr9zcltkOTnzvbZ3WEjxouazt7ccu
6BbUsf9gycStofs6l19oAe3vjzfH/yT6zxJGhf3pbviQVnsy/hwDre65y1cT
/lg5YeI3Qjxf4Lq2czryzaBL21OhEMLB0GPKvktUu6F/awhGj9DRNwv8733p
gdDyiwc1TnHwxezUSHFbJyQeN2q+4cbBBX7OKT+lDlj8an4q7isLda78aX5k
2A7ysRZNegTvNus/ui/n1AKUivq9zy6x0OTpX0mo7IVdflQfK2Rgr+4sf8qt
Huhb7u9Kb2DjGp6vN8RLu6D8c8KhMUU2nrcIlOqU74NskYrMSULPG8X+Op2p
aAYFpZob1Dw6Tn/IbNpE+KnqU3PXYS4Dxabls7N5e2GLodquYxvY+CmUK3xb
tAVOKvicjyDmk3v22qodxZ1wN8A/1jNjEA9bie7Mv9gHxX6dBYZ2LDRIbNcQ
0SHOY3PMSf0vHVPXDe0YGmoHlUOB6tsIvzxwKCAqXq0HXlTl3Nt2l43y1sOF
z/Z0QvCSqhOquwZxtMnT4XdWB4hvuIGGJgxUnfgcsMWvFSIgp1ttmugzLw2t
l7xugd6vITLrTzNQnLV2bFSoF2r8SmdULFk4dKO9Pq2rA3xsV0TvsGUijwtf
0m71XiCF2CfpRzDwZvNhZ9OP3XAnMCej/w8ds84oXqyQ6gV2I26cptAx2bmG
HMLphlTthtQuq0HMe9PitT2lD5Qlv13wXDGIYSbpf2WIn2dmfOPcX2K/+voN
fGeZHTBekmT0d3yQyLvOhKd+vUQefZ8qInheOPq+96mkdvDqK+hMrGdi71GF
e+HEfrrc7w9ekzqIs5UpZ9ak94FDl1mdtikDudElX6Q7+kApDVfxqLMwV0BM
1cq2Bw49OhfUmsPEhOeZC6/29UEne8PNKWcWZiwZqNa6SezPzSdJPsS/13fw
tI+WSydcdAmoVs0cRJrQidodJ/tB+5QVVWD/IG4at13116ULLnx7639iYRDf
1qe/xYBuCNan7Y1+Q8fydJHtORvaoKAy4581l4VS8u9X39zQB+c/7vaZrCL4
KOL6TsHV/TD1q8/e6CkDl2/6e+e4eheMH76/PdeDjuGH14p+Ue6HWoGk5gvn
GRh8QvhHzNYO2HROekt2NRtnBtbMv7/RDSpfU2k+EiykPOQJ9PnTR/SPwG0H
i1io1CflZnW6F1YIqa3LOMfCIpHxv8t2tYMZm1NfR+i3X3s7021jO6y/fbrt
bB8NX+vH5A/0dUFauPJ9+znCP64dmHmf0wUxOZ8Xr8YykKMjfKNNvp3gtcJt
9dYs9PHUEtxG+PFr78delsIMlF+6btV+7y74oMQTfEqMhSOagd4h7C4QfDv2
Z9KHgXFhDoVxnC5QWbNOSdGHhTS1i1oGXp3Au+ODYjChr/fhruXLSnrAMmZk
ofzLIK7bdHsLSg1Avy295QuLhpuXr87pWtUPUWc30groTGQfUsfD23pA2rYn
eTqMjrVCf82iyvqhsmH27eHLbCzVSNQPHm6DRr4H/l+76Xix+NfFn0KdsLyw
55GoJwv/Gkm6zSsOQGQcz0AHg4lyKZlqQXf7oFyK/7NNPR2VGC9EjR70gMHL
RxezPrEw8KJ+Q5lbHxhQJHqpNgwcJLnI6m/vgyOi5q6rvjKw+M8vqmF0D7Tv
vBT0OZyOHjly9wye9YH+J9kIVyYd/cavF2Tn9kPM+Qz5nsdMvE2bH1uxuwsm
/O9u7O6l4Y9dxyeHj3XDVMWPqf332TihcvBRhMgAFF4s+HPwNAs5ao4LMsXd
oK39KnjkFw3/qo90/bTsBd+6V5K1oUy8kmCTGZDWA1fGtqfpLiX6bIzyGtH4
ftC3NzQ/KDWId25+TeV86YKdoUqabbsYOLI3JGvsXh/Y2+5Z8Y2PhWopgexd
sf3gtvOQimIIA/OPuC+ZfNsF+UepZrI1dJw/OXOCtn4AxqOv6yyeoKEHffjt
sQt9YPLg7dKDB5iowtPXYKXQDz6fN9X7bmbil//KNjo69kK1rkuNQA8TJ38f
iDPc3AWLz13aqlcQvFIpZ1A13wVT/Ka2Wo4M5DWREM1K7oVXS+9O3341iC93
eDTK3e4FftEdV4qtBzHIQifQ6kEX5Bku1QqbZWD1e6V9nPxeyAjdM3RGnobi
hwaiuS8GwOvneYUQZTqqhb63XXagHz5IJfn1KbAwTOzkqpW+nRAQ8mRVhyQL
RTcfHY7iI4FB3IO7gbdo6GkcZ+qs3Asfruhq///3C5dW7Rxr9OmC8/0BFzL1
aXgzyehCNq0fXnicW9giwcQkvZIg+dpu4N14/+yNPTRcXsHpMO/uB7vJyw0/
ulnoluT48dBCH9hF+DyzX0pH8V+a07XWhP4u9vA/4mXgd9q7zkl+EvjO7XU3
Jg3i9P7bIbPsPtA1r914rZuK3mav9uvoEfP8Y+m1vpWFY6eF/6WNdEN27K3j
/TE0NNm8Wc44ox++T8oJ6tgy8FTHPUUn916QlPRor3NlokVUiUbtvX4wjK35
okacv29Go+jhswHgqxxquekziFNPL+crC/YAtfi1k2fgII6/uXhWracPGnz3
bhMZJJ4nY7onraYP1vzeLsY8R0NHkxD/yEQSWK6cmLvGpuP2vpVursEDQOrZ
68mKoKK7/pEZF3NCv7LiXh4HCZ4wvbV6RKkX3pzKkcw9SvDzW5GkKyP9oHaH
WrfpIg353iv/fLqnF75JjhwXKKZisHNxyr6Ofricx3kavYaOabFhHx0u9oJI
1lct+mM6rviVvFRDuB8K85zbVB8xcXEfLab76ADM5Oz9yiLy/M/ZW2IU927g
vHQ/uI/wF6kxCvlwdg/M07pPNIcRfOetLhbwkQSlP3tHljyjYaegeUHH1z4I
NK/ydPOkIW/Bo/bgjz1g+rVkz8jlQXRbM1F1NrYPfO8m9N1iUjG9k9r90owE
fVckfOIMqbj3PWX3dAkJdo668/TS6WhoFnzjlnEPhJB+LSQPEf1xsunNSe9u
OK3Gqo14QPhrR3ZoXyUJPFY4bTiTTsdtmWGREl29UFnvHDyiTkNhivQXud/9
kCKXF2QxQ8V1/se/ya/pg5EjfW/H5FiYdTpMZ7V1L0w7Pgk4Sh3EQcfZqXN2
A/BitGp8zyYijwxWKTyw74e5pVTueRUmMmpkq20ukWBkWTZ9x1o6GuWsslWz
JcNFBsPZwZKOGpICv0cjSTB/+XeQauMgrh0JwzBLEnwTUIZ0fSqKetYGvZIY
gEeCYXeHiHlZHTZ5HLKkF5yShc4Xmg+iwM+jYzsoA5D7bH2xBJmYb3H8i1tT
/XBC3evDnyWDqLD4veSEUh/ctjnbbmRGQ8qV+NzjBUReqN7j6BB66r0RDFJf
B8Dlg0BQHNGf0l57zb2bJ4HR98In1zMYSGo2XbuqoQ9yL/5ZR4mmonabgqe9
YQ9ItXXbFNYO4iFdP95/8WTwnTywomWOjuZ/rq+9rEACh8gNUukEfy3YMnbo
HySB+pHfpbrEvrSduTrn3keG3mwP/VoFOjqlKmxXFyfy91DTyeybdNQ1Mj6f
SHyfOplQcXkt0T8OkrdVepChSG6Lk6E7A//yxy+j5vTBptx9/PwVdHQ4clwg
drEf/ANKruwXpOOt0uS9j9rIcPZH7RqrPQy8nuvFNNjaC5ftQlhHv9OQx955
V3MiGfJmrU/UZDKxIenXBw2DXog8H5d/OpWOPP2DKmKuZEgyFxX9fIWKRpsc
49p3kOCqzxXXZ1eYqKj4syiSuJ/8DINrVsS+cC1avPmb+0BC3CzziR0F9V4c
Tzlo1A+20682lSvTUOpTC8sxtRdKGTNaCVsH0Wzy1zCtkASbru2zjipmYrVA
uZrABQpY1238G0ShosayPyvNHvcCn5aXn0YGDb8rjc5czCXBL4pB7rLXTLR7
0KhlE0uCIVGJNyvaGWjzWqP63x0ybEt7nV9XRsFDmqcebbEcACVuvG9J2SAO
S31evZPWC8U/r8bOhVCR8VPfNmIJ4c9+JkeGqyj4+EMC6v3og8qKPFHT91Rc
8u/tgRXhfcB5UxJ57h8FRbe20xt7SSCcfOl3xAo6alteP94+MgDFDNOHw5UM
NAz6WHb3Qz94LUilcBKoSE+b17sgTYK/Sv2OLzmEXvryPvN+7wcZpkkGvw4F
3Vc+lxe36APXS3f0jkZRkN/MLubCyT4Y3cd4ozpP8FrJA5OKQQp4Vrm8oxP5
tvDym3ZXP3G+zS3zpDBCTzm0O0ULBM9LM1YfOEH4o3nk0OzSfpBi9ycVEH0m
0X/0o9AGMmwUcYuzfjSIVnmeIpuI+wlYJpf89z0Flc5MxHitHYC/A2I3z21j
oNOStPtoTIJ7O3Lnrf0IPxQ6OFFI8EK/58fMjFcUVFunnq7zcgDk9nff3vGH
0Lt5dCtrfx+IclS2MZwouFMs0m/+M3H+EdfY48T+pR8O8zFb2geri/sty/dT
UaVgxZ8b1gMg+9HWQ5RGw1OeTxs/E3z0/Uqt5jn1Qby53ZbFI0WG+5usnp0k
+vH2O9b7pDrJoGry4WgTk4atebIilxlk8K/baLx2PQV1Bf68tszph8aHOrRn
DWRUfrA13CuqH3j4ApMDuqjomihR0LecCibdQ9/gD/F9+T1nHl4l/HWrfBqN
OYgLZswfh0oI3nYe7fJOpqHQRWtOkdwAnJNhmN7NYqAeyeK8rgIZWBZfEpMe
UNCB9eBAgl4f0Oy4XQpqBH+zNoz9/kcB0VWGLsGfyNjP1r4y9akflJnyfL22
gxj6vD3IUJQCxq3FPDxChD9Op/TurSZ4S2rotJklA7vltQ8vlSZD5JOcHKsu
Mkp5ayzfc4YCWYElDMpBKgY2XVu6PnUA/EPLZDWzKfjlxHBt4kUS1DovXu0j
/EJ+TqdFMo7Yf2pf/rgcsd9P9RSxhgSVKaJZMoU0jG5fHp5oSYXfIjKnqodp
qJx+2yluKRkkU0w7SmpomOSVRfosRYWZXe1edi6D2PXv2rYDwVQo1j3usXid
jNnlVsy7aVRwi5TJ3OxNRbsEm9RfF8nw8eCN/MMVZNQrCJNjEnpw3mQ8q/L/
97TEXuX//JgEFfrXNKp/DWLZlXHVrWb9kN9Zu1EvchD5X3EMHQj+6WBeH/Pz
JfKqYLe99AkyDAVo5eJ2Cib/NYg1Ivw71jjnS6IjBUufvUks/Ensh1JvRGLL
IDIFDJtPPiSDTD8nDclUnGUqLUbK9kNFb4ix5Qsqpplc8ZGJpYJugXaGtRgV
30fs9KCYk8F6zY1z5I80rN0iZbx/NwXcPVN/PJii41m51sOmxJ8XLQ2xX3Sj
oYRxx+FeATLc6NBTb6gn+lsCq7DQeADy3r+l2TpQ8V6g9B1bIxqsEXvptoOX
ij4x9LEnFlQQW1ewX1qVjCr1CsXM3SQocpff6TlBxvX3noRbHe2Hna/Hlc+S
aRg7Qr72VYsER5ILqOUyFBypbfuY5U6Fu4u7PbdIU3FaYEnEa4MBWGi9U/w2
g4J9hx/k1WeRgVN9rCE7gYRy5p3bPi1QYI/FJpEb1WT8YtwSIrKRBNUSsfpt
NoO4bJfiL36kwv4HUac8LYjz3bOLyeYjw+b5BrFX8STctZPYklEKeGjdD93S
RpxP83LtwicKOLzYofuQTfDH7ye3tN1JcOyl9lObVySM/U/6a+bDATjwmCJy
WmQQ959YuXs0lATXE+NFHxL+ERHgLzvWQAHZNR//ndxEx9W23F6Rl2T46xGb
LU7ki96Py9dPSlAh4/n+IlNXEnZKUdPfJhH5wd47f5TgmcLrK5/kOVDA6GmQ
8RkhMm41K8/cFE6BE27vu5KcaWjw+7Nwsx0ZVqHzcqNLVDRw0Y9NiadAqXC9
F22YjvHSZS48xjRwz7gbVaNMxXfL+B99HRiAOGFpH09dMmoK9c/svU+CKHKj
66kiEsqER//tTabALY0mpacELwrpObGd7xLzOFi6q82bjlNPHtUNfaCB3gH/
CcdCOkqjetZTYp+FbWhyy4l939DQdEVzJ8GrUjZhAuuoyLu7L7t+iAITe/4z
OBZMRn/Dx2Mq4nSY2CEt5T9FQw2IubEkmwZrmbGVb02oOHpDlVd17wD8jrdo
vh5DweqvzpItFWQ47uUolaRIwQxN7VxLTTJMjwk4+XWS8LP/g71LwyigF+Oi
y0vk2SnTmYmacDJsF7LiGSul4Ybv5SdUImlg6eTgt1GVhDuKlvtRa8hg4tCS
o+ZNwaQ9/zaK/6TBU/GCpHolCrp00EUyuwg+slJd4TdFQpWj9zydiefnf/fj
5Yl7VNzcn6AW6kbkpfnOCgN9ClL8351MlaGAq56jwTkPGvrSpc9cf0AGyz/q
f0k7aeiwrCnCTZwMmt53L4k60rFETkN1mQcVmApTaubtVDxwoy/FZDuhr2K9
toyrVOQ3Dh72vESBlPbWwFeRNIwM2tcvt4kGzLH9E3FGdDR+km5VeoEKy7TD
aTt9KXhiOFxq9RoKNP472uh4lIQutyTFzk8PgDftT+F+aTJKy/nu+8ZHg/jT
I6rm5+hYHR+eSL9HhY/hnpV0ZzJy+8L9PmyjwPyhm6tvl9Dwc0TMPtbEALiv
Zbp4HqWgk0fc5kw7Orze+Kj+xUYajt5ScesYoIHPrzNnpx1ImEIrkIh6SoUN
xpov44g+ZUP/DBHE/iY/WvnYJpWKHqyApKPE8yg5SBtdMqKhwAmfCcUWGoxH
hD+0zST0q2e4fq6LCo6LyT4RxwbQUmhZa9fcAHA8b40Y6ZHQZ6J636g8HTKr
BZPy+EkoPf7p2x4ZGli8s1L6T4qOrwTfRvw1ooOysM7OGgE6uu4RL+imU4Bx
WXqj0yoKHnn8WOv1Sjo8uBKkM1xBwakvQSeGogg/eSjWcnELBSs2f9pVaE+B
p/7+ttX7yLh0WvVAbDEdgvfkbZ5wHMDAu/3DfB+o8D3DMLWskITf7bR0z36h
QGS28dk1llRc0Vv324DIk3g907spR8l4Z3GBnnqbDAmDdwMLLlDQlfUrqk1k
ECwrCt/km5KQryBxWp3YN4cHq541lZNw+r83mr3E87UbXfnrZ0vBwmRnO2MO
BXw652MP/0dGif3GKtQ8GsSs/Cl8MZqE61V/xSfO0aHJatr8AuEXB19Me3g5
U2F0aa2c8CIZ0z7EJZ2WpkHGq1HF4Xoy0mRX3pDUo8IWvkZvu8sDOMhjw7vF
lgKvRrvW988TPOL3t2tZHRlC++5GLlsYwOiSgMrgTjpcChHWwfVkDHsy8875
Bh34KGJmpN5+FJe1Lo9vpILUhq9pRyYH0OQLph3ToEK4mtRM1wgFY7asmjNr
IUFbVJqMycd+7PfY+8MhnAoRx05oa0WRkMm0vGBmRgMH8T3DZz6RcLtYviDI
UUCtRXPJYYLvXudfe5GtQganq4FTSwk+Fjc9HLTfjQS9ihfklrX2Y+Dzs4HZ
DAq4XWgI68qh4Hy4i176LjqExmU1ZWb3I4wFG/1mUSH7bRB99gXBj7JeWqQ7
NFhPin5xYSMV22TDGuoODsL+Nw9X8xJfdzcIlx2MJOZd9N9WXqJv6E1xE4Lq
SXCUvGji+7of1f/zFm/5QQZZ43OhC65UTBoTW7A5MwgXbNNtohUH8NezwxvP
Z5JBsL6V7ZNEwrMqLfVdulSwLi/86RJGJvT29bkNiw6+BtmJly6QcY2SePfc
MB0mRfwpaTdpOBYQt+3VdjLMcnxD3vKT8VbPpfSSgUGoz9kX6d1DRg3L7hSz
dDLoFZiePPCMgluWdPRYJBD+6/J9nyoxv+dJMcEb95IhOl1b30+Dgpzj65JH
24n9+MV1miX0tH48/BuK0EDls6y124EBdDVRduatpwGfft76uFoKxgYmN4bc
o0PtkauX/KT7ceMzz8ylamQIvJfeuZLbh921y4ssttCg4kFDf7bpAJb+PtzU
t3kQ9mrYPuvfOYC7XmuEudcT+RSTmm7xkIRmE7mlITVU0H6UEbbCdwAvDx0o
fVM7CDauIeI3yin4VywstM1tEE4/iXAIGRzA88yl5u0hNGg6cnXzoPoA0gyz
Yy8fpcGNM6M6e15Tcb1cYW7UCB1Er/udOE3oq1F6RdLvTYNQeuBc5q4GKt4M
rhNMW0cDv3bvaboHFU0+V4QcWkWHd9o9YvQUMi67kz5VfY4BUsMRL6XVqBgl
bZhovYIBDs+5ymUL/eiVtl9uIoAMGpMX9uy/OYBaiucnlrkQfuMuJGcf2Yet
NhYuJj8HoexdVm5lKxlzR7ps8Q6xzwTKFpWRcXhRKq0omgKBC2u/aH6g4HBu
3QvH3TSY/fFc0kKmn+iTKY+kr1OBP5Xk9diNjF4Hap+IalNBs5khNe3Qh9eq
IkXKk8hgwBG0az7Wj6u3blnoUqeAlZQ8p6u8D0+JKF+Ny6VCxYLUyC99EqaX
1TEfVRH3LSH7alZ2ACPvWBauLKTAFj3FwLGvfZg2xxZ7IEyD2B//djzn6ceH
Z178OtdCgevX7jd/yOrD4h2D1VP+NBg9sxFu0fswOkGVblBEhVaFiE8NRgPI
Pidyeug7GWo1vK3sEoj99tj077+lVDiRGrE89L8B1NF7suOIPx3ubrc4bS1L
zEejUXQfgwpXnvSeVjcgoeyDP7MiPBRQaP21o+4/Ega2S+YGk2hgINOVc9OY
hJcPe7YmbKWBTMgjD791A7g4/PxRRA0dXAZHR6Uo/UiWH/odXUCBv+yuL7QT
fRiq3bN15Ts6nBJTezWwqh9jbkZwrsgOAqmtn/ZsZx+GPxRy1rpF5Ke/xGiz
Wj/KPs8yc95Nh+G5+xULnQMIXjIZX7mDYPBt6pzYYj92VJ3wPyzLhMJSz8mZ
TgpW9o6fq2qigfJpVZU/0I+dh/5H0XnHY/m2YRyJErJKhIwSFSKpRKcVZSWJ
soUUJfkRIlRGoiVUdnZG9h6XvffmmVRkPIOQIt77/bNP93N3X+d1Ht/jOP7q
ufvd96PQNuPeAiVDiNHsdmwdxgc8X/MjzaJRtMayIL3z4Cgc05Do7C8eQc4D
4coJB3BADFvDac8OoQuyipW3ZsZgNEluntCMnbc2OFqLEQ/rS75VcxhfVajm
628x/iaNjYXyuQwi1/GzfCyG45Ac9fzuNpZPVCbMHng0TALna730o6rDiBi4
g/GhNg6qfLnmuicwHm3oZJjQxmCyN53DSh7zF5xjwy0+POy7nGx2LX4QHdN9
qDxRhoNCRmcmnvRR1BCsIaJjhocXZefEPXRHUMegU68Z+wRI8R0ZMrvUj/jZ
lB471+OAo/HHvQHbQXRi777Xv0dxkHHjUPKloQHU/eb0oXRsfgwCNwl5oYMo
aOhN3+qvMSg4j0GrawDxKMQqDXuOQQ+nmu8vixEk53Fg2j4OD0aFvNGPmzBe
F/90HqGPw5GG3ZmHmYbQ4GfCSaYgPNxQmNWSofajTV87lHB2Ah5N71FZZhlE
z60Loq7cHQPyz9KfDQUDSPbQ0CHPdzjwqLr3Wm1zAK3a05+I3ZiEEyt7Baw+
DqAAEp884Q8O6m/OWI1/7Ec8CY/OD6pNQPunmqWFnYNI1tR6+Vo+DtxviE9d
0hxC3uluD8yO40F6lsrLlTKCKK7x5X+x9+fbjszKZgygtUU+51tHxuDe6BW9
DSx/NAdyTh/E7vPr4rzLu4ARtNH2nn6JbxzO9Icrmsdj/z7ZMTjgyzi0Jc2M
rTiPoBdRNpDKSoCBvIkTLUpDSOrhG8Y/Ndh9CqQG7LYZwfJ62PMwLA+cXDQ3
CVgdRpx64tZOWXhIOO6Xt8I3gu5VB+8W5iZA3PdoQevKAZTgcl7dxXEMGtV+
/zEVHECTavwpBJ5JqPAVXmSyHEFpYouWbAM42OA4PapW0o80ko+HdavjgA3f
nlWSNogSJ/77OvcADx2MvE3FmF4Ekv6MHej6/7yOf86LHUSt/7VPCd/Cgbdv
oBs+cBjJP2PwHbEag4mxp3YlqoNIYrPtXhkrHrSr5wxVRPtRk03Y/KH9eGB2
c2tLfjCIKMdtiE+w/ZFJKedU9MX60Pf93mI7CLCzz1EePHtRv0XoDXssTziL
xNplYf3Fslb7nLvVOKTRuDjCw/uQ+LLd12O9E/DB1fT7PEc/IirKV8cLjEFt
7YDu76Q+NH50c9+/ChzYd5gJF7L2Ia9ENiHnLzgwDp4L0h4bQPluUhcAe//0
kTUbhsQhNCTdkmavOgY33DeetvP2I/+v7Tc9LxGAmcvqpYdBP/o3d7fgpC8B
Sp84NZ6U60dPPj39ITcyDq2FzL4Bj4aRS9rEENO+cWC6Inyl6NsQmslMiq21
HYPA6pKdTx8MI0Nf8ptGGyxPZ2a9FUzE8na/y2mrwzgYKV0+bHy7H2UfVBPK
GBuHE3fXROpC+tFEmKwRM+bHaQSp9YNH+lAqYxXjrZc40E4Z4yOG9aM7bzuF
PhZOwLfdYibBTj3o7naDjDWWl+a/pGYMLvYgx+F6Y4H/sH3ET1nkGg2gPKLY
mhQ/HpJoXg7cWv2IaXi/xp0qAjysItseeo75ga/fVVe3CbhzfTb4+dAwajhV
IL63fQIOsEuISE33IQHV7yGUHzhYfHW7XnYQ2++iV59tSJOwuBG612G1Hx1W
HmJoCSKAc6B0QV5zD1JizSzG/1+fnnNvM3ZivH49PE7xxp7PFFj7MN2NyPe1
3DMScPDPs7cvqKYfebyk5No8JUDwmnqw6//9gkGUW1YRD78Zbizfs+9HX/hz
f5UwTYKDCZceo8QwMlWM31HqiYOY/FdLXy8Oo83hc7ZtRZMQ8ampVl1nEM1I
BpsOY/um4FH3QLqkGzn4chr82cSBlu2G0IXLw2jX5Q3Huw4EaIlYExvO6Udq
lPvVc9t42LoWKT4X2Y+oL4rYX2LvD/3Guj/ZYgBxnBoVMgwnAA8lW/OpzwDq
vFB5UJgwCeHGY/+13e9Hl+JIKtXV43DxzD5jS+z7Dhf7GTznmgS9kDMeQjwD
iJpHv8SK5Y+auSnNjyeG0PlWb+6llXFonLnL7VbQjYa/JK0apOFg7miQse74
AHrx9Uj2oZgJEDf4R9rP140611a2OTfH4efHFZo31mdWg0aa6Fieoqiu72R8
PITcXlZLhn8lwJTLMuM0tRuZj517aR6PB74bEYKVv3vRhxvnJOMscTB0VlVc
orEftZcF+by9PwEe/I9mqtb6kdxjmXM5hHGYsj0mThDoQWz5VF57uQlIa7Pw
jl/vR/RTLW2ESgIU6laI/mTuQ9sFtVeY2PCQ+hZGNXv6UIaaZlyDMw7cXvC+
N1HB/F+7t4sjhgA2B7uLZQDj9xEjzhQsz9ovIdOb49g+rz+V7ggeB/NzBcvD
yQMo7pVIzfm0cXjTdvS141InkucdtB1Un4TDMieOdUoNIuXiL7+1BCZgHQgO
UfrdqKl/uS6TBQeHxEbZr/X0opTb+4q+uBLgW4+9iW5xJ3rylG7Suz0Bounu
N9rke5HVnIlZEQsBDrvPfJKe6kffxcREbROwfrR058G2zxDq3OHpdODvOCQc
uBa0iDqRq8PLR/YDk+A/dzXvcFYfyhKY3grSIEK09T/Kg+UexCf4uvLXEQJc
YsqgBMwNIsW5ky4vvhNg0uDCh+o3A4hpo1n6pTAB2F4n+a5JDaCOuGDrDIwn
/gNqhFrlAeQWZ9s0VDkJT6rr/7w4N4ie7fcX9U3GAUNB1LOn7v1orMxr4TPG
/xKfSd9Pz/tRIHlPwVFXPHxPStMWr+1D+dXvN00+ESFSOOHu09k+xHptn2Ja
3DgYXOW/wK3ei3iKl0cNLxMgqMy8aaF0EF1hOOWq9pcA7I+fDS/hutBd7QsX
+zoJ8FZhV7BEQBda0S6Lv30ZD7rOq6xSLn3ogo/ksxfCeFiUE3d6odOJ1od1
ZBztJ+D5U/dM79R+NNQ8qd5TgfX7sUz7EM0BpHbJz4BJeQLygiyamW72oNcO
vOMt+yfgBt1AtcejFx35ZVxhWoQDybnHwQP7OhBZ/vhSuOsEFLkyykmXdiEu
4+Hq6U8E0PudMOqR0oWY5jRWJq3x0Ko67HUY83eVbxESWQ1YHr+W+5nsM4jy
WuK8jaII8J3pj6i81wAK9PG8QcT6rWGnot3fe/3IMrYsu6xzEjy0PpK7sO9r
rV+TcNtFgoSzUp3ZDgOIFs9gGB4wAZKCtffP2PUiGUtiaO+jCVi1tpA9YzyA
HA5zii1uTAJXkOx8hMIgSlN5ksERgeUHDkMm1RsYr9JOVhnJEWCsmc15/0Q7
8upYq5I4NgkpawyxB4U6Uf/wx8VswUl4Mzfjv0u9Cw1+mbOicxLAzkcqrN4V
01PTfJMsdRJWOgd/mYp0oGYFJxF5JRxEKgo1////Qcnfs3HdmYKD64xOgqXz
7ehsXl/P83HsPNO+yfF7ulDw8LuCENoEVAUdHllN6kAS8sIe1th9jBRzJkV3
tyGT2i2HBE08HE79pV9yvhsVCX+5fj2JCE6GoaJFsV3IbPBJtV/4BJwQ7dTM
N+1GBJ2NsnpjPPy0DCqzCupC6+nNW+RzkxBnRfx6/HEbwnGYfxCQn4RPgsTm
eY9uNOimcVmyaAJartsJprP3o/AwBY6tdBxc/VUl8gEwv3/pPmLrRoTitpw7
0t8x/xBcj/XcMwkSlj+0GC270XnlP/fIWF4Np/9Rv2vUgWJFuT6mdmB/HtLi
c9vZjd5+8Fc24MPmy3lC477jAPKoDaBKshBB5OoVq/PX+1Ca/GWOXXmTICW2
+7heQw9SkV8ZsHcmQplxftGeqAEUo5zixcBIgmzVjrmomgH0xOXLXB0b9n2W
PsMjhv3IVf3bkZHjk8Biv73IeKgbmf7alm2tn4CYg/jOwoR+RNnfx+xFxHhz
1J242duP/DSGboU2T4A3teW6xSNsn6/UHu4DIgh1ndOOy+5AT+041A+Y40D4
hkbyPos+9CzJK1o6iAi6Yn9Kl5gwvl1mvrWLjwiyp7+H5isNoL/0WI3TIRPQ
I+mmo+o2gOoIjUHX6FjeM5s4jJ/sRBG+N6IOuuGAZca/9EV+L3LU/OVBWyaA
Gp/yOKPqADr3geWUKzYv63+Fvl0xbUi4LvDXHWYC+HCdKZVi7kYfNZ44khWI
cNKI/YiXbhtazrQ39IueAKGrrCofMf69fWH6Rweb31b/HefHYu0oSsFgTvUc
Di65t71cMutDvREVbK6LeLC443LtOcaLstA/JpcySaAIMvWtRZ1ohjnSU+HJ
JLy9rH6wtbMTnR0jXvBaxcFvOxM8F2cb0qr4b/oJCQd1vKeNj5v3IUGnP9sK
7JOgWNCe9NGvDWmcXdn+hfkrA9sb1VT+blQ1w/BnIRXj7S6d7IQ/bchWnJ6o
UUQCbrJRYkZpOxpPkfiX1zIBle99tv+F9aJe1emVXkwPxErOn/80Mf/dr+Br
3YjxSk/fOK2tG708NGVfVUGCDEmGx7jyPqRgWri1w34SwmjqHyyiWxEzX5GV
aOgkmLztO8X8rxf9rc0UZqklwRsu3gqtwG7kz3EcZNcJUCfy74y+VRfS/qp5
ft8uIuilTqtFZ3WgxarY7q6X2DxKk6/lubejuNvbtj8biSDnnr7r4NsOZOeu
hV8LxMMzG3N2tbYOJKt9KEdtHwH2Pww9267dh5K7ZZN1z5PAubUj4GpaH3rd
Hf5JlI6DgOko1YgDnQjVH1F/2kGCrrxyGdPkVnSJxfEIkiDCJYZmr1u8zcjS
4P6bZ9jzRdvyoWZCzeiGZW/IM+w+MuKrF3aFdqGY07+KztyehOrKk5KtnT2o
7FWYu7YWDkwbLEv0QrvRSIiBSnsYCRZzjj4ZpLajG9Lezpx3sbywJ8TTdq4P
Mf2zaGXnI8GW/+M9C0c7ER/H3ucp0Tio7rs/2fuzD9U7eTWOJhLh1BR/4jpn
M3qa9/Xn7nEi7N+6M8VB6UJOa9ceag4TwU8UXxTr34z6Hmou4GRIAG55Te+e
96FMbquyowxksD4ub31LoQW90+FmCwnBwfBcaaGJWDMSDc9TYsf8koEvw7N9
rAs5huQxejwmwqMv0S1CJ1qQWut/j7rXSMAUEbXxcn8bInlIwOeDZBCYtjVi
NGlB+EM7OpUH8PBYZuS5RGobkttxU9xgJxk2I4pfTxv0oHhfkUvefZPQt2sp
VjS6HXVXeu+mnyLDswaOhkXsPPEDu+KKfpPgQsXtey3YPqblCuKLK4ngszR+
zB7j58dpBfL+nknIui4XwDjWjiY9NubfKpKh4uXOgALnNiSe87dGY4EEBdcO
1B+92ISiA3CrIbtwENH90nkJ21//3KVAxk+TkCPsI/9fWhuyjHmYx9iMh0Cp
5l2R6h1IT0dt7wkLEpT5bLVqEBpR56zy+1K7SXA0a+g2/9uBcMlvYgt68CBj
XFb4K6YDqejbclYJ4uCo2WBxIG8Xahb7ODYvg4eyOYl/+g3daDXONuPnLAlG
X7Bwnt/RiJJmRitMsyahwfGzsotjO/JTfOOwKUUAWfOMjdqBVqR8v1/x9U8i
qAZset3k6UXMSo+2c8pIYHKneTngcTO60mxzUeY9lk+UWQrXtltR9+lIg7e2
eDj5M+pzOkMb8gbLtcs2ZOCL0GBsedGOBufso3P88SDGMlXu+bUJZU4oRcr5
4kD2zNk3MdVd6E8irmZvNgFEaRZh9tmNKGSp1+/xKBHcHhJsj35qQ4O5am/C
sfzW18nL5Z3Rjl6qv+y+e5YIuVetnzi+b0UlMuWKt2uxfjQUOVXu3IKSO+eJ
Ir9xMBuV7h/AjulDeYh0yZgMidLfeC6bdKNnb19VtYZj8/al/lxQ6UBN3RGj
cT1Yv/OKCoyMa0WWNcrvNxuxvDI/ffP4qQaEtYE/FZi/pH17f0PNpxFp5Mhc
9PclAX/vnubc7XpkukYrflCFh6Hcc/t+KPaggNxj847Vk1jftbGWTm9E9FSh
I64qZDjWuIX3WOhGUk8UNmkYL0W3tSIUr3WhQJaA4IveeOCxzdRR225Brscq
Aip6sX7vcmAcnWpFowEG25xlGM/f+D7fwnjEKxW95fWMDPXRj12mnTuR+ojp
63AzPKwdjS6KkMLyQh3HrzedJLAceLZH7FsnckiKE4/B8sR4QJffO6NOVOH7
5elLbL94Pz+z1jndgH7GfE7POE4GYTOn6RrvJqQlbgjJWzjYdz01ZUd2PboX
0lF6ZA4HrbGnd6iot6OQxbyAon4crH+bvj5V2oo8XTr7jDNwoFr+T6+U3oF+
+b+/NX6BDDl/lbJG7nWheyY7DvP7kUF3jrdl/EMHkmrqLnn1lAzb8j/Z5wfq
Ue96ftfMDB6C6FeTlZ93InPVw/HPcnEgcXJy8oJMK+poUj0VpUQCN+uJ8pS1
BhR7rfAUszQOBJXPRYaKdqEHJ15/4lohgYBex4MN3zakOzL66l0wAS63Heu5
fbsVTUVSzZ+oYfnXO/kM57lOpPjd7/pSPhnMU6dCune2odiaNtwpCzzs3pH4
zOljC1ob6uBH7GQ4/EJxzvpvGxpiGrg38BoPH9kqmDnPtSOJQobNGAUyaMUk
uheHt6BjKc183cFksHLPkCUHt6LxpH3FDBokWPtd5tmp04r0VfQuFgqSQU+q
Y5/PfAOq6GI0m6sjwokA8RcmLI1IiHkoo+swGS4lamSFj3cgg9pKrpCDWL/w
CmXzJ7QgcfYNwYx5ErA9X052v1+P6hvSzxMOEWDHcjY16VkT+tvjo5l5mgCc
N8tNTGIbkfh6qp71PBG88VdnFmsbkX3+LIv0GRKI3jI0MjNsRII3t5tenycA
3cUEn5pRjwpFrIHMTAb740ulZdfrUVTXS6O0GBJsfiqfH3ZC6Ebzz2vnTmDz
GRdhTuRtQOTOGi+rDSLEvQ4/EqnWjDplda4LqeLhGsuPb0k+TSgnXv5qfR4R
KEprbSeeNSJy23v7QC8c2EqoFX7yrMH8yav+zDQR2DKvzuph//5b6tPG9U0i
pEi5ZAp8bEeNNz1a0jpx8P3ho5sLigjxRrJQG/7DwZGdd93cMb1HcEzuKMf8
1rToDeWJYB2q32fPEB1Ihgv63l8nZDuQYcd9ZbYRIig+2Oiv4WhBvsL784RU
COAR3cPnoViP5PW6tsIn8aBB+PEqMrsSZV8+WnII06///FKkRk0LKrNQWuIx
w/btmYCYZ18NGqVaNZg8J0DvP4IOsCCkRd69Rx+H8VC9ydLrRx0KYTKk38bu
75rZhRVCcj2av/CddzMY0/OKif7v1Dp0tNQu9ftNAkRyXHglcwnLH4oaxVLt
ODibLD1xxLQa9d/3V3Z9i4M2p0ekJqtW9DoJ9g/EYf64+9vgQ54GxHnYq/H4
Oh46vpMsHJKaEF3kcbs29n3NLg8S9M+3IVOftdRbh4jw+NpJ/q7caqTAMnbV
Ox8Pe6hHLojENKAXS7HK14dI0HdkfxSfShuS77Dru6NBBrXGNPFEjOdbVjw1
M5Jk+B11d+Dc/mZkMWt16vZnHDwqh2bpH7XI73svJ+dvIow2uIz6syK02GVC
cMb4V7/D2Fm3sw4NPoj6O5eGA7NHlqmEkia0QxAY8mXIMDH/GY3NN6H7Nrbc
tQFkWG/VK+z61YKeqcifEbxEBt5EFQbTvhY0LftAZVcKGcLxSmJKZ5rQvloJ
s+ITJLg4O35eEvue0X8f/1HkMT7fWQ6Si2tDIRXdTy7uJUGga0Xpu5IW5O/W
qn0Gmy8Lx/Ej3+cbke69QIbwq2SYdaUNF39uQPXxZ/U/65Mh/7TfYiamz+rj
uXkT2dh8/R9wIKsKdEDOrvMTEwGo7GG8Nj8bUF9MZ6o9dt701SijE28ake1G
JtNprN/frap/eKqnGXkJCWxeP04E59Trn673IuQY+YHZCcv7pvKyFt/ZWpGV
PO539xE8zFCXeM5/xvjwwp9RZowMZ8OX35MeV6Bj1dqibAl4kBvuHGTY34pq
JBsZrQfI8DbC5kTNtyp0Q3T62e3XWN+RNBUwyihFx1gVjlX5kIFQUNvhjZ13
4yBzsbMD1n+reOZZBMrRQYL+Xon9mH/O7fy326wUeRy4ExpaSYJ7RUd2fMM3
oqC4cbuqW2QgrhIi4yYakeyyx20LJxLwGUg8OWnfgKwGdCOMi8nAqkm3fyFc
i7SNpavKd0+BWoFe+a1zpYiq9ldnopoMBV8SXuxuqUH1ohUpMc5k2HPUkz+p
rxgxZPtcCTUigWD3SvOifRMqC1CweYL57cyouEsOvQXxTS7+mVshglZJkGpk
WQtiUlKdXJEnwb/8iZnJ9BbU/evgubRzeKh/WVvHjmtA8Re0z+oWkKGkZo3i
86Qesdjgm1+8JcOhhgdGzIRK9EamT0riBRnGiYGO5QIIDQk/XdC4SoT483sM
cb4NSJvbI2jKBA8D+wYYf6FKdHTb4F81nQjm3ffb1Mea0OocMez7dyIw7Qw4
YYPxV1ydmlqG+V+z9rcrlwqb0BT1h24x9n6isaGdY0Qzest9W+msDsaPJ//t
7C2tQF9XL9DutpEh4Ag7m5t/HdIyNPB82k8Exlqz8xdFylDjuGAW8SgRdqIR
8tOVOqRrbOHrhvFnIuYrxxZrCequ0bl3ZQnb76yOCIW5SjQY+QXfKEaGmOn4
PXJPKlGP+H9RZxPIsOKiGe90sRJVFzx63/SHDOV45fS+tHp0p2iPO02WDI8Z
RJ4LsjQh3tZn67f+ECGs4uxQR1gdMpd71jvtgofBudJPQSwNaN19sli3ngCa
vfe0qHPFqINNyTDWHg/3JbY4PPdWIA/H3AyLWQLgKKaMBtYVSFnXQNH/JBGe
84ggf7s6VCd16M39LTzwP/31hsu5FqXOn3L6V47xstQqof9IAzrYH69Qgfnb
quvvtK+UCqRQKFVbwTsF/zj56im2JWjvyaHeuDkSFJ5XPKaSX40cWh9srr3H
8qbav2p/3QJUcXOvsZ8hEeru7I3jMK1HK/o+D4Sv4EEyxZgqKPUV3X9yetff
myQQ2VFXLzpUirY0e7nf/8Ke1z6SuMhVi65mhTrsZZ6CDKvLC3ZnG5Gp1tu4
9X1TYLF0uf5HbQV6Pym4EthDAiOZyK9aVxAaK5VpKnUjwof9fBxtsZXI/HuT
oCvGD9YEuNenUIHO8otNLI+T4Oa1zC0D/Tr085LXvxp2Inz3vjeteqgadb2T
vDeN+U2iU8rHQxY1iGfpDn/SJ6xfRNk+/iRZhlYEZddV2aZgr9kuc70PlYiP
Pc7ulSoRyv857QgKLkGH6zil1RER3ElP2B1VctE9Dk+7X3JT8FDRSNrBswA5
Lm76hGgQwCBu+QUfsRg5z6nvUtAmgVBAfcGnigaksWV+k3aGCHhUV8KXmY+K
U/kiDk+RIWtCUsrlezHK/LB0PKmDDAfCvnBq1H1BVvv1WEXnyVB0RHbKKKYS
adUK9M8pYH7xF3fixJUG9Onl+essQVj/WXS2Tw5ESKfzlcgpTE/1LZvfO1Xq
Ubu2HEdWI3Y+psvVtocy0B1hjudbe6egJG/a60RKDTJ/Jmby15MIyr8kb497
1KKQN1qrok1EcOV9eeHa7yzEtTcFf12VBDO1942SHCqQtqOwUtN9InS8NJ4M
batC2qzei7M7poD99oeETu08lDPyevLSNzJ8tQ2X+47x5eyd411hAkTQdk5L
vkgtREYJCr3vFLF56f0MtnGtRJOnVb6x22H6Ein9qdiH0LtjFiGdVAJU2Hd4
1GxmobPBf/R33cLDTW6ZzS+0IvRpWm+0s4EAJ9J7DSe4clC9LZdx6QYZXNld
Bk+d+oJ+q0zRt7A8OB1tNrdqU4Sevcob3cL8lI/CedVnswCJHmV7dfYSxpsl
08gT2rkofXeV7xkPMrRzi2/d3V+GhOdc2c5jfnK2/47A22O5yPjMnmnqbhJ8
FHogxPqvHBXzL1tlYX5L4p+d2LIpQZY9Ink8FCLQEyRaR12y0XDcd4umPVPw
Ama5xllLUVYf4+yjTCJYH/AOo+RnIv5+IA9IEKCQ647IF88qxGJxUK5Dkwxk
FX1GxZ/laOfi/vfN2P3/q+SLmL5VjHSOLv9lUSZB3V/P7HibNDTn/QsnZEmA
zGj2kar7Fej4YAd3wjYJJP7q6GaeK0QD0pxsz1bxYO5JO9TAkoHuiaa9bdEk
godjqTNp8jNKvLXkcQXIIML5Ryv0eAWS8DIe9sb8gx1/qdixIB+lzPqop5hN
wew1r7Oe9QWIfGX56fgeAvxZkr0ZmViI0lIfC+9xIkJfb7y0enMBCnz88M6V
JSKolddrs3qWIn/fZSdfAxI8n34pZUArQQz6DEHJ2H63njGtmMTyTcoHF7NK
VjKESXB2M/lWImK7+IbCFnZ+SW0Jck8t0i9MczInkeFHnsfW2Lci5LgrkMsq
EQ/d/C+Fcn5Uo7/49yzGrtg8Bb+aqTp9Qbr21NAb1mQ49ZnjZkJIEYoR7bh4
6BLGr/sVHHI+lcjE6pLHv5NkiJLr/niBswhF+D+AT+lE2PV2157FwRLExnO6
zRHjvz95eo/NjwoUwswabWZAhEGeN8+FeJKR/pk9K/zlmL9YbS+4xlcjqVN9
hD7zKdCgqFSxsGSiC+mZskNxBFgN8LYbYcf01ByrnPiIDILqZwSjDYpQAbcr
PH9ABrbx/hifK2no6o+Bffa3iRCzc/Oz4oU4ZEn9maMsiO1P7OKuMcIrlKS6
ceEb1tf/s22ZK7FNR1oswcki2Xjwu24cc+B3Acruqz7urjkFlx7o83qfeY6E
v51I2BtEAMlP/rddjcrQs5Xh1PlmAjR7vZuolytCZ8ucHS/7EeGFI0HGzz4T
0VMU+1tysP7g0OkT+vs9UpGYGDG4RQTh3W/8pJ2/oNyZw703r2D9iW/v1RNX
w5H+/hxeRUUiUKmviBd/VSHrHVHHnogTIaiVUN2YkIDOvvjkuYX1jfqFY5m8
5fnoNyXwvPEaAR45Zh85mpqEDN9Z8rbbkoCUUiyYG/4VzT83nY4WmIKq0Xve
pIBSFE3QTHa9R4CfqmfI1nNlyM3nypNlZgKkxTY1xtaFIyVxI+mjRCxfWDAa
faKboJqpppPB+6dA/Vb/q8A7OUjtimzJzUNk4Do/WVX1OAVlnuj/uI7llUug
+sG67SM6ObUQG/qZBCP8f2bW5CvQ0a3zPIxNZNA42XLIXagQoRfewxuYvqR1
92Y0D+aiU6PcT6uw+3h7STru9bty5N1U85/cazL8lFgb0NsZg9b2DxMnsghw
+3fnc+PQbOTiGO1LaMHy4g+26rcV8ch4jz5tIAzLy102d38cLkCDYT8JlC4s
j5DrI9V1E9DU03ubHbJTIKopvDlY9Rn1tYuLZ/GQoUaglnfxZwbKTZc4M36d
DG6/Crak/tgB0yL7+K90Moymp1lVx5ejGWfSMV86ljdzBOROj9sDbTG5XKQV
6zNhq3kZ+kmIX1kg0vMYprcDnOrxEpEos4f5HLcLGfSLI5lPEHPRCdfkFwtq
JODiuWqxc08cEh0anzW3wvjCYH30+UYR2vgd/JRJmgDCO1+HJSSmoWO3HtVO
8pFBxdahkO4XhHYlba9VLROAP0qJ601EAQorzc1650kA4l4H/2sr8Yho/EWb
+zcB7gQLUIvWPaH3kNOkljwZFPhydKM8MlF6d4sdtzARejhbi3brJiNP3AJ1
3nYK5lUrX5+4kYpiLccatu8QwfbPxbbwgauImavxh/RlEvTHajYIvY5Dj84O
uXaMYjymzQt3Lyahk4p3wvJ0p2CTbef3sJuf0M/17156U1jf1tx745paJFK+
tNtTf5EIN87dn0z6lo9CGHYOnbYhA8uxygVZSjqS25GYynKCAIu+DEF6Ou8g
/pafIz2cCAyqMbZ/YpMRdT+tqiMey+PxU3n8LG6oOdRPzjucDB7N9DKrv76I
+VhR5NmPRAjUu+ke9ssT3XC9nlvfRgLlxeHZwz8iIEdZe66PHds/0oegUpVU
dM8uh5x5mgy2ZKmcH9duIKfs7oOMRWSocBvUlQlORfy4mwR1rI+6u4r5L7UF
IraLD5MEJ4hgPIhzZepIQzHzO4UFKzF+gb8SQbwA9fCf5x2xIsATpZZ1j0NF
SKq4/q5uEQk0tK1rk1my0NZ3UdCjkOE/f1/LMEx/rob8707HkSDl8/ulYno8
Sp04uULD+MyibPn4dEoByo3Qj7q3gQdbEsHRVyQB6XjcshnF8ufmszO1EvmF
qILLJNLNZOr/+S5DVeE5+nflDtUT0zPL8/7KSb8I+MrneNXDBevvDYI+iZcC
UFDqASntGSJUx6isRz7JRxdCS69GtuGBlJ44l3QuCclJFSY065FAu8J5ZBNl
oy8No06l3FOAW7ktoJMRB8sXpbf6se+7FSa+LmOSgXL67we9U5oCkS+22ecD
o+Cho7qDRyEZgk9fVm1+FQ37H8Vl7pkmgQ2guvD3cTD89fb6B6YpWNG+ffvh
RAJieS4QuxPbt/eyN4Br+St686He1ZJnCvYZ/rwWXPcSyjev6crHEMBQWeil
yYkEUOw+XLJPcgoYekWOr1uow6u2LCkgk6EXhhvYIrKQXK1xE8L01f3zWYl5
fhzM3mS5J4rpY3k8/ErDuVQU8SFYTWA3Ge6ZiT5fkvqC4j0a96ZlkkDGLm9n
gvBnxMJuLtwiRoJV+a2llwtZ6PGbe1Wp2PNqUUI38c6msNaYzRD4gwSHecT1
f0rcQ8SXQdvXf5KgndVY80t4BCJ4s7UuHZ0Cl+MfL+NaspCJZnDwrQkyvFHy
bX/qno7+liHyqjfG89W8x47qN4E5QVlJ2ZgI/Hd3Jm7P5CKelsVRNUwfl1dT
coIiYpDXxde/Vf7i4bOVijkT8wuQzgzuld7G+hDvbsqyQjbSTnzyszpiCrSC
18bWT2YgutkqFW0TwEuh+93jXWEg8m72SMQbMmg1tprnBsagrxUaR7vvTYGN
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
UZvnv9roAgfbQ0eexD6kYvZI/evkfA6kL0dqsxSpuGtodWd3DQf3zcyCi31o
aC3NkjJms2H97Eny9XdUsPJuqXpu5IJ+9ODniQ3DEAhcq9VOcsBeFptwJ42G
wRi9DyfP8NB3K3B67Hcq/l1YZuFL9Kb04HkWYxEdz9MHk1zVyLyXOnlKOAyj
84ZeTnsLwb/58oGJn1Q0WkRaqr/kIuNtddKC7cMoRrJ3+jpSTzlNUoVFxdfG
/k9p2VxMcoHzJLdh8FN3z2u4y8U2qpbVvy3DuL5gzGrRDzZ6ipbeuHOchmvS
muxoOhuFLPn4DeS8itS2GCWCb/vqMYd9ZnTsK1fR0yB6sijviteaV8PY5eTo
Jk3m1ff2U0Nj8jD2x42t8J7Bwbregw+Xkf41b56amaTLA6dq9ZmKeBp0VIbC
jpD7tt2dT2kknwv4F7xOzeWAbzZktkNIxftVCfz7W9i4eryjKdKJjpuzIlhT
CR/ib6eseE+eL0gfjrzKY+PEg9Urcx2HwfUzlD84k+hD6V7uqAEdxZpR0vLy
bDhEYGKjMw1XntdN2C4hfI+fKyfjSEM0czS+IJGDQK+Bd7+n0LGF+TP5Zxgb
YfGF8/+7QMOM7pRGhwIOCqWWf1mtPIw+Vmn9lT8sDNz9FND1ndQ76vRpvJyD
/zgqbZZz6circtyUuoODhVpHT919QEN1rM+Iyzc2ukrqZcxn0OBt3ubCNWDj
w39LNfW9adhnqnd6oQoXbh/Lp18Lo+Pjtqh5fZ/Y0F3hrvUqgQ7/wyN+7Rpc
LJEtML+RScMJU1WBzgnidyd0zkqT+6hsCRPah3GRtfFKwUvCT1el+rpCWw5G
fg0WaVYMI1d3xMrJiYNNF4sSMgwZqK6tnruAzBc6WQkiVTr0g96W3vvEwUNB
/eY9fTT0+q+8EJfJxi398rbUrcM45L3IzSWYAzVprRz/dTTotuTIasaSvJI+
4F+WQ8PICcuh+q9srCm0ijoYRYfiyIZwHV+S11wG644uYeB0gmn0lXA2SnUN
nF1I/zeZyXvurmTDRE71Sas0HadjhmbHDLJwvaSNdth7GB4halt1n7KQ7+lx
TZO8jxrH7m0g+jLHdFfnzxo6mOV/w3pNOPBwDJBJvUT6/69xe0EkB1cehDxz
UmKALfdVg7mIDYttH59QFtKh/dC+Ksufgxit+PIILzpGc6Oeh6/kwol517xe
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
aXYE8evUqfpzrY+2QXLMJmLtOQEyTaIHY8M7cL3rcMVVFnn/mPZDuYdtMD21
cl3dZgEqc8/WqexvhaSEpUYr0WMO2+XjtYFOuLTPnrnltggzWd9P2nm343hq
b7YNRYQxyhXdZUot8HzZ/oXzWAjRzdTi6eWdqGT0OykoCTDj961W58EW8HQW
xq7xEoFj4swSi5vx+NmZ1UYhxP8m7VD2/dIKhVnchUMFAuzdeZo+Qur5lEZv
mystxg5v4fKkkjZcH1hz00csRNpspeNSGp1gF2e2SlwVIqKi+zbXshV/jZ1k
s6eLUCyXsv90eitWGv/9Kw4SoHVP8w3XnHboajo15qeRvFYvdSjpewtq437z
lkwXY0LzCNfcogP1VIv869tJPuA1P7kW1gFZxpsXBm4CvJbPPno5rgWtbWve
WjgLsXG6xM1a63bInk3ce+S5ALtWmq0YJfePLTn9/OMHIZSndSX7i1qx6Gf/
pN7DIsT6H5UST23HY9XBfi2BENk0o9gVbs0Y+nqp/7uTCFs0hvT3XWrDx4TV
ZaY8IXxTt9m2eHSgzyXaL7FZiBPO2z32ubXj5TO+vPYGIb4w/WT/vf0Kx86M
F1QKyQOGMxeUvG3F892sYOuZIswrC4hPa2xDtvWFHjrhy6teg9Nn1NtAs0lR
vZhJ6tPSkVLSboG2yT//xkGSX7KWzvpG+wpV871vtsqK8fuyEWtyfAt057lM
eN4Ugp5qE+b9rRmmfmsVFk4Rwzxw6E+oXyuKZlX0Jc0R4pTE1dZBlVb0yotM
afJifN9gGGTh1oSjU5MTvaIEMD3ZXtOr2gZ/v8eND/KFCJ39Q19Rqh3bZpe/
tnsnAp+e2/CfWyuk5dW03ZgieAQwVra3NENyxS89Bx8RthYM5hw41QrKs0DF
zx8EUI/MfaJ3uR1RZaFb7ruIcHXGZu29Zu1Q+KDh504R4LNEyx7zA21gdrwc
9U4SIuuR6+/x7jZYHB50fbRChI+Hz3wu9m7EotGD0QKqCBqtveVJbo2w2Tay
YT/xz+ID06Yvn9VCcGQ74wLBy+6J+ZvEJ1rw6J/4kOC0CHoem2Wn1bTA0drZ
ZJML0cfTe2tWh7dgV1ndPw8dMSjUDmsN2WbI2h6xCdQT40j0I2aJcxuuffs6
3PFLiNykl4dMCd+U3LbUeZoJ0TXJpoUt14wfve+ultCF6JSZeVb2SgM+zFsV
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
thKAUWvWJ4eJMlRZ0rE46w/Zh1da3eDEIZa4RZa4kn0RTqa430zLwD/plyty
QAC/peJcWi+V4kCy5Z2rc/7/vwVGU8l/EXXdYjs1dpB9kRdwOsArAx9oHaue
kySANIr5R/XbmfjMu3qsw5nsF+MNy57eKsZlY19WepJ9l77C7N/6DUXYz3Bs
td5I9HFU5L/9h/PRXyVHbtt2IfxUNl5Sm5iH8ckrfCa+kjz6sNF3k2EJtv89
fMmP6FWnMKfSVrwcN9/+Mdb0UQCdmWUqCVGlqGa2QX8m8bv2qROvpc9U4KYF
HQuXDwjB/65MwPEcxOkGh32CRJI3hgJ9Cr7m4WqO1ptzHwTA2Hsgtd/2Cxrm
iOruIPlIhF1Wr8Erx5I91qw/60ZhpWDFqx2yX1Fuu7NW/WkBKIhYm1iF5qPT
nLKHM8h+NJuAtfteGR5imVqe9R+Fe7JfVS2qCzDo9O80L5Kf/27RFn2UUIFO
zwX/PbYeBUbQp55rkQX4Runf78jFQrCZKGYVPy9E+cDx+94XRyH9xAeP2HNF
aM7b8uQRqe+DMt1bbjdLMKLVbrthuxCUQx/Mf/GgEo9rRQYeUhHAPZ879H+X
y1Gl7H0UVgjgZfhZXQZW4P5PsfNTlxO95weWW7PK8dVNbAjQEYDq7od1P6zK
8HuK94XXxI8fb268HBRejHP00ub+/3d8bT6UP7Q5XIzq+7bbhVUQf7x4Kv6B
FeLLC2mlWyuF4GdxalX1i0KMfno8daGBEIqHov0ka4vxWK5E5b6Y///Ov3r8
4rAKNGqIGJEg+Yzn0pqoYow4t9L44n2yb2yTMOH25pSgbZjo8hBSD/n+i1nz
55ahulO21rWtAqg9tEHo2lqA+WZKTXE/BOCdxDnyPbQEVxU/vjtG9vEZrpqb
C2QrUONn4JvcS6QeOZ8OFuyrwlvrVyz47//7dbdppt/uWkz4dmORH9lnc7uy
jF5cJ/r4PSnvSvrjEli2fOdnxPj93l++WoxCR9APGS96BZJAkq9N9gvP55Me
psfLUSTxYkNgphAmY58YqV2uxuC/zxXmkn5oMGo8Lvl8xajMabNIDSFs7nvk
tPZAHVYO/VGN+seHsnHNF7sIb1nnN4gaEL3Iinzbk2RUjTue6Xw+M08IYmnf
vQxWleLqPTWWzUrEzy7od76orMQNKU9lZcb4cNQ225OSU4ZjGk/31K4j/tG4
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
nGnswK8fokHEgW4l+d10VDR/GldI/GFJ/pNTFTeIPhSTLnZZMOAA/UDz9HUW
SnWHPAwqp8FvXZlNKnwGPtVwVFC4xAR+YMa8fl+ixx3vo/7/vwrmD0aPbQ0k
1yuLP15TQ4NBS8tJjGSg96GVhnbHmTBxkybzp4OJ26QvfOl4S4M0avotjw46
fpxn3CpJpYHScd2ZaUV09D1Q+Z/vAcInKaU2jUUsnPv+/WF6BgN2vK0u4tQw
8JahY9e2IjKvyf98o/8x0H1MTsKa6PWb5v21NYuYOJa+MrTqIxNyS5YcNjjF
RMOFO3QzFpLncwn9soLJxGHtvL49cnQ4a3dnqOYbHe9ekQ2ROccAWXpD9mk7
Fq7IzD+37C8deLki2nt2M7BtgXng5uNEX12z/U4YMXGOxa8DjsCEDr83C1bm
MVHmxQqDl3MZwK69lNOyjYW+60INaIsZoBfnummbPxM9jXdEvVNlwkLP79zb
OgxMPbWKebKbAVtm2lXcX87ClJftRx+cY8LwkQ8jsUQPFc8XNafr0qD+y4u0
wxwmvvOutIkrpUGV7Fy3/C4W/qpdvNvzEB1Sjd4uXl9D9J07M9XKlwbZvytG
9kQz0Ugu+7Qv4c/2n94JS2cysbYgWPncIB16X2VQJEaYWJktmTo2jwEOC3V2
tgwz0acmsCfkNB30/lJpoxtZGHqxpjbxJqlnaebb7ANM/Lty9K6xHg2eyHg7
6RwjPI/J/9ObTYdutskGuRkstDrxq1Xejgb+3Q7XEnWYaH03UP/ZMAOMMxol
35Qx0UO/2f9WGwP8cltmHjjHQMpoq8bfzwzo7+OLeE+zUM2MFt+2hAFFaav/
VUUykW9lL6awlgErw54um3+PhYk1b08PPqHDiE13mlwHA/N2uXZfKKIDt/Vv
mdhdFmYJwwcdt9DgVrjyvwUUBo7fN0mopNMhIGNgdJ4m4bu2zJK7SIUsj4Pb
fETZKOb8xzTxPAPGQ9O48IeFcXJ3snJlGPAobcl/9oEsXOl0eVK9hQbFB3MP
mmmy8K9W5YVsVTqcCxwdqpti4IeDGfmCVBqMV9leC6hn4tfoE2spZjR4kxa2
Z9VhJq6td37hTPjWNufhriflpL/OZU13RqkgcWfHw4vRbFx77EzKhmnCL721
Dh9U2Hj6Xu2VL1F0iFh5ZZ4H4emeb5k64YR35dqUOQ7k/dUj9Ate6jRQWxG9
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
aQjNw1f/na+PlhHAbVlAKN1iHqhnyiy8tAjwQ5Xj4w/9BVj+b13kYzDSWxNd
teX7eHgx5upoAwTQDeas+qs2D9Nx/zlbHMfDh/1TK5PxBDBqPRKQx7QAPUGJ
g7fdCJCE2/tASnAeBr93blJweKiQvBMD8gugFpql+MybAM92aXJG9uOhie5v
671/AQJPjbzteUmASD4h8att6LzT2zKLK/NwT1Le9GMMHnh3hh+/j3jBty2d
yvQZzdnM/3qh5AJYsdwlzaHnpG9YUs+tEmDB+fd+MxIeCuY1WD8mEKAt6Y1x
LcJvAbtjjOJuhLfXgcv4EQJc3mf2bPdVxC/ft4UG8eh8I2XBguh9gw/5Hzg/
mYf17aitZc158HkRflpjGw9Ub7Wbm954kMGFr5IXEY6+ywjz/h+/A9HHdpBw
8MR+7YBe9Dyw6cRWu3/Cg6Kn/YG5cDyMHdFrSlcngEztaIUH4jk5sHzoWSMO
SGqiOn5Il4TvWwmnPp4H7+Fq89d3FuB7lVZ2tj4BpH3yUnWvz4PejbbLdORb
/SlC+z2lCGC+Kc9scooAQsMhx6USUU+oC/+RnkOA+zUCLun68/Bzs3JwhnUe
iAdvi124TAC/JE42xiQCrMVwHNu7dx56LC9zvEN4Bv/CxlNyC3Az7JxO3SMC
mIlNl4ohXedMuNhyBPHw78ki64iOBegaPfxwBunIh2yfkQkhAuAsHwU+5Ef+
TEoVGH9HgNiYogNXLAngObM8a4N0dJ8F9e+pS3iQvu08tyI8D7wrBwUiEC+2
p5YsO/8R4P3ZFeHAs3i4c8uA1a1oHrQ/aFwfjsCBon2iCKsL+p61kffBPPMg
8Fi6KcIU6dQF3S8PZ/DQJyV/R/HCPFwugO62m3i4NPZpTmF+AeYIb83VUO7h
ULqp0+M7DzFZE1/t7uLBbk5x+ivyOS5foUO/3XEgObnLVBbplftaxbNm5Dv1
0Q7e1xDe1PQrWRo6cBC3FOghED8PjvNxqN7g4PxvDbZabnTfr9y/nyHeDA4f
et1sNg9WxSJhFhLz8LGqPl6mAeErMaPAWwAHNwzfs0qiPVbszdWb/IKD0+zj
pyfTFuC6/7x32CIOnKWZ4LU0uo9ukuA1pGt515UZeOsWoMhsVkgc+aht1pBx
F2kenhqc/Hm9B/n42el+vTK0/9y5Ph0+xDvFaWtvjnnYI14jZ6mPg+2VMk1h
9nlgqDjO6/4XB0yp2YWXrxAg4n5C2XwyDjhry9bCWYggeOOg14wiDvIq8gtP
Ix38y/LtXdnSHIQEvstNciBCYdFCsTHyefez9C9q9HnYSKcb/Q7HgcMeiwUz
tA+b0r/0lGU8nP+hwqypSYSMB5HiBki3Dp8QuhI5sQDYgZintqhX+UYSSGJt
C0BViku+h/Sp1+S4kI0yES7ZF1Ssl+PAqW2TrzkD4ZOPPT8U6YZJzz3n3BUC
3DSaEDgfPAe/mY7OMyIfKQqK7cxB+GPp/M+CFeUy89luo5mtOVC+q/SVW2we
+uODz/mgHHGJ0fjwIspVK2Fp2V78OLj46a5GsC4RtA1uWze1zUG1eYvmF4YF
WFfxfpaJerKRapSDQQfSlehLxxkeIHx/kWHAZIkQv5D9YSIG5dZNBawO+YD/
9EDMbVsc7CPlydyuWQCB8yUaj97MwTtjnyhyOQGcakzoRq/wkHKwkjkggwhh
hFdimYFzsLg212CI9EN5ionjHG0OzNkcLry1nweD5Fb6Q4R/K+5/BeE4Iuz6
Fu3OvDwHGaMXGv+8RXr2pVL8ZTseZPXPvDXeswibXT1r7qp4yH1+ocgO4bfR
cCtpHOnd/aNHMCrqFTkS4u38BXMQlPaBaE0lgJTryG/TfzjoczQ8cDmaCJll
HEO1t+dgt8t9ZZsHSF9kNtsTWQlA9gqzwLOg3HKdIej5szlwwsuomdUuAC5I
ymlLBw/JNX/tK0wXIPVNr0TQGxzsxsv28Nch/tzd/dlCFeXCjGzvfyKLkHRb
x3OLCQf6CyTWnyjXRJ1aE/84NQsKh6JOzKKeqX3uCHfQaTz82zUjvKW+AOrj
z5ndu3Fgsq1xdauSCD8mNK4TJ2eh6ilH8yVBItgo0d48QPNQkZZvOBFABHq+
krQpwtdBKXU2u90LoB0nZq+chno/v+x9Xa5FMFj+5nntAA4iiX2HluOQ7qey
785zRDnQrYQrLWke0mpTmLHUOaDfl+n5ju7/42Tj4Rv0WfhIPrW/BH3fx8pm
lS8Dc2D/bsL85UsiLP4l9U2nInzKHeOrjCWCYqv0iRHUaxNj/4RZFxCBMZ16
5drPOXjG2kqaipiHvtHJ49lac8DMeJo0Nk8EvOdPbbUxlBN5eJ55RKEePX/G
bFfWLPQ9dRQUfoF64fOdEkmop1jE676tqV+AsFGJV28uzsGoKoOuZcE8zM4M
6s/8RTk9dogFh+7T7rtPSCB2DhQ10q61OKDeOSw8PtmHenilgpuKMOqNUbSp
1+fxUJOev7pXcxGsQjmVZtbQ/E1qLLZ5EV73+iaHEnFwNfLMTK3zIhy7VF7B
jfDEa72S7edDBA8xycjjV2ZhMWEP05jUAky+l+G3Ic2B6SQ5xxT1sKsL7TWf
OebA7nPvDi3UO3qZI8h8jHiorV50P4T4HNubu6yEeuiPrh3Jty4uwBnmsYzE
e7Ngw9Ttv1axCAEVg+VmXKi3HzY7RyYTQT8+8KHbm1k4uLuAr7JmEc536qjy
uMxBOiag6cu1AJu/Na4FT+HAKwIfdfUdEcDbyFdbZhZC4jkE75QRwQlO5rPQ
ZiFG8vW+o2uLsC7Q3ieEPs8x9k+5n7AAf/0EwyyacLCQl3DLz5IIo5VWjLf6
52Cgpba6l5sI1YoRd/qCcfAgI2hK/eMiRGbUem9fxsEGz3v3iR4ilCckPuZM
mAUl7fXcWs0FeE9pOWExPQsvVplFvdaJkN5K7wqxQ3hoW08QR3o91ubjrnB1
FoYztPdX0ogwc2PiYULiLJB2O6UufFqEg7IBs3NIn3X+uyVT/nABkn2NgDMJ
fZ/Y+d3xWYvweuPIvPHCLOgKfq3kECGCxTWeX3yps+AVwln78/+/Y7p/gOfy
1Bxcc7uUBd8WQeTWH+0Rszk4uXjh5eplEhBFJdlEUY8/Urbw5qneAphqMxSV
Zs9B1XWDJ3VGRHhxg7ozMGgWBuXLrp9E+KwKeTWzG/Xq7ynXfEQOkGB8gMu8
hDALWpbDabbNRFhvlOt9bzYDeRFVIVaHSFAardQyLoeDIAput4/GIgh8qlF6
xDALl1VdEg2/EaE0d+mGePMMUEknGrx/EuHR7Qc8X4rn4JTG7lYxfiI8yUgP
esM2B5Fv/PP5UA+Mf41v6a6ZARWGudokQ8Qvb/fED4sz0DXrsSxftAAnPlCq
gmZmQTT+A4+sKwk67Dr2XD45B8bB09oRR0mAwc7K2G+IT0zTgeK8i0C2XUqN
jp2BxVMLKU07F+GfYkPxzvk5uBvgEHfoGurFuzprI7engUXTeNigngTDy7vx
iqj33r35aeO/jUUY2aI/sfgzAwyjzgvM/iRYWP+9vpExA90hxyeEPEjw4hEu
YkMT7VvZQWLwGgkcF8uE9iJ8bNWWPLqqiPYt+2TXoPwMyN4Su7areBEGHqWV
73w4CwzaORIvhkjQm1QXfPTRHMRHrR38eZsESkFLf3YcngWmiCUbZUUSyBrE
cvFemAORFI9p20wiyCUIJra4zEJqYtWwHC8RrB99GRGxngVucjD7ZaSnY2xO
TXlBc5Dtb9fDmLEIIWdGUxTIM3CJLkHQLV+ET4SiaTv2GRAhyQdv3yQBd5nB
la2eaXh+Il3FaY0IvQkqEY2zM2BiacA+KLUI3Fz+/jGR0xAudpow+ZUEi91O
3KxX5uAxJ1+mAPL3sEhH83qlOWAILpo5ZLYI8sofOPerzMCQ7UPc/goS4EqL
eqIOo/02h+3ap7AItue5ogTvT8OHdKWAEjUS7NmSX/laNAPOqxHpu3aSIMHi
6buMszPwr+mJ3wkPIhQXld9NGZ8F36LyGgW7RXiRWzwePDADUvLyY60FJDj0
1pJwynIWuhTCNgcQn4Y/K1VzKUyDRkSx8U4yCTgFldNoD2ZANbW3ct9eMnxg
MfiGH5uGFO/np/b9WYTB2aMTVr9mYeTBi5ikUyQov/L6ZBvzNKiImGh5kYjQ
IBPbs0mdhZaIhqndK4hvDwu2F04hvsTLPTdD+sXCnmLPNTQFfqyF97hDiZCv
GlHvdWIGwgdsdz3fIsH6Dwj6aDYLxwsdbx+7h/Dmu789SgDh59Nly3uPFoHk
V2c1mj4FAYYPSi91EIFs7zT+RWQGQo8efOfxHwn0C5M9NnbOQDrHpvfqCRLw
BnxIy3oyC9S/1jleyWi/r56N+oxOg3MN2f3mZ6TXeSGxTej5Sh3KjfnCJFDz
/SbWPDgDwSa4Wp1GIoyzutQrEKfhSYVAfs15Mhhe3XS20Z6B92JOlTKDJGDn
42Eri56F/378UvSaRfuk9nlt2E/DqVfZ5z1uk4H5TKEKOMwA0bPtgHQeGXR7
A7yK1qbhv7WyVWYcmrem9/prr2nITCifZl9aBHNulZUF3VkY+35kp+13hNcJ
nJTDRYS39nfbA2lEyCXlvzmqOwOHuIrLFYaJkEDKo9zaPQsm9R37NxTJoHS2
db9c7TQIGVLva+AR/qqOCF55OQWn+ccHeRnJ4C2wVrEaNQ2FVEmftcNkwJdS
8dcOz8DP3c4vQ9B+xgudDW/7zsCNM8folCwS+B9zNjjYNQ2c3M7c2eh8W2PN
HTjVGfBIKth2tFmEMP27Uomf0DyfWD+iofs+eK7iLPZ3Ejq2jo6G5CxC666T
CaGx09CtZi5nNkGEy+UW/jlN07Bbld02G/n5r/DM9lO0aRCXof/i7VyE+p1z
0RFI/yhmbKPtL8iwZRXOddtoBrYmGFUG3RdBYqf4nzLZGShlHXL/ukGG7weH
TSdIM1DVwOHMG7MIHnKH3ssVTIEst430511kWL9/i+ut2wzsTBGJe+9Dhtaq
WhZLrQlIrxP031FLBkqI6g47tI93fbd2rdaSgO/pT37pD1OwRGTjC0bPm155
8aT5wwxcsfpwX/ILGeS7H/L9yJgGdiaXjBZ0v34ubeHzdtPgIY3Z8WaS4BxY
8O+WmIRzO46QWj+TQVg+Yv8jzUl4fuNFnRqNBDnJq/LD+yfA1edQwj6Ez0WX
+MaS3nHISsu5WGZAgWG/jETJ8Gl4LDXGEl6F8s2lmoHKPxPwjdyzPphOBh2f
TIOU5HHgIZrWi/oiPjSU5VzJHYf00msmQUgPBj3HnoVXTsCRk+UKT6VJ0M09
R4z3nIJDWsT9lwiLQEm6tGHTOAnPnEx5b/WRQdHq+pL0hRnwb65oVFElgZPB
gZIgvkn4+N9TpqZnFPhCv2rEKjQD9o5+73I+L0Lj3TkL86ZxEGY0CNVpJ0NA
nPjDnpvjwOK7fLXTiwI+/T5HfmlNAlvAX53gZpQnqPO3UzemwXta8VbY4CLU
KWbKfOOYgtrrH+X3IT+2uzji6/ljAnwPyWjEIX3/8qfzpuDcGIgU2Ail85Ag
+I+xyOaZafhTo/D3hgYZzmZUS51ynYD1K7lK15BeM+aadWg7TMHvxqurQZ5k
eHOjpoLHfRqi0jkpKkZkuGT+aSJWZgL6qUmDJdYU2J+u1maE+JbXraFqv0kC
xYSqXM++cTDt+a67y5QMi8qH4jdkJoH/l+icujEZHF+KvB/0GwP3Nvd3/0WT
4KbqKH/3j3H4K6zgKxJNhlOGQccGDcdgVPaYdelBEogqvu+c7B4D7tqspJcP
SGCdauugwj8Nptvisj2If3l1wtrlbpPAXPuR0ldCAU/s7LTG/nGY9vsteoGF
AoKNJyq9fo2CSdVBofIwCtiTyvr2eE5Cl/X5+SPZZPBS6v0bcHoSXrimHwr9
TQZtP4Zr64OjkB1TYLWqRoGzXQaR7KenYMe/rdgD6HzSHN454yfHYDcu9tTZ
VDKU1Vw5YXFqGljPlM3mkchwh25n5PRnDM5N7pMwWyPDhvHnlX6zadAdf1LG
bEyBv6vUE3zxk6CnIX2b6Q4JAhta9u/5OA5+bHi1orlFoFdPSUqjP/+1vOYl
cowCg9b4SN6jE+DUckKnf3kRUh7/Ozt7fwpMM17b6qqQwWfdJSNkfAL9veLZ
VuQvvhurQ7dixsC/7yWrgikJxpp9Z01aJoETX3mEOEQGj9/BHzVeT8DFguiq
zH8U8IucvPqneQJ2K7cTktH5z1LdrUZ/jwO3lEvXjAMZikYjakI6RkCSfGXx
LQ96nSm280/ZJNhEYTt1BajwVBi3ZvhjCiI/b3uN3KGAjWn31ojzJAT9zu67
2UeBkLWOfXeTRiAncyxL1Qb5Sf087lQNwk8ZOYzFEOnJhOS179RRGLhMsme1
o4DI20dmpY8n4dSjhYCAADK06DNKdtFGQFyINN1VSgYOP8aeccIoVBpvdQcW
kyBV/MBwLG0cQmKHXmZSKfBq5zHPvaKTwKq93rMPvZ+XPWx1K3MCavN+PlmS
psIxedvTQWmTMNmY8Uz2AhX0P2dF099Ngp3xdqYfwvcxp8PSuej9OONmtkmU
rxLJUpydDOMQqfkj+UkSBVZD2NcPV41DkGPZeNwBKpD1NAdmr0+A/67dWi97
SKCtf9Eq23kUlPU/GHQyU+D79fxG8YwJOKxPfz6jQ4afx5jzXRwnQZzNwaFS
mwRvBHg+bm+OQPvOQ/+duEcGG3nT6Tv4UTD4ttMv7A0ZxB+n7R7RHQOtTcq2
YzIFbCUYdIbNx2Anv1vhL0EysCQSOUQix6Fij5w7M8JT1nmhwxtvJ8Djsy5X
KQ3Nw1idy0B7Euql+uVVCWRwPXs6SPThBGxez3G4FUUC3bzh6TeNw8Cez+Sc
KkeBb/cNNHQNJuAXYXv3AQ4ydO7u8CZLjULbRfq1/S/JsFz223fm4hjkfT55
w2sHFaooEh7Pbk3A4h05Uo4XGeirdtNCxybA7Uiw/MRZKsz5fL7PJD8K755a
TZCnUB+49Db0fPUEkIra1RPMqFAbEOSiJoTwcbL7i2EZGRKny7JXF4fhHMdF
txZRKoSl/szj0hmCO7RzUZEJ6PtzuRfX0HnP7W8QoN+hguZOXHnVp3Fwt/MW
2RdGhQcmBrseo/m8fjLwaJcjGUbSD2wybY6C+DGVKQ10vvlrvy6HJiB9ulHv
rY7m6fDAuavm6gh0GnjxMEwj/t6WcF9B99sqsT7cpkaG7vF89Zx9o6BgbmcW
/JsES/P5JDJlDFLVruetIT7rjFFvKQsPw+MYCa7kR1T4I/8yuYdhGC6IswX8
TKXCrKP0r83JMeBr2Aob76TAwYYRpQ9Zw7DZWpishJ6vfXe3XSTzMNBLCoRW
OsjgT/pe6dkwDJMaM4KToyjvNIpsXUwaBOsM5Z2Vx6kgRX2W2s4yBoGdv4KT
k8jwFX/ijmzaGHw+nrRVEYz4Fq/9V40+DJ3cL7PCsiigxx0qiJcZBtUpkU+7
0PwFle2HD74Yhf8kBOWPrVNg4eEho7/qI5Aezxuy8IQCzl5SCrx7R+HKbys7
/iKkF1oPiY1ig7CDg2HzKisZetPkRBtFER78sfZVCwq8u3LRsHhmEPpu7Hj+
qQXpY77W9zn5MdCJjYm/h1HBMFjua+PAMMin9S17/0F6et/eTjl6CLgt3jDc
56XAg7yMQze2h0HmD5Oi4CQF8O+CbcVyB2E9f2/hHzsqnNdcTmMKHgUjx5En
rQdp0LqMxWbxjkD1hcwlCXMqcKnrvahdH4YXD5o+bCE9nmSMJmZODYBDI6WP
7kIFaTVRYsqNYXAZTrD3FSXD+ZJDj/b2DMP4F6buHepU4O1cMcrYMwi18n5m
X1+gvNBNvPkidgga5ZdLnWIo8Mm5b1Dr+yBYJd38HshLBs6Y/Zfuyw3DF5tM
ecv7FOBuiz0uVjwE1B2STYWzFJjnXFN80DwAL7L2/EiXoMDJLJNpvMEIJMup
x1X0UEHrlHZv+7lB8Al4mvyShwKWs6bRt/mGwaqU1VVjHwWkjzbhZPIGwXOZ
+CfnDBnGm24mHE4ZhmTFU5IFQmie3034MkyH4Y7bevJOVzJUXu1ydFUYhNje
u2Qq0t/yefmZxdwhSPANJzcp0wDncafJdnYI5meV2S/LUAGnz/+rs2cQ5fRg
cgALDZqtfgQZGg5CDHuoswaOCj5PewTj9g3D7DA+wg/lLSnieP7z+GG40R4Y
a36NBoN6NsUJJv1ALfaUDWCjQf5WyJGHkwNwabeTVxqRAus/r0u8F+6HfJ6I
YYdcKrTemClSIg+B+bN5/HgyGZxO95t/5huBPiGtF6ebKRC2+eAl8fAgnH+U
+cPBlgJv7zLnu55E8//wMX/CkQLJ+b98j5cPQ0B+tHqIOg1ir2iLy9IH4drt
ZIV+lD/b/45Y9lv2wbn4IoOPnVRY2vf4yWd037t6MyNuC1TweHe3DJMfgMp4
DZeqfjIMhk5Nh6QMQbxjCiNekQI16yJc7mf74GvsAp5BkwoM777H2UgNwIUt
0YcOYjTwjc6ZTnIZAG2DF+/+If1nPG1NVarsBQbMPLUyHPntobye01rDENl7
8ZYmOp/YMzHK9tlh4L2BT3qP5h8ko870AeExT0qEtbObAppl5YLHcQOgovSy
xjyEAq6/tz+N5SE+nJrZ2V9Bhj2Eiv9CZPogLm24xuMZDZbT23i7WIZA3fW5
3OlIKuCNn4z12gyAMOnHRgjKI66MnG8jOQZgZVvL4f//zpmltdv2RUw/eFg/
4gzYoMBpN69dDnd6gfpvk4MP4Wd1nvlc3rN+UPWl04+gPLov2m9yLLkf6bHL
q0O3KbCnNpL1C9MQlBKjzp2cIUOkncHhacN+0Ly6r3JiLwWiqiXF+hv7gbLz
9eO7jVQo0jNjPz/QC3eb9w7zSFNQz2Q5f3CpF9Z7yRGB5TS48f3XVuw+hPdi
GcnQjzRIn50/IbTYC8FV/ykFvqTCzev7b9cu9sCKzdUzq9rITwVw7w8bDICk
b64pPzMVFmVHtLG9/YCfw65sonxQxynhfvziIDz2Ybz6EOmdVaFfjZpTDxB+
PTLc00aDsIvrAS8FBuDVjggxJRwFhMLWRN6U9IHxQcdqsyc08DjuFfo7bAB0
lk+H1t6mwZ7Wc2cdIvohO8nwVcVRNJ8/6t7tr/tATTMJ17NMA+/BsrrYE4Og
+vtI3JMhKjw0OCFy6fQgVIse6LEPoQGbjrSwn1UvbN3ju8oqQ4Gj9Hn+c8d7
wGpR8eDvq1SQmzYVz0rvBZblTo5Xp2lQ/MFYM6GrF4pihLeL5Ggg4TO1qUjp
haHp9T73AiqEEM0f/5XrB5V9CmGC5jQgqNek1SsMgGD+8skIeSqcHMnjFhjo
A5qJuqaPKg1OOd+5IjDTC5lTzJ2qajT4MzKUkkXog/1tl3fdYKGCU2Q8F5N/
H/wqiFwP26CBlU7hi2LuHvDBuETD+ylQ61rYWYH0wzdRr2QQ5UGdF6fPRJ3u
h8gxgmNBLBVa8nt3ulzvgX8hjBcpL2lAjhc98Hi8Hzgcel771lDgTuxZo/Oh
/eBU8X37pzEVrEi3YtqV+uBmZKn1oCMVVAo9DD2zBsDK56/HDpS3Tn8JzSk/
3AXLRQRVWU4KLHOOrGjc6wZek4eMJ4JoYGK4Llyz1g8LHkr6A15UCKBeU2Fc
6gdXpouZNfoU+Fhw27C6uBd8+W9+a7tFg5BoX/7NI/2QaCx35JghFXzFMvZ6
IP0x6NfV+B1BAWAUVwuW6oOaeR1tzyEKNLx84LOzowceDP7eGVtEg7jJe3pT
UZ1Q/PLW2zFJGgj88jAul+oFXO4rnglTGoRfrw1VHuyDP0k/jiedokLcvYWS
3/ndYMOzf78wyn9uwg2WjLF9kLoaq82eSIELHd97qhEe4l60WDFbUsCies7v
a3Yf3PD1dxOdpsLlgYF8P68OELXilbsqSofuePdsr7fdUNBuyEtxp0FWiEj4
cini/z5tuCJPAeb3blFcxV1gQU9LfXmADs8lGdLezveC2qmFjGlWdN5bLyWu
hPWBVOGUPn8+whdfk6JnZBfUnhV493OYBpINvhJvRbthLLzO6FY5BYjsBgqa
E30gYbz9TVOaDvoHP/jLrLaD+XzYM7G3FBi3dvVw9G2H9sAHAmzjNLB4slZq
qt0DImZlYo+O0kH2U8iF4KBOcJA/xTaC8Mms8YjOk9QFg6tMpr29NNjO5lle
ymwDUZF76T/+UkG1O8DOfkc3sL1z6s9H+OHWrSRX8bcDN9VASMWdCuVHLnTO
DrXD5sQ7CXkVOlDm+pn+JbWDQgTDnhwnCtjNJWi8zGsHrGp5QIMR4X/u9HKY
TRvgnG6dlbajwUVi4Hr5lXZ47hOjZXGZDpEWRYcmEP+WTAjXuPfRoPfHKC8P
4hvHC/Ou8NNU4Pd7JiD5qx2KWHK4ZrnpEG47270l2QFUpeTNMS4aBLI0LIle
64EYPkl5rnS0v3b+FYXRXtALfbVx/SIdJA45kZ12IL0R7ul7yE6FLo1Kza2y
TmjqoZymnqfD/h1v75p1tcGuuZ2i9XgKHClkKeU37AHhdbO7ughvHP7C+/rF
e+Hp7dVT5cgf9vTIab1w74QyvuNDP7Mp0LfBeOAt1glfZH7DX5Svj+wQrmda
6oHn4a+bpE/R4Hznse2Gvz1w/KZOzR6U732K0q5V8PRC+YKb5Y6zdHgfqN2R
/bIHhkujcqbfUKEh7g0FK+qAghzRyHImOjQcJikyv+qCb++j+uaO08Gn1Gzf
r6utEP3z8F4etJ/eIhXbbY42aCM4dY4/R3mgJ8rn1PcuaE1U/hPcjfS4TD4p
f7gDjBfSGGS9qfDBICEjuaEV+DxN+3k+UEE3x8X5kkoHOOZhbbv9qbC53zfK
60kHjAwXeZzgoMPiTxGWxFc9UHyTQxhDfNW/OOEq19UMJVIB/dKCdFgv3BRV
nGkEBev8W40WdBi7vfalx7ADZsk/myyvoH25W4GYTgesBwgwlxyhg5WVSuul
a82wz8EhOWiMAsanMd1+rlaYMC9o63+F9HWqY3SYtRPuVVVkMetToTJO6I0j
fytIH28x28dGBdtgs+4vaQ3wyZ4hbUuFBkwizwitn1qBfo4Utf8EHRhGWCf8
brTDwNcpVudMKuQ0DJk+f9oBfcEMiT8SaVBuYP9cIr0Lfh8xfOD+iA5PW7Uu
stIbYSMp+MtmIwV+aNpxnaLWA2/gsNI3NjrEL1098FSiGcQFjWMWS6hwsUJL
ULC4EfblmPd83EuDHt2iVYuTrdCut+v1aXM6mCn8UI5vbAQRB/U13S2U1zdu
XXWdbgGFv0p8X5A+CqVR/hqxdUKh49XQkQAacB7+nbWjvAumg5eusaPzSGRW
/453qYeQNAue3C80cK16p9B9swugP08vr4ECj4Z76BSZTnjOcsLq9SQVEv2d
N5QsuyAYJ3nzA+pfPUYb1tv6nXCzaJ3AgPJf+LBGccJYO+SNMKs16KD5m/Tm
ux5rgldO94te7UTzOrk98vprOxSvPCz/J0OD41FnWthT6qB1WNRAAvXzgLGC
/+71NkK7ji/N+zYdtHgYnzJfrgNHrYYnuueooOyyO729uB3uhMX0C/6iQNej
jxNS3+rA/8WIIA3h6aXXAv3ta4TnDNN632N0iM6U/6ZqXwvCJ4MKlVNpIC2n
mTw93QaZb2Wqt5Ko0CxhkOzO0wnse6xu7UF9wIb5j29pWCNYvYi6UNBPhSsJ
B6zFshrhiNtLLYydDtU9SZ9r2FrgdVa7gLUJHYjMBxpvkVqAgznyYCt6nvVt
Jdn3y22gZrFhwFJNA15pMSP3pXY4r3yRULNFBYH6wBcf9rXBNtl8P/dTOjjJ
XjzF3NAAWRVqdpytNLhydNM75WoNPBiqDopFz/tsssjTXN4OAg9ZncZXaDDc
YKLN/70dWM4q1z1H/NW7men791gLxAWyR/x8SIPXLgOlAV8aYY8+rxSjNw1i
+GMvvDnSDBcTXVwVvOjg6VN6/0NgAzAdf3JQ2ZMKjtitpPpfteDgyaVC8aTB
DmH/r/9+NyK9umq4gafCW3PFZdOD9dB4f3X3aArKC5Lr14/NN4OuqenWXwvU
V8Leqc4v1sKbtKkLTHHIb3nXd7/cVQU7+OiNmkifphu0Sw641cLguX1Gx6io
b6XebjmzXA+X/WTD5ZDfMc8/CB9nbIGtAOkuRS46OJYrfbp1vh6Mnd7bRLNS
YfB01IXrpAo49W3nHlw+2g+B+eqp+Ca4TBSbEvVDeTBCqGLOtRLaum+3v0f+
y3PnIMbrXw07qE+Swrtp4F7CsNVhWAtxTuoPXZF+5zXv3xRWroUQXSat5250
UOEwI42qAnjPSpP1AugwcefaSdpYI2gKDZQciqCBZ3FL9b35n1BxJ/aHaTjq
R4QvJAWoBUERn1nRD3Qov6LRHvWnEsgneELzpFF+7ZQzDOZohBwXstF6Aw3O
WNiMkdkboOG/3JUVSSqY6Nd2yinVgoreWz2JaoTnact2vZh6GHatK8JH0MGD
P4cUfKEOmrm1ndmR/t/wJ3yXLamAOyU3lv0/08Ggrlh026gBfG97VL1wpsOl
tg82d1SbARewxNrsRwc+/YqRlX/FQMrhSziA8qPazud8r/maoHHJKY6jAunz
sTcfNX+VwOCuNgOXaCo8n9iyfXi8DKqSLBz1EJ9Tr3QZ5sqUgiPL1Td7PiL9
t/xu9+peNZzXEZV5e5wKigaElpzZRvD4KvuATYoKO1vPtN5XrAM9Bn25t2s0
WCPuaHW+2giiZScNCxAeuW1wY4/MGmGE5LhWsocOOesU3/H2CvC5ERh58yIV
qp4HBGX/q4cTllf+riI+3ShttU473ABrDZ0Jncl02LdH+aubbiUE+R8fYjNA
5xnh0TmqCfDgYCiX5h4aykVP7nw6XgM5m1ynVZJp8PHD0aN+/A0gKKb/SrGe
Bu3cbs2+m3VgJ5QETBdpsCXUVR/7ux7Ok8QCJSpRHhT9JqxNKwWdG8Uv8xLo
wCyhniV7vRoS1UtZ6Bw0YPwyI8ViUA32Sy9lqyLpkOWKxeA4/wPWeN9fHr50
GF5PI2m614GOcC4vG8rnyRdcmzs+14LtRusdOtKbLf43ZKOt/0Blv8mlv2h/
7aZ+OH32n/CkeScfD+JTvmfUdwGZevDosjJIJFAhK0G8xnVnMTh89jb5F0+H
g3LRz3KaaqH11YsJjg4aaF2/bHpMOQeGWJfZKq1ocCny1evD2zUgodmccBn5
bRt1e+X6jUpgGn0Y++ArDfjx7wX9rIshxaf6z1MFOrB+id9KLSgB96sxpuyG
NLhMS+XPsKuBdpV1yRfF6H4nmkwq8LVwLEjiO3kO4Z2hQd0uMA9yNnaoynyj
Q5Na1im3IYB53/PGY6s04PvMIs3cWAuR1ocnraiIL0OW+rd08iH2Zt8W/hIV
GucGx1iiCuCG7teNRQ8qHH3RZfwsvxLYOAS+P4ujAkvd8THb0irgSchc5kHP
s8YGxXKjq+Gw0wlmXkY6vFMcHr9/tBI8FR9zcqDzt3cm9qwm5ILFj2wsIJsO
p1pNuLdv5QBPGvUmZxsVZggNRyXKCuCeHoPCwBANDO528dZ9+w/8fL45jPyi
gqvdS6NYXCHQmCul1lGefLffM3+fTSXI+PVkkWLpQF569rDuSgUE9DfY1mej
fs6rJ8UmXQzqtzo68z9RwSJsiKNcKxNeYpkat9A+372Vd356MgF0zLiSuBAe
pB9bNpAVykGT4d3vJ6j/sccPD8x2JgADl/CZGR46CKVWyT9vzgfHMju+UKTH
NsFSGXuNq8E6d3phdp0K1erdjfb4RMij1Ol9OEQDfZ+DOp/yv8OfOd0CmZt0
sLg3P4DnrADPgqV3LIF0oGaP7H58IgEOBU1NlDghv7w9t4K3/A9unu0rW7iK
zqPzPvbV8UyoleO+ymFKBxDaF1+fWgo+Ab7aqgg/95wjXcWqvwIpzfLABfT6
2aef2H1OpkGGhscXqTS0vxPTV0ivUoFbZ+DM3f//zo2JVYMX0xeosOXzF92g
wnUC865nmaXQbXvZ+XcwHXa4ZVb8UoqA00WdvGqOdGhbVsslpqDzlvr/w6H8
kWsRJz75sxwufwuOFv//79C7TLTY0tLhlK4pe30lDfzm374QuJ4G8iup5848
pIP2fQUXVVw05KmbFpz/R4Of6mysl5P8YXDTY2dyIA2e/NP4xVOJ+FVetu6A
8kbTy9+fjvMkgoiC57hdOB1wcfiyw1vp8O1zvtE9fTo8OJtw7L+bXnC1eLn8
6X46uGUtV+rF5AJvb25cijzKVwqPGIGrFC4Fe/3LUKWDQErGdO2vSCifejwx
/oYGJ5/HFuxuC4f2FPGT//9/qSbvxF81yc2HT104pncvqbDng82/TaEioJTc
/K6sTAffSA12sawweGR+QuKECx1+43wPamUVgHPUTYbpw3Qw3iM6LCWTA7q9
7t+Jjmi+8l9OEA8/BKuEONGnWchvt1L1Alt8YFD9WLss4t9eQ8VdTjpZcCpR
LGkEzf9I4V+h41GpUJB90isK4W89orj7VUkWsPU/bee5RIMLi1c2J6IC4RL1
i5veA6SPtHQve448GOWkkU9s0+CWdpJyc3sqlNg/UQoqogOtPeWwKuTBguoI
dQL1JZ8vF5xECzyx72aCMlHv6ZDuenLctuw5VpNrFdHcQocKh8z86NpcYGJN
LXQ+R4N1hhNGLp++Q3kv3y9bKzqE+H7XG3n5AhocteYa0P3nF4/+/PI1Cpxe
NRdsidPApmFRH3K+gkshd0Eo8t+Vo4qOeww+Y88FvmX9eoOex94vTPwUBIFE
+rhOEvLHm3+emgjkQXN587mPeij/vui3+7H4BRwbL4dfv0MHwYd3v1qXXwC8
0fQb4hbqQ3LPb2bXfARRI8tioWakr15ztcUL0dhR6qqohQDC5wHNtfuq8fD1
oiO75XWUn3YsPxZWicXerXbmLSN/j9Tvf2Sq9wCaUmWL5NyQ3kVQ/fyTsuG3
7lEVdjN0v5+GvaHeEYDFuvxpKEd+vG9K7WN/Ktz4Kd74HvWt813Epf02aRB4
UdziNsrbQhy7iF0TmXD2QCmT2mfUJ8rGn5fVBYEjW2fSBuqPd47fK3hfFI09
+fyvQw7tK2x29bL2rTjsisYpzhSEV/cZ2dado/Ewyde4Ka2IPh9zbqackoh9
En2nwc9Eg0fvGG4yHYsDr5+xrGEpNHgukWTVa58B1YHGdEGUv0IOXXjPkm2N
TfZwav1B/Try2HslvlFLjHoo74R3MA3abkMW10Yg3G27GhK+QoWSOmX7M0th
2Cdn56z36mgfRjdTbHwzsLdTmi+HN2mg+O+y7b+xFBCX7P6zeZ8OX9svHCGU
BmAM0gYb3xhQ/1Hbd1dGPBUc5q/130LnZ1I7miit/w4uOLi1DCE+XRnh0GAu
SAHdm7u6lLToIDVDL579noYpqM44GKF9O2hraSwfCsDC6WJf/qF8zBWi5Rr5
NAX7uNmaHdhEg1fOSpIyJj8wFvruqyqadODecyLTguEttvLMTfwvmq/nytDE
in4idL9Sa6l1o4IIF9/FrdYAOEv7c9rWCO2PkWhXY5qCuV/yHZPupcKO3Me+
0ku+oDjkGrp6gQayceZh37H3sPVcYpdFM8rPH+Nyh9R/YJMFLrxWNihf1/Pu
qHGNxG7JiGofMqaBYHjs8Gb/Q+y98FrXjUY6BN07R5twT8GUGpODj+rTQDJD
4689MQhiltW6e/jo0Ohy/dWxi1nY5aWB96ZI3zMm7AeTz0bCftmFRP0qKuho
Beib5jwDVo58khbyG/G3MqxnpYLBwn2YOV2EBlmFrVtcfzKwtHWzsw3I/+N7
bXoHLoYBp+LiX3v0/XUnJp2J58PgxvTmcDma5w6WNkrA76PYXv2vV72ZUT8T
4gzKbY7Fjuwp9b6A9CSwDeuoi0/DtL++OymN8N29HM9/J+YBptvpsXYD6fWr
EYbv1XyF2AiLuXAc8os3+S6vGiReY6v6d/A3X1OBsUn+2THRHEzA/FqY6iMa
+HxPq5rN/4Lt7LjTpY/0kU+dP9Lndgo2Q2ANZlJDr5uaC6ol52OFoqR6LaQH
6Q78K1TXr1hINOv08Tq0n7orb5R/2mKN7MQjK1F0uGsRwHm/IQcb6za5Cz9Q
XtGiv0qaycNCSziVzyK/EJP6cvfZ61TMgrwowJ9Jgzd4VnmvS8mYU5Lk2lNf
Kjxexwc0Ivx8OhP+6nEcwovCFt8PzUxs93dfJU7Uz04KGXFZKeRhY1Fza4Eo
jwdnxP05ZJuCCadlZ/Mg/yjvXGHsIqVh7SoD/gVTVAj7yx3t5BqDLWhJR7yO
poMMUwKjVGsCdr83hJRwlwbdSq9Mxf3LsU1RpnBxBypoPsy0XeJC3x+udPvH
DZQvq79XvjuYhUVzcQaEl9GgYqU0nlsjGzsT3MfpjPjJECEzvclajM24/fLT
j6TC+RpGK48faRiXhZduLysdDGkGl346xGE/orr9H+5CeSDGJnT1Thm2i48W
N95Fg1iLtEua+cXYpRkHcv0LKgzXqNieDAnDisnSYT01qM8q9uVNHqjE7rLW
FBxE+fixsusx9W+JmP9Sz/MD6H6co90f4vQzMMm5Fbb7KL+/Y32uTDgXhs2x
mVatLFLh0vDtPSnjudjJC8SxqyY0mPggGdS9WYH9KUnmqEN5ivP9n9F7oYnY
yKkn25g5HR56xh0yly/BHIxOhJ97QYN3gr6hu7dyMXfyGx9VYZRX1q0fZuuX
Y5+HZaVYUZ7EvZ6T2PP6O5ZbmgmmusiPTipVNDnnYXfclx7fQfissj5h304H
LAy/UaLkjvK4flyUvmMu5rmGn+NB+e3Cvz16B5+mYxovl6pKo/7fnwMctZ0K
sYzbbnJvk2hw3CRdUPxADvbuEZv/a5QHI6u07MNDqzHR+0O3/0bSIGdZqeOy
dgI2xZF+uC6IDlPfpbpjygowXr7o6jIpxGcBbMTzSynGzksc3ReG8vmRA5ud
80nYp7cZI1anaWAZ4XfLbaME006r858Jo0OMVTTt9GApxrxafFYOnVfKiiWw
GX5ikWcWaRjqC8bnVnUE+Eqxc2lugitiNFgUceko1/8PU3jApv87jQ70zKOh
o6r/YXaimlVPd9KgkZ52RCC2DJvTeP7iPZq31tvHKqabhVgTu0Z8G+pjWq8f
xWWE52Hxh1NfnztFg8y3h1N58rOxLasIWeonOnyv0ZmrbSjE5n4s9USfRP5a
wa8Cl/KxFy7qt3LeIz20y64X8q/F3Eg9RZMIv/pj32w0t7Kx+Ok16OOjgd35
HaLrMdnYH1gV87JBff2xT3VSMmD8DdTYyx9Q/5M47z0dWYfVKm3n9M7SwMTu
ydM5fA126Upe9l2kB49qDUR7J6ox/MEeNwpGg5Vxe5c3uwuwvF99+5ns0L7k
GM916ddgvq0XZXk56VDI5OHEH1iC8bFrfFZ9S4fVKrYyT/darIjhntr9GDro
JL7i/RNei4U5Ub8+R3k6/ueGoHBcBaZcmBiVhfggnmvayr4DsBU173OV1nQw
MV7xYnKsxBhVF6tTQungl7E2/edrAcYjdybkciIVPNSfu/xUqMZkuyyN1s8i
PWmvv6VuWYIZ19/s2IX6oLDVUz2aRym2FFqut42nQsyGGrNVQzHGw/j97isc
FSpFvhS2hxVhn0yaOL1INMjAeuPUaMXYA8Gre/2NUb4tfak7ul2HFet67bkx
QwPDkpQLPCH/Yfv8PQUva6M8wboiu8BXh3XfDnzhrYLmbRIR0nClBvu+hzZl
j/p54KgnKX6qARPz3NNOvofyo9PB0Zq5YkzwzAGWyyh/PPJRf5eR1YCFkDY7
/h2hwf3SB4OS/5Vht2YvuLBYIH0LSZrLVarFqroNOA/fo8JPPuHx5LAGTC7O
fblYHuW7gyNX9H4WYx2iZ1Xm1ZA+ntzvmXqsEev2zfZd/b+e2qoLRJfWY+e5
paRoanQoCh4zd8JVY7Fr063XBqkwV8Ls8xbXiH3c/roYK4H6LjHhn/dGLVbT
FhZ/+wQVPnKE3ntt0ICJHgoZqkL3Cf3QZsfzuho7qzboZIvyEi114oDW6XKM
aJbT/xSjg+aJV+c5Cqowrm5d/aRwKqgdcSDIHC3F8t/kXmpC/fD+avbaUHUt
9jFOXRB3gQrM4h5uPcPV2Oyrg9sd/ug+x3jXuz80YPsemzww8afBJ9Z3jGiZ
GMOIp0LwQaSHZx51KflXY/O7NlcrJOnAnyb6+PjNOkzC0cuy/xAdblKId6NC
KzBXrkrmCLTP7a29bfL+PzEq6+jtJ2j//BEPOyue12DL68GBGy5Iv9w4SoNr
GrDTMR9dNL7TYG/Puvres7WYD+MP2Wrkn3+yDubv62rCrIrObsejvmJoWVLo
NVaFSX/4xr2E+t1SR7WbYEYTluN0euawEB14ccz6lbZ12L4ND+H//657gHzc
5UbVZuznHbZrAqj/bdhIPCYM1GKa0QfyPz6hwuWaLLYn443Ye52FEjFtGviy
X/u417kRq05y/SVYQAUtJwLt2lAVJuDwX2Qxwj9Pm/7tjycbMGEdps1IbuQn
A9M87dxNGC9jZMwzlKe7jXgHLl+vxaxC9Ro4ZqkgKvLU6ENZK9a8Y3WP3Es6
fNpBnGUg1GMPeJbvHLOngmnXysl+ozasbdA8fNyACq2XJ4tZ3zRi3EOim6Vo
P1prZOsB9H3/co1MD/4/vweX3yp734rpsq9LEkTRec8L+9qG1GDRcTdrz6A8
p9zjf5iU3IB1vbhYNoX2+cHY99KybQNmoX2oisiI9OWJh/tGYi2Ww5ldpY/6
xCNau0qAWS0WlyE2xHSLCuFUISXrxiYsvOwxiw7qW0YVUZsx4S1YzCn980td
VOi8dxGbwtVjsqNVXOLID9S3NJuSCxqxoBCdChVVGtBC1aODMxsxs4tr+0/K
0WCpjjqpa9OE3f+krX9HhA6Mmkks12M7MLo4bpFjhAISVNYdDNJ1GPlhnOoP
OTqQEx/J3l1sx15FvhG4V0aF3g8/3Eae1mHuk3fr7dA887dWFQS+tWAq78Rr
jffRodaxwffCpzrsxuLhr3E+qA8+ie68u68O+xdTZJSO5j0jeiQl6H0nJh/B
kpCMQ3nU6DHu77kWTG/7wM5d1+mwi20PS9PhZkyMV6Fwdg8N6pXnV25fqMMM
icsPPqJ5Gh9XLtY70YqJLm57njqA/PRdbrm0QT3mPfjikyXQQEFTvGOctQX7
2pF9dW8PFYqmmfhkSW1Yxfsd1ZdQvrv+9lPhgEMblvgfL8PH3TSwddFd7Vlv
xi61WNRtGNDBOssjZkKyAXMu8gp4hT5PCLM4ZHWpHTtwhOPJXZTPrvtlxhT2
dGHv3IcD9nRQ4f3+W5eSI+uxydbjEX/UqWAf8LnBfqIVW3Qm31EspMKq/sHX
3ohPAd4Xw94vUOHo4mGiN083lvjtaJA66nNs5vDIrKERE9jY0U++h/hbzr4g
/L4Ry55wNfpdR4GABe+qj1xNmFfHmp5xEZr/4LHKjvZOzNL88PS1aCq86+l+
KK/ajbHUdp0IQf49l9Wye76uDZv9vWlZhfyxXGy6uialG/te/2vd+CTqH8Ol
ksNaHZhxfiWnri0N5Aeny3+TWrDbsTkNv76hflRYxvXKpB17Xzu068ZHGjC4
rm2cpHRiU01+w/78NOhds/1WIt2KmXbirbsR/rktq/if+rVghYxuoaLjNKB8
eWK9Nt6JSZ/eK2iN8P3Jc0kiSrAF86MvSD5BemV5ZUlHrrYTM2P2TSX40aCr
qophgq8LO9fGkG++TgHt5uSE6MVuTE5kwWZaB/Xdq9dFjpG6MJXnxwUGpOjA
LCwffcu1B+O9K1bNkEaD5XOhQfSSTox2TobP8gYVLCcX+36mNmOKBbg+1fuI
PxkDv/KwbkzG44fkIQPk14e8A0d9u7HHPW8sXexpwOnlTbp6qBer7mW7O51I
g7yh7LTQ0i6sj/lyxy0BKkQLMVvLpbdi6QNxjje6aVCq3eAh8bkbi/9cJHao
H/GdDc5942/BBNbTq/a+pIFDI/Gbv2M31uRs/YpTlg77Y+S7//Nqww7MSdz0
RXqomDO08ulRD3bx/YMnGLrPTnPnyfG4NuyG/M1Ika9UMBkeTOV63IKNcxbb
4IZpkF8r+7xBtxNL10gkrr2iwVB/7JrDzV4siPNNTKcZFXy2nCt6bVowT6Hv
uuX6VODSZxj9s9KKXdRgDzh2jgrSeqKfXM90YmeC8vXn1mlwZv5cg/ajbmy6
sz9r/f+/I5ydI2+l04blrK7nqefS4MgW+31EHkxg0iclKIgCjQFrspW/ezDF
o12ZCiXIP3uWOc2qejGVulO9XEfpYHe9gjdsqgOTfFgqqY/yoCsHuc64vQ3b
blG2EbamwPDYyuk9470YmwXLBSekVwm3q7+E7e/DuvOU7wQ1UsF/9N7zB8od
2FPzA8WTSG/CW3hkinQ7sKTufatDwVRwZnla4lbbgcG/G5ayO6kwaz73+r1l
O6bopvWR5QQdlO5ONxxb6MFGu2QvbbfTIGXWqV7aAO3n7a6Hat40mO0zekwb
78bGnf96JSvSwbn3/BFD7h6s2SHPwDGVAlsFdE8zYieWevGDXxfCt6/80Hjn
4U7saJXBJUZ0Hq+HjF8epKD3U685LEjQQfIGuekTfwcW9D+Krjsey/eNlpBU
RimJiIZZlKShriKrRVKRhqwiWxo0pCQRWrJCoq+RhoSEC0XI3tu795BEJH7P
78/n8z7Pc9/3uc4517k+Pu9rt81TxREhZuxOXxvxoRGuyV/yXU/4g+h99uOd
55tg36YT3RPtfFSYCNoWbN8B/330CINZPvr5/6Ix5dthjW9WwhZPIe5YcNus
iNQOcz2+1iR0E/P+vprzqYYt4DNa8chvLjGvVvxY5WzSDMotfbeZh4n6sxcx
eX2NkG3iNd6UKcQtEWNSm6AD/qrOTuzbKcSB7zHKWcT+XyVRuEVr+bjRDbaH
b+yEwhVZVvfkhVjd/ijqTlorrLBOsvtOzEfFS/471vi8Axi/y/mPtgvR643S
mERCB4Qqc5ZnXOKjatZBh1DnFnCM+vd2qlSII567+j9GtILHRS2Z5Yf5qMEX
HJV3bYPo6dwP5bUCHGIZfj9xpRMkP0tXj18X4jq37vzGxy3Qsu24try2ALcM
iDHn+HbAxVeJdKcaPi4oJGUtiW0Hvdu2Z0dTCfyTni7k/9cKKQ+OHY47xkcJ
x9bcfYc6YGv+RMgaIm/OkRAyUyba4HpCgaGKHx+Pa7V7XQzsBG1FK4vgW8S8
6uFXtra9DS4sY2ZP+grQ/Nzgm4WMDpD+unYhfYaH1mKnlS1utoF/cmRAuxYf
WcLK246HW0A/QDvtiAkfX7dsi1n6thNKDLWPbWgX4oH/zt2/GtsC62aVX47t
J/KBzXIvE8tO+KEwZJ7H4OPUn6xSWccOKDHJi5tqEaDlqF9PKKsDbnTv6w6d
JvKH00X9ByfaILKHsyW+jY9G6x0fypzogMTeB5n+hH6P3LhbJ3arFSrGH9tY
5Qlw9dtbfzR9WsHub0yt0JWPghcxya9WdRL5IsgmYTUfdbLmt66W7YIzT3eM
exsJ8NlfxfIl29tgyQjrfPF2Yn4IuWGuPd4OnyTtNw6e5GP3vKaAXU9aobpL
vO2DMh+ttRfUFVd2An/mx3izsQCvTuYUsWra4SPFMPYiwQ9POyfTH6s6wGf7
prJ9BN96n/U22HzthK4PsvvtjhP90Dt/WGpJF6iF57ronufjpzkaZqeC26Dl
fNy2fdM83FjA1KpP6oLhF04LbZX4uJpZ/8C1phvqYkv13Fk8vFba+s6mvxPG
eI9XBFUT8/6Oz1O3nnTCxi0XqxKXCpHL7A0kGXaBjoHKxpF+PtKE2Waprd3g
JvZNre4KMZ9a1FukK3dD9oqNEaaxQizU9qWFy7XBv2Zqtn6tEAuuluQNEftf
/0Te5XwrD0mNm2KmdnWAiC4/J/ggHy9RUm+rqvXAytDYQ0sJPysbvby+7mQP
fDKvjzunReRPIdZ5FbXDuJmSIUOWj44PtZMxogvkaqOZA8S88UYvRcSmoBPe
Sy+hv9cg+GyTkyHc2wGsBmPaHCI/3q0zVb6zqgv6xlfuXfj/7xNkv8geIeq9
6dmMRuxiAb6+w/kUFdIOdovJFa/NhFjZzvvg09sJPSXxLv8+8XDTs6asbe/b
oUr0xoVEYv4oDCqN50y1wVBp8Pm5Zny0ce0vnFfUCeZPmgeaVgrRvnJGPbWx
HT73CmcSiP6TrHq65uSNbhjN0/6++rwAA6wcjkBEOyizUgIUiP4ufvJkcbpr
Jzw1eSS6U5yPcz7Uxfas7YHrOw7NrVzGR3OnwAvTF9pBXSWDvzyWyBdJhZMh
vB5IOf+Mfb2Tj6Urm1puv++Cm94XfEgb+Lh1FUd3e3wP+Ll0LF1C1Ds2fmHz
0p1dUL6cfNztNA8zQueE7iPwfv578bcYYh6z+lR5SulqNygZH68J1ufj6ZWD
nyW9eiFXx/VzaysfeaKa+35d6IaiX1kyBTcEqHa4fH3Hnx5QC6h07R4UYHHs
zYHDMV2whOuo12DMR5ntVMNKNUKPQa7BiRwBzhQ99Iio6oawzgLZ09V8NH6u
993/VReo58zfKP9XgP+RDANbIroBFxQ3biL8sr58nL79BMGvsxNRCwi/UN5+
a0OGWTc8djAK6CTysP++U89VurvhdXI4aVcFDxd4l65P1O4EcWFBIv0jD7XU
H3xvPNsFlk6WVud/8NDManL4fGcndHIds4ImeJgqk3w141s36KonvH75hI9S
7fUwL6AHNBxkDOdX8fHmgcv6d8W6QSRU0/OSFR/jtzBONhT0QpPdeZrbeiH+
9EHTyKFOuP5R06lwiodGWy7dkl/RDTvGop6mEZ+zWvWLZbq6If/QcH5RJZEP
1+bSTUp6QdWk0u/zKB+F1MPpIs96QC6lIzpjJw+DF3o+qDDrgp+LrH62S/Jx
rs3ITD52wehxUXcdYt5p+epwayW1C4I3zpoEdvNx8ft5x2lSfSDQtlGaCST6
96P4HQ3z+mHRmE+yDaFXU8rk3fCYXthyO+Kve6cAw2hvXBgTfVAyZWByZh2R
j3MZxmXYB7sX/rZRfMlH+B4Kt0O7QIsSO63JJvDmC1X4xb3wfXdUrf8kH0Xs
ku7/M+qHUJ1Po6KjAnybYTug6NcHbqWjJyi9AnwXvHeutWM37GuiWp/N5OFL
28L2hR5dUDWV/3H1GA+TjJ21XgX0wTj5j5SvOYHXXfqPOvdeCDKPuFXowUPK
NUf2v3l9EJA8fOs1odeqU66+04x+qHRIt2lcTejfmaq6ebQHgpQOr9X9xUc1
mln0TF0/RP8q99m6UIDdEqWTpNouUDye4ZJN8C9SaE594jMAo5vuq68VctHB
pzPrukEfbIoImmi4x8NfkcXhZUsGgGQmNtxrysP4jwXiB18PgOpeg+BcCpGP
Zj3UnRK64Wac1XBVlQBFDxyIcyjvgwuLVh3NGuah5w1Ops3uXqA7pXwwlSb0
f8jqs+ilXig7LrGG85ePB+YFL/sT3gPTr85ccnPko11OcHenVx+0XY2k+34m
+sc940elMf1g9k5sZ+sGHkZbSKqPbewHkjv/paIUH6NFlqxp8uyB1sL4XF95
Hi69nvXnIYHvIpUMmUAKF0VW/XEZze8BoXnYz///zrXN21yaHrMfZOaMBalH
C/Ba55rpMEJPUyXvbP0TuPhHe/H0jsIBWFOe3DmHmF/fnXP4cmTBALy5mVHo
4ipA086BhaZ6/ZAtV5J+LYiH5qUr1zDnDMC3orq8WIJfuwckTwSu6wHalyVv
vMd5WFhZ+WHwSj+oPZnjcuGMAMtZIYvFrPpArSDewSWUh2jwx+GhWC/0ie7x
zb7Ew7jX714pWQ5CSJXYzSwXHu6t487ZbTMADbYX/cz28PHxvK2OLdcH4dCB
HHT9xMeKJ/Yle8YGIf/6ieAVhN+L5I091JYaBM2ZVaq3Cnj4ukT7w0KnPtgb
cvP4BaKfSJNVA26tH4LczN7qPcR5AhM3SiQyeqAi5K1n0G0BbjoStDPVbABM
ajVn8py5uGP40T6/pF5wr3t61JpF9MO/OjsD7XphXOMWY0aTh1tazq+ce7EX
5iyu/Pb/3y3nX7I+6eo/CP5WebsURfj4/eSCSw9O9cPbVyfDU9fyME/KM9j5
by+cnbvQdjuRZ3a/6uB4b+oFcdGvPjYVXByNln1ycPMQ3DyjmKhBnP9Czl2X
YPcBGJei5Lbf5eLh3+IxT92GIKdZVUTBgo9BzrOeJUS9jNSbgxnFfPy2jyIe
PW+I6NdOv/TTeTgkZ3nG9PUQUJ0r1ReFcvHue8fUPewBWEz7G66QyUeP8WGl
e0v6wWjilWN+Gw9vzuuukXAl8C1d+Hb7QS6uDSvyrCP4PpxpFcog+Cy2y8jw
R1If1KdNzF8lwUMPnvdUR80wvNVqlXQz5uH2lZedrMOHIKD1q31JPBeN+4vW
pBDv5796+f3VCkLPo7DFS3UAjs+zr6lbJUARmxNTO6qHwc/Nfxunno+Fy+1e
pFkMgIVMR+AKwq8P5wXYF5MGwe+6ver+l8Tzhy/RX0QPw/c5x8+GdP3/+xpk
Uod/H+zo4F7rSOOhd4XHwnNH+uDlnZ/1siwuxvtvPSU+0w+6xrodapu5uEBZ
M6Dl5hDop0eNzp8nwM2HNrU1PR4G37CzX2Tm87FPX/m76r0+mPd+lZ2mPhc/
nyjNjkoeht0Tjq3ZRH57np3MSieuC+pqP5jY8zHxUHPF5exBOPyopPq8CtGP
S0cli84NwKLg/NQ/RP7V4T/wVXs6BDuyAlQuEHjmx0geeGw2DDcUTy/SJvHQ
NyUnn7qUBGlyuLj/JRcjtD05bp/7wTkuyXnLES621HZyOLIkIJvMFp/ZSODZ
Ov32oP8QpEZVPtBJ5eNtjdRZ6/MDwM9WCHlHzGsxP58trrLqhy8fL35rzuWh
0tdPE+sJP1407D6l0M5D6N4TVmdNgsSQ4XPziXo8Nfm379llEowuaw1/48TF
VTe5utpjQxD/ZDGXR6z/NC/5Ri5tGNZTkw1Nzbh4caoqZ3DxEHw7t9id+YqP
IV8N23LUSZC3VHPwi4BY74nM+qJoEuRsMDS4ksNDhvK8FeU6w2AsnxZrlsvF
nBC9iz/aByF0ee4Yr5WD8w69lT+6ngSsV86c9y+4qGVeUneQeD9t9chgUzQX
V9een1/qMQQeB86V6SjwMWr397Yn10hwmJZj8v/f28hR0XZukBuCkpmkDuY2
LrYpXpPjhg1C0eoKx3AJYj54k/XT990wHNwz+qpkiovz31qbZ4uSgSW9wt36
Ig/XDdfufj+XDCPthWffqBDPf3Ew3XR8GP6JnBeJWELofVNmpAaLBOfXHKpV
zeegwoqmcpIHCXSkLjp4byH06Tltb0qctzx2jqd9NAe/Hr3XE0no7dk1z3vu
ujyk7X4ZdOAUGSiRU752BH9svUZblZaT4ZthuQbP//+/E792ucpCEhzz0tAJ
MiD8xGOl8EvjANy12B+ueZOH2uFXDppLD8Fje5r2G+Th/bbQgsISEmzUKHNZ
SvTDtYqPvnOHhsAtk19qeZGDjyqk3prnkWC3pNkpKeJ813+u8TJwIcH8JZVX
ao/xUPmy2WypOxkia6TDhkM4GPrE6OgZy2EIaRTZsLmPi+y7chNlCsOg3Baw
l8Lg4Ivf2hGy+4bgqqk6Nb2di3Ml1F/7iZHgK3doj2ozD+1tX7Ya/iHBc620
YK/HPHTLe/dOL4UEHte3n2i05qB0MUe3QJMM21ZdEDQS8+xDXebw7ZxheGB4
xPHXOActBB1uV9cOQUjoMu20J1w858+QySf2M02v16ol8pn1x4mvSbfIsPRK
0jLxch72NEeH2I2SYPj+GQv3JA4GLGn4+KSOBC/dr6h7E3ntyrDK4JdwMkji
XflrhB9JktNdFQPIcN3ry/OTcTzccONrmXI9GTiCZRYRfoS+huUW162gwCj5
mhHO5eKvKx9E4+XIkGPh9MyoioMO29beLdMngS91z6rRfh72imZ9KjhCAuXi
aP17fhzUX/T8crL1MJy74HZ8zzoONiyIqhqaJa5PygVGuxF4+C4pNf9JguVR
1fq/wzn4zk9cXG4NGRRu3HuiGMdFVc5lo7AYEnzSCzj1Mo+Ntzq62y58J/Dv
WXgxQZmHuc/cX01pk6Bq+/Zd0sT+L4ToNSZKUmD6cKxL7HUuZghXSqmQCD4t
6XWMOUeslzl3yfdMMoyvOcC9fIyDh3Z/Zx74SgYDqagT6+u5WF158+ptJQpY
NFv/Kshko/uP+rUvxUkg6xFbhsT7Ap99VFYMI0PHb/lfNFcuTskZfvd5RQFx
/q78N/u56P+QeTx0AQm8nhw/LEX0/1sd3zRDnSjgHW5//dYtLr7J0hDmtA7D
xZbymlji+dK3hY3RD4dh9LtnxQ3i88A9mfsdvYfhqneLsE+Sh65c3eUrnpKB
r7/jY9EfLmYP7klp6xiG/sXTHpQrPOwk7bLmJpChZvfqrkyiPtbCY2GHgsmg
vUls3StbDrJFHwR/8SPBUd8Fb5cRehu4Qik9/2UYJJIrmkqQgy4G8x+qPyfB
P1lJdlAoB91q1jdqH6TAfuXMEw1GXNSXj9cqVSXBdc2GKyHqXDR/KVMhPjUM
G1IfvLjwkI1F9MgnKzwooL3GTcp6DQfr1l9QCKuhQPjP2hfhKVz8G5PD/OtB
8Osom2c9l4cy3+/Pzd5MgtN1xmZSmhxcaBiu2SEggS3jXqIN4Z82Qz//9bHJ
8Jqd+r6UwsYvdRPOGYR/6uylSQdtY+Njh/v7X4QS+x34o7PchI3GL4M+RsyS
QU1PW+nXBg5+DyCFHNtIgRea79ojOWyMjz6Td0eNDLvFXfKUDnFQa+4tr2Aq
GaQPnE/yEWGjQyP15hpRKvg/Xl7SdpXw0yv3ZGgSVEj7Ode+6h4bH92MTaX6
UuFgzt5q25cczLWUsCnIoUA8xoXsdyH8bFvPvXbCL0+7SfvUE3oRGK4+Xsqk
wH2ZD5zWdA7WeC/8PVRLho2hFA+VFxzUbeqbT15KhTXz/DyWNrFR96RZ8JIo
KsQpJpZuVuXibGBqs00KBdjTpDF/KzY2eq2Pyokkw2F1I5eEBxxU7ZqzMKeS
BHcDzcdDW9jYHGHe1ClLgeNxQ/MPNHFx3C77gcR7Ao+lk0bJbhxMFAtPykuk
QtCjNyXtz7n4xfuuBnmaDLbKdi3pBWyU27tQZY6QBJfPWlmGenLwcVUGIzaE
Cj3PXRjv6Sx8d2jLtRuDFNg7kHlL+Q8HYZ4Z9fEmMqTdKZ4VI/SfPXf48PII
ChgXHunuI/R9ex/VXVKXDMLatOll7WxUOu58frseFUZunRHsiGKjlb3uREYf
GapyXb7emWXj6OiwqH8JoVdObFb+ZjYWvrM4y1hGg+eMa6Rb+mwMlwRx2jMK
ZF/zpIXwWNjCuwvOhD8EmgwxvvgT10Y257fL0mCxdEC7B8G/RDpJ8ziFSrTx
9NzjwMax+RbuynEUKF2yLHDal42ew0YnfedR4duUMlVkDRtPv/dKb3pFhmnD
//rvEeu/Tt/8WL6YAnbatw9VSrNxx6dI3sB+Gvzn8T79414OFpr+ck2RpoDa
3/nWzrpspP7+xFLNo8BZQrIxbRyc+ZSrwHhDhlUmPQrBe1lYW5j163AXGeSN
OfrhE2ykcNV/r3hAhbqxWCPaSRaW79u7047g48yIU9XZMDZG5o2+Cl5AA9t4
wx+tOWxUXnNky998MryTunBw9TYOkhx29iqb0yD+47r3cxs4+Oyf7HRmNwVu
aH58OFDAwnuGHU/SCb9W/lGTvofHQaW26p4txPOHB958enuGjTJkPQm6MwXS
9lx0ZWgS9Xg3XdWTT4Xrby+Rhwc5mHw2LXWDGA2EthGJYYfYeMh25oX8HiqU
eKqM3Zpi4U3Bv0S9MjLof6LWL3Bl4Zi26XO9YSqEbpHUad7DxnfqwvM1d6hw
ZLTYsdSTWI8eZBv2nAKG0sM+0j0sTE5JM8hMosFMiu5LMwKfsmXyUpvUKNB/
wLhpWoKNNaILtuZPUmHfexHrCRobLy+KWbzqExUc+duzOz+yUPXmrU9X1lFg
34ufR8UJvDveN5DfZtFgKtLu194+Jno1iV6QEaVAG6T7HGdz8HLfN4sdCnTY
uGeeeRKdg7bDzP0jRRRoNbwx/suMhcZeohv35NNg3/4BOfmlLPx74HlL9TwK
tFQlMJJJHJzb/P74bU0KVLMpMnffsXHvlS+KjTeosCE0QlpkFRtDbTfk5r6g
QexKPQfFIg4GyWS4B7RSId9iorBqlI2OHg0TJ47RQUu+c43FTyYOPn9mtKOU
Cj+0ZTfqybLRhnGW5L6bCgdq3mqctif8QLZFzsOADofsJxWrvzExrHDWKbeM
AiejL5juimfiBe/x9qcJVIheWOD9KpOJz0RTHtOW0qCEsurWyjImWn2cr7Fz
Mx2eZj15+PIeC0805vmYalGhUDHBqzeJjdb7o5aftqQCb9Kl2kCUhVe3Lgxb
lEqByFo9s31fWBhkVcQ7LEWDlvENTzb3szFL66951V4qsHo5eZJb2OgV7Dfw
iLi/bEjCqkSZg6eVVj54rkoFKqO5FIn6beKJMcsMqDBvp6OkHlGvhVYKy907
KRDCo2eMrWOhyIsL7QE/aJB58vVq5R9MvFe+W2KePx2i1r2IGSH2t6tPc6/4
bwr89rhv+qiIiUY7zxgUkqmQ7m6VUcJn4YHOXYnUHVTIurS3LIPw856DB5IK
5tDhmM7aZfPbmahwYOarRxodWqYa011GmIjVVydkz9Ohc0Sp3pLExIexcS8z
Y6hwdRc3U8yKhYbpZxVaCX5MNkqN6xF+eplhGfpdkw6hWrcfd8UTn3ebin7P
psK/ferr6T/ZGC16umKvJg1+5+dS6kRYaDRA/2yfQQVjp1XTfYVsNH8+lFJk
RIXwqjC1oT1MfHP6nvvtH1QwOOT8ot+MjfXPFH2dZulQZpCRKPGK8N8/qeEn
Z6igU1hpTy5k4Rb1r/O1V9AgQNMz/2k8G+NePdDa/ooG6eFxEKnMxLb4XRH3
42nwtGhz6SJCP7e3xNxTvkno7+/eyYmFTOyfdE9OdKHBpcJLs43/sbFjWjMr
05EBDr/V2B2eLOzbPx29TpQO+v1c60OrWOizNEn+QTgNPHVyLGpeMdHa7n1x
tToD5gSuP8S3Y+JAqq9ZtBMVChTzhewWJrq2bHm/K5MGpPkjf8aWMXF/hs/X
VCoNbl05SZNnMlHcesfUWC4VSFMhxvK32JhPr+h1TqZCRuOaf+EEf092XPWk
bmbAfY/YjIffGRie0Fq1LJHYr2nBUrenbCQt2jA8I0kH+x9qNWdesFDn7brf
BcU0SHFzDTrNZeBp9w/O9FwaVNb5uZ4vY6BTyfTKUUMGPJPbRjM7RdSrNfmU
WxzB/9ygY6f+EPxytdW8zqCD44/LsQ+QiV12wn/+5Qz4NVuS1inOxvvXju94
4EcHHS2KxzFvBsoadaydu4sOKgY3L+RfYOKd/46Zvbehg3XMVYsxQzYGDFo6
mP+lgfXRDFEnov6XVn/e4DBBg7lzXolV9zAwf75KaaM9HVZzj+7JX87GN4cX
5foT+Bdn/hZtdGLh2Qb/F1te0sFoe9SZyhkGPles+av7hQHVYt0H0p8yUdJX
deJmEB1i7k/ZXVzHQHOvdHFpOh1ev2/Z8fMGA+sHv9fw3hH7dR0/v/UwE19b
0gtUh+iwkpteuD+P0Fd31C3rhXR4Qaq3WPqXhVd+kcVOraOBsf6p7QptDOwd
oiVXldPhY4j6S52DTKz1efZOiug3JXeG8sI2MfDwbeX/bGh0+PfIZUXUUwbG
Wj0J9jlDPD/DO3BiPht9MxjGc3VosNLDIJnKp+O9nfTtei4MmCv8pt6/mIlx
s3HVITkM6Fr9XitiBwN3ZUxnv0UGXPf8ItUgz8B9/gqz5AgatG6SCx8vYWHp
KHJVgAErY642upqysHBJ+bEiUzqs6dkfyCP869AAW8u8mg7+/lp+MblMNFs7
MsfYjtj/puTXRTQmSkU6xhjuY8KsZPI+/2Amrl3j8cGXzgBRa6eyEUkGbg1f
8HRfFh0uasbMs9rEQu75jyq+nxmw2bPL7ymdjhMvd7ypZNBAmxkbkZLDwq6y
pylj5kxQ+/GSlZzLwLd/lp6ZV04DyRc7SOr3GfimtOtANpmod9jW5y2jdNQp
j22yTaXB2vyco/POMNEu3iDxwwwd4s+l2u1yYSFb/9BVS6I/OMfNyKevZKJY
y73j1BIajG/LV9Uqo6PdoYXygSMMCHpw+VzIMRaKK0mGHxtkwKZL9cfYhN57
r6zp3PKQDiHfZ3QrlJgYcUFSMfErDfjvhv+rO8VE9dqHdfG5dPg5/6bl9nYG
bti/RZNVTfiT6K343CUs9FVwPkTZzYT8PcYKjmfomBrblqpSTIf2FUubmvez
sGoyQU/GhA4Kb0w/rT9N4E16osMuZ0KsjvkfBQEdJbIeWn9ezoR+/akNg4fp
WNk0nlAtywSbofpQ3Ug61tVlDCV+YQKbYtXhQfj1w1pPlbgpBhwa+lbpnUpH
9lzrAzbf6XBVYHh/63WCb/3U+30qDCioNpYr86Jj+R6fBLdnTIjY6TNEekRH
9dU3a2JcmDBSo6W15hQD45xmWV4bGHCjoPfezAk6uiluuKRzjQnX7o9XdVUS
+OucPXQ6mAmv/WSYcYRe3r6Q0rfWZcD++zYvw9yYaJ6fRBbsY4DBOecGO1sC
r2m/xVqE/o4bLk+bb8hE/1vO0g+1meAi7bm5M4HwE+XAiFPuLDCXt2bEBDLw
hf2g0pwrDDje/+fM3hQ66o7DQVdZBpSWb30zVkvHirIkun0XHZx0nxep1dNQ
MG9hbw/BP4PT/qTBDiZWsG6B7l86FDtY37oxwsBIVVg1zWPAy0rlT5l7GFhd
U0DRjiTwZhmZiIUy0a3ovEZgCx0qCjcobNZn/P/vTffeeDJgbelLkeyzDPxu
PlR3TYsFwYsU18f00NDLZd+iBQME/0M2p0gQ/BQ9UPnV5hQL7jpHLLJqo6Ga
6XGqFoUOo8lLLaheTGw/p7FbJo0JD9NW69IyafjtXrXx0Ud0aJoQFjt20NHa
21Rv5g8d6la47+UcJM5HV8pc00gHbZOrvttX0vH+HJUW1WomrGx3P3PKj4l1
NtsxKYMBeVaSXoEtDCzxOZfoasYEuZXNltfUCXyZgftiLrPgJ1YvzdVgoOaD
YSvN+UzofHz8+uRzBlKMk6Q8DzFgcW/DiyAnJoL91LGoDwxIj6PVGd2ho2/P
2mpjJQY8jXiX2LaJjp7hirt2mbBATeySvRKfgSmmwgLpowxYY5j79shyBk7f
2+0mTayfN/O59i+hh4aRuOnKOMIPPqx+ldxKw5GFDmrKH1nQkrlg8fRjGkrP
5I5KybOAGa19s1aeicZ9f9mKL1kQ6fZvjchnGlbMeJ6Y3c8Aa352BY3AZ9Lg
3Uy3Pgt8D1xc1+lFw8YQ2WOJxPk272v6FEb0s6xRw5mh4yxYZXPKJGMzA01b
V1omq7KgZsZVNnAOE3eymg+lbGNDfYtw4EUoHc1ZJzwv32GBfulrm6e6dLSK
md7MlGXDxjie9QvCX2N3fVWuusOADdnjcc+HqSjSI3nnhiobOAyvxR6HGSii
ZNcBy9jwZX9BepoRA8tiWm3bdrPhSLzrn9pvVOx4Y53S3sCAt1oTMec20zDx
ma7N02AWuGxq0olxpqPC89PnPwsYQDrQUORwmYZvvUPrSqdYIPBevtm2jY4e
kgfvj/az4I84p6pVjY77un4byVgxgS6MESTNoWH3os9b9uxhw6Jvt8mz2nTM
2brqVwKZAd70qLTxYhre2S/utLmcBanrLqiQDtFwQOfoCXIQEyw35Fw7EU/F
FWmOhYynTDgQ9i345wo6Gu6+TNGJJNa/mP9+MoiBM5QD4dqXWNBvOljoL05D
4fX0y7FNTCDdtbuZSviLifaTIgnCP2MXA2M4kooZHoscW5zZsJ+1jq/syMDN
VnWGvz4y4XDBPa9X7TS0naB4pK9hwdixn6PtL6i4W8JEJSOcBcVRjRZns2nI
UqJYMk8w4a6Q8eloBQ1pITEj/B4m5GyqUQ8g8As+ZC35+isTNo6vuPrpKh1V
V49ruN5jQ0KXsW0iUY/Hw4uc5EuY4JG6rXuAqK/erqjDR9JZcKX7nMLXTCq+
qhhTXMEjnj+a//nUETpaNsd70tQI/VvzUjL3MjA7dkpQQPjP8Y7YNMsEOhZn
eKx2jGWC3mKX5gfnqDgxNn7x3mkWGPRpUly205CTELo67zobIpbG6jQ0EfWo
JXmuCmDB9dTSXaJiDGz5QBsVK2PCHT6vpJfgb+mux+V/HNiQlTK0rTefige+
Ng0sM2KDO4+3TpWoP+xvtNyQzQKf+htlD51ouG5dnv3cHRyoP6i3NMebjuHx
5Gr7/1jg2eqJLQ9ouCe5utJElgPiI9rVUWl07D7wd0xwlQnS55ee1eqmosO+
u6uDfjGBI0O+8U2Big2KP6+dI+rRvFdPekKRil2ax/bQOGywNI+8IWZI+M2f
sx+v8NlQnDZ3U4IZFZ1iZ1+03GYD5L9UzQ+nYc+2A1IGaYReLUs3LbOjYvHd
i1pi6QR+9rmdF0op6FWccGKBAbFftQ3Xh5zoKOc66hhOrKeXNepwZwkNN5ls
6xVWMOGmJW6iX6eh1sxBKe0GJkTmZj3ayqBh9cK7g+XhbJhr8nvz+nYq2phP
bfMoJNYL2zd44D4NLUX9mdZTTDCLl3h06hQdNyRGfEjZxIajI2U3aCU0/BAX
flzcgw3WazQjtl6hoswu/urRl2x4vdpZPZ3od8wwx4QNkyw4FJuZU/GP4OMr
2o3HYiw4veBT91nT//+/rta6jlQ2iBjEpO7i0nDJIneuhxwb/qinKWiGUjGC
vD3LVZ4NFqSEd4m2NNTZTjdPUeJAw0Sp/SZ9Gk71LbWWecyG1RYyAY4NNJT3
MUjZlMSG+9OnkpNqKailmKL0PIoNC/ICvj9RoeNAtsSRHe0c8DWKHZ+4RMGb
H0osygPZcPOpa0cuocd3IQ7PrYUs8Ejn/kcxo6HCokoDCXs2yLzTWpB2jIq3
VE7Y6duyQHzeh+J4UeJ9yXPOzcSy4EFvR/rKVYQ/sua9rLnIgm1vNyxaL0vF
xfUZ6TsSWNC2U1dESPD563W3zpEyNlBbx91/RtNwKKJSO3EpG6LodP3gdRR0
ulb67fI8FuTU/lUp1KWh77G7V5p5LFB6blPVCjT0W3x/LMCXBdr+3Y7kPCr+
yTBqNX/IgZpzM5X7eyn4JeCx7X+fWBD2xDeGepWCCpu2uq91YMHvpjsXx15T
UPk/V+tfhH9rBbA+b88l/I+p73NGlwXxp9PCNAh+6sDH10beLChUWx3bsYKC
Gx+NHdGaYMN6xuoi5UoKCpu+3omwZwHNxGV14BYqpkzWS/l7cmBqPu/dxYsU
/LHqY/20F4HPt9+qHSeIfqOB+gmuHFgSvr9DkUZGAfusz7w0DgzdOePyuYmK
n/f9qDcoYEMTKESJrqEifUhRNPobCzaYvPUdd6Rh76B1vupFQg8ZnVaGdCp+
cDriHnGIAyJUVb8t8kS/qjq60ZvQaxnT4UP4ZQqOXZi3YOYNB1z/+xMERWSM
FVclRSly4Exq4F29MDKmP1bU1SL8VV3ihafDKSreS1X+WznGBu+LCuG3N5Ax
kpWnaFnPAqBKDgbtIuqj0P655BwHrhm/vS2XR0bSz5n6H8lEP4kV0dMjE/h4
93QmXWXB7sT+taBExld0px1jD1lQwudNKA9SUPPAjyByKxuGDVZLNi6koumm
bUVK67jw3nPdHyNvKjLCvsrcbSH6b9NFWHiDgjOvVLRkVhN+cC8vPILgm+/0
b/0UNQ50SYpxgxeQ8WCp5KxgnANq5iRmzDsKyknQZXbP44Kx480FjpJU3NB4
1+69FRdqvNsmj86SUTp7NBss2SD+63Od1RQFu34tYqzSZIPbk2reqkyinkFq
nuXbifcJQ7ydR0lYVMXYMunPhicXVjy63kVB6zcLqhvWcEFLU1eES6PgL9s3
k49OEfh+9Cw/DGTMWSAm3FXLgr7Wq1NxhRQsPhW5fkkrB3Za+nsvfUXCbW81
7p08z4Zeg8dZoXUkPFIx6uV1igsmE3Z941vIODS1eucxZy74FZ2o+KhIRvsn
JZoFhVy4v3aQ0RZJwq5iXuLWVA78tLwqkSRP9LsgSzq3kwPmxvc13htTEFjr
79gKWBCaNZQRr0PFU/dCK4UyPLD2b1aR86Pgz6sGlJVEf1zNffRm+3wy9rUM
yj6s5IJwQ7pOoisFbzUV9RdMsyC6bO1B90ASPjP7u/K6Bgdk1wl8Ov2oOJnj
km5pzQGFOeaOpn1knPOjtFlBlwOnhQxSy0JCT38ndyzu4IDxweu7LqSTMHhP
SpLGch54dn/+Wq1PQsfMx+wTLmwwrHkytaKFjE/58xbNfuRAnZ73u3XfKShr
2klds4UNDBb/ddpZMm7dcC1msT8H1E9YfFiSTMLXWsW72rS5sPbL/NvKIySk
RBb/3ruDC6ePL6/RUCZjvDAg6M0+NixT82a5WFFQ4y1r4Bmhh802u1PN7Em4
1em79GkTLlRc3V1y0IWC2mvj1kyHcUF0AC8fU6KgQVh+fNgJNnQWtM6fDCNh
tuOiS8Fn2WCyROa+toCM5ephIzb9XOhaabH+nQJRf0cvlaPE/jtJO39r+ZDx
V5n7/Ih+Nuz01bnE+EZBUoGTheUCHqy9aX9qqwcZN13XQ5lNHJApVRIqBJLR
0+ryFxM5HpSXXSjelzqMGf/5GxsT/auBIWp76xMZfd2TP3lFsqGgScW/v4GM
GlpJyT5BbJjMbCXNmSXhNUPXySQKF24/smH/9iShPvco22I7Dz67b7rqHUHG
3WoKA5KmHNCazgm1ciTjwyYWiLVyYb+G1NVzcyl4Rua4slINF77tij+9dz0Z
lVnOD4SSPFj/54Sw7jShr/78lOcePLA0+pA/+YGMCpZK5I2neNB5UiwtegsF
0zuf+XEJfo0zrEVqVEnId3/6TzDAhS+3Ht0RHCZjzd+rVX0/uHDKXKE+zYeE
zieSGRcZxPmP3BHYfiLh0D+KzV4KByTWML/Zqg3jwWdLds5ZzYWFB+aJxC2g
4Kmyx8fEg7lgtiRO644WGcmRrNNKC7hwdFdS2P+vXcMT25aZ8yDk78sXD31J
WCLmFyfexIZ3FT0fOraRUSrM+PKSbVzwHGlZYO0+hJmrXy4O2cSD0+OzGc/K
STiTd2lswI8D1HdZNprEedc6/mzN9OZAvCYZgrcP45yxjvsiI1wQlNrsENlK
xnM2t0+XL+TA4XqB/9MBMt67ke/fuZQLjV+iNl7MHkbtWaMYl68csK91sKkr
H0aac/fk5gdcKO7QSMvnklCzaw7HUZIP3w6c2fapgITfjrtV0pM48Lnivzfv
v5NwrYHU/HdCDiSGuGxfs3II3Ud2O9jOsiHutsyOPwWDaDb67vum+cT92Utc
v50cwtetq4rtfLmQdPgW+Q1zEE9b/fmAq7jwuOpEQlroIB5d1V27Q4QHJ85c
1NVWHcL9aSqBp5fxQCLva7cCbQhv1vOfXarggFlTw9ovxPt//FpSnV/BhYaN
d/Nu3hhE5xFlKpPOBZfdF4yfLBlGHX/O+bdFXPixKuq9chAZJbLm1g0S6+v3
REmaCIZwrVjxjqs7eMCQm6cSG0BCaNw6e/0KD0JHDkYFnh/Es75DRzdFceDb
Mo/sdxuGcFzn0rmeHh54+N/zODlNQiXfvM/zmTyYl+7nFnSPhP5nmwN+/OKA
zZyncbYeg7g4tct6/WUefOo8ptixZRgbzGd9tMV5MDZrHf7bkXhf2JOrH97z
gNzc51wUMoh2p/bvOUvgL25av8RkLglVLEUchn/yAPv9sjWlh/BkAKXkswcf
+mTuypWPDeMWj6L9KTwe2AkuLMv/OoDnBbIseTse+ADN/pcGGc0G2i7dN+fC
jW66n4NgABU15CLHxniwnXTJ/E8fCTmLBitfbefDZ0OfhHNBw7jIVD63SosP
8b+X7vq6gYR6GRUVe87y4YnaLQn11yQMsm9aKbuRB46zJyRiB/vRweL4zw8k
HrjcTBM5yejHC+tyk90zuCBXiNH6OIAPX755tO49Bwre/DsUXdCPxiGq8ksN
+PDUNLhyruwQ/lq/wZe7lAfzNzSb3Ng2hJq+boHdXny4/Vn6fqPGIBZ6HIsU
W8wHg5/Lf9T9G8As67alkWt58ODRR6vTvEG8lhFyck8oD1asEnmftJvA/6GO
wcAnLuwrlRM4Zw/i4eHN0wYEPy90jdjKdQ5h31GpwpEmPlRsdv7sYjuMc0PZ
b64xuPBRcXL/omgSSt7SNbjWwAOjH/lXvuYOo2O5Z2LGJA+SXxs+q6ATfLoz
9kN2ER/ivEP7jgYO4dtR5VfPWrigvKo8Vrl/GO30rJabyPFh57KGiQXxA2hz
dX1FFfG+T806x/JWkXD39rM+ft85MJBypbdjaBAPfU1NqGvhwcgesQD5xcTz
C1djx3oupCpkiQwOD2PsKuKGWi5EGvg4XrMcxM/aiUde/eLD9tPlqwt1BlA2
aorLJvg+fq3a1+J6H5IySTtMxQXwao5Txw1tErp6ZCnP3uNC7WtmZXB9P27k
xf33muhHi+0ltG78GcDciwnlcRv5kNOx5X231RDufH3QZr4iH8a/mmW+De7D
bTIKs+XLiP4TFKUbaTyMTyoeXdi0gQ/lwo+By4MH8bKh2fF713jw7cuNtRI2
RD8QW5tXdpMHy7OrwuWuDaDyRz2dmngebCyd3NOtPoA9h5cESOhzgTwm9ygh
fBhTnsVRauYIwDOw+fXM/j5883Ze/sLXfJjOuihvNNWPB8svrx8g1lsu8M9o
yRnCOVP/rfEm9HSdeS4ypGwAVUW/Rcme5cFC6YjV69f24ao31ZVjE1wo+F5O
KV4/gCoJ34R3z/Ahf0Xt89Wlg7ik5ZH0Slc+nJ3fXj+UMoikN+W89bl82HY2
4B0T+nC252kLd4AHWo59/9aE9mPpi8oq+WwuWBecE/nh3It0UnCo3ywfVqzn
BHxR7UWNooMVjQv5MBniJdjoPojuDyIWZUbwoWcVx9v/bj/yDapbu9r5YHSU
+UP93BBuXxE2Kkbkl+hNpptrigfx92V7q/EDXPh9x2B+/6F+LEwRH9ofwocU
jSrTZrkhHPhvZXttNReuBaemWF4dxArV9gjaNz5s+sDUeZUwiCuFy6RWpPHB
t71UhDW3H701Ze0EVnzg3w6p2tlI4OejzltczwfbUsvUWMJfZTt0mGIBAtit
9dd0LQyiwtJsv0jCb6NFlJKkc/pw+8RmGAkXgMwCt73O93rw6uJi6W0mAghd
nkNufdaHZWeNtg3H8kHm356HEmf78fD5cfGqEj4U/n3BGR3vQUedy9dJ8wVA
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
hcwhF9OzWG98/mhOYvAT9B97cM9a
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.049566219985198, 
   1.0497807726844943`}, {-1.0492635644722983`, 1.0483313351884997`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.772989276390109*^9, 3.7741936407903175`*^9, {3.7741946530015*^9, 
   3.7741946660691185`*^9}, 3.774197070578245*^9, 3.77419766300266*^9, {
   3.7742068377001853`*^9, 3.7742068418869896`*^9}, 3.7746383936150465`*^9, 
   3.774638576864523*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"ee6c15a6-7c16-40b6-84b6-bcb4315a93ce"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", "rawdata", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77463863753837*^9, 3.7746386508190174`*^9}, {
  3.7746388307064705`*^9, 3.7746388371405644`*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"347d0986-3242-4d24-af87-833aaa961750"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"rawdata", "/", 
    RowBox[{"Norm", "[", "rawdata", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7741944585810785`*^9, 3.7741945057341614`*^9}, {
  3.774638565057113*^9, 3.774638587703906*^9}, {3.774638849780978*^9, 
  3.7746388512365885`*^9}},ExpressionUUID->"b7b2216a-ff00-4375-8c78-\
e1f65d442b10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"normdata", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellLabel->
  "In[162]:=",ExpressionUUID->"23054810-4c8b-4192-bf4f-804c6b044845"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwUmXc81f8fxUUls2SEZKRBKjJKolOSXUJWZe/Nne6+l8woeyctKUW0pDJS
VAqlQtGQUil9i0KD3+f3l8d93Id7P+/X+7ye5xw0/KKdAoWFhITerBcS+v/P
APaCrKGDXITKP3Ub/bgRz3fsXGShwIN0hjoiknc2qThx5okm8NHulCnaydaE
TPOhBP5dPlx+OPosOb+lqU0n9pu8JRfzs0+VlXaiSTWNJcYNFOBzpuhbi5Jt
TUMOzqsqmTwcDm/NCN6zGcer7/SIb+XjflKFVflmS7h5/ZhRIV7L/73g3/5z
DdJM73/eocpDaecaFe2BbU27Hn/IkfnEx46xSVNHsk5T5GlFjfwBPpR3Xjp7
ynZDE6PW7Xe8NQ/GDRtWz7U0wIsn3CtCa+Nh6C5eVjtvB96WZdGk5/CgeHWl
sbjydvwN2ZEt7CHAg2vrgspcnjT6jfYZyzdwsVcu+4visHmTZxizpZonwB6L
uZO2dGEIZ0seOPFegIsnqB4iCbvB97lk3+PPha/FRCzTQQuBHavNdfUFeK9R
80r7kgW+l3WfETvAg/dD4Qf8HMOmLv3PVWdSBJDtVNfLC0FTbu+Ql8FnLjJ/
L316O8SwybzfqrbJmws/7fXFYQ9WYN+fCM0G/Xg8Oqbzq5sij6/lE4y/7gKc
m/Pt20nTzU2b5jj5KAcLcGg8NGtv8FKoPUvNXpPBxT9R+jXxL6ZNaQukPnvJ
CDDhnXhCIV646V7IjfLXRwQwOvv863XagqYfp4Uy73lxQTHeGO5l54iqs7uu
JWvyEalUlaJQsa0pYFItvtWPj+DqQrOLA7JN31Yez/dT5KGipJjxj7seJS5J
Lgr7BEjakfAvqM8ayy4l3/wsHQ+hm+L1hf2OWP/bVWdlCh8naddPKPRsQXin
9treRD5OsOpVyD57cHeB7vbN7jxUJhmOvfV2wNli9dfvxbgwVqKaxkZsQrfe
eWOBkwCOZVdGS102IfPr1d5Ve/lw1KT7do3+btwmQTNof8+HSbJGm9oWM/Rf
0T395w6hn9qTtvlKu2EhXPblVBkP+ic2D23ebw/9HZ/OJS7h4R9/i9CC8454
s2t7VdIePvTEX3uEvHXGcEV+VVseH8Zd0bVfx62xWEf0pv4Ucf6ncscWhznD
UfWmTaNlPJjfb6wqnmOJnp81DokK8TBufGuyINwG5lK632hz43HcMb5l8okR
pIUFs+ts+BCb3lx6/4JR067mS2kcCh+7dZ0VmiONmlTuUtfIFPORG72FXyOh
2/S5L/42Q5qLIWfnAhdVA/gkfVqfl8rDdcb60VZro6bl7jGiK4x5ICf3RKZM
OWIsJzdDvJIP3TOn65eaOUFXLT5IidCrQ7yiLn+PKSyv9BRkqfCQuXD6WS9/
F5Y0sM8cqOaDVEsqbR6zwbkD9fROLh9POBbXTSRdUeGXVLp2UICBmvEc+xkn
tJSLL1OiCxDQtyTt7W31pkd53ZE+qnyUn8h8LpO8FZrGQt53dsfD9jZFfrGV
FvaJ2DZL+ggwPvb20t9XBrD2XLlc1igeg8v/8pfT7UCX0Mr9Sui7PveX209T
VyzV+3EqUJvQW8eKT9N7LdAQl1vcKhWPfj9nk483nbAk51d+K6Gn0AWZ820/
6iE+Unzttlt8FIYPZaqrbICNtTM7nsLDwvmNUTbNLoB80ML5TlzwzlzaThUe
2XozTUbp//rbEiSr+MvECne+5+4c6eaDkuCx9U3hr8bpGpP2ITE+uqrjPu7X
cwXba8sFx/NccM+O2a7dsRstBl7dJf/4SFf2/XBQeCuMm1qLcgh+rTSYirgV
746B15HqW0oF8BC5snHxu3k4ufKQmkAtHm5nTnqQis3w51aD2aluAYSGozoN
T1uifuLFlpZ7AjAWey+3bd8O+s9ATaodFwpl+w0jtm1AIVPi/WA1Fx9tX81K
RDljs3b7y42fBEg3Kr1VPMcOx+q5pj/N+Ihq5Wv9UhjculS1fe6b1cT8wDFZ
wt2GUvvyWKPjPNxeQpnvFrAd/omrL61+LoBdVsbAwwfbUC0z2xH9gotVpScq
RKx3Q1D0ctHcdD5qLrm1uDxfC73nPgGVMnw4l0e0axmZwlQtqLvwgAA73t+Q
aOjai8TnShuGCf7yD6779a/dGarZBR32bB42NpSeXKq+E5vVHltkEPd7wPn1
pZsTsthZneccPSce38+nvyKluuLwkNW2qid8ZN63ulrb5Q7nNclDAlkBNNN/
9ebvcEGd408/uS4+7nUnnBNashQGt2UcV7AF+HBogahomRNGr87flhItgOLx
v1mRL2yhMM+l/G8IHw4W1Dk1e22xSa01yLOIhxWsIvHWng0YdtKc842YD99F
2Ai9hsgO/NGrKB8Px5d7yqkp5ngrniJ7a4KDH9cb6mtEbXBkId12jCVAxkH7
p4bbTfFiddb2vlA+gnZIyz1I2Qvl8FNJuXYCdDyY7NU1doIBaXXjiU4OrO7Z
DmgrukF73bHP1VXE/NR/1x676oqkLVWXvR5x0aX7lOdDdsP6A/7XN+7mYdHX
+tQ5hpuwvFxhY+ZmAd7MNn0xsHZDUkLxArP5fBTYOR1117bDQdqGAveThN/W
MEps/rrAf/fek9vyCf94Wxo9rmMB6dtS42vHiPf/Hpm/K3wvnkVVGKzLJOa3
J7rliJwbyjp+LNdt5+Pb2efXBnjm+BJS1+cdwcMZ5QobqSRrKB9463ftOx/f
LfWWfXzsiD3e6oU7U3iodU+rd+Db4lnHEUtPlXh4d/Ir2T/d0Ecdb098SZxH
RySy7rcnVJ1P3j24kY++v0bOyhVOOGXQWBy4SoDrcaK7A2s80LOiSWVzpABH
q9Y6aIm7orf9+ZFJPeL8/BItrqotjqqqKy7rEmDM9ew1kTXEfBJcaXlZfHSP
jkL+pjNmrvXzMkb5aHrWPrptgwti5nZf7EwWoOycVu+MizWEVFWF2I08MBW8
hCMz3THvIX/f1Mp4ZKe1Dt1294K34YV3b+fwYT242qtcfw+q+0of91QL0Cj0
yFGQtx9pBVGWr225uF5+uJv1nzt+Lv0eGs8VYDombWrukDmq/PfrFRD+uiRP
zsxfbiuOpFIKrfJ5wKEdqbLjjjhqjjMXNOLh1OaZHOB2AGF+ajo3Cb28NJ9p
OVqzB5PxYeZ66wRwOR4nHnp8B/BSen76Bh6ufLQKk4u3hQacrmayuTBYLvxJ
4o0HPkL68t/9fPgyfZyuSThjwYtj6T8rCX29rR5dcXg3htxn/njq8GD5NvzD
vOXOKJs/YuNnxQXd1Cvk/jorTGvPWUMh8tvjtnZLZykXnBT1zXYk9qWZeqNd
2tYTpYuiii6b8PDawLNR5akL5mgauX9qF0B0ceqq4WRvxBo222314KO2nm3a
Gb8fTmden8wj/OF0+cO4Nj/ivsXuaO3s4iDcQKgCvR7odbc7HvNOgDw7jZyT
Qi5YqxDkfXS/AMlXLIravjkhsvL7iag+LnrqJv71aXuj+mkmp9WCD29PK719
m/0Q9zJ/4GQSD0Ix11wt3uyHCuVeYpmEAFWhot77nTxQ1fL4i6BFgNj8f/9e
PHbF4PjV5HWvBaBreNj6ZtviRJXTkTzCj/yV1taJ+/rB0tWKzW8i+OpKeb9z
oy+44z/JCYE81IvPeESG7sd4dNauNA4XMRZn9Mz2+CKBEWKeNMFFgIhEknKk
PaZf+kbeaOLh6HMI0VLc4X5ipOCDCx9mq9d6Oyy0x1JbS4Md/TxosLRjVCrd
0Xptf/FWIk/eWv7V4f4WZzyXWfzxTj4fAz3Xd+5/7YZW5zKfs+nE+8fSzx0k
9P/guVWt1FMeerUG6uOqXGDxQWZbY4EAp+6fOqzusRsrlgYv32JJfF9wLcuA
7YOh+5K1ywk/23x69nHidUdwJ+NU+eaEHv+GHFWvJObrt0lMvoqLi+H1v6ll
e9H+6LeZGbEPjSIrXL9YuKG7Q/PdnKd8iHcGvX2W7on6M4uvlXF5GHDZ6zyy
xRd8E6b96kt8rFeZf0+qxBfrg9I/dBB885tpurinwgVLeo5NOW3honDz6J8y
sb0QFk1WGJAUYP0HTeMbBfa4Ur/AYXEpBx9ngtcvXuyD2HM30qkHOJjL9rn2
R3UvGPqkKjMib1T/zY05Ke6D3w+iF+GqAMv/Ls6TeeaIhES5dO8FfLjmOA+f
qHeBolSX2301PmaXyo6eq/MCZ+U5PUfCr9lGLN3KE364WhOfGZwngFacZchZ
M3/c3P+j9L4fF1SGhypdJwAbbg20Mo4KELGT9/DGd3/UXzj+pXeXAOWtCvKJ
PDdUV2M2U1EAs1azzzIiAUgZDqDNJfxHZ+/PotuSnmj8mcALdORB3j3HU+Pt
Abh0v2kg6fEx8SpK+G6sH5Zd/eBguY4HA5PYs9O2/hiv6Lw4GsHHs0dc/z6Z
PVD5s/0e4ywf84Ssxu4qe2L9Y1Lv+Q88rDHS/A+rAmHyKO+PfDvhv/SWrd8C
PODt8aUg0EGAhT43X0+W+KNQIEavGucgUS5tcu3KA8hyXZbQfJqD66WBqVqu
vtjcds6qjdCLt993V9dL3ujN+S8x8TqR74x4GbnL/Anue/OMibzwmZzbQQny
RD9balXsOg5s7tBb8vN8IF57Ov3fOy5WSHcLHz7shYFBk867hD/q2qzEA3UX
NL9SOKFN50MxMHDpwmfeUJk7FsNS50FF/Mf7rFXuUJRF3hri/ZL33gf1iHy4
ITIjONWQhyRzkSiOcAAaA5XM7hHztP6+Tebnfjc0LL34MoLYx+ustaTJM14w
DZO58uw7Fx0ZyU0LV+2Dsfn5Zy+282Cnqaz23tUPH72tJjZc5mKy/LGV+awr
fnkdnRzu5CLrqu1XJTtXfJ/q3s8VFoCd8szPJ9AHx9XDHRxEBMg8abqvDV5I
jk/YOOXBRe2UZJZqth8Oi44o5FzlI/zwatN9CT64F0bLMF/ER/MR5e9/072g
uSP/AJfguerUkuAtjw9ATdI7+edeAVgBZsH39/pi5QeH19vleChfGNy8MCgQ
65Vumi9cxcFC/7Zfl+SCMCY79/cLYwHIXqNClY770FVguPLgWR6eSFW9O8bx
QWOp18kTzny0ut04z/3ngS1dXc29jXxw5VOz3+/wR9aMWog1RYD2Lm75jxf7
sGKTdVOZChctt4xOfQ8PhOfYiqCKIg7sMv8tUQl1h3fSl49r/z/v+y8O3PwU
jDmNyu0ms8T5nK1S7Hx9sK3oyJcNVMLv76xzdQgLQnZs+K4oor/M3pldLnPc
Fw9r5h1f7CjALIMt6WLpBaUb4vcTlgjwruBIrIzAH5f1htzHbgqwLOk+reeF
Lx4ZUEJ93bi48D5jcb1LAORaShT+NHHhWG+4U6LuABw8fPM/P+Lh4M4/+++Q
PPDBt7by/TgP+/QTc4siAnDe51OG5ggb5oXrgy82B+Ib1f1dbjwPYWFGm0kH
g6By3zbsvSjRV5WzN8j/8MeSma+qeUS/3CDy/kyAphf00xYrKV/mY/mKjEvc
cX+c4T/ZXmFH8CK9LOdyeiAcVh5blZBI+McB+cUpjSH4vPeJbTrhtyqmBsFm
A4Fg3xL9WE7nYTRDteq8jS9OTmhrsH6w4asgub6C4N2Ov9v/iRHP8zhw9kBR
lC/0slMsF64l8uUmkRSTjiA0dt4coM+wsfSL4afVjwIRWHn18HgzH9PNWx3K
KtyRHc6e6J7mY47OzrkOiX4QHSvwPLuY6Mfzxe2zzoViUPUn26Oej86HF4t/
r/ZD4vCZ/8628rBupLWs0sMbav2XquYtE8D5T0IQ1coP+d86Rxt2czFxXs+E
ziP87OYV6ZAVfLz5PBK/5rAf1Hx9exqLBegWkbxo9TUAJ1YUng+s4WCjm9jx
oLv7sOhk965s4vkuSn/9cHmnJx6r9WlOxPIg1lV+VDvAHy97Ck57pfFxLPes
AP3BKD+jlOd6i+AD7XLk16ZgdLvePtWXTMwzemKudg/xvpLm2Jw7bKzYt/+h
wG4/TCe/uQ0a8sEoCbvTqH0A+fl178aIvtK6Jnw0NzoET3O/bapYycH5173e
/fEHwN3Jm+Z48TA/fvlQ4mVvnCF1OsVK8bFhV4vn4yM+8LB4pvsli4MPFbyA
zBfeuDX1H/15OBcJrLxnOdv8Mag5/OsDg4tSc/KV/IYAMGacW9f18JE/cdk8
coEn0qZErvJbCX+Kij2a/SMMtin1/1oWC3A+sJl3WSUE2zaslVJkszHY2Imz
BYFI0D5o85fIlxdfJK52FfhhUuhnluM2DjQeNjzk1nnCfcGQ8nsJDpwO6q23
dA2F9fQWqfpGNvjctw2hFwLAnsnI4ZXz8DlILXtgJBgWP5SEg/P4WKlbcz28
NRBubC2LCeJ+lb42ypf99IQZ7UPLa1c2WK9D8xavDUaVntPc08Tni6jGlJB6
fVHA7DrxzoiP/ccwu3d3KNx3l/RtH+Djcao/L/aQL0KruvPuEvy4Nu/y2l21
XpisOn34oBAfST5HTuWyA/CN+IzBHg62hPLdE5TC0B+0aziT0Nvyqc8/X7UF
4/3ckr+jnYSfvZ8foG7tj8rv3/cf+cvD5bxTZyi1vtA59V+R9wkuvO9QLq4a
CsCEDX8kYoaLfZmM6dG6EMzfOmSRRuTBo9fzszyI++Icbpe+T8zr+b7Xmt3C
ITA/IO4zTPTJNFa7XWxyIP7cEe7+2sCBsdmbNdP/gjAlM+iw/RIXX0XWNRyO
CEbFmVdnqkc4mD56VtP7tz9859zsr2Swobv584G0t75QZdUYSxPzmU32ZPHn
BuLEnnUDus4CjEt1PGlkhkHqw9luzcfEPj1Su63iGgbxXSM2ec+4YMwNLrqZ
7YOu4spnpoS+o6d2S18xI3i/U8e+5C4bxoPH/UKuBUJk8G/1LHH+OxeVd4vO
BuJ76bXgaSMOEmY8m4vawpBSeNqh7g0HRTm+tocWEDwR1TvarctDvmuC5HRG
GLQihf2mtNhE/9dKT5gIg8PRY9cCCT1zDeZdO3stFA9vm8sFCwkguPE2WLo6
EoqHSQtLRQh9a575S9KKwJXDC+ft+sbHXJMHbYNl/hgTjEwvXcGBpG5HZWFo
MFS2PRAMneGDuUyjkyURiRNn7+qV1fEw86Ghz68vAtyuhXKDN4i+/U9FeWln
GGRzk6XFlrKhbWoj89kjElP2F6zfunKw4YG3jFAAwS+vfabpE2wYceTLY039
8PpakorRBkLfZj9YFxJDsfW1Ytkc4vnfXzFnvNULg/4ngyrWbj7KglJa2Pv9
MPb068FDvhx4vPIoN3YLh1ffTvdfxL7/GvA1V/GPRIq/xBE+4R8RjCNxkcYh
IL29/voUnQ3aGusqSckAmIpIzSw6xUPqn1ahR2uCMJ7yY9tqgq9e/kzdEpVg
lI6Z39Hz42Oj1hfuzOowKGs07NL//H8+J73QVgzDPZ9wk5ZaFij2TZyp/EB0
vjhz3F+eh2PsI9IaxYHovWb6VquaBenn65N+yURBc3GPVuUYCx8YL3dNnQ/C
aPm8ExcfsOA6d1VuECMMFsnNqp6uXPDrVpk8JvLbZbzU3reVC5m46el/9SGY
3DWSkEv46S3htUJDs+H4FC45vorozz9XX+fgZjRK1j14mLaHDflqoacNjeE4
mPGS+cuGg4M6F1ZFjoRA0vNP6a5HfBy6pZy+iBGCtJ8Wu7er82Ew3c8WFwlH
27JEH0s/DoaiTFilpBBIqJjNNfyPB/VPn6osBCFYVVhQ70Hkx9BQN826A+G4
4/blTC/Rv+QF8ro5VlEwSwuhGUzwkC29+aVxXiRmYjnhIJ7XwlyXcrg7DCyT
PHMu4XeHjAeT/k1HgLryRKQ70c8nSAMny776Q33DMmNlBz56Ds0ZE10eDnml
lPizz4jz2Jyaeyg7Gsdo7ipzib5Ayrao2zIdhjKfn2pviP7xeob8XO5rFDrn
SpT/juKgpaJLroX4vs+ZS9XFuSx4hf046ZAVDiXnjGVnnnJR5iDucX8gGqPL
nqXcYrJR+U+g+90pGov2p35M1ubjVKyO+1GJUJzN2MQk2xD9Zl1Ty7wVgcjR
/DQ5Ic+FccmSAcfSYDC3HTVt62Pj1PgjE7EbAbiesSUstYkFT2bPsta6SDxV
mpDdYMHDB9dLUSImgXi7V1fH5hkLE8sKuYenw6EXoxiRTexftVvPk7Rb0Qi4
OdKfFcPFlmnPXscj4fCwEvvFmMtHHTef6lkeAUbH5u2yThz0Xq6N0TsaBIb6
O2vxHXxkUzT05sXF4Fgeb3/YeQ7qtuyddKqMQPz96vjkhXxU5XrNn/oWhVGp
G7HfDDgwvZd2VrQsGpnZGx7M+8fFf25un18cCYSjedZen3V8vFacHQumR8BA
w0/r4R0Oor45HxnPioJEVk2HTSYHyZL87JGAKPz3q/FCOY8NS9EGca+kQBzt
bf/ScoKPH9+Li9ucA/HKvFo4gDjvt7HE0zuexSC1JerpZAUXWmeVdf75BiOv
PCzOgdjv5GGLCLZ9DJ5pfXOJPsqFDnPl1Wv90fCzTpalkXlQoJHKPbWI+4lT
Ts0X5cOBbiXwKgjDreQBoXqCj5++qR93/RWE61KSlSbrObC+q/VSXj8IX81a
lt20JO5Xq+Drd6FYnNNTj6sl5hUu3RG8hELkz7cSCfO7ibxv1dr56WMgTBd0
iNuLc/FpfdFYyaNgfNhgFUwj9PI9NNZzoWkUZiYvb762loNjJ70i7B/GwClG
iTGlwMFPbvCSXzORuE5a5U6qI/LQwpUNJooxyFp+gBIwnwdhmc1bpxVi0a6j
svGfCQ86MtHRKXdiIKNfEzrUwUbBlLT67zlR2JEwPumtykPG41pzhYtByFK6
cDG2lQPBXvk3Dy+H48Wy6ZTi4zxEHr9y7PuiSKz6EKtxYh3Bu3n/+SznR6Pm
FSdoIID4/MOMhde7IsDcGhpiWcnC0spa4caYUNjnC1UUxrNhyGOers2KwYV0
UbGtf3gIPrmcWbyQhOgcexqPxMenea2GnU7BKJs5MPf3Yx5WDLQoFfoHo0fg
qm5wkYW07G4l/ZpomDdG/2oK4eH2yE+JQ8T+X1yWvmxcnw/Wru6ya04x8Lg6
sctlko2Rue9ut/hGou2zSuWeeC6KyLyzJ4ZiYOfy537Adw4U1g3+uTUehaE9
wb76ahz8NZC0vaIVArWNoTKGBWyI7g1d+l4jHHv0n3y9T9yPbAfapURiofGl
3biT4KPysYbVKwm/NVB5+vBSGBMXLG51/Z6Owo1PJ1gqlhzQwufs30vcJ7lU
eFNmHQdu5SWq2sKxOHUrvk9lhImUmoc6PSIR+P5VUTWBykTY4vX3FwlFIKq0
2/tmMJFf6gwLn7VHYcL96ExKIAeB6f92ZnkR5zOqTB/OY2Hh5KPNMTvDcPzo
2cEdp5lYa8U3yKaQMPleOeW/Xi6qu6jdbS8j8Lrn3O9lawg+fCvq97IjITxH
Oyyrl4eCJR3nddfEYoAydWYhkVde39xSdZrgD73maM2+jTys3fTu2nzDKPRu
TbmeTOVh6lu+XKtzDBJ7Py9PUeSgdFPGx9uEf/8Sc5fXOcrCxoqVj+omQnEE
9ueLFVgoL+n+8sWbBKVJT+VdzVxMH2owm9gegY3ri7/3ETxOf3Zu2W97EmK6
miTGUpioXbEmeOQVMR9+4XiHDxfZvZmUv29i4a7Ft9c34EPj1b/4Jp8IsC4e
wU4lJqwf15NtDSOx6OZW7psOLoaza7Ya/okB02T1eB+h511XPzUNF8Vi2YT2
Vof9XMTeEb590iECgeuynx9fRPQzsznzd98moSactmT/KhZGNWVVycdjYGWT
Fio/l4X36SdlT8ZHY32qzHu1Fg4sEle8klAngVfu7GlRSOQ31ZSqHYTe9o17
RXxdwwHn+KR18YdoFDvoJxoeZKNjZh87NzMc31oTPooR52/Zfc/6zEg0Sh2U
jI0/sHBjFtvHD5MQZTFzcfYcE8vebRdY2JLA7iph+imyYGw9f5h7PxqvNn90
EF/KhHaSrm8RcV+blHuO3PrOQ/xvu5Js7ViMjonUXWjj4H3bJvlqUTJK8h44
Xyfy3XWxNKfqxeFELmU0RuRzUSf90+VyQSwcw/QWph9n426OxLuNA+HgOR8N
zSXyxKxsrHPV1zBkRciriIhxUOXxSjRTh4yldvFyy724mLv0onD0QAwe/nj7
sYfIl4e+pPle2kzGZqXHkm/1mJieq9D4O4CEytq6I26VDLz7tQqL22JwRU74
yo7PPLQFH0vUPhiBHla6dyKXh867bza7Efv1wZDk8IzgvWj8E6lYETK0n1/O
GvMj/G6nfHVzERlB09SC+nM8xLXVTIlkROM2dzjv7yQP1+e+pvaHR+DfRcER
Zw8eotvX7l7QEQvpXZSichEW5AKVg66+ImO+S25w6UkmTibfP7R5Zwz8Q97P
jh/kYUnxQsq/ERKmVIcVttgwMfD4se4rLzKEOptqlxH5Y+O+X+HmbSRwf2/e
frmLA7tdnRFCFiQ4RKe8T1vMQtzKL3PuX4jGgn8Vxu/mMBGx5MnlUu0o2H8d
kNndzYSLzvZtnZsoONNgemk5cR+39i3O2PyAyGM9zK40OwZ+1/Y9F5QS95mr
9NCwhnjt3HZuJpngey857IImE4dXnUsMWEeC6p7pohGibxfMvxrzYU8s+uIL
pU7VMJFeKZMj7kSB67uU3VnNTCRJ6nzJ9iejX7zitMgbFj5fSvlksTAG0aMj
77ItGfDtrxRIusfiXWLxYycG0bdbucc9MkiwVI0pW27ORp7se7fp+TEYeFAU
PrmOjQBunUEScX+3sncOR5xlInQDM7VPjwKG5NGZZTcJvc5lLLw4FgMF/8Nn
Ywl/8cRmxT4dgk9BC/NbCT2/SWn/1Erou21xDTP1IRNbvqQK67XEgnlob+0/
IyYemAhXbD0VBSmKiLEkwSvjI4/in9pQsDHe3KJ2OxtV/5TTIo+RsO/LM9gO
MvAs6b11DTHPqSSZevIvYt5deo/Zf0mgr6nVXBvOwtiahsOP31KwiLK1ssaK
A6Uknn7vJwo0rM92/Efkmxm1n2tyV5LBORS/++M6Fl6RlNpVqZHomWlUjlrF
wPqwC3c/FkQR+Tw/dfgoG4lJovPCtGMwrZSWtWiCieSLJrOh8lT4yOs3kJ/G
oWequHHdbjLSUxJCW04xMM2zsYu4QAF74/iA6lM2Pko+1H9nFAN1o1S5k58Z
MN10KzBHi+DLI3KHziM22ozmn5/ZToWljmypdyIL1Af3GoW1yai/K7rmkBkX
+8mS4qSIWOzvu5LhT8zfWrnfJGVTFA7zpr6EE/l+i+SLHQeuxKJFZt2hQ3JM
RJK/Ho5OoeDhSIORxB8O8F+pDB2E/2++Py99goUot7qM9lgK8loFzqvXELzX
X9d55xUJjSrMotcr2BheuDe1g0ZCt8tl9eInLDyXMgl4fyAWP1qGHyXsZCBj
ZfoRNYUYbBB4Pm0RZ8NhgnPP1TsWxcFezn5TLGjHVe72uRaNOzU2tMRZLh61
17CzyTGI6TzwbaCEi3cWSWJiVCpa3u31YhZzsNvkOrNNLwY3pCnNxsVsPNtp
b/W5mAqtiHc9jYR+jRWqEtyESIiYn9zx7AET17PnJTbPj4a3AUxV+hjgD6oX
u1vH4MmpzxLj0hzcaQis28SloC8n7pFQKxMKu15z/X9E47EwJ7q+lYG0I47R
cbKxsLAbeGa3hA3J4O3G9d1UoneuJr8YZGPnD7/d7fXRSNBp/6L2hYPvpsam
HltjYaX1akOhC4foG4ancq/F4lL43JsnW7g4//GLVukqMpLkVsx5sZWBoq0C
1s0MChyXZk48GWNDc7vhrn4lEji2Ucod5iwk1Xo+avsTC5ddtXtUCzhoaAiY
v8GZht/pfHlJok+Ip/o8USZRUPjGRDU4n40xu6g/ukwqTuQHeMcnsSDf4/Ez
nkOGdcS2P8dU2NBg5duOxtJA3lhNe1nHxqX2aYqWKwnrxtON/a6ysWin6QJr
QyrMqUcseMR5jow8n1Aqo4JvE5vvv4sJ57BxGfU8CsGpuvtBRF+T3Tt8QYTI
j3l3Vh09NUKHdfWlklwRGnp2fLRe1EtHXCxdPLWFip1hQ4v1h+io126xyemn
gi4Xwmm+SPQ3/aJX0mZUHKyhlSifZOPf9T0bJWhULJtJD1J+z8QTvsp7q1wa
hOruLPIVJnj6Z7TFYDAGIer7rxboc3Dv3/NDz+PIeCt3XHkj0W+2VA8P8ESJ
51+TxvMk+nxjtrRwwetY3GE5hxSei8MrmWn71ZfJUCy//rPTkOB73R9rWVIM
mqnB6pdPcJBbXl19YQcZUav4Re1xhD/u3aR4hk7Cwseyoj3TdIxNkfmfh2nw
65LamWPDxo/1QvYSUVREeX3Vt7zBROzSyG9f2DRIh/UYxbQw8HyXzb0OAQ3P
BWH6OgdYuFc4Z90EKIh+eWtP5WsGnlirySVNU3EqI6IweD8LT25vtzlCJ2OD
JV0sfpjIm7cfFexSpyMvc+mSrqscxHVob3iURkHzSePgGV02/quQixqtImO5
nfigIJmNt1HFvuTFVBwrdN4u7stCyLU5FG8HMr6d/FO8MoMJk3tRiQFSRH4Q
ON5dvJiBrDHvTGsBBWVS4Z6jXSwMi49aeOjEwrXFPHKOMxuvX1zLfLSLjirK
cbkcYzbSHZbm7rWgYMlatCxRZGBF+tIPhgNkyB1Wdgr6zULd65bhBJ9Y7Jae
d+l3UhwmXwXayOlQIEELanw6ScfHeuWMdiUazk3THUaI/VM5Mc9FWzcWCRub
cvzVmbix3amHlkXCYDHjspM1G4xNH34vJPRUs+716iHiPiF9ZKPlNRo8vPL1
zgfS0el3ZuOqQir8QkrezTI5aDRW6A8bIsOsUXRYopOFlxZlu7dJE3po/Wnk
t5mJ6D0ixeSVFOy0t98RwODgv6hDZ6vbY/HCnyezoIMFMZdlCqePkKBCyzRu
W0n42Zv9C6XHCb26+mZvSmVCKcEyty2RisuBf0QWE3yxf6IS7hdPAWnWNV7j
OBMqE53R5Epin1u3tDzJZcM2+kkyDlGg2OI2G95FR+iVlqFwQn8qh43sqj4y
ML+Gl9+VRcMqm9un7y4inufP9djrs0Qe0Zt3rCKdhfzt86Z2GFPhfvuKIkOI
jkWC/td75lDxm/FFMO8tGyzmYP3NKDo84vsyZK7GYbefznv70yT8ffZmz3Vw
kLpQdo34OjJitu+bTDzChlm1dK0Jk473s30VWhIMyITnLza9QwP7RoLcklo2
Zv/1e8bXUiEVIBJ/pIuNe+vW87ue05C3WHPhA0IPSjrqO34S+6o5Fdn5+yML
mg4Xfs6G0xBvM2XIK2ZC8c2yNuNUMtzfqC3I4rGQqbdT5PxqKiIES04aezJx
5smBsOH/aNjXJHBP3MCA3pPPy5z+0oBRcYoRcT7hSTUHrxEyXr8amGckGoc9
7NOD96yp8L5epznLZKNut9WvTx00LCuKWrmXzMbFdnm5Y4SeaTu07dUIP6ks
fJouXkHF6SUXH8gR91c854ecNIOM/Jg5jo+JvvVQ5ESxZRQNRwcNyzSJfdsf
ujDG1JSGk9+e8lN205H87N2b8K0UBJb9+HkumQ5a53oHfUJPFzPUL11YSscS
+fbOptUUdBdpPcoj5vXZLLLsGpmMX/EnTpT8YMG1eUOGxQQZKat+ULe6sKBD
kh658ocOk3Bt4y4wsZijaT8lQkVbXKOC1mE6Mnua6McsaShfkxbzqJ0Fy+l5
ZjstiPMf+z317zwLVcPyYvcrybirJu9mqR+H13uSD27qJ+NYpz5zeTsdu88N
ZjjcIOM/0/RIi3txqL77dr2eMKHPu4pNUZtomPybtaA8ioK2CPatgA4mDpbV
aLgvoKMlbG8jSyQOwQKhsX7LOPxW32fSps5Cbr8Hk/IiDlu1hhT+3adDSE08
2+gpHTF/9rx6oEfH+ROb2kMd6VAtmp5s+cPAC+5QcI4BBbzWeckPEmiYJ6xd
6l5OR8OMzG4z1TjYXCp/6FdBA893zbVFRN/sbXc6seYSBUrDopZyzXFoj1go
peIah79ik8+z2xmIW2P0zUGYDvrV3riEY0xcnrV/XxhKg2uO5qHkfsJXTLyl
SX009Lad3Cf2k4mV9zITAok8VeOt1iH+ggn3u7KLE30ZOEO2PvH8MrG30is5
A5IUeFjdlY86zELxbYvbXsT9lyxMspG1p0PaSoEcmEzBitS0Lt4NGvKfvr1g
vYn4/mv/vWnJZ6LdLeatqgMDA4eyTRvsGdDMMg6W6KVixLm/eZS4L9PgeWoJ
zhTcNr9stusmDS/rJGhH9BkozpmY+PGWig17ZeepgI4+xz45o7g4PFJ529xI
7IPraIWSNI8BkKrLS39RcGPKgnt+NQuTx4vfFJ2jQ9z1qbXiMAO73rh1re9l
wMx5rcR5sTioTc9cKt9FwRrr09TB3TRwiIz8aZyMU2tqmsuI7/1s/rnkJicO
ye/c8v+F0VHYzXLKITi8NOlJ1cyiOHj+J1KraEbDkqI1/prP6BB9/+pGJJOG
pts3GzqIftAgN1lQpsIAmdc8VPKV8O31wwXaijTYBMR/2pRBRc6CHWPBp2l4
ISJ9e1yehomKjJnEIRq+j4u8f0BwXWbf2qS5ccT9XvyZ8KqKiQW2r7eMN9Hx
t4r5ebAyDhra678tkqJAJZIn3dBDR1kI99kfIk8Nmqp5LxumQ07MNUSPQQWl
MjuDdImOjoKhpMpKKrwubCvbrcBCWdPsgwwpJor16i+kZjEh0E+1yrzIgJai
X/vp9TSkv8luu9ZJx84VSdeL5xL9QV9Rgn6IgY/H3BvJs3G4s3VTRHANBSJZ
3yLWryJy3I501cwwBqSS1PauKaChNmVC9ZsmDWX3sppIYQSX9r73O3mH8Pfp
qfNue2iwPbD9hboqHcNSM3YfiLlt/vDE+ZUnFY5ZPjzKKhZkjDeXryqjY+3m
yuU/5Kg4KzZY10r4++C4WpBxBAMndT0Tlf6j4qVqyP3DZCpeey6jLOiNw9er
H+fvzYnDGTnLf/0GTKjRjud7fSNynci0SsZ34nn0JWipinG49EIu4txWJuLX
bZ/YuYOJSqNXkXauBE9/WPEpL6gYlTYRahthIN43c+uhhQy8NLYyKSY4UWnT
wq8g9Jt1d5jz0S0Obvq873mEXyhFTyfkPqXBKCR452B8HEA3nCdFcLgjye/C
yvtUuLSVRvYvY4KlPPPSsTsOotaRvz+dp6Fe13/grBUNxy9sX+ypzMBWu8D3
3EVEXh4KYc4OEXn9a3/yBqLXPFv2VMOU4M6ZVafUf+2NQ5YhJT6jioIn45k/
U1cwUXj7nqxIJA33Ji+Hcu7SEH5i/V+1qDh4xZ+Ut/gcB7+Ivnclo3G4P3XS
cbc7FR8va9ECHjEx2WenvOUGFUojfioJRG8sWaZVfmwhHdXrNZMmiHOqL7lb
PPKChq8f/I+UEDklRcNd7HkWFYserfnwyoiK1Cl3HReCx93F2our7ejgT1/s
ichlYqGXSe0IsYe2mmc23yZ6z4oi7hl/QqfOT+3rdN2J/nlgnZhMFgPKFkc/
3yyhwqOy2W87wdviFonx4FCCq5+bOp/PZaBQMipAfxkNdmd3L15N7NGxfTp9
fRsZoFPfyc/yGfj0VFCcQ3CQG9HsE69ARdqLn2vsiZ6j9/ajttZjBlabXdF9
u44C6aZTT8UDWfgb+0iSahUHzvfukYL3dCJ3bJ1jYs1Ey+my6C3ZDNz871ei
5TgdJ0KU7SXWsPCNlG8/8IfIzYOkmTcVDAxGVhyT6yZjatmcjuqDdOyIjfHY
+5GKOws+SS34QfjP1aaf4sTeml5nK+ccoiOJVblc9RQd8++ShsfOUBFJ1d1z
/woDpRuj97iRiT11NnnZ9Z7Y90ueR7ecpKJzJjUm+BoVQTdKV1s2slCxVG/5
Gk3iuXpi5dzdGGjvysyMdKRBvMRz74KThB9k7MvdbE5B0o7gyIs8KvZ5zUrF
BJAxxg1WfED8ntLjXmmLaDq+HtuTnkXk6FGu39mhLwzoltZ+/1VMh25Nr8/6
UAYmCoVmVsawoL5ssuxIPg0uOycWaf+gIi5QT2L5EiqcI0a9a58y8e1CiFBK
CQNeZUMmv5lxmLK7uTz6FA3bjrXRVQziYJqw++vYLoLXFRIpRddpiLLNXH/p
Dh3yN2mFEwcYcDox3e/vTEfYVRvJ1aoEJ9ce/N1HcL02Um7Sc5YOn/8mt0+d
jcO5ZQGyv77F4ZYkw/RNEaH3ImrFLws64tfb8dt20vBYZJVYwi0qhPkFB36t
pEG/LGrXTAEVVyIGS8pkib5v1n0x8AINIeTyrhfedOz3OfjPkuCmafKT2SP1
FFiFjYqaZRN7gaEJ5hdC7yeDd53TYkP3Ssw1N4JnvY/XVz0gcnzmugpuDI8O
EY2x2oOr42D31BHt92lI43E3blrPxghDijSkQEHr5gvHt9kxsWnge6kxhYzD
j2hRh28T89WwvOCznwEhy1uXPdcRvONfv75UgoIq6ejduy3pGI06/G5pHx2B
7zco1BE6o4Q16DwjOOnWezdLVZUN4asN/alJNFxb9e26fUEcFHc62IuNEr83
tfr6ky103L0T3lpEcKfTe9Tjwgcidz9y5vhdpeBg9ocb/lQiV3tJnrHMI0Nz
Tif9uzYd45nnM0qpFDwVOuWWFUf0pI+Lzf8S9+ibIytLB5FD815Faf6Lg+YT
iUULHsYh6F3NfNlnZPQ8/V2nQXA3/Qjl1xpHKt7YmOdeec7E1ShR54+/49AU
sfxwhi8b2vWHXnYTOd9+xpcp2sZCzvVEVdUDcaBZffx4R46J+um5dKYcGfeU
X3Rs96RDcuMf0002VHCPVkRW32XAOcBgs4EQGaSLXv7M4DjoN+j/ufD/HPy2
K79IiuCm1Iei2a10bFX6fqB+huhFBYtM1xI9w2r1ZVa6Bhvn6Mz0S49IuO38
+mpwVRzSq6vmp6aQELrwvdNL2zhYrPI+dDKUgqgdOqsyiB425VeWn9tMxitz
g9U/qhmIttSp+UHk2Lt2DU/K3jOQ2tKlPp/gT1DU/IypDKI/SQ3OuaxGgWHp
mNifcSZCxeP9+s7S4LROc4xUx8Rxv59L/u4nwy5NVUbsMhttP+ruyPpTIZ2+
42H0VQYUguVvo52ECwv7fkq30fH9sMiPb0RvEXyjNBv8ZCPNN+69kyEdy580
fnqYSvj827CVhW1UiF35POBRyERYTkCQywMSfD7W1JUTeYp87dHNUR2CA4nN
w+MKbCy3uFQeP4eMf2ErJo95MHCUP6LbyiGeu3bTnW4N4vUF03MaqoRfXr5z
LjuHDZkIQ8FYfSxOGJ8jPf/Jwk1Xh/bvSmTcv7wprc+bjcDxs8cWE/qTq9zq
vJLoMVFXHN0UVGlY3pa4e0yLyA+m865tmyTB6b0cZAmOdNceW+XTT8JL4UTT
0R9E3j33+d0HTQoSmGLpN+IZuFPCbrCm09DRnvXr6CsGJPs3not6SENErsrf
z64c7BW+YW8jRIH8YNFuc8KfcNbr0rI8Yn6hOgNBQwzUT/64eGUJMZ/e2w1r
S+MgdvnSr6a9dNTPf2twqY4B972ThaRiGn5pichGxDDAXCNvmKpBx4a62hev
WCz0z537L4LI/RfeLFD8Q/QKDS0T+4ypWHhqzj+UrkG873p/RMiXDGOJ6CEn
NTbOSt78HKEXi/55t95M2bNxa6/iaQbB20Jt1QbXK0SvnpMw/40MGcMtoQnt
v4mcphbp9ZPI9QpGaSPFmnFo+/QLfCrRm8ydlJOuc1BQdVxHLICO1bTzPWnb
majTpzi2XqZhtlv8l4oeC4mDW1jnnpKQmD/0zyibg8C1tll7LUjQWuryctdt
JorSjnmFgwrrRYazrgFxqK+VM+wuI2G+X5NSjzkTbvlqDPGSWHysvbGlcZSB
+4E5AWZnY/FLOZxyVYSLoxPu8W8nKRiRsH7dqMuCVnvE7AoSDbJb/03OJ3rw
PDduairhQz3eJeker+lg5A/Um3Bjcc9v73+ZZAZ+NTScQx2h//+8FydIclAc
/OdqIqGPA/Qlm0WJvlPfp3Fk6wIqmm0Va9Y7EDmstd52X28MXJ7PNLz5RMc/
sd3X2DkxsPpik7KnngnpjaH8DSokPGM3NH4hc6CUyxSSv0UC94jgQfBVIpfu
l/qqRPjclq5Dr/U3cjBw/cDh3A1UDH/RMG2ojUNZg/JS8zoaBmRbx5bYcEBa
k3m5yySW6J0BZDahvxsehYU6xyigLnyRMXOVhSXXJYy2bKYQPdF/0zkzJi7d
qJDoOkSBSWpukWs8C5LPLjn0g4RDl4q2791I8JCdlHbhSwx8/qZ/mP+Njjud
OP2nKQbSfV9M/hxjYVGFxgL1dWTMGF/7NK0dh59V57y/Ez1ZIeflRNYUE3Py
/rVeWEiDro7mtsY0FsGZQo/mUhr+uhUHDq5kYLtGjeYFTzKWNLOnvYm89nL5
wcjfETQcNm7mnDDlYnWpuXHADQoum3c/rCfy7Yp3kbbLfGIxoy30157gV1Xu
sy0zD2JxPTY89OgTJoZe/UkZsozBZ30trVX+RE5dqGiy/2UM5o/8U4r/ReSp
TvrdnqZY2NtdNCdZcDGvJtdf624MctbvkZud5GDGqJCieZsK+WI+HJ0JXu96
6Dx0MBY/4/N2vN0ch5CXxys4CQSvzffu9iCeT+ps9I6RlBjcbLlx3ZDg4Z6/
8toVAyTk3jGcfjzKhuuYUWu6VQxeP7yzyl+CgTca/Yb6RM7LHizpOzLGhDJ9
0Y3a9bE4Y5kvtHUjG71mCse+PCHj6e0Szh7CX+ZZCDdFasYifX+L2CKvOMxd
Gme0apCKh9U2wwlEPr93lDf9ahEJa9YGPXM6zcUbGaOaEYJ/dS+37pIi/CEr
QnfzpuUxeC97olR1LQNV9MCtrzaQEBjNNq8h8tDZivAcb2Ie/i72oyyCX47b
XcPb/4tGSIHxmYP72Bi30W23kyKht8tzSf5jJl6+s78015WKy9did3m+jcM6
NbeQZvEYtKk977wpxEBvVsr0oHs0ottUX9w6ykaOlaa7i38syAjpzYvmEntx
y5h0m0zwqcjW3p2ByI6laTvVqLh9b8TQmuCLfGuw7dgaMj4F65924HLxkOqT
OkXw/qy2ab++CRNzu78kBw6RcN59dc2c/9ignS8R3rcuFjkbu57kLGEjqXdl
lNYPMuacesur/spA0gG1nPfriTywbfnyY8+4OBXRPdXWGgPnzsLoHyfYuC95
I2B6CxX/9V5ducONi7hzX38YPYxF5aHuTZZ+TDzW23aqu5eCPxaed792smBQ
wGjESAwsNK4+eSjOQdi+6fudEzH4eeDqkbQFDMiMhDXLEp8/f61YO/0/JuQ8
iqt3/kfwcltBCruMi29NfwM3/BcJLZU+rdVWXDC/bDJyjifD7OHczd+/MMET
L06nTJFQUxkQL0z4qcmbbRRzjyiUSBV9KN/Jwdp/MgY/pKhYJqleKGAyERA8
cbTUlYLXT8yOtjM5mPK5eT24IQb3+sTETAg/f/zYWE8qLQpfdze+Kyd4n9Un
WX+vIhJLWi7ddmnjQM3duqa1hQLeXdKe74SfHm6MUZytpiBs9X9ttGVcSEQG
mONeBO4k7pyUO8bAhmoNndPbKJCV/XWYdJiNAFfNbxILYvH5IOvuIVsODj9l
M4xTKbi3xH/23HcGhqJ2sTyI+Xx0KP/acJYNX69VtyquknBnfsHa8AIOfjm5
yS6qJ/JQ3fnzVHMeKmxbiiY3RWHs4gatmOM8hHaK3Oy3IPqTomtiYBsPsnYK
s3fWk2GeavtGrpjgiU9owuPSaCxZamIvo8BDTGdS54lvkbB7nn5r1Q8m8pde
GfdMiYWlEp+be4SNRLue2eVEftlyqiy0eTMPW57LBXNlIyGykbVz3kkmjCIr
r5rrRiDJN9dUs4yJc1FV3r0xZOgp3xTJJfqUXf/52b/RsSgyfDmh4sTFtKWC
E+dZDLQNPprN9eZgZ93aj7RPZMzzGmv22MpCRt5injebDFm37WVeDkyc6tLc
YxpOQiZHvUO1n4mDH0YOdl8NxzBJYZsHoYfPzfPdKzPIGCyG/CIOG9OD5qLz
wmOxXlXz+XoxHmovtJtpZ8UgVy/T6W8vG56+W0ID6JG4FDc88imFhY7L37zd
I0i4qKX83CCLCdX9D7dfEY/G2PaY3fIyfFhuzWI57ichbFZN7G0TCyG5GpYd
+2LharIhW1WFibdL13Zk/iJjQPtJ44JdTPBvftX7ejwcb+aL9b/msPBF1DPu
5/0YBKhX827FcCDZo5Mbmh6BiJa1uxR+s7BFxMbIV4yE1y50zcp5HLzwCaz7
NRGGFfHyhzu1mRhJmwlz0Q+HfvtOM8dgNs4bi4rdOxqOuMPasdaEf1c8uNuQ
fYIMSdOs+slpBlhPZgv3lUdD69aMbsFRLk60iZ83rCNh8Ey63d/7LDxK8DKt
KSEj/cFqoRtXONh+8OkH84xoNIWlWmc7s0DjXTW36A+HMWuh/zZfJpZf9u3m
7A/DtRy/IsEy4n4+TdH6DkUgOfL4SDqRD0R/5sxs0I9F76cP253vcIl8Iezv
tjQMSb+dgnQeciDw1g/vzY7GhMeBl7OebPhPyzeWC5PxwSDnbUUkD9Opgtst
wWQoDx07tOc3G7vKYv9zDo6EURlpRdJxDqxj3Ss1nKLh5Po8S/8XB2X1CZIT
d8NwRlsQ1TvLgdvT+w+afSOwmtT/4oQBH2/eZWvcH4+BjK/ho0UOfESdkyJp
/guHZ7Kb4+FkIr8HL924lMifYjaMg0dOclAyWHljvXkUVsjKvJtU4CM/+dPf
5sIIKA5qiNY3cJFjTetZqRyGLO+Q0f//3TPEZ+hJ8roYNNUs3UrX52OZ94/D
MleJfc16Iiuzgo8bu1TafK1i8bfVyVlxMRtX9efX5XwmweVRU+sCVy4kv59g
No9F4PmDee9LjZjoKH0RXRUQCrJGfqjiIj4y9Zd1BW0nQf2G73bzPWycdBum
3JOIRbHJYcMLYnwszzNoWTwdA2goXbsYR/SJZ7d+uziH43nhuq2cbWw8PF3y
6JMGCUttm0YvLONggmL/6olKKJKzIkbX5XOxIC84jvQoDG4XyOE3W3no2Pj5
oZ1uFNg9hX/iX3FxQfPfc35TGGqFQjzKy3m4bXXAbiopDK9aP6tsEOahMSIp
y1WR8MO+2hePtvLxneQuaT0ahZD96umuN5iw8C8pcCL8fee1f9+cTDgg21yV
Gf///3HjvgRKDDJxuZhkLEXkrfDhNW/OSHLhqzb2tVsuFKuf7Ps0rcLCc5rn
55GCCMSsY6xYHcBB5w81WRtVEhZ0dA5UhxD8GWellf2IRUizglbWAxbM49JI
q7vC8DGkYU3HfS5s273X6nJCYDsurdszzMWkN+vBhjURYKDx7yTh9xU+OyiX
uBE4V045Kn6LhfPPOPlKvuF4y348xn7OQlP62bw/zBh8ozwSciXmGVyy/EnO
m2jMOa5wUt2HBcr830UvU2Mwvd52MNCDj/GypRfecYPxTLTB/bYQGxZNO67o
DYbA3tVI7sI7JvT2mI6FbIhAQ9Fo2+8aNlS1P9bmrgxDXNOjnoS5fJyeoth5
qYSg0pup3bmFi5m8IbuD1UGY3NsekZbBAaPMoatLPhaN5RvXzr/BgrLOc0tH
cgx6dK4f/dzPQ7PYqFnkxQjkiroOBR8n9JeuJ1cnQtzHqNr/KDrveKr+P45n
lJZRklVEyorsynqTmbL33nuvwl3naklWlJUSlexCMsKnQd+WnYxERYOy9yi/
z+/P+7jn3HPOe7xez5fH47psd9dIICLz/eS4WgisvRRLahykQvrmqfMd2QEQ
Tk9d23qGAiUNyRUrwkFQ0FnHrHqbgG8riohsFwxTGtzvo1RpwCbza/GNrjcw
q2RJZygRcO5gt13Ngg9Mdj+yeniVAM9Z03Lj9SAILmY5EqdLwJ0M4lfOoVAo
PUOap0/QILy0ElfJG1Jk53lOqZHBYHE9PULHB5I/RO5mc6QCkSvfK28TCj/J
Ntktz0iQ7Vm0/uaGD1R3dBy+LYv9+XWKXtr+UPDezcaDTtNg7A7XoVPHvYB6
LyByOoSAx9MJVWcNvYHV6fSbN0cpcMOiIngHnzcck/7EsvUWDQItk5Srz/sB
vw7/12g9GvDEiLpEXQqCHTO3hkVeEfCQi2ZokeYFXLulD839IEGPt/LqwBZP
aO6cLTeMo8HO/HKRIy8DQRxedUacJyB1DuVZr/nCb7/H+SFXqLDebHFNCvN+
n2vZb6MpEnjkPds9tiUA2Hit28eNKaA7bWBf1x0Ej0l6h4a5CQjMnd6+yuYH
9k06pZs9yKC4qj6Rl+YHBXO7T7tgP2xMbLs9EuQJQcf4dFcO0cBbsIEr4YkP
OIl+2CB7E9i/tPP8fnnAo59nLA1vUEHZ0u1H0YgvXG+ste07QYa8E/I+clE+
wLiL8lbrNxWeHxipLwrxgrT9B4UPvSPD86y1BdnlQFBrvdgDi1Twm7m89bqs
D7w/r3F470sC3hjug0a6J9T6yI7lLGN+eKQwGvDUH95/ejCY1kAAS9iR8kl6
MPBdpf027SHBF4UA9RVlP2AhqW8ZxDy4i9eWvOobDDseKN/m+k6BBycN+LjG
cL287NSbu6lguVg0cWVPCDDfdSWNzJNBuIpT0VnXAx582RbAlkqG3ZPPt6dc
9QAXz0Weo0kEDGd7X4/QCoCx7/9Fxj8nIGlN6aXlvDeM9UT+SsT7cT3IubXP
1RPO7yBUNmP9nbyp8Iqr0R1G8/2kLp3D/GfacIl0KAQuv0XJt1sp4JGVZBPX
FAj31L87qDdh/U44M2or4QfXBbKGyR+pwBV/lEfwfjDoGkYbnmukAZNnX8Qb
KR/YcWNN1suTAmvn4tk1RIKgfji1VSQTZx4xoQP9TD5gr1/H34z5/Vfk9IVx
5APbIqV/etSRIKQ3O/ckiy9sGld8V1hKgGFC84B/iQfoJW+6FBpFgXOWR/QH
r/uBbd/6FqNlEtT1FI1kOXnC7Jcxsfe7qHDlTcH2e/k+oNdycW09joDv3IcF
S2gecGlNy0qmnQyjdM4itBEEl+SOHn0QRkDyrku793gHwAmeDI78AgqE/Oa4
I63hDlH/PvNvuk6D8qJup9DxIPAwS0dpOdgPB8/zdhz2AJbo9h0rrTT491h+
snLBFUzKPh68q0eB3KnI9wVHfUG69g2YJmB94XHgKzXzhlvkfpl4Cby/109/
QMo+UHGW78IfCwq8a1WrasD9cr+SaTbRRsDrLYIF+ygBAGoFMaH3COg5ZLcr
RNcfXv59kE5yx+c/Clg6ftsV6rNffWLuw7x76dRBW4cg0EuS4JwUIuCk2uX8
xFFveHF+ZkdgJwUkNS/9uFLiDz639pC5HGhgtOHp0iLlDjvqLO6z+VFB8tBP
xa9PPUDZV/NFliANHm3iOPdcJxB20cttDvZTQcr6tV5GtCtMc1n/zS+iQrjm
Wb9ZRzxf+xqzxBZJUPLL8vzNKV9YZ7ewzcL7spFwvm4Y63PR7/iPe9UIeD+9
R1bDwwfSN215XYznMSfF/t+Vl+7AiV5SfTBvPL4VZeQvFgBK7031rS4RoOXU
O+Oc6gowesXOAPP6ges7J1kXfGGma6X1v1ECQn9oFTV/9YTHj/6EPPtEA7ch
yyDmf24wMGe1EUMhQDV1vEdbyAMWnvazbrpGgFn+PVXROQ84ZzEt86CAAPZ9
xz7amvpAFgdH71wvAfLPP1Sb4n5kT6Zw3m0nQDSd1bqnywckZ1vscrC+XztN
sJ3YFgC6z95A0gYBV2T3mbzZ8IYk0sbRHZsI6HJN2ipc7Q/GbOP7VJ1p4CRk
3vY4wBfiU476VdZgHvL/qv72gicwaWnU6rpR4Ru9lVe2zgUGROttLrPSYVBM
yS5E1h+c05Z2GGC/SHshybmK9/F04tdll78UiBI5bPE1wAMmfn8X7cT57iar
lMxp/PqAUrCk9CcK3Nf9dmLovjfYlWwXLukgwCbvnmCQhicMzFa8PH+GDjot
P7OPX3WFTcqMnxQoNOCSm+PbyesOMsVPkoM86cAu4qHeYeUP+Xwi/6n7EXCz
zTdfRssNWh2zD5Xg/BkzmMCJ7P3h82O2pWQXKoR2n7n5q90LqpKcbuY70sFy
jzjX/gteIGnyrCNOnQp/CoN3hjxwB9KvAlsznP8s0hnUKVt8oU58j6dBHAXO
Zhm/Yi7zgS0WSokHb1MgO51K5GK91Fr6KEwi4fk5Ysfx/+/JHB0U3CVgQ4db
QrutGxUcgSdJ7xfQySD9z056YtQBnpx56m2gSIfi2hx+OcIbNj51CC4epMH1
Jzz7y5OdwaOcQb6XQgfm0+3yLIpeMDGlURc6SECfIVP2LhU32GdoocEbQYYa
/6R5wNc71ZofemCFCmaHT5/6J+MKnt5UwXu7KKA6pjvB/cEDqPGFHWYDNKi3
Yz9xt9YN4iTeeYtiHln0ZfWKQvbAtuMfqyTWjx2a88k3S9xg69FFhttYf3h0
J/QiWLEeyKX8JMtRIeB0rekqrxsEXc3rCvKjw3498Vu3k71gvVuFN7WcgMSW
Ftd7a27gt1k95Vga7s+9tKYQfPz+pAcsf8QJSPhZ/chxyh0MYxJT2szpMHVi
ijZY5Qu+q/HEZxE68EUUBV+J8oAxCfmFqFwq6LYa605pOkC+f5Ad4wvMt1dD
7Lo8cX3qb+7Ou04G++quffsDfWBerMzJqIMCL8Ksr5PdfEChXPmlxmk8f7P/
friUucKEIztDwAwZOO9s7vGs8gaN4PYOXrxP/yVdPMTx0B2G++Qmv87i/dg4
eIhJ2AMYA4IfbnjTwS6GZbPdXy/gud4fUSZDhywX8wnHJ17gl6mYcJeRAP7M
tR6TDhfgfS4j19JDxbkz2t/1sR38l8e8b+EDAdpUvpKKPe6gm3QrwpODCpfZ
J5sVMe9w7lhJEjtFhx0fh/uV9L3BaLRoeWKFgMKvzR4Wju5QnawVK5ROAI11
puNukD181Pq4pXgnHS63XMlXGLQHp5varpVZNNDT9Mp1uegBG3ftylv+kcHG
reWP+pAHiG3wrrdi/ruwLXX2hy3mh5urv9uGKDB39dDAg3B7uDMpO651kAJS
bvqCleueQGLc+iaIkQ5cvJt29rxyBotVz6tHEuiw/E/4z1kGe3h6c9OXVnEq
FA0fnrIcsYGTOXPhbEcIiOrfyPr57P/f217ldm6gwCLP1/LXjxxhYaF63/Q6
5l8S9d1eFVu49sacKZWTAs/M88IzFD1hd47hrrYlPF8C0rTxOGs4Lqc2HyRL
QDff5NIjBVd4sybx7UUYBaxoNT0HRH1ArnLT/ZBDFLgQJnJBe8wbWsh9ix5H
sZ80xddunLUEGt25r3wzDaQ0WWk9gs7AWfbQ6cUs5pM7H9Wv73IBs0thFwcs
adBX9yDqJ683KKbyv6hPJMB4W05JVKYbEFT3iYL32C/Es2Z+eLtC4qCabs0t
AoyuDB8yKLCCrk/V85VSBNh99Li0bd0DHranudYY0IC/m2+rP+Yzr5PiAY04
r0Rm3pe6vscbZLbNPX53Hu93XZUZx2N3KBstLViJp2Odke76bOEGFds/cixj
nkgM0DDK4XAHt3oDn7nvBOZC/T2uxZYgx+//uSmEAoxsdiejrnmCMkt0zMAN
Csj++jOt8MANmDhcdh0sIYA6ILzyp9QKVB4IfSPN0eBl6LkT5uLuEBC2lGXL
QgOP+yRKb68HVGc9TWwvx6//CO4L4nYFeyXhZkV+nOfEthd+dHOF+4mFRUlY
X3yOVr56aewAQ3N1+4UXqBAWObD4e8QJsjyj444l0WGgKXRHXqc1fPtD8t+D
9bx+D7O7U7M5ON/aNTzJQYfuLPIXaW8LkPnt8OU5QUBjXbHBPMkN0p9e/D3g
ifPuw/UqkfvusMb9ecJXgAZE5RNzHl0bYFA1POhZSoH99REj/q9dISF4pOrM
DjpstNeN3r/qAPX7Zv97YIXr1elYHsjpBubNHk85neiwza2TYcttc1BXW1i0
xeffYI2Sn+azBbeTz1f7sV9XjowxjEqYwrXQ+LTATBqIXLT58d7AHVpWYv5r
YKfD/OGSf9FGDqDANxMS94AOESu8ZtnGTtB5XtI+bJIKJaWj3KYvrGEpku+o
tCwVPOKC1Z7j43Vj+9PKsN84lDkrbbpnD462ja/Mb9FB4LmYseSoK7ipbPGO
wHmCseR90IM5E/AbzMqKC6TBRzfVGNNVU8haWBJ810EFMbt9QrtrrEEgPzk9
GfvhNLNAWN12Vwh6NRr35AoBfJUmeZPJWI+Xnuu9JNPhnZTBlaB5Y5hZ6byU
gfVa9f1atqe/HexQZHpU6kiAdflbi6WHZhCic17jItbv4nr1/iOujtAVbBaT
hP2NlOGjc3HFCajRedqh0wTkftgboO1kB2IfKK95VelQ5+HJ9jbDHZ58Kz5x
CvPeJ+Y9LHZkVzgRLSIr/pGAMXmil2naGviKLi3bClHBh6HwT3OKK4zPHNuj
aUSD9CmqbWmvO0TnZUeE6WCeXbTh061zB7t5keJYI1yv/KJPgsOmcGg84ltq
KPafq1a0nnR3SC/cnpCCeSLy8nMvWwZDqDBRZ5p7Tgc2P1etXeNuEOU+VdlX
SYfhDlYRa08H2PFCZzOfOQ0ykzquoUhTaJo3jnXvpoOG7PvH9j9cYUH3ksTa
Gh00+dZ9izSNgL7hfeULIxX2vhicJt9xg6Xj6FFJKB0q9JQf7mdwAXQtNfTr
GB2oh/p33t8wggIJu7U6KhVz8GCbg6k9aMo9YKluo0FPd8x/3mMm0PaHnUd7
mg47HasXVLqtwaA/i9mxiQ57bzam/5kwB6E/wYREJwEcD5yOfHjpAuHxR9cv
bSZAonmT1NhhI6j+oyAXSqfDif8E+3efcAW62LnWTvx5NfLux3iUbIG40R//
mkyFRYk9PgHhp+FvhA2pD/ejrJQv8nyDPejGB9o8kKTDBeuM9N4iV9Ak3h5W
zqPCwcwsAZefLuBQlK/OvYr3PSx+hcPdFZ7mWPiG+NPBcbvOBw81a2hxqfOw
oBIQIlZygbQb88DA5rANfRqUMO798SrFERpb05dqzeggsujxKnbDFv681+ds
O0AHow+tcxbiOvDutsz+F/h5ePfSXBP3u4BaY67M+wgCjifXqCQn2sEr44Rk
pwI6qHaE3ki4YQJ3pBXqmQ9T4exKY6qRnymEKKZ6Mv0mQISyukM9WB++nF15
3lJHwJoMZei0lSVwdrJsa5yig66rqEF6gxlYyFuWzbjjfKrnKN3haA0F7b0l
845U6Ln23fvjoA4shZoJba8k4BSzZs3DNj1Y63z6NmieDj9L2MOnuKxB1SiV
/9FFfH8Wyk9e4es57QvVqp6kwaTS9TK3RBNw7zr5rbaMDs9iLrC9+O0Efxfu
tZ87RoNPa6+D6CwW4P1bi+dIMdbv7Lnga5wWEKA8t6ntExWW3cMP3po0gzvx
e/9ew3nEzO2whrmUC+SXPndgaqfDf/WdrjtMLcChb6MgHs+r1CWRuR1x9qB8
nxISpozn8zPHMQcHY+CDxjLJMDrImOnu3Zg0go4uqV/R6phPdyXsUlMyh+Mi
/+WW+lCBtUtQviXUAeLz4j9OIjr85v7w4FiSPfj7ApWG92UlWl7gt5kjJPGc
m5ruo4MbmTDZ89gcOP44hmdo00Ghc1bALs0BHmU+8dRipkOHul1NRqctjDVv
jnfjpsG24Y6Wn5qm8FD4uM62IzT4tvno+Zi+MxC5J/GJ7h8CZpcfiRU4m8AM
+3bZ9j2xcGFSss1uwghKOUaOfsX63CFVxisaYQojlyt8vXA+TVx37o3VsYFu
GXY1xRkqtLxe6GufNgSlFp9/wWJ0WDNz2BerYA2pXv8FfD9Ghc2LsgVlYTaw
Jyma9+kNKjQGkBLYp02h59XDWCGcV8RVLt7cVGUDq8wDC15fqfAw5ZatOLM1
6BbHXA19RYeoiuXMZh8n6Nt9ZD5KGfvp6Dx7n4Ey0KdEojfJ4XzyrZH59CdH
MNnUk52xSINz3bovj7vqw7V3z8rLf9DhG9Nq0d4fOvBJ6udx0ypcHyH1S5f/
swDjlAOq/hfo2E/0PvMKGkOK3o2OwyoE6HCa2v9eswU0E31hdZoG1t9EZPyf
W8Jo8cXVVS58vNkrVa/3psCQbrQFYX2JTJCo6X2mBSm+MBpgiOczeO23DoMB
lP1ZlPBsxfrWo3lg8ZwKjBgnJZ9+hvdd7MhnaWUT4HnH+0m/ggaBwkLff5We
hG5t1oXRY7EgWtH4yFrVHIiXk6mBU1T4qu4y9jDABtgLXeb+sRDApPZxNvuu
LUTYu5iwbo8FVmrOyZynVpAv2Z1vWITr7/zgXeNfM1CdUhNEeJ5FOaU5iPGT
8F7TUPpvJ+b75PEnpABbsDoYsjyH9Say3ODgyde2ECBQH3g4kw6L8Zl/HJ8a
gHDXqf+iKqnQdC1Kayu/GlBSaUUbB6igsbhHgA/v/7A7YVv2lQILN74Ndgbb
QB3vpR/6+2lwUsfp5SFBCWhtZa3ixPlTUih65L+jp0CCvGHWQdBh1PhktquQ
ORxLENVWHKaD8I/hMdYvVqAX4HqILYEGGdflWkyVZUDppWGWjgIdWJTyOF/s
2An227dolO2iQ+6dQ162IabYt8MEezWokPlCMPcolz7sYrLos/IloPbmimv1
LyFQlv2x39GLBsk//yVWOSuBjv8x5QisR6FnEgdE605BJD/pr00jDcRGb2td
m9cDBmWyseQNGsxfV9CKLBQFl/f3XZKD6ZAoGS4p1qgMtslTto7XCWi5HHSi
1UQXclZ4mlMYY4GJzdLm99+T4J/xtd6fORZGhtfsAgo1QHz9Vu8izmPTL9V5
BCwAbvvs17slEAtexTcy/cKkYVtGR8YFrJcxe2pSt13WAuaS2Buc8rFAKZHS
F7SRhWWL5VT+vTTw+sZ60HfMDFJ/PDZuGqNBjbqbN2fxcTjYOHLMrZAKGYEl
cXFcuxGt0OnqtX2xkC3/ryG7wwJ0NlTSZe7Q4Alz3rs6ZTkQ/XSo3s6MAMfv
zocoWSoQLtVglahAwH2Fmys7h4xBqFLlsIdsLGToii37VxqB34LTqKhyLIzp
NwlTTLXA7qDHGgvWu+Vrjt+/sFnANkcmo/dysTCY1VE13msJom8kJbfjfFez
0Dqb4m0Juxqt1YxlqHDqspCnk6wGsEhWD1//ivlntHcm8aAFkO9a0QgRGuQE
p73KcT8C+h3j7/VN6ZBgFNyaMY399Iv5/MUPdLBmu50egf0jWi4mrICXDjZF
PWxibiIo/Y2sT38yFbhzN7yyqyRh4hu8IBvSgPQw/lmzhSTi+R19jLWQBu7d
zgt567vQ3R9VLqRwKqQEfjW8u3wcZtf0f/rNEDBuKaXgk6iIyhZub/PTJSCb
7NtJiAlCa2a93NmXBMgJp0pki62olzYa/RlANLiaOs5GUZRGT/b2/TPC/MLd
F8X+pFUByd/VTHqH9bhMqLatmVsG/er5T9+hiIDvWzQaBhhMIKLx0+b4pzQI
GLJ5tl5xEI2bZL0bwHmlinXJmJDRA8flLte92M+SkNpWB6t98PI5vSL2aCz8
NCreKHQdarIfmHY5jnl7LM7/0FSbNli3qJZPbIkFkdsDayvH9aAt68X7Dpx/
a3JcHD2MtOBYc7bqu0U6HH5BcX6oow5Gfzbi4jsIOLqk3SqtqA56C0MSm4Yw
7z3dpxK9oAXq/Cm7BLF+fMopqhL5LAzyWrvdH3HFgq611WUu+1X1+e4Wz+07
sR7oudvWyDIj7fGLl/cex+8/CLg2p8eCruxMkdwSQYeM4P/Ip2dM4N+36mfd
CzSIalAQ/SxnDMMhAgNnXtNAoOGkciXjDmAur5o3ACq0a5t9vKE81WTilVTl
jPOL+KGfNyqCRVDaKCMRiv3hUdTlJ+2nNYDr0YRi6BkCzrHV+e/fzAX3OFO3
1y5SYdT31P6VZ0rod0Z8Efc6Ac1dN87/NNNASzFBDY14f/XfvQk+5ycPT6N+
U40z6JDcbOLpqaUPb+pXuwwM6HDzdFbnizmsT2oVUX3uWD8m5HxSI4XQhfki
Na492F9n4Y0AqzaKaeidl8Z8maCydJ9M1QU/2k6PNswH5s0u5x3WtZFkh1nA
DEEFLf2XRmH1quA5NZQRtYT5+YKf35wvI+QNbkpUNSDApGNu7bGXMjQy0ltr
sd6fmZU6JfTsBKrvF16VzCUgTPB++N9igAYbgwz+vzTI0tBpuMAmg36MmQbM
0AnoWbpOHtu3G2WbzJV9wfmMU14ox8nqFHiKH8n/FkKHQCFF5mwjRZh6udWG
eYQGMjpE+QQPIPE5sdpfe2Ph2b/OSo2tEsDDnsnxQArrb5HOE1HYAZ4X+brJ
/LHAMXns4DM2fbTVUUKtGdc30yWYd7zyIPwsXCXoanS4GhOX/EvjFOKxDfQn
AwFWjE9zNd3XmxoabbkvztDgQLl05pG4+iZfcq+eUTIN3hwtV+F4fASGjv6X
9sYC89M7QyVFb13k7NxHcJ6IhetLqOWhICBusrPd2V34+S8y7DqgpIQoYabh
XRFUeNygXdmzVRcu/NjmK4P7pb4mPfFIVgUJHX+o82t/LNQ06VS9/julHrnK
292RRQMX+yd8Ba6F6lV/20XtGqmg5Guc+XvbScR3xUk/lI8Odx6w+wCXNowM
2avo4ueRPZcy5FyrBXH8B45XilOB6dyp55RWA1Qd5S75lwHr8fJegTgJQL3a
FXPM/gSotBmdMt9zEn5tPtUZIkiD4i3B22CPDtyoOTkU30iH0xnPzFT1JSCE
+11m9QkCjhVP/x2P00V5vu9uTK4S4FvdJrJ1WQsMkFfVXay/QWGXxJ53nkCa
/23R4sDzrXysbOMd5TDsP3C3zDeGCtNO0m+UPpxBbOZq+Y9i6OCUpxVQzq6J
2gcO0cc30SGH+iTq4oQeYjPJ2sSM+9l5YVq1Z6smelK/xDPbSoUCSWG3Xc7a
qJZzee2yaixwcV7X4WVVQ7JnTCvf8xBw9bqiDVjIAka1XLc7dBjbl8Di6MGI
0lcOfFjEeeHXonpE4WUTVLyZsFwMxzyjxsZk/EgSCqpZbWox76YH1m7Zf0Qb
Sd1JkWfeSQdnVS377ftOIhMG8u7L8lQY+pd2UGKFG/rupNIPScdCqP2WlQiB
Y2jntTTLfE4CdrQN3yxO10Ck+Ip/pfV0UNoWwtAhcgZ9cOrf/uIRDb7Em0UP
PjdF78+YEdswn82tGgq0dmoivmCzCQtd7EfPyn7eStVDxvVOZrkGVHhf7+Lw
mySLuE/9+NpUT4XspNXtPOuS6IvmVHIs3i/1FlpwtbAgChn2+jzdR4X0Q/0/
Xj0/jna+1/siif3nW+0RpvACU6S5mntZB/P6DacEURbh4zA1NHDPPhr7cTOj
O7+xLKrVcdNOx/oeWtWT911VBAQPlgw7cBAQfVf/Q5zsTlQcJ5usuBvP8+eK
sfMGPGBwZ3w1NIwKqe3CZ+pKRNCyh7Tuh1sESF4QCjykoQgah+cOKzsTMJpb
pvZESRgpnKPOhDXTQWBp042HR2WAPQe9ddYkoFdJk3iVI4PyTtz8sqpMhbRz
AV5c+yUgJeX1Cy5rKuwzSm+lcqyrG0o5rhZuxjz8Vc7t+ncetKzg2PoT58U7
jNPzYouaKK/e7qGlIRWyMhyqb+fpovO8Ix4+slifKj3+rNroomvWYex1zwk4
HKD5/uf7Uygz51wuvxTul1/7f1wdgFwT1tL3/4f7z7aqXPDlGKrdccg9l5sO
r47qCqy8Oo3kaxo+va2igdvkjZ9tN86gxPX6//ar0qHH+cw/6a1aqLvCtv3E
ZxoUHHP/wWFxAhn+eH7JBvvDfHE7B3fBKWS0xYKJV44OPPrT7GaWy039Tn1l
85dpsLbaPXe0WwP1d00X5GNeTL2fc6+yWBRE1xvCI37hPM8d7zKkcQJtbV7u
uo/zzcE1/zSTASvUf1aQYes8Fd5dVdv94ooZ2jpf+fgwCfuVW8Z5wfi1JkV3
nqZvmCdV/NMXX2zXR4MqZ66ZsdGhWyne6m/NSYTO3lbLw/poyl32heW4LPrV
VrFF4CMd5FmyPy/4cKHDZfe89mtiv1F8aPUFbUVjZD/3xlBcX8vyg3MHDVBW
1SVWMzrmA8HgwtzTlkhK41DIojwN/AwWiHMGNqhLEr2N3koAnTBjOVVjgw7H
VlQ3KtLhTSblXMDKYbScd9lRJI0GH+obAn2FrZD214uQN0CHLZn+3FHzFujK
bxG+prdY79iMg7dG2KD31Plv+depsC1l1bNc1ALpqxnmc+B893uRd/Av7ofq
Ymfzkwwa9P26uCzrqoO+nRElHcX+/++4sWXOVVNEt/iYqDtIh21FRyRfnddC
d8lu+7YJ4X5Lm+s3PrNBGVabJcIPUoEu+nM3lzMvcqcNskoP4vw/wsB4pt8W
JXGdyiYdo0PAzYqyazlGiD9EN/hUIQEVnz5Qv163QR8fht5tu0JA+JkDcWk+
0qh2b1RK/TwNrnS2h/9it0Xn1mO9rHPp0OIvISrw1ga9VrHn2Iz5zelb0TZz
a0tE3bs9UgD7heTq0trvu/ZITl3ATxz3S6PfvjJRwAadFrmy0xRfb48If0SD
hyWKYhFucO/B/J453XrvijX68fbhNucvBKwkFmxj0bJHgQJb7x3kp8PdB0ed
OMTNkeX05KjbLA2qioWqRxksUO+9HZ39mBf7z4/9U5kwQRoCHzkvnKXDDC/r
cZ4GRUR6WTcvkIPzo3HjShWLNHp+5vRLvk90cPDczL1OtkL/ji0CK+Zz9oSV
KXsWE+TyzfrX+xk6zJ2f7DvoroDQjvEi3jtUkJyKcNRxPY5U1rqvfHelg2ZM
yYTPOSPUwvZo9eoyHcS5mNw7Gx2QD0tf5Le9BLyTid9JHJRFmzLdxKN2UOEP
ackn4cIp9JR2xi8f59v84BC72RBbtOfym+LTr+nw47DGi7ONjuh6dker7hQB
RT/fWLD2WCEf7RLblpsEDDJaeLpnaiNBcn5tLRsVnj65HX/7kz76c6uK/6Vw
LCjMyTblGJqhcpKjTnkSDWglmeMlW0yRYZ+zoj3j//XJqUHcyxH9jt8xzYz9
QSPxrD0pRxONdm6fiyMR4GAT1fW83wSNfd8wr3xFwO1DejP/NE1RmbKpnM0/
zFMHLh75b8ASRb79cOE35gXy9r2OL+IU0bGuel5ZASoc3v39PXOAGvr1YF6S
/TMd5CT79eiWVmjZSD6Njp9fejRAvUPwJPqbuX6CrxjzrD5fusw1I+TmcFru
iw6+nx2alINsBqgucToKMM/eVPGylFjQQDs7dh1qzKKDVLeUFPcJAzR8XDf1
Tg0N8krULOa3aCH+zQp9T5ipcH5pa6iIsw1SsWUo1ML7JGN9ui6IxRmdXzOS
UcimguXG25tDnGYoZS725TGcX5TGmKdThc+gH5eDnv/opMEnGfPeJe1TKI0y
ZhiD+eXLpaey1/8zQcyKNbRrWO82X5Hit+E8gyRTbuklGtBgz736w3keLsgm
ixSexhoLfVm1jmSyM/rr2Nhhd58Ofr7d/Fm3TBC565x8yF86XNs3PMlWeBr5
tN12Ccf5yzl+47tyiw0yr4yeZROnweH+8azpMjPk4UMzmf5Ch+tqr3OEXO3R
QEdNBj+u19uDkzlf7B1QZustZxXsF04UvfubL5ogYmeR9wVEQIBUhfKpIHu0
l8ZUiY7g+eN0+32l2QZFMeoUF1FosNdLZkaByQD9cdJt59Ei4O75aZnRzc6I
3LbobPKagMphmo+AjROKIPeO+mHeMVhgE+LNckCKOpW6KfjznN+Ka9R1WKAE
3apJOE0DwnHeG2k5IxbRHYT4HioUn/Z9d4bNBL3bbGHzdoKA+vBcAbnLNsiJ
6cAWfXsaAG+0BIlmg8Z1S2Rf4XoDS7es4xMXNCvAMLAV640dTeylj6gJ8mo6
MVQ0QYfK45lBSU9dUFrL7o5NI3RoDP9wN+uGC/pzPvuRCs4npMOjYbf7LNC+
iuCjfPlUOEf76KCC68MlL7I8sUiBlOQIK8cJM/Qp4e1s8j0CAocsCsx6LZDj
UIZ0agEdtDRdLjUmuqKcRDsFxgE8/ze+a3ak2aJvNxmDL4/SIXjzXJ3RXjdU
z6n6SlycgKxL/sMRGTbI8u3Nffua8P0w1DHaKLihzz/MP2xppkFELGXlUoYJ
4pA/+m1nBxX0LA54fywxQWsZCoM+PpgvTx0kUQg3dN76NMOnMhqoG7Nue+yH
63E23W8d73tU214vbRF39D4z5IHYERoUPbHn3vjmivJcJ+6vetEhVZFNLv+T
GZJgtSySHqMAm+0mvhYJYzRKDjUyjMT7uq31sBmHGyp5QbSrLBOgRjc7OfTI
BP1SeqSdqoV55X3ptH6rG/pzqrUz5wHW387RkYNn3ZEmmuATZY6FAv8n3lzI
Bd3S7m049ZIKrvZeSUnf3BDzndKrHpw0SIyRrWlvcEHpD4TKG5ix/9+qbm29
54ouJ90u9RQk4NYCy70/WW4oLeels94DClQ/Ttmor3RBC88u/VtgpsHZt0wf
OaotUZPmQHn+JA3YLhRe5MP1t7hieX/3CAFLgeFeAiFWyGRpUGUrEx1O0BYu
Mb+yR1IHm6xsHOlApSkzGVW7IFUeI+N322hgxDF+L2LDGu3JQ73RmE/tZJR1
m+64IPnM115tKnSQMeSI25bshmovMVS2YB4fWO5/wKRmg66c5RN/B1hPYnjE
Lczx8z6djjjgQ4dz+/b9eJxridy0tXbqMxDQye365Vu6HQqdMSD1n6PC7PI/
k6ETbsjv+bqZ3DMCQjQ9mEHSDbUefnHv9W36//8OmFJ52RGp6rINnCkh4P61
R2K+/o7ItFrWiJdOhcKOQIVVRWvESWrbfsCeAEJcYPmTtRnK5f/CnIb9Xtr7
fJcrvwvyzK+xlRbF+c/Wh3vxhidyk/zsYMtOwMbZP88kyu1Q9rzKz72PCLhp
O9K/PmWGpkJ2tV7dSgNhF/mguzH2qFf1K8NzJQoEn+DhKVRxRR61UUNtTHhf
qy7I7qO6oWsmDwR0LAlIGNgmcfK+GyrS5L8QcIeA9U8+GnsqPFHIjeqjxHV8
/z5c5TzHnZH13aQqdyXsH+8TR989s0frI1H5zYfpIGLbllPP6YkWvJXsCG8q
VDtclfzxzgzdOhJc8SedBjqkwzTuly6IsazmiWoHDTS+q2RFT7misJfBehKF
dNg/Vb1iwemKZptKc6o+EJDp89hozd8FNf/KFWsQIOC19IDtfxLOKCqSk8Fm
K863LsXKgiPW6I9ez+nJVuz3uzZ1cfPZI+rL0nClWDowcBnpjm14osVd77hO
x9FB2mLDdlLFC20/MPZAN5wCXdrN/1QKnRDVuPsFawLOG5tPzjCIu6MZ8pjP
6GMa7HjO1312wwE9t8ns88F+RCm4k6na4YbKD+h2fqihA6O0OalRAh9v1dKU
PUSBS686HdicrdHbotO6yph/iJXbn0RWrNDSRad4w4sUyHd9z3tyvxca46nO
X8Q8+1dqg5F5vzv6XG7W2f0Jz1dDZVmuhSuyFH/89wKud97XCW3jOS/E+JhD
9TSNDtzZ+5IdjrmidOv2GGfMlzbLs7eTzD3R0gXm1a1Yry98vuV4/Jorwlxs
8NCXDjHf33z61OeKBttqL0otEaB14OSM+l875LnvgcONjxTQltWq1uKwQtIU
JRH+fAKGmmpW++66oOiIbw0PQ2hQYxlYehXs0eq9oQ9bcf4WvgMqr0Rd0O9F
yosBPK8vDMgprsbeaCJXXea6CB3icsc0OWvskDPN8ppqI86rV2/qPgUvdGpp
de/EXwKefVM9LURzRHs375Jzxfn3UNLQn4n/HJBfzvj6VSEq5L3XDDTc5IoQ
21Wny/0ElN4QG5/P80Z8Fbys93E+l/rT1VUj54y+/LjlehTr19FSaw+pXDek
NtnycwLz3LOTtdeS2R2Qp1vRvf4onP8UqnvsHNyRWMrVhg3sN2HmMbwZLN4o
0Oq4k30ABf4eqwpqZnBBxz9sPSY8RADtgsLMkrQnmkKSTn/30EG2fOXyMzdf
RKf8CGXE+8FEuRA5cd4N5Y3fraUtk4G3QWggl4LnWTtBR9cT78dvu6W4m/ao
dYf4JXM8/5o1Xs4j/Q7IRMt95rEDAfeqf/Oo1riiz20fS1N9KPDtSkPfXXZP
NJ9VojkZTId6Dc9f8paOSFSHnhmTRYONGcXDjF8ckP0bv7VeVdwf6RaRLkVf
tNXrkelH7E8eR/QvpVW5IN9yC/cdzykgm7rl2akXPuiS/Q+WyV9kCHfgkn0c
Zo+OU9Qy7p3AftEl/OVpuwsKuJuZn4t5bUpi5KVKhTcqXY8f08d+WHSLaVwv
1gWZ/mR3ToylwfvtD1iuIzeUX8oXar2K9WXwU4LcZwfUWTnbKFpPgTdu1VPH
znmjXOtiBWec7/9mbvNeuOODirctPH898//fITJ980fEAX39rH/EX4wAz2uo
TDbdDV3o5OpLa6UCzSxhcO99X3QwKYNdG3/+0rRTyR5Rd2RtG3rIH/ubEUvv
lhqaL5rh070tlU2D7AunFg92uiCrxqIc1mYCzDqieG9ewvr7ZuvvzYlUkGEu
5FGPcENh+9r9VbA+vNq/+pGyxwO9W1YXOyNGg196cRd5hVzQ370D4n+tcL6R
WF+49dwT/VtPmj+C8zLjiR2MtcM+iD1svFP/HhUS+OLP8Qz6orFHHgz1+HqX
PT1u02q9ke38Ds6IMSrc0Qh5YRPjhkyOWrNN43k+ePs/t5oZV9R6YHxnYD4F
7D4uXSn1dUViq53Ol2ywXq0V07T3+KK2+w6p+duoUE87YHgA73to5tvXnptx
fWVdhhn1vNAvlncHmnbTIXyXC3c3swvaqKzZUsJIhS0K06Qrt7zQt3zJyx+i
KbD37/k3Zql+yKGG6dkbQxr800qx07jrjqaTRCybqsnwiN/u18iIN/rOovL1
gQnWFwelgd+9nmjUYJN/A87nX9ebhLd2eyBBTaajLnh+Z47XyQ4z+aB7jjcv
umHeG3340LzoqyuKO6D07/VhArZw/HzNo+iOwnLbyhtxfwcr7v69Ge6Bemyb
T86X06D/Saqu4esAFPAjQn3bSZwH79kPKUn6o9dhrTSFRRqs6TW7J/z2QJxd
ihS3dgqE/qTWzXU4oz9r3XUbfWRwn7EWNMbnv9XjHlw9SwYdyeytZlR/tD/j
0EZKE86Dcgubryh7IXY77aB/+HnbZAXvV7q6IcZIIUEPETLEOf9H3kXxR2ky
vdn8XWRgKqAVUUN90OZy46LPvlRICeoy8tvjjh7uFVmwP0IGTjltwTeeLqg9
MukajyoVgFRIfhEdgCotbXJO4Hz3Z/de5yfOfihzk1CMEgfmG+WYdjVlN7Rn
7k78R34aqFo+Dww29Eav+0Gbo58M6poXu8tj3NF3l8yxCFcCygvkxHstA1HA
jjeFP/VpcNfGq/q5cgASliXHrK1RIfFJ7A2howHIbWuyZbkSHUyv5PMXbPdD
CC6NX8sgQxNTrKow8kCB73aSSjipIMR12KqELQAVlabx5jRRQGH7loF4AT+0
2XW5ZjOel+CqkTszeP694lw9V3D+IaIci63kA9GQfbPaVS0qHLIS9pZg9Ueq
emztXW/J8Kq0vkmRKwDl3VeUPRdHBjH+0ZxSFi+EzxaJGCPDYpuH8uQjP/R7
4HqakiIdxL4IsxNPfJHOjUJ7I8yLRXsDhOsE3RGV8/gWkToqNMkaRue2+6Pv
vrG737EQQO7/PPViygOp5ZoPReJ6vhesMpPm8UH2Z6Mi/sPzrOxT84GH8ELb
GOqN7bG+NXD8faHEE4Dk95pcZjYnw9HCJCctK2/UMG/bxIr9dH1Z9USvbwCK
Yhl9sus2FSoiKw3yi73Rk0edVonXME9/yBTxXnNHRsr2OwvP0iDDZ6RKucEH
SS1G+JU+JKCj2Ubd75I3OtfBCIvRmH/qOGayQ3zQV3/LM8ZnqdA4vyNc90Qg
crgTyvj/36mTDbqw7zCrO7o9oUU6w0OG89byUzO1vqh9zdxo5SAZGkxdbA4y
BaNv3qMUTmsKzB/qT3J554OQ0tk6/+METEk+bdxK8UGJQR/PXBsig1fdNUOz
ZA/kF/dz9mMBAW0WhcwjuYGIUX8yKPkfCUbucF1OuOWHXMa+eX16RwHa4xtf
z4UGo4t//GdvfaJAYHZbW3ipB9KHjv92BtFA7+lW9VLtYJSWmn4lZZoMn8Ol
sxe6g5Drr3SmYAcKPJ2MbDFydUfXO8wcPLHfBy2PH/3LHIKC3DfJqR/D+VyR
+/mn2gC02TfPJYKLAjuOzyRVsPugHQpK1yW/4Xkofy67ixaI9rHL3k2hElB1
veJjxoI7snxZEFkeT4IM+e08Yvt9UOpD2g+uQ1jfn0v/0X3rhaZhj/s3Fyr8
1J1+EEfzRhqefj1CH0lwqukLk8tPL3RezP+HOdaXIY+O5yohIWhoVWJQB+t7
xPdib/V+b/TBVGVJQpIC3sst9zabhKDNn/JXig0IeEAJv23I6IMoP+PSA29j
Xkvj3Hz9iA8ib1kT7t5MgQhXzviey17IqYyl+Vcizo/3UrYfKAtEGqa30pZH
KcAQ8Hb9qKsPuln8ZokB378Y97uTzzuC0Uv2TRHMpQTsve8RrHrIB12VXDs5
UkODeBHt8w9wvaYHguPv4XwsN3/2uZNoCILxj5c8mSiw9XSV4ke7EFR/vCNT
J5EE+78WXvO/4YPorI85hfoIaLbLedaS64v4PcM6I5TJEPTyZ6/0gg+q2rsl
wK2FBs6GfJEslt7IZlSv1nWdAqo2jmXIzxddStN4eE2ABGZLCi/CigNQw/Qi
kwTmB1KBbsoHoRA0zzMyePoGGRykzDQrGALRAWtDyVwyzvvH8m+yi+P53HXI
OeY1DTpaa22SNUOQXQK7rKA5zl+KhffvVoQgISmpoWR5Algknp1cWvVCXLKz
px7OUGBu3Th+t6I/mj26iDqXY2CW8XNg2TY/1NsvLOH3lICeO9eXXN97Ic6y
/Ombi///v5D5x1NUg9DcHiWGx7wkIEJMeDwCfdCsKHWTOhcJJnYKkjduhyLO
ncbuYxI0GK1YtGWXC0ILXA4ZsXX4/aUTW15TvdGG9tiPdQlcz4Cnx2TkvZFe
nwu7KhMZhLSdtBa7/dDQyZlw+XAS2K6F6TRdCkLH2n8cqMN+ydwUlculEYJu
sdR4hy/EQOqlypLj2T5o6e6sm5ohBRqX9AIm8PPuMBVZX+ihwmQyWwcThx/a
LeE8GatKg2VtCtwdCkFKNnLcsZtp0NWzJ21qLAT95X8h3nsJ75+EWu3uD15I
Q3DfwmASDb6wPvoyZByCFH90mW66i/V+gM8N/fRDFqsXrg/L4P29ZsNyd1cA
8rb2UXP4Q4LJgVXzjFO+aPnKQfqmWhL8zTsywHw1AOk5lJuk/aTAyw9Pvu6n
+yHqzSo1F0kqbHp4ui+B5I1mbzyUzbIiQXAw02YreV+U696uP/SMBHwhay5N
C77oU7qfQe8kCdZP02sZq/zR5tQHWwU3k+Hh/jvbFVMD0OH5vnLDfxS4KEnv
OcYfhqZLkBK9nwakDwc93I6Fof8oTWphniT4+sbSgjkyGA3/GT7CdpsE43KU
xIohf2Rj/yfDip8EEV1Mr4OEfZBc7Nmu/DYaNCh/jGXxDkGVT8fc/WRokCZq
Le/zJRjpX04pGsb9C4xP3Gwk6I+0WHX28jfQ4GlFnnNUWBAa/F54/n42Fbhv
foz7ezgI7XwYEJRSSwNf5a/dR074IwPxJ+Lr0jQIPV7doMURhhpN3XQtwmNA
/0B0RcGXQLTrPR9vaRkJGKdGhzdPBKJHa4NuU1JUUHyov0vrXBg6/r1q6Xsm
GY6d8DS67BWG3jzL9wLsj6UXJ1/2v/JBva/A60V2DCgrRDM86gxFdzZijh9M
oUHkaMv8rlIftJ/f/sItawISE01ezSaGofFvI16h8WQoz7xluP2LD+oSvZJu
7ECG7riTw6ly/mgOVV6w0qVC3T6OJx5BgUjt8IjC0AcyCBuVmJfcDEOPLTTt
3+WRYV/Q3bjorFB0hNt3UtUU+4H8E+bF0BBk8NZiVYsR85b6+9ahen+UtGZQ
+EOBBj1LFd0+e/0Qg8ndznJznMfve9UjfPz1nHqXv2kkqH505qjU3jC0f2xt
iuVvDHS+aqjo/ReKSpx1I4buU+GkMWnowo1AdIbkuDZXQIVXfCU/ZG4Gop/X
rWVdnMmQ8Nr5r7ZICFr+a1BCIcWA1Y25aVlKCLo82FMsZEqGaJZh35PfgpFu
V5ZwIiMJdnXT1ds3+SGIgMENdjJMcp0KeNIfioKs5p/dw/vpciKmkJc5DCV6
MriNHIgBmtM12ufvAWiQ5VvDvqdUWPP2dhSPDkZxjiNfg/dSYF3U0LJXMRRJ
HP/6W2SCCjeKnwae3hmE2Jv/4/FojwH3VwWo/WMIiptWb7p0ggofunaQ7tb5
o7rnBfm33pCA/R8xcX13CKrethTi5k6Fo7e/vbm2Kwjlqez+KiJNgVXxSl2z
ff6orUvnX4YkGUhfav+eWvBH0mwm18XuxsCG4oul8w9CUJSAmPh2FzJIJ0iX
T/OHow676vaJvmgQSo96ffdpOLqod/EhazA+Xtv282x3CBI+mxAzLBUDNlaf
+rtWw1CLQUJnmDYZlK5yOzFGhiNGy9MchEcMXPo9n1N3JBx9PtppUYjrmb2P
f/yuQih6nsOYU4z5Ssm4OSskKwQ9zVVc+vOYArMyPHO/GMNRsyK7+L34aDgy
0nnquWUQKpUfuzfCRIXSU6I37+wKRzdZm3b+xvpQ1T1v6sMdhrwaG3u8jpPg
ZhnZpHBvCEp4LSZp850GgdGmb5o4Q9F32X3M28OoIDjmYjzsHIp2J/wMk39H
BaacEydeLYWg/0yd7t2yJ0GZUIF4uFsocuK2vzr+hQSDdPVYNtsIRJqY2eTK
QQINftK+DaUwVPhM8FqQdAzkTWgzn6VEoCqFMyUcQzFA36mzaeZROOLe9llL
7WU0vPm1eJPLKQA5C7+l1f9Hg6mIJ16n5cNRgdb+R/X+VBhiMNtdxhKGMs8n
v6Hm0aB2pj2vXCsCDc6zRsWqYS1W25FzLzcCsR3efUa7jAYfMx7xHOsKQef0
r5qGENEQuSZhlcwaipLbaedmYykw4z61nzsiEFmshY7x7iSBqPKPlaimMFRk
tL3l5CwF9iTubnh9LAJ1buRU1mFeDLzRNWWUHYzQ7kdjEQExcKA1qqJNPxwZ
XaGb9GdS4LfMrC67dhiq+PvYL+ISCZrAZ7nUKhy1dIaFzOP6uT5Re3VuIgAF
OQqabt+G87GfPY33LuaBPrcRpTcUmA5IZf4wE4EsN2qFdb2owFViMH7najhq
ZM2Re8lCho4mXbqmRSgSta+N1FInQW+1XHYeTyiy2RjZ9EKOBjR6zLQFnv/r
5IfjhhY4/+9mi05TwP02in1iTdDg7eOWngvFoSjirbJ9Ry2uh//io1D3cCT8
Mff1pwYqRFkJ1Bq/CkKR3ZmuJIsY+N1z6/5Vz1D0uPCUY/1lMvTMyj7u3xOM
fJ4O0m/1x0BaESV2riAC7fZk6+HpIYOVYrdi23Iokn1Sl9UrSoXw2NoECbzf
4RLSX+3EaSCS3D9sEx2EjvRcfeLWS4bUI0KFJoIh6MU/zWOUgzHwwSVz4ybW
z6UsWs8uXK+ex/d2c8tGINXpQYNFnPdOPL5wq1AkGB1UuZNY9SEGJge5Jwqn
Q5FgrEdLbiqez5oTue0WESiu7e2RGTYarJ4IZV/9GoqeVErFn8S8wDA32W8c
E4KUbXcp5ZrHwB376eyu3xFI4+VtcRZmEigyNqh/jwxFpmcIpV3Yn+6e3XmW
byMcfZrVFOCvj4J/+gL/RgrCkZ6P1DMK1ouLccyMK8VBaOMuR4XKSwr86WSP
3Jkfjpg0u27SCTKc+q0fvO4egTZVz57nw3q6qZscoLwvDIldrNjHbUSFL/+d
JtauRSDnowopcZokeDbawRSgFYwm5bZ6GJyigKGA+vfhB2GIUaY6dv//fxex
yWIYqYcjt9U7Tve4yfCzfDcbcESiG/vJViZBFHA0FL5z5F4kyjshdcLWhQIb
+fNi9QLhKHFg1pWxgwSvsyXiJ3eGoJNZmfJ3dlBh8bHvnc+SIWhf3WM7Pme8
n1th4kQ6nuezP6lrCtGgshhxzFkpGKkU1/cNO5JhU5MUz+Wv4egfcfJ52jsy
RH7LncrEfNAiwWr+7VkU6MVJRk16haMHuo96mNMokPzWMFnjYTB6Nn8osCCO
Alek+3fGZoShAfq51LfNlP//nvPN6MNh6MWL3dcNvkaB248z4/3bQxGde+jL
15UosFT0fme1OxJ9Vny5n3OBBKETPGRxwzDU7rwp6WkDCTal39ro94pAx/5N
+mtokSGM7JRh+yUEhcnrC5Q+jYb7HMKj2zTDEZkfZCLbyZD19E2VyM5QlIIX
/w45Bpo1SL7bK8PRkFmomYhZFHT7bF2XkgtHqiUP9Js0yKA7NlPOWh6CdBWl
koeUosGkMahwvQrvY+LbgqpKCuytCtX+UBuBHPVLp4wUMZ8bSqd6OIQhbyU7
+zSc98hB1tW3MiOQycun3rdwf9PvBHNZ50aioeEtKh25JFhjKDzRERuKttEi
HiicjIbJEP63S2Fn0WUFLR2NUBLsed9sntYdjlKevJoqFKRAZ2/Mv/Tt4ejj
v5A/2u+ioa7GsPctvt/bbvd3/vx1Dpi0XaVU7SJRRliniMgSBXhO50jkU8OQ
adjErftJMVDQfGSgzz4CNUdVX718hwLdvESwb3IY+ne9VX6nOva7/MKzJlWR
SK6z1yKMkwQS2r9KTaTDkNsBZq6Pw+dgv5Oz7UvBMHSKYUtVbkwMqMPOu58b
Ma+wtnxOxvklb9vNdlcjfL1H5nvPD8dAvX6PotqvMHR0i4YZS2EUiLakm8h9
PovWRAnlt8JR4CMjL3/ZJBTlOhM/LSgkUJOwLhuXjUSzWS7b2H9HQ03DCxkW
l3B06A5btex0FLg+lvklxhCK+u7xG7eRyHBt25V/ZaIRqOxtxa1xiIE9PQfv
cI2EoGLB8fS2qihY2bHseBPrpZFf6e0Dijhvvql7FxkViv79jUSHP1Dge3PY
p5T9oUh4qq9r+GMMvPqjXXV87iyK/xQXZe8ZA4rO20N3poSj7zXvEurryJBr
EvH3pXEEEiyjvuSMjoY5dmXtQZdIVNxyIv/RQjTkCHGaxKCzKE6g2rsxPwYa
PSysRz+Foy8VKZl9E+dgVziL7cmH55BwSKIfRRHXz0Eu4XDpOeTKMBKi7R4N
/UozviwXIlDCwiZmJ7yPVaX2c+yfQ9FItMDcoZhoYD9SGSm6NQyZHPnxqSsM
55V8ulYrvr8q2/6ay0+iIDTScb+nQSRSuGFg37yHDDdilS3nDMKQTYjBmwP8
MbCyrXrU7SauP8WLJcwxCh7IvWEai41ER7umTp4axPp9ZnZn4+NwpFR4ZAvV
ORqqE2dsh/0jEFdpxa/Wkih4ftQgLu1CJIo3Lm5Lw88DJrtiCw+fQ3ZfozlW
MA+Z9CjYtOP3H7neMwD9c1B7+Zl6qcY5dEbGo0HzdDRQEsxdfvpGoOK2r4IT
K2fhO8XuggBXOCouSl1TPxYNIjkVO0j7olC/yvShof9RdN7xVL9vGKeolIaE
aNhZRYqicBtJ9t6UvTfHOc4+VhEV6VtEw6isJFSSbpIykpYRMrLSJpUifp/f
n+dV55zncz/3dV3v659jMQ6aPHY8tCXuI6ff78fUYTKcV3oqtTcqGsMs17dt
nIyFM/FcQpVIRnGlifu+z+lwx5+fmXQ1Fu/y3jmbdo4KCXtvKITejMbLYV3b
E35TwOCBxiRtdQzycq++o9scB82Hp+TjBmIxqVTI7c7FOFgrkuP4cjcFzcQ0
x8WeU6Db7PveLc9IGKbTrWPVSAfKJQFpKyEKbtfZOZq8RJznH8eT15yMVr97
jbY7xQG7/bQLjyQZ9wyNxnzcTIHwo44zq3wpOBu45u6FFhpcCPBdbCDyZkVN
52nZZhq8YAxmPQ8io4rRoL5UNB2u2Elv4yH2qzjyqrSbexxEb6rLmFMho1P0
yUunuuKgbuLB9ktDJHQZuqX2/9+HyA3dGiwSRUHFtrfzYro0KPqV0ZV/iITh
+XZpRUpkWBItqOZpjMbbmxuubrsWR6jV1W27GMFbGLguujAOlvNL3xEqJmOw
CyhR8+hwUUpyj6lPFFp+/nM87VQsrFPgAqeD0bimNEXvhggNKDTDtpKVMfjw
6NTkpWexoDvBTd51noQ/zoSLfSf4qYrEdrofHYUrMo5dEs2iAZ6Qb5YOIGH2
kZs/CkyoYBS3YmP/CBl/FMs78k3EQruJQOvLOTLeOh2d+99UHFgMvC+7N0jC
NzmGwp4baVDx59jsUjcFVxpbCQxuo4Nf3x/+6NQofHJu7LBcKwW2D9YYZv9H
QY0iQ+uCXjKoPUrglPtH4/uj6fqvXWLh5gF7if4hMpK6uZ9n/v93o1kuFirf
CT+hyZye5KKAhLvtqdN+sSj/ednf1YxYyHk+477ci4Ikh132Wl9IoNqiQvJ+
FItRh1SU/iP6yql0y8nF9BgUvutRIOpGhZx6y5zPjVE4Spe49UeODIsXs1Tu
VlKw5ht77N55KtjcsVXhO0VBdYEfZjaZsdBjm7C9dUM03mEt7Hv9/9+zPKWi
S+qkoLyGvn6aARWGOBm7q/eQceZNUfitJQqM2PGfLA+IwftVw+pf75GgfYIx
WZcXjRdGL4frnSZD0kY3Pdr7aNSfrk3v/UODfcKCDuNEH2ivbp5/Nh8Lncgj
YGRJwoTaxI7V24h+MRVkOZ0dhxreMe69xD7GmsQ/PFoah79+UPd9AzLYP2t8
+b2TjDdvGD64oUgGYUGcqhGJxW2d8s9oDyjw+6ysb5IrCXmM7UMVrcjgcpMu
bPmYgmv0M58mFZIgt9iEHWwfgzN9X+w5j+Mg662WoC09Bi9vvfTwdSwZVnSc
ZRoSfBF9oGyFdQsZhOoG/9ifIaN9ncD1oB0U+H7uff8A4Q8tnfkGGt40yN2r
6B1A+InKsdRjQ0FxMNshUOKVS0J1m7LOqDs0kPH8KXuxNwYnaDrFxw9QoHfp
j/Xe8TjMbvn2wtGMAlrsPImguBgM8nt/JfUfBcZLfxo1xZGQenbzft2vsXD+
dHXh28loNKxwLj67ggJziyNDW16SMG6ZTHh/VBwECqzioxM8eeoPeksY0ODe
rv5HGrwxuIfZoznynArx9VnjUUT+jxqIn1hYS/CSZDEtYDkFle+WwIQiBb4J
RzjfHiX0rOnf0NRPhbURdx443aLg+a+jz+5rx8L2g8NZe1Ip6LC87eazMCoI
3ru3xsCQikLZRcsf7SFDiKn4lz5bMmaZ+C2pfomFD5zPd9qbYnGnW0n49qM0
cHsd1F6XHoeBiXojhcMx8NZards8Ng6jzKgrg8yo8EuF1CzEjEGH3N99o4di
wamh/mJidxySszb9fFRPhR98M8VK0ST0aIK4BEUa1H5ortZUisFqSe0e1j8q
dAi22m8WpWCqRXz5GxUSrLW0XGN5jYK7VmziDlqIgZwDN/XSCP/fQNJ+GkHw
wvkz0gVtlDg0bJnfcfF7LFyEocm02hgstLquLRVH8GWeUkNEBJng0V6u4jYK
7B+p6rxN8OvfCLeEoW8xkFzfML1ZmIynjSOnVnvFgteKxtzKsDg02uw8FiNN
gor4ZOOaIyQ0/PXxyVfi/GEyu9z3fSW+H2/q0f6jQMbWtxfDH1Jwk9ly6Y0+
ZIg6vGGpyiYG3xul2jimkqAhrbv9hycFeVN0qbE/ydBxTD5p2IyKTpJnE0rK
ifzMeriU0R+LGUUTsYc84qDlkv8NDjkGC2rpEcVBVAgIaTVP6Y9D9/iF7Dwi
f2SbKUrvYyh45WmEnFUAGX5MDLQP9RB+3KzdqhNAhRDv3dE/vpJwU/qNxdME
D2zy/dM8XEbFcS9ttH5AhWxNiVVN4lR863XsmRNPHPQw7RPNmon9DArYZqtE
gaIqNdXLi7Eo+s3wUKVIHDyJbOBJa6NgmNRPVW31GAgXt5YLFaZgv76/ihGR
50t7oysHpWiYMSzD591BhlKTlbfs78SgtsHHL/u3xcIBWZX8xtcUFFfenB4W
ToF3dQbXcvYS/lQ2eGnKKgYke6cre9+S8WRpI+/7thjoHCjeXUrwWuHaQzFZ
BbEg6uTuI+8di+wPxm280hQYvVDKtzqEjLdduRxnlpMhLcaOemhzLK46sPx7
ilEsNAju7DQ5TsHvWiuvxfwgQb/45NlXK6m4c+qd2q8pMmg4+kYF+ZCwOnZv
hZ4DBbaJ3E814YrFTIqwSCKRzxsiy46zn8ah8amvpdwEf9r4rvxne5Pgi8vK
WgG3Y2BIMpg+eDYWt6TaqF/yJ4Gi17mRgmdxKH1q351HaWRg56ppynTF4ZbC
x870lVTQP8zVYqJMxZ+jLzyffCf42VM/Od2Xiie+P1ZSFY2FByeTVpb6xKFI
aJW9kjUJaEdbJzZ+oqLj6V1Slwg/uflaO0SkjYztshMfz5+PASFNFR8Hcxpe
W/dWgJEZDS20c8tX36Eg34zKbaGeGMjlkqbvG6TgbV+hzrJ64rzJetnz4mQs
yi319imNhaVTXSt9lcioKOw76SpD5OGf2THqHRpabDP+tPEbBR4H2+5SJub1
44nF+3V9JCgorjFYCo/DAY14cpRiLDRFiBWJb6Dh3c13PwRwkUHb/79Qt55Y
lAvv1EkwiAa5vgzhjUS+pr1eax1qRIIv3S7SyVVxmPT5Q9n6xWjIOsFQOZ8V
h0q699dy7Y+FO3zT668cjMMqTlySlwcFXoXHn43+Q8ZT/HqTCw5xYHzi0IeX
52ko6sbTpaocCwM+wzWmrnEomjJWX/yJDG9X2OZ1Msn4waOh4VojBcQGS9q3
l9Bwj7+5cIB0LLw7c/mi6ec4NHjZY6TaSIJ9ubPjc4I0FHP72nb7CAVa0m6N
GVhSsOK3mkYcwT9HJQ4IirymofSHl89KamNAYcs3h+VpZHzY8I7WnhwN3h4L
UUZHqRha235D/UwsGDNrHmebUdBcsy00Xi8G0hm7dysQ59N/yNZdIHjlh2Wq
7LpqGv5NkVO+oU7470kLw3sWFFQVEf7HnU0BurDIyUzCz4y7L5taxUVDRfkn
ycErZGy8UkpSJfRIKh2cWsYm5ndv6x6H5liw+8wydhuj4vl+dqVJLwmyFXeH
viT4Uz2dfs/oOAVEfxuPtC3E4bFqUl1UNAl+9a/7dDGdjlm02A2P/Sjg+6jT
ewcvBekCy9ztu2PgZrHN9sAwIj+W9Ted5I6G7WEB/nCMmE/O7mJZvhgQ8Pa/
RkuJxcWQeP4SNgm8BEpmlIrjsENc+ag7weMPF+f/u3WKjqXc3gHHtpCAesPz
izGJirXtreJRBD+sF+lIWRSPxV7kmrDhIZ4PD4poVsRihPSOqdFX0SAT7f7Q
KJCMlac72kNaY+DJ/oxxGxca/vr58ff31TFQxwhTqibm+aFd2mJ6NwnSPtzv
G2BSUPNu1ruw3ii4K+OsftmJjMO7SczVhrHAuVrTV+xKQ3x5HB2exYBY8nLZ
Ch4ayhjp5Bn+jgGRBEHFR9uoaHLvw67hmhhQtYsM4Z2jYnvxGaO46yQ4s49n
+ykNgu88BAML9aLgYlXpsdtn6WgUSb3GOxwNkxG7Hv0i/Ns4bmQ8ID8aosOs
1DnDVHT1YdeMxceAvhk9/0QTFT8mly/zYkXB46tJt65dpyP94LtQ6q8Y6Cp8
Uq3EiEW/26tfWEWQ4NbgmQaBoxTk9t5x1XMyCk6qubi9t6biSRMlX9fsaCgJ
S1UdOU9H5aa4esOtJDjxq+dG06tY/E/yhZbZYAyk6Vfej1GPw5glmtJXeix8
GtqjUFFAwTQP801dy2LBiC+hO32Ggl+kgqTFYqLB5MBUv5QCA/u2Tql8/hgN
fNMqBdlkYv9eretOio0C+veQsuKnVOT66H92R3IsMDVeNvqmkrE+Pc9HZS4S
CqgJeZ+BjFsaZ6avVcbCz07N65G/YnH8j1LxLpcouKNCYdZSqXir9WfZHWvC
jzXlszdoE36je2ZFrXc0qKX8sVnHTcMT/67L/3kfCQq5hnILRJ8ykHFpnXpK
gkO34jP8H8ThvISL5u8SMowFrnuXKkHBoZReu8L4WODes6zmpRAd4yrsuL2i
yOCAqoqClnHIvL9aUvE6GbhGUtqUDcm4zpluGl8eCVa3OVUj6+iY09UhrcBL
6CFlqETlNB23ivj8J78jFpa3BGyxT6aiC67/Jn+XBMsD7246dZqGaQH/3Q6q
i4Vfoxm7u4j8rorwfEiPJPhx6N+s6Cwdd5ZspWzTioXvvUNKVx5SMWS2eOd1
jxhQ6ziYQF1LR93jS1vGvkYRPP7wgiWZgYGTF/x820lQN3Tb7VIQDW8VVZ7n
1idBYPnIwb4PNOSZfXpa+28EKBdCcMkkkQfGd4eTNCOB5/krpdUqNNyWorcq
90gUROrLkha0Gdj/s4Tn9n0SPIkpMIlfoiNTJ/KSjDRxPuX6rVz2NNQR3JZg
R/SLo/MpcXsJXo5tuj4bwEOG9x7HHjlUUVH/2iLPm4cRkBS+peLuExo2xjx8
9okvFp4e88ncMEVBbzGnW6fMouHySQXdZ1N0bBVZ9nRsMRJ+qWH66o10LOeB
i58TY0DvR++fB4Rf3Bcf3b5lOhJaMpvEi/iYKPkfyXykNwL4s4H6Mo+ChvS2
Qzl/YyDzv7zR5FE65l05on3oSAx8rfckqiUDz/91sdTfFwuVG3Qbv4jQ8Vff
XvbvE5HQbnOBr50Whw/Py9UbOkTBz/GkLldeOvJemNchJ5Ogc1aIbCtLRa38
ROb619Egu0zEs1mVgvYTdRrHEiJhu3VH4eIhOtp5dss4mseC4iexizNiTKxN
jXrVKBALZamaAasJHlIJ7Oq/dDUS3jiixClJCurvymr5QoqC8c0r3H/voGKx
yT+TC3Kx8LtraRbuU3Gbq+pB+jZC36sqd/MdY+LvX2qnM9ZGQfjQRc0uBQqO
GNbVpYhEg/joPf42mThUZBufPCsZC3+TDa8ynsfhVXGZ94x/UbAy9MGoBJOG
fHKc0HRZEjDEF0t5n1DxcKgLdSQ0CsrYdppgQ0PDae9U7hYSDK6WC/Yk9iPc
tGSv144Y4CyEVL6wYGD6PX914dYoyBTTt7giykCPiD/9bwJj4D6utKzJoWOP
hKZD89lISH32puVdMOHviVf7MoKj4JF+b8HcUwpeWv9Aug0jQUTb/biKGAWf
HODZw6qPAA/fZubHTTRiv52+bKRGgqWS1Dc7Uya+6ql/5PM5CriaVIby5ah4
Q/mbstezKBAaLZiJ5yf8ceTF7rvPo8Av6MSThoM0jM6fK103GwOPMlvkv7gR
/U/QRNY6LRpoT06Yjp+hoZmJsLyDdQycCloZSO2l4HS/3zbRVdEQV9E56b+b
iQJS16/dfBEF93x6xWSsqPjQX+968/cIKMeVeWNf6agkWfktmj8arqifpfPX
EH7IPtDVGE4CnacDx/ek0fBx2nDvvoEYCBXhiBm4MTDxamVirz6xvyUvo3fd
peAOxgMB8TkSbIru2zDfzcBB8uVZN98IWE+yt0sk/PXUNe/c/qkYePdwduhy
HwP3FBqYLchGwMvtt3slrhL5vuZiYaNONLCKW/+NE/q6EhllInQlCmqv66St
tI3DEBGTlwHNEbDuXMiBjk0MDJKQGT3ZQIKfLMvdAbUMFFoxIXkzMgx21q3D
HmUmWq49fE+gIhomnm+VFp+i4nLBNO75rjDQFq+Ibn7PRJX2F1dziPwLDast
+KlJ8IBBlszou0hwj5pJofTQ8IW2lx5nMwl2bB2+2TJAwSDZpcayphiwu5Yy
0GoUh3LyK42Y28Oh9IXAquF1LOwupnwxaooAc8lNn7420FGHp+TXBc1wUK3N
flyzlYFl7wyGctlR0KMJoZXvGThWWJfxyDIa/Pc/m1iVyEAXj/o0nbZo+Lif
voZNZ2J4k8X4x7EIYPbz/2kvIM7vNinKdykC6vLbLll2ULBsyvBtY3EEzM8P
5yTcYCCPg4WSMdG3FuYNJ5j6TPwXsdNbhtDvgcTKvesGaJjEVVJ/MD4CJu6m
C81M03HPcODWjStioN2R12c4m4r3AkuUhnIiwWEteUviFAO/LMpuU+sKh0Ma
M1xhixTcj5mFSXsjYIdYLilGnIn2jAdF5YUR0PFFjft2HQ2tA+SsbxH7rDjo
l6k5TMdV3VOa8t4E/zUWTZSsZqG42j9uacFICKx4ur4wk4pdkmUrrlBC4WmK
wOsfc0y8uc/e/GRdNIhIfdn8mphfTvV8gszpCPh26hzNjkHDjWudva2UooB/
ZPOVaEUaHngpnh8iGgYuTe+WH0ujYttAxw6eWzEQJVTknrWWhjdrja5wW4fA
5JMNI6t8mDh3pntvVWI0fHrstmX0BhONj5cX/com/Mb4mm9HFRMVi1fcylwd
BReWSUV+fsXA+BUen8RlwyGpO0v6Qi7hpx2ikxfI0SAs66McXMvC0h4PL1Ju
BFjk2rbJCDJx8WLiUphaDLRtI1WovKXiVE343anxEOD+1Jqdlc7E1yvo+r3U
aCgcCLQXDiH4yeZStbdqDHyY7tI9942F7BNvWXVTkWB8+kqz+QATreO3q7h8
i4SiIWE3z40sdJ61bEu/FgmyquH5Q31UTDm/eS13bQhInAleTtKj4eqL8hky
puEg60wfmyP61/SX/1a4/xcCYkUZU1qEv3yT/lSecyECNirHvC34R+hbd1ez
3tkIUG15bWpMZuGkbpDA0LII0IxvU+/zYGCUxxmtTsKPerLaTnaWx2GG9iTX
k8+R8ILneOURARo+u5U9d2ImGJ7KRF8OEmBho9KV17TLweDOJ1but4eBee2e
vOWdUUCODVmu0Un4c06/m7RJONg3lnnlrKJilK3y5jcrw0H9s/l3r0Y6Dogs
M5/jiQJbSUdTPxsG1u3VDjzmFwFBd4ebzQj+NitfcOfyC4NF5U0dgWwq2tL8
b20l8vLm5xcnucsZ+N4Szl3aHgIkYp862hnY+tlQQk0rAibNRzdJtTFQZNTu
X/NwGDRae5onFrDwUIeC54XfEdArrz1nIEvwt7ps1qcDQbDqs2ZfRR8TvzU8
zt/nFAH2xSLzOeo0/JMn5Bo5GwyB9evPz78j/CO5+ug380h4WrPorbWJihJb
9krv/hwIfzMO9h4h/Ol0fX6u8IpQcF7Pf/4XwUcaa542GBDf/+B57J2erWx8
wNG/9YcZDo+m+molVtJwh/1Jb/794bDwq+XjBhbht7sOJ+H1IOjJ5Rn7NReH
MzK/K1yJfGr2lnWhJdHxWZpRsyTx+Tp+rmmMfXQsq9MQFbcOBS/nFF/qA0L/
emkXJj+EgfCWwrFEExqKW/rUtOaHgW2b454pGQb6PYo++s00CO5nra+V06di
nYFM2KPSCNC7Ondu1zY2Bs9dPLFrJBQ2bj4lPHWZjlpVI78czwYBN8uRP/Yz
A8OijmTezY8AnXeN092aDCxm92tYqBP+oGTQOJjPQLkjlx7GpwZBkkvrs9Ht
LOQ+nLu+7HUU6N+wtNz9gYXm3lcOhPVHwahNRpOCKgOzDN5+v5MXAecjZH3I
RJ9edfq7v9btSBDON3bdlsHED/6nL8tURoGk3b92kxEmnvI4F6B7OAT8DP/0
J+azsJl0997wpWCAluUHKgg9Jn/ZJHX8QCRo9Q8FynqzcWGN0DtJZULf53lz
mD10tNydlMiVHATbd9YpoBob/xbpTLvdDoT8bnnupH4GclSOPtPcHAEtksuK
ouqZSL10Q2mmNhD6qN/0R/ey0S++UmnaKwr2HA94eJ7gxWPtkcvyCT8U2zXP
fJbHxK91G1aG9kdCuNeBRitdBtLP1lxIWEHwXKFIhuw4wRd+gTL2EVGw48nk
kTc/6fhOkLvVXTYSyLovOr6cYeLmac+mMzujQIJ/8EgfNxPvbDw+lOsZBiY+
fXI33ZkYK5bw+EdKOJBDffasX8vE5hr3urW1oVDT/9R9PJ2Bl1eGavhsDoY2
139vXpTQsaEzX5suHwJ513YOLL9BxeOWo7cmCD9R7zta8diHhi5Wm6S7vUOh
s6rHR6SKgdxqvocry/zhfZDS58xqOloLpLPsTSLg62JkwR1fFsodi5m7FhUI
u+7cUbctZ6GQoV/e4M9IqJJW0k5RpiHZoLrJ+YMfXFq0JR0QIV5f8u4QiIyA
WA3TcvlENt7w441amxUCiZi5OXY9HZ/HDpjY1PmD9YLKKx4xFm5sNMpr+B4K
c5qya+3P0nD0z9tk7tRIyLdKWJ8aycDdIjNOwrkhcGj69OeHe2m44NHzM8o0
Ak6/2Gx92JeNlqL3DtttI/zMjM17zY2J07MeArmz/uC608Df6DIbs5MOmN+z
IvRsL772z0Ein2mN4QbzYaBxbP5OlhzRL/ZMym9ZGQSbTo9fNY5kYd7Mdee9
q4Jgn5b+WRahz1iJ8hguJT/oGgx8Y3qNic/HvjSbdkTA/uNqHenWLDz74Xj2
xY5A8G0MVZhrIvq078+K+3OhcHz776yDW+k4c6WKnP4xAFT3lnX+DmVhnL7E
Jp9LYRBjs4LPO4+Bei2eE5SRCPis/8+nVZSOP9M3vaRERMKpC1pGA8Q+HH2q
4am4MwTax/wu7Hdm4dPctqw16A9LS/b3VTMIfpHgOGWdDwKuep6lOoJ3coI7
GwL4Q0HFjjr/ah8D32Tv2mAxGgKbJChXg7YT+e0krzz7KBju8VB5OD4spI7e
+Pm6KAhuF3IfepFPw+Ufm/bChXAwk3I9XuHKwgKLvWc39IdCqJ6KuiChb03e
S03hOREQILzhtqw2G1vP+HxTrQ8H6dcy287Fs7G7nCMym+YH3A83WzXRWEg6
9qOPpzoCHn8pFbLbyETRihsCMU3B8PF3q0GoMhuVtkVoqjoGQ1PJc4UtZTQM
8uv3OFPoA+uLg7Oo24h8ZBrHJx8IBPF3MZ32GSw8cCRleS3BYzOqft/vVTIx
RSlVLc02HHg87voMUBkofnZz2AqXEHDoog7o0GgoYB+8/KppKETZS4gv6yBe
X9b+6mvrBx98d0cu/0Ps08dMuZgfIfBoIGaT9xE2st42pUtc+v/fdfjeevAX
G1Mj/73IXgqF4PiMFe1VdMzc0dR/z9gHYmagWNyDhmpqtjOtdhHguVMvKbWB
gb05noEXlCIgJ+R7++I5Oh7sCfuryB0MZ1c4b/ymQsfHvIw3ZyRD4AhNcynv
Gg21TDdI/6gNAs1UWUGty4Sfb3OyCDH0AXt+5oaIMjbqdRmwrhJ5X5WQeFSG
mNf+TWtk+ap8YJdRw321OSJPzPsFQi6EweV2u/nfBUwUZFEmdLyDQbfVf13y
CcLfy7Q3tsWHw+zIwcHdMyxMUeMKy+khPu9t0gPFl0ws9en9LMwfBhHKpzm2
RL89+eDdMqu5cMiZVz/tf4KJh+74ezF+eUHPXx2J/97SsYYn4YVjYhhEieU7
3LrDRnmTCnGBigBIuBx6sNKWgbn75vWKSoOgaqF6Z88xNvZ84HJmnvQBnebz
q2cbmHhrs2Zq+sEA8FDeom2pxMKdBeY77TgBcDwiXUd4lIktTI2USMNw0ODt
MeMdZOKnovnOJDd/4Mv7jKZZDFx5ZvtrIy1fuB51WlV5Ixs9s9RLrzZ5w/LX
OyJchwi/vDSTebouDAY7vmQa2TOwuX7xmsLrALDLfuC3x5qNA6YHhb1riPN7
WG4J+svGIR4BmyuiIfBJYR1LLoCBmzn8Ggfsg2DG/Ovpn4nE84aY73lMDQLB
mwmbVvkRed7u7/ZDKQT+OAvcDu+joc6yw51FJT4gPxd+cJTgmwIhDylxqSC4
8e/yRIc7Axtdjrg23vCG9zWGvGWH6ZgiuDAU990LBrZslTd/xcbi77lpy254
wQVuY34FYj9szQ0P198Jgs8U6X7nbhb+0rhlesI6EL7UPPJqIV5zi5lD0rA/
7Kp/XU16QexT0z4/loMPnPAzMCRfYWFmcm9//YZQ+H7pvLoG4X8cAWG/DNVQ
MNSuK1HnY+M28bvk91Le8GNQhuHkzsZv3CVuRyqDIFV9li3swcQfPxKHPhoH
APvJkuK6XAZaUQYsj9eFwuljq/e3XGFi9x3Nd+Rsf5DSWL1025SO3w2pG6DC
HxLZ19+ucyXmLU4bfrrTC/ykN71Xl2Kh8tmsjSFCofBnpsfgsTcd+b9V00v+
+sH+nX9EJfQ4yAg48cZwMBjWirYsGBqz8bd2rdZWtwCAhbdH5L+y8YP3RyXK
tmBw66WQ7AgeEbzjx635zguMt+1WiiV4/8zPSpM5Qz/odz51/40VC0VF8tV0
G0JgqTBO4bkxCx9/V+j+RvhNu7le2dE7TMQzERGbhnyhHt0lr7HpGKP8af+Q
vieYhrNGDSKZWNWgH7de3R/+xsjVPCV4p9e38eu0dDDRv9VzFRMI/ffEJi8t
94IonVfvE4nz1Y1ZTXe8CALKoR8/askM1E533nHIOQRUd3UL9z9ioVv7sJ82
XyDUGF4S3BDNwJ5Tyazzf7xBKWOUohPIwcr2ucqHUn5Q12JvckuLiVJ+3230
Nb3A9MVu4xOE/sN6X+9WKPCBF8uiHOsMmDjS9Hvjp2v+gKeUBSodWNiwL/td
K9Ub+BpOXZgVYuDzXT2KyReD4FaNrc2YHhu3z+iYXNIPhu2p00aDiUz8rV58
f57Qo1XkwZ1Hilho+9Lg9nd3X5A+/CDeexcHmfXVgcvWBkCplm9FZhoLa1oP
bv+86AdxpGjKtZVstHkP77WP+UK3t/kyEpmJYnZnWo/Ke0Psq40m90zY+K5U
btnfHT5gYdtTu5ro67dGN539d90Pwiz/fFaboaONYbXgYeejoLDpcF5LLwvj
pcWrL3zxgnX6f/Vq1Thol8l/bbbcD1pKpGvSgIM2Zhsr0kJ9wb+AN7nLkI2y
3m1SLQ6+cPLm2NqryED7zXeAv90NBHv5SeuJ+e+Y/FwYdtsH6jMvYzHRL5Y1
BBcUQwDseL/moVshE7ULVKwcp73g5cG/Rq9sOJhuUl9dfN8X7r7ueqE4wMb0
rbukJjp9wIQrMyuihIll2hWaHOOjcOWc0T83gpcrKq0XBwuCQC7Za816CQaq
j6+51qUaBJU14dumdTnIMp8qCpPzh30KbO+WVCaOntz5mGTmCjJrP/SlaLHQ
Z1jnvdpqT7jx4LGPwhgLoYUclqTnDgd3pk8mreZgT87pXXrNfrB5h/aOH2QO
WsztkHzI4w1y3sEtq6gcpPaZSC/9c4M8BYcNQZs4aCxdvnR9tS+IRkWEbSDy
YWvbQI3Xc2+IsKs2ivzNQlp34bkTSj7wccMdrjxFou9uveAZRNxX7eS4/OJl
Bnom931xkvUBBQPz9t7jBD9j6pYCI3+IifyvqnOcjRZN8+eEVnnByM/Vz7/V
0FHv3VaqzHsvSL26Sqz/Fh2blskFWDwOhBcvQwdoVWycvjVYZX3UC45o6yxO
23LwTZXQ03FjP6ix8hiMm2Xj1GXfspuP/OHL2t/vFOaYGOVQkuTCHwjRx3m5
17lxUE23SdTmvhd8WrsgOijPwpGWh79/SvuBr7uWdJwOsc8JFiSPs77Axedg
XDPGxp+p+QcD7/mDm9EJZ98rbDS+WvnhIfH8Lo9MBGgNbNS16l0/KhwANnMi
XSsNOXgcTFitoR6Qekpkcr8aC9VLn+9kFnjCigUbVTHCH189JvHl8fqCRkpe
1lFfBp5i+J39WeQMmh8Waken6Hg88Id7dIcLFP3YsimgnoPXuxx5ha+5wU6B
MI8nGmzcsJVrT26hFxzPvcfj4czBB6lVB659dIArUXbm9UQfdH/lP6rzwA0u
Ph46blXIxiRls2vrW72gYJM98y+RFz/8MwuL1zqC/KEBct1GFqp5C3O7PvEA
CarUzgEmB9e6lY/Twp3By37w8Goiv0etPmWMjfnDDy3jdBsaB8eK1UEm1BMU
J3sUdxP+9Ed+r97sfmd4als8xKvGwHYuscR7Hj7Qyvtewu8LHc/eaC761egJ
kJ0bMVdMzM/w9l/VjfYwTJM99PgZwQ97am1MXtkDT1fWI+VBNvosnN/3S9IL
Knf9mqO7s9BCtck1lO4H5xaWCVYaEHmic7tj+xkXuOLovk78BRuv+8YarDx6
FKyaFs9ZEPcrPhnwrfSnC/DSmWVxazg4ba0q9zjKByQdO3su2XPQF6xHIz38
oPKtyW/bCg6GnhXUKlzvC6npuzWk3rGQHd2SAVv9Qf7f2VM8RJ/7w7foLm/p
A1uK7tR+MCHy5p5+1IKQC5zhjU27J8bGWyIDM2VpzkReR/873swheO7p1ekB
b6g2/fPxMsFbzZLZ41vN7UEllPcj31UOVpXoHPuk7QyXR6KrZk0IvnTt8K39
4gHbpqPTfMOYWGFREP1+pTvEHJUf4HrCQa09n1t0j3sCdXCyWlaZgZoRO56s
kHCEXwUvB65sI3jl4BGJZZ724KLSmtDzjfDzYdND7lMOYB9v2rxAYmPsvuYE
FytfMHw6L5T1nY3Jn28Hc417AW63WeW3ioMHlCmZHHlXeFx8YcDBn+ijQXek
+TPtoP9okkcl4UcLGfFKI5re4H/d/8HbIAaO3HPUoPu4wNFnFb43zTjYsEuo
U0L4GBQIKtfblhD7cUx1vxLZCYaFv7r/jGDjw8Hp08yV3vDsike4CeHv1vpl
PpNFXvDDzHS96Cti3saxpZdUfKHnwvtTfgoc1Cn76aa36ArJ2s+eXjZkYMii
mPvOD14gvPvZJ0N1NpYsb1gSXO0FcZc4knJxHJwJWVaa2+kCI+w3G3XLmBjO
r/mYvdsHCsJlH3Z95KD5potbLx+xhVO6bDOJMBbeesXfcnTGEpQ+r1vzbBlx
f7uuvxDa6wmavtOhFSQOumhF9U3/cIGQJQd3xUsMFOmVd12iOcBEeuP6t/Ns
/Hpw+9D5FZYQJiN0c+YLG10OUT15Si3A7nhewntJDvaJHY7cXmUJPnWYf/Ad
B/t1K9xLG1yg7+MrdyE7om+mpDP0w+2BT8vioEEXB7PGD4wIGduD6Mdis5tx
LOyK3rT7T7k3bKJsZyZpctD/rt6LrGQP+Fc4LiVpwcSrqqQXP9S8YavSm0vN
dQz8Sbn5n9OADST1esgNT7PQ5ffZg9e0XeFktY/bYxE2/iivEP8d5wIX1+fF
K8izkRL5c1XVMU8QEdiW3ETs4/5tdQ/FE70BslyNfhL8PhZzYPZGqiu0fGE/
ryDycZ799VLuf9bQ0vLdsoTCxtmiinnuGAd4rtln5XmP4B9fqw0NYscg1Wv/
0WfEfmQe/RCu8sARci5vHQ+UY+KJ/4opA2stYOdWJRnORaJvpL3MVjJ1BY5g
g8a4AtHPMp99sJuzBDTfURsQwUTplQf0As85wfgb/3d6a+JRbXO0TsJKT7i7
dpj3fCQHF3Nn/dIabSGxxI8qJsvCkz6d29X3esCp61qH/4ywkEs6UIyrzgNW
vJrfGdbCxmV+5uOyie6w4qRA5hgvB0/svRAjmecFl7gsM24uEXxlRx6Jfm4B
jRo7b2QRebc3IW/mmqg5bJI11h0k/GGVSxDjJ9MFLAYDbtbtJ+73UMNIZr0J
bK3evfPEXRZu23j+2bIgVyhozf7z9yEbDYVuxabyeUHfor5CQBKh5xFtsQEt
G/jkWLwOrQj/92TRafpHwbjge3/lDyY2nfG7gAuuEEbKEfcm8mpD4Tmjm322
0LN/cpS3hIV5ILHvxiMPkDrzJU23n8h/T4ecBqYN7DtwmPTYkYPNu253nEi3
ghMqpf2fdnLwrtpWj6ehLtChH3J7lQQbjbam7JmMtAfaskBVfMbBiA2kVf85
ecDdn6Te20RedFr/NR9Md4BJceOD1cLxaCNlJHSGeQz8D5d84wnj4K+HDQur
jntA8Gr9jV73CD2NsJskD3jAf7SNrCOKHHwstWmcNuIKelwDliIdTExUldcn
fXaCxxnbqC+l2ZjvNLJB6d0RaMgSMti3mo3C9x++Vda3Ar29CgfUBpgY9LIG
gtPN4OarZ2ZPiPv+0NL94FmBHdC0nXzy/7BR8Zq8y9pAJ1j5jrnWhPD7s7v+
U2TxHIbBWa7PT1U5aPJmwObkfy5w/9MBQctFFirMj8sufHOAL4uzr43yWRh5
4qXNPR1bqGq5MhpkzkG5VQoDuTWGMKb4edB4io2Dt68rHLugB18PTK1ueETs
S6783o+mTtAu1tp3fZyBwgXvszeXGUN59mLg9TccvBh94tgZTwOo6uppEWOw
UCrCIyHggxNcqQyT5orgIN9+bcW18iZw9OBRHeUpgk9PlJs1PdWDIqfoNjlV
Nnac9LaSK7KHVhFRharjHLxle4GPq8YMDlreDyrnIfxE/TzrAMGDVOconqK1
TBx8sbzr3F5bmFz5VdKB4N9fjatzrv/WgBPw0VXhGwcVD+jbxXuaQx5ZcLA3
iIXpJ7TJn2/qQotg4lElOvH5Otztyu4msOPqQKPqEgeTXCb9/KX0Ycl2m/En
DRZm7U1UXhh0AMWMLulPPQwUv+cu/prIg+FNnbTUTCYWWc+m5u00AnLP1+Eh
bw52t489OeVvAa2h5OdOp4g8ccunPdhjDT4PNAaMYtn48qZexJlMZ6BJ9t/e
b8pGPD/zjitbHfYor2nYlsRBsZCAWolpC/hhlGHz0YiFx89/UPpZ5g6Zr9o+
WnBx0NOtw8FYSR2WbxgYPy0Vjwu3UiHssgFw5ZnF3qhn46d2RbkiHYAbyyZr
2oh9oBrIZ/DQDkJj2b0rX9fHo96iyP1SCWtws+Wlt6xjooLm1CvLEivwpD/s
eaTMwotebsXKSrrAFs7XthUn/n+Xnt2qJlOIZAgzFwkerzq3bfrFSlt4vpBz
eCWNhXeeq71cf9ERnkRXuBsT/c30to/HrKITyC7XvZSzio1SH911Z0rt4VVg
VZk24W9PuDKLH3aaQ1nKI35KABtb256+Lyg3hOzBos3ml1lIEpwV2dNrD1uV
be1pTDaqfp32X89jBFpvduYN2bHx5Guv8yfXHwZPcfkVPISeH8tYW//64AKb
1vRYdfzl4MLRt6T5XAnwCM6bblxB9O0/b+z5ug/BPosnJxuI8+RO3PVq/o/I
n1L3zg0pbGxymbpiTrKCdOdm9WeE3pPzTz8o/bEGNvC1mh3fH4/FYflT1csP
Q+L4Y76fswS/ZFIHWMmHwFIuM60+kYO6mtclKsxtIbLD55TrRQ46aWj8U5/f
Abmd0ZafCjn4ObVklemICbxP8rix4zQLhWL+eoy57QKd/VwBYjvisWB1gTwz
2gFy3Fl8N5OZKFf1+MGaNebwk/yoqYLYD5nub+I3jS0BzpleeOPOwYeVjtvv
++yFJpm6p0xpFt7889/IbJ46HD/zqG/Ik420jNHHC6t0INK9Ou01wZMnV31q
/DWyH+qfM61OEnlifz9bVdT9EAzwrTTXX8fBDNuck11fDCB5gmcr/2/C7656
ZxVm7Ycj72ReZyAHy1SuzLzXcoBLK9c9z9Zk4pY3GR/Xe1nBs3OZx72I+yu+
k6sVkWsFi9LvP/j84uCVayObRlcLoFDz54RndWx0S13u2VphBxIrAgdvXmCi
jb1zydd/xtA6KSJHe8nCz0cGP67XtYN0s8PxTUQffNIWyqCnG4F885qMc7os
FLTOE2cReVods5V7RCUeeX8X8tlUGMBpwzfnM89x0LBlw1dBLjvQ/nrp5ymC
n8be9fJt7tgHnycl+CcWCf+/93AwsHsnjCXIG381I/InjsOuHlaH9+eet7xC
Jvol8CTt2GEDpX+SrsRpMLFecrcMqcsI4sRXPb27xMQX3xpdz+lpw6P+p2m8
ovG4ien+4bqYEF4+cWXkrQ8bP49vPTxQpA+XIpWypY9x8If2fYWcj9bgwT+m
YjbMRlHBI4OrLGzBzaqszjOag2Hza7Q7kuXgZj75jSThP07/paYxyDYgVBR3
LvAiEyk/pXpUr9gARVkt4jvBh/RCUvCLg6twu169SacIcV+EQQtul0IJvwhF
Sg8LTdjjBzwWjSHg8ak3JTs4eJTcvL3K9DCk622Y4SL6YNCrV8t02MZQfzlX
eiyGiXYvbnBxMg+BzOFVuVvWsNGj7pwof6cRyBlJrToQyMYtV4d3VLRYA+lB
TFwPkXff1Ev3h8SooU7TZbbVFhYaTeh3m8YtA2XnwzkfXrJRYPtdBzLZCppy
Hrz7mcvGAtFelzsNluAcG1ozm8FBAWbuwgz/Xngn/ixEm9hPzVPXru7OFUWq
6sPuZcTr81/79CT9NYDxcnJDjhALM+7XDsytMgIb/rL4AYJnM82yq6VSreCs
i2d54XkOKoybLnBbjzyMMEhM0+7hYHZ9ScmRbik0mxq1yJCPx1yjB0Yzo4Ko
SI0fEn5K5B9t12m7DkvgnzDh0mxlovL0tckzXfIQ/a83e0mJ8Ott8zwR/buQ
075d0prwp3/zp91FRi3h62O3Uy+J/Ds5+G9ZlYcV8ITG85quiMc4V6fTMmZq
6DT39uL6zcR8Gsnjxqv3IGdMwpqHmP+0lGuTmOYRMAr4ojalGI/rxlZv+euz
H1NEAxk21RycOm25u5KihZvZz49V7iR4lDUV9Z+qJlw3szZbRuh5ZeveyZWg
jfH1gw/IsvF4/NPB2jGmBBoPb3zXsIrgX6/XZif8jSEKGWF/fhF9gRZA8TLQ
AwWVG0+du9j49vXyR6mZmvDrSWunex0TzzmffTMWvgPfZl6e32IZjw1nxW/+
3fpb5z+rLO1QgndvVZZcH5dXg0e7VCf7FphoNfEpMapmN+TVhWbvu8DCVJEz
5YdctBBG87V+hrMx/kKSMH+IAQ4LbGEd92Mi/b8d5w4Xy2KRgZeg1noOSnff
oa3NN0SJ3zd3RRVxUE3266FHoSr4S+z2pU+lTHSyic+RkTMBGeew8V9vifz5
JD13XK/24WD1+dPWCWxcnZldO3JJCU9jVUv98ni8UAB1w6ZycDrN2PqjAcFb
Fho3ytkS4JxlkHNgbzzCCqmE96ulUHbNQvM+azbmjY1MHj2vg9tW6c5IxTMx
p2Raqc1uP/7IqI1y1iT02u/gmxu7HKQGu2+rEnnNW7+6NijUEMlvsufZY8T7
PzWa2BP6eX1baNOxUYKnbjnMGoodxlMSc9mFDWyMUByyXoFaMBlUzXWeRej7
i6XoHQc9HJlXTLZOIfhzpyXEPweI4g9PZnxm4sH1XD77E+WgMDItOP0R4Q+F
HxPf/tCEe7fGjcyJfclKkg0p7RPGFEnbopdEPx6gOhoG7NfD5pL1zhmibDzS
o6FZ+0oDSxfTnyTtY+GV8ZCdxS1C8Lnfag9OcFDS8u9IBRzCWHLl644RNl5U
Tv7NfVIVvsWXP84j8q5qnxYpL9YQbxnr3S46yMbLgzmHDv9Vg42rzIY3SXDQ
sffPIO+CHEi9LEnyryb8XTHmcJ3qfpB4cfEr5QkbC+1Enzw9aY5S2TUtndcJ
3twfm+L5+hCavv8ucOsaB8NFqMk5WxRxw11dy24iX25LruSzdzkAknFNM/P3
mci/2Ytfd8AY/zP5EaKgGo9jnU/XHTDXArrpXLOzIRN7ws+PlF0xx4f/3dVt
l4hHK96SUA3ptWi6I4pv41U2VjMD55acNsLC0A7RLfFs9Hze99Ta+AimdaTs
uP6Iha59Uy1WfBZ47uvrUhWeeKy8ZeOTxiODfYmjlhPdHKx+/Slb4IMSLMXn
q1xLJ/ziyikvmy59fFEQOptA3MfxQfc/FH9LLF/u7NB3nYPJr6y37z8mg/bB
Ud+dZDg4dE3+z/M11nhC9utgtmk8en6Syl4uvhdvxOVmmxWwMfDNiVdqjbp4
urMqgpuf0H/Uo5tPN+zGvbeedKdtIfzmWwrfsLk5FhaLrFauYuJnT4dUvhhl
WC5qdGMnsa8tuT2STZzD6BD8PXf7fQ5OVJXqbZQwxxKV5OTpcyxUXrj55OI1
C+yO0Y/YX0PwrkHgFx77gyj78d5mqSImRhX6Pfct3wy6HQu5/cT3JaybvGT+
5qvORv9C29E+Nt7N8FsuGywFWz3lFOwJXtxrJHnhlskBqBW/49tqEo8f+W93
C/2nif6szHPOe5i40u7dFT2SFc6LFAU9fMnBXer2T7VcJZFqGtljSfDsN72T
q3W8D6C22tie5N0cbBeZsL1taYHPNTWHgrQIvR8a+jSx0Rg/yZZbPiH6bZ1I
z4p5kg6WnYq31/Eg+vPrgM33tHVw8ajvfWFi/oGHrzzNU9wHEefOu298zcEt
gYZbhTYfQb4DbbPXCT1tHn5l2XtNETt2t477jbHw39pdQ1vnD2H6gccdNwne
qq9+ZvB4VhdDBadWl4izsULbTvfMalXcZXSN3+w8wU9zP74mr9mDN9Lq1S63
MfH7x24DMaYJiil0TfyjEXoN15pIXK2I94an34Z/56BXrlPxu9MauCGRtr9q
moULKk8fcQ5JwxJvkn4dwc8D7yPula60Qrmb8dTdBF8UKTD7MNAS2zNn7r7e
xUGR/KP3G5ptUWA8rHJ1HAt168+qD/M5YO+5fQMPyjmYX358pae7FS5FBU4V
KDLx+U/KVB2vHtp+4Jc/587GMEdpUs+CBVY+uFhz1YqDdG5PCouuiruXSdq4
7WHhw2Oi4vxyO0Bt+5Jq9XYWqji+SRRI0cVl3n2WJ4j51VFbO23MTfDeNald
K05w0KpmUrxwtwOe0pU5XEvs8/vCvBWkZgccz9hZfvc9Cy2oCVOTBjZouHt5
apUbB/WzDPhUbM0wfKObAfdHNi6F/LdiWs0WuS2evJbYxUb2LQ3Tpfyxh350
kU00QSKPzcKfH+zSQ0ad3rVz48R+7/+5Md72APLUtQq4B7FReZOOwtAVSew0
fdE8IBaP3GuqVAQfmaF2xu19TkR/7n65xiLh1368Zc5dsJuHhcE9xyTWSxih
VnNHTMhX4t8ZFe8cEvTQ7eUmjfnvDAwP53r8St0StYcPXS+/zcFylX0y3x6b
YVL9kfVSRD+60VZ+0fi6DVYvGwzmPkf0e8sAEXkFNUxZJjC8lcindlmjW/1X
bVFfqs2rpZXoB8w7ulz1iliCa/7OejLRYND7+8KpI7hiQstfWJSJPN7f2Y1M
K7zs8Du7+SwbyReljBW5D6D5SreTtx1ZyPvf3lwdncM4t2xJ0Yrov2vsD18p
njDEx6eU0n8Q89eJ39LLmLfGnRU1L/NsCL8K6ix1GnDAIaseJxVtNjqWP3/8
5rMqip5hnlXI5+A3prqouZIZOk+zJ35v5+DNQ5zz5XymWNwW/CaJl4nmyx4F
6Ik54wF70WQrYl9fO4puqm03RolLI5SROYL/hAMfaRcYYkj+O38nYh5T3X/3
fhdQRgGz7Q0fk9l4rNVxPqHLAD1eCJp/IfriktNd22fHXfFLWf6D9jssdKMO
T2yOkkL/D7Pyxwieq3ya8qz/jht+utp0SO8O8f7Fi8/uHCe+L0Vb+sdbBi5N
cRq5jtmiSYlAph6RZ8rTOywVi91QVkc06OQVDiZ2MFkNbfYoxLEqHitio+39
hPOJxPPT9ufQYwhe5n2dsqHfzwo1edQs6u042LLZz4KS54bD7CcNM0QfKPvz
llz92w3h2CzJlOCN332vJbflH8Tt2leXJxL9xrM5640yww1b5rj3lFszsV9g
3P/dZltkfZM7EEDk6dcOe4Mdr/Xx/YfYzBV/OMh/kNzWXGGHvh6JQg+XM/HZ
79GoZ2mHcG59+opW4nxKT4yvyb20R+UL9+udUpm4dtvgBK3ZAO96kWWSib7k
s66weZOiK+7hkrjIM8TGbn+FZY5z5qgm7PEskchnk4BMevi4Awo+26v7m9jP
D66r7KTPWmCAfFOB/hwbg9+M6jyYcEOtZLMNM2tZuKjwNS3l7CHM+77v+Epl
Dlo8gHQ50MfGRVLuKuL9102XnFQnHLHReR/jC8HTh4UOb451tUEHqfum2wbZ
GHtnS9N9ORs8LkrrlnrGwvOyjT0eLcfQ3PSM++oDHKQtVW40szPGxTdxXepE
nzTw6vu0z9wIZ9THEjo/sVC80Lqx9bIlvr39V55tysSKiW2NmVLEPFX2tAqN
cHB4aPr6DMsBB9/96JYm9Jp14+rjJ3qAjmUa21y6WNgvcfhB1FVX3OuwLs1x
iuBBbYuLXxLtMdr/3vmqRiZeQaO6jXm6KMFdsadShYNj2U5TvyZs8avd0w0K
hzi4LThnx2y5C8Z0z1qoeLPQ2O4FDyvOAw+a5+1Yo8nCkxHcb1Sf26D1ruaH
oYRfV46f6XdU88Qb0mt3/2Kw8efZ3DTLKX1suJCtlkHs84yFq8gvu6P4JsKw
6NU/Nu6++LrripEdLnF+VB8ZJ/pGal/iS0tzpH6/3Xisiujnq5pW/ip1xBsl
J0z/RrHxw0jX1igLA5Q6vz9xVpeD9uMN4/OHPFGx8ZC5WTsTHV/dY+tl2+F3
y9jz9BsMdEj620VxIPyBlJmXRPSnoEfnxsWHbFBhe++tG91sPNq2K+J36DHc
06R1qJPgs+A/nxWWJF1w/EmKWcopoh+d5jqWetMRD1512y0dQOghMTsM5T1x
wdGsp5DoxzteROQE7HXFDQU1U3l88bgvz31PB5cTqvIv/7CjloNdJ8/9Vfpi
j9ksaY7/FRbeVSt036tlgnsKUSyhmo2bTkut1brojuVeu7h7jJhoOTedaDbp
gZ3j+anJWixUlLiwJ0bCCg1nhMtO1LJx1uk4705iHi6y2wruP2ZjXNHHuS2l
Nmi5g/z0szEbNX483DN60obIySM91q8IXnozvjeH3w4nPh9ZmS/LwgfU4PnK
u7bYFQybg3gI/YRcm/jZfwzz+2ydnAl/6BG+03SkzhO/nKP8DbzExPW5/Dyv
ss1wRYFdPZPoo6Xxcyf2+FtgyuL4Xb5PHJS/n7/yUoMtbqyZMprQI55PV3qv
foYdFojZdakT56MXN815suwwkmIkjx856DamGGHy1RlT7yWzbhP5YXxv8dzv
M97oLJu4IdqTg0HVFRPxhz1QtKedbnGOgXtTSP8OgTuedHlV+OEEC09s9Vkr
I2CLa6ZrYhV4WZhwOda6rM0aPQtP8CyuYyFnJN1/laAjfmaTV50k9m3vunLD
Tx+8cdsXEf9AYr/NHKz976MHiuw8mn18NRv/FucrvlRxQmvlyPtVWWxMLSlO
vNfmhKHXVkXuNiD625OMSgMmwXvLZgZ/OrPw662Lhe+XPPAHdn8+RPB7SWzz
8PUlM5yxEtV21mLj/o7slbclLLAUjCRn6Aw0veC+/Z2ODcawfdOHJIn9ZmoV
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
78B3B+4GJsq4/PNZcXc/vLG38Z8tYmAlLcxhk24AeJPrxd9WstFEsdUKG8Lh
TaRoroc7E187qpmd3+wHKb4rEulNbHxxqVmSly8Ubj1dv+mZGgenPoUPN2pF
gHCZNt81eULvC7T6+V1D4frAxB+uKhPzrHOki6cCwOLHlRI5fS6KmPsHqx0M
h2TfaK6fDgs7W84m1VD94WV1/upNv9nYqNXbMj0WBMdctJdmEX4vOCc7pCwT
Bvte3w/bR+S/surlzR7ioRDNXdjRt56Lq61l+UnlkXDR7UvfPhUWrueZe7Yy
LAz+PpDaN+vGwI0/Cl61+QdBsGR2qc1nBv5ovVdwsiASdKZOxVk/ZyB9Jiql
crc/PBy8F5razcGlupbHAi+FwvcDmRkHpJnYHV2hGDQWCkUXK6UiPLk48u25
wdZdYXBE2iF2O5Gn3ymF1Ha5B8HiomVsE8GLDJfVy4wTQmB222dGFsF3F9s8
JyPCw2Fdblso+hJ8JFAYJHrSHwZND1oXH2DhmlI+3Sh6AOS1F09rHGbiL3pR
4d/QSPA8IDfF2M3FM5F5c196A2HXze0FEds4OL6bx8ddIBxO9bgcDCZ4PO3u
o6sy1GBYMc/2WEHw4GHb7utCL4j6lllSaXMcFOkwCjq/NASyITg+b4GDMkde
HPmnFgU3psc8gjZxsFJs546pvgCQNZxz3byZyMeUtLFTnaGQHXWNQyHyJ0s7
8uMf3zDw0tW/svP/35cCwRsmD0PghEa3WstwEjqfdfw8XhcCLzLaOjduZ6GP
jJhmtlMweLyz9qwn5idn1KH+rkAkLPV6/3YjkQf0blP23xyNgLUTdc2vfidh
Ba/+jomaSGhZWu6ZmMNBmM158sowEkYHlk9EhDKxME80Z0IzCAz71mfu/MjG
k6snXdjCUdBNYfNcduWgU/NfsffUcHiXGiL7qI2Nfkf6qF4HwqEpaXL9v1AW
PiuRfjnLCYaxLZcU3s+xsPq2a+XnKkJvWl73fyTy5okL8j2Dq0Ng+a7ZwCEi
Py1fzKrZ6BMCQu3qEi7iXGy+dcf0YlowxHpnRt+aZuN2Gd+cu4fDYfOHZVut
PhJ51/z99aBt0SCh5bRZI4aDIV0DlULE/CR2BOd+XM/BXGWtQzdoYWC7rVDv
0FKC1xUn9Gjp4XAt6sZKt7/Evp57Z58bHwo8au171Gs52IrBipeOhIDecL/x
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
ZqeGofPVeDiuNvwmt4uKcNCZj98jFqyL/9SVibKRrPDYsWVjLGxdXNb3sJiG
V9UuQwIlAV67F4heucjAOqXPPibb42B+IjTw0m0mnsfWdw3mCTBd8eZOXwQL
fUuF61siE2FE9Gh+5rUk/Lwy8eYBzVh48rS2eaQ8CQ8+m4sYPRMP2wwXNkgv
ZWCDsVTvpZR4uPGC9PKyNw0Xiu9tO3SIBIfyvX1TFujYmnhs0SwgESJrKaZe
Z6gofuGS+JnbMbCu1qgsyCMJn/jljqQOxMKPrjqpHr8kLG8fzRSsToCUH4ev
LvjSsEPb12n3YCyIxh4tU6yn4qbZVzHtFxOgsnGVOu8WOn6U/yiYyh8H98ZU
ssOK6dgZ7ckp7oqHhInEhtz7RP/l07xsRBJBNavpsT3h58d2TP5d8zQGbGqz
jIsIfWFZZLoPHSL6efVQGPVuEla6+2+kdJDgZ9byzc1XaBiiEPSmuiIe2mXX
pRln0FBKjN7XeiUW9ilpd4lRkrCnR4P3vHc83Jkp22f6mYq5D/oCKo1JcO3e
kcl6byq2iKubdF0kQXFWTTXO0DEoV02i3pvwz9BfyroKLJQMvjnb8iIGrq5Y
8cD+GA27BDXyvl4mwbye5fyyJjraBXGMT6XHgZaV7+qZvTSUdJKdf92RAF9O
fdF0+EfFBub9gqaXcfDlsPOJOCJf7+zLuS6xIQ7SH4XKqPIw8Bvffv7PZokw
drOhXN4kCa2KBJv4dyfA3hUD9okxTLQ4kPX2hyYJjnx8OZpL1HMy9Gn5nAcZ
Yk+vW6PBoONJ4bPtW0kkqN1SKeX0PQmLVVNEXpiToD7xxvx1Dyqa8h2yChtJ
gD4BS2zxo6E3c8cfzbuxQP9Tui42NQkZ6VN/3SsSga9iWcRXYn7L3vJdr25K
AGHb6dNlCkmoLTGtMvMtDmKKjxV2RdJQfmg07xixr9auZv5CxDy1P9Ut3vYk
EQRyqPXzp5PQ/ZlccuwnEmzoNGwO7GagyYrLgxqH4+H0aJzK2RwqluVGS271
ioW0ozZ9RV+T8OWd2qDOo2TYwDjhwSeRhIH7JteuWU6CiMKQZnGCv241uZ27
Ik6CrQkmh3cS++JfGrf02mMytG/yruU1pmPpZa9/Lz/Eg+nZTyIlXDoe/bhh
TSfx/Cx+vfjXlIGze394KB0gg3KWoLtJCcH/z+eoovHxQFN403qki441b4+r
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
G+va+xSEvvet0v5Ccobt2tuBF1Kglv81Y2INE/ulRcKEqBS8uhhfnGJH8JC7
OeDuWS6ipytUbXvAwLfBE39SV6fAwrL1zMdiJg5qRP+iH0+BzmDv/d1jZG6i
mEvFtZOcaOuhyp5gwuIO48NJRQ7JK6V/Agm/O25IhFoQfbKx39VzjMyxOtFO
lZM+kLmTq93YlMtCr4uiczCFi7jWjVJ7HtPBclzyR2YtF0uV6le9dWNA6pjS
rHsxHPQMf063qqVjzsyLi+jLObhsrVoo8GAienGOVngiwWdhhkl0AgOZKrvW
zCH9+9QoCLWoYsA7bb1gjTsXFWNy6S2LyNzRE5BVLMOF7O3H38Y6SL0DUrRd
FbmoGw+s+nyHAZ+dOZKu+jzoW3RSDXJYcAkwHO0aT0F7xl/PdJJL1AM3JMuH
c5D/WcMoYB0L0R22FW9up+DP0rqwl1dJTvbStxkmOVNbqX1eF7l/QbS433wD
F415/m2H/t/fd4cigwl+dz/esrrNgQ6dJg69czYXTssFFyiEjzvMYh1ywome
O1U+PCTFgIWpyd0t7Rys8Amxf07mxNEFRnJPeriYJm1oRw1lon57kU9eEAc1
9z+H6sQT/jVK3wohuT1U+qnvzdcMKHN39QvUUhDkqBsz6xxZ337UvZr073Wz
oZHmNjrUZvYvaiH3399XdmI7mbOjxpZ1bM8lc+Ik/7IOkmt7d/Um77Tmoix8
JGjxajp2qqUVbH7GAc1Io1NDjomJa8fe+5tysc13ZWejHhNbx87tSiNzPK+o
5YpDKTlf4J3MmfVcMCnd0nN+0aHBCHrUZMDD67C8IL0UBji/V3n8esjD0ZOT
mzp5dMxvLcDZYFJ/yvc5x8jcfkSl5NQnkhN2XbEbmfeRBvcFpw01+SkoVfqQ
ELaPgYkLkr5+h3mQyncJUz1MR8zPPUsLyNww+cjm7pZZTFgb7/E89SQFX4+3
0We3MlB2ij7suYWHkweP/zJtYcLwWp63lzEXW7PLpUQahM+qg8E+z1LwRV1n
VUYdE3FT3aO6eng4YeO3rqKBCfPFD7l7bnGhYDwS/dKeieEn7HkWs1KgpP10
SWQKDYZZ5xqUyZzz4Nvlh4IeBt691V3tOZgC5ccm/terGch5st+2ooULJeGg
Vko7A/fnwyGfTuZUOfV337cxUOKQAiulFCTqvupYmUpHk6urb4EJH8M7Z6i4
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
8mLm1akpz3x2IalYYsVgQCoOrXssK/bajEa7B2dtiT8uyb8oF+7pguzpM04c
I/k+p8K8neG+DWufyB/L7iV54+kMV6XJHoiYhb9VfmIUT+6q+py3BYsWxzmE
k/xj5HD7r9RRaxQX1ueyfVMRKGLStj22QmW1FcPJOxVaFX65OTJ7YTFK3RhJ
/L518M7O+l/msNad/GO9fiqcr+ZWcJ7thVTtLetYN8Iv6m0vvrEZRoqT1s8X
kXy1Y/3uHr4TOjJbxLF/CB/brm1u/LQb5kF99Sv2pMIk4pSV9etdOP/jbJQK
mYf91PyvvwpciaSrDUdPO6ZCMn2Zn7+8M2oKvttejiD1j/w4pXx0MVm/Mi2f
+HnijJg0i0FrHLIIXPLuJ8FT8HaxyvBi3Egu6zyjK8ap+03R2jrrkHS9eIGA
+M3VVwf/MBxscLX/8LpqMm9Oc4wPCn1kA77V2uMOB1JxJEjFv2fFSgwheNTI
NhUran3GxJ7O6P23RORO5k/Ltu7Xs5//2uDg1vKvdDnRm7etn6yeyWLNZAan
7KMIOsk7mqTLLWDx3v6Kl0cqSmTPnnF6ZQTJ7OPuvL9irEhJdVFYuAlX/3ZN
Cid5ZTf9gbe20j4y7417dqqn4ktFTEMCXQV6BxvdJ+aKSV3nNqgz7VFVGDrQ
Wi/CeucCzcVt9jDq6ZxRSfBxtHafWZnFYti/uqQpT/S9VJszMDCwDxVt7n0i
khd8laAW6+6ACONJD/6Q+/6cCJ6nu3MTgh7rfu1pEKGqqM3/afAeRE/SKT7n
IIa+4klGidU0NJ5U/3GJ6IfgvIzb2ZadmCbtfDyIKcaEw5N5y6apNHA13td9
j0lFIgRlL29uxZBCpeaaDyJ83t/olDzVFg+els6aQuqdljpoXf1tHZ7rF/jP
Nk1FUaP8Rjeib/2TVIOSFpB+DtpeVvtijTthyXsclqUidIm7Rd4B44ZytXaX
3ZViVKrKbn5ntqZBifogWIvw5c3zMb2ompENH0cuFrdGpWJ/atYuD+ndkCsw
/SiZK8a7+aoOG48aNBwyfFT1SzkVw1SXB8m+ssg5Glsm6yjGDu0+JbO32ng2
JIpKJ/w/7pVsL9MITPDn9JsbiDH46x094Kwx/rLcojqI3kve5NY/2bUEhitM
aq61i3HlIP/CTYoNhl4P+E0i7xOpvD9dddEWR+oW/LeJ6Mernaeo45qyDdRH
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
p35CmeTl7ME1AZenI3DObqPR4tMCKN9n1h4mEY5LXnpe8KjlgaJNc3W78Um8
Mu98tdES4jcVNI7490jkP2tTqi8XwINVm1z1d4ahsql0YNIBPnBu21qkN51E
rGxQfzxTANztW0aUlp/E6KVZP86Q/a6JaZjHtT+JGpGlWfHqfCiwmw7s/RWG
H0Xr5wddEQD/n/TFc/9FoFWreKRiKx8o1nrDe79EoIKfulj5LT5E0jbetV4Y
jg/Vj0oFgRAklolMvnE6iQmahq1vDpB8tGeqQW014eOChW1nnIh+m6pP2DhE
oVVp8w5P0g+L3PM1vTWjcFnnpxW05zyoWbBSb+2uSFS76+RTXCCAR4OmL8tU
ovCa2O9IzOPB3i7RtTkVUejwo/dkmxnJP7IFcz3LT2K68nrXEjc+fPrTdPPM
pijs9k+1W5FNPj/xKfecRSTqXtzE/5LJA3HfzJst3VEYtvLjSsm/fMh+ulNK
2BGFaeNlMvPWCWHx2a2Tq2sJ+43G3zHJ8w2e/Cuvm3SS5Hl9r9+JPNjxsVDd
pZzoTbV3vA35/tlVMy33xEfhus33g3QIPxpVJh9VH47E16uGwoan+HA4tkoi
61cU1rOzrK+n8uDoy5OBLV3RWLRMyYGXxoc7K4SJW8jzc5tesjIIPtuOdL2N
pUSh25Fbj5c4kn5uvZO6zygaT3SW0E5N8qCOm7RgnVYUfvv752jYLj6kebg7
X3SKwaSNf1v/6yT4+RpasNYuFsXux0VfaRDA39QDM+XmRaKCpP+khQkPQm4O
689hxGDmj5Y1jiSP5oG5QvS2KBxp0j267aAAWnIU3/aHxOCx+BcBafY8uP6h
eb7APxp1vlbs+0H8dtmR6vhbMrH4R2Pn9W3uPHgd6R3WJxWH1kVfDDNlid8t
P+fjeygWI/SOPbrLE8DZyvfyXUmR6KgTSZe1IXq8Pu3717MxKKsXFNxVwIP8
xpkynD+ReLildrkUUwCOzgsNrwoi0WV/9KlXHjw4YUjb9088Cl+MqfTMWE70
RfaGWlhyLG7unG+67SnhY3W5t0VLNHKDWy3UTfjg5FsXw2NHYuznqq6Zi3hQ
sd70xUYmuV8WT9zESQBfs3KkC4RRWPPDQ9G9nviFlFfWAk40qgxt+WRB9Cpc
Ue/oM95J/Hvl48BVLZJ/W+RKf7Mi0S4vsC54Mx+WD00lRZqeRLlL/459mUfw
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
PTaPytFH/wc6LmGN
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.017110523624492533`, 
   0.017114021363806263`}, {-0.017105589591551163`, 0.017090391950011115`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7746388582589874`*^9},
 CellLabel->
  "Out[162]=",ExpressionUUID->"b875d25c-5bd6-480e-8c11-af58553dbab2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram3D", "[", "data", "]"}]], "Input",
 CellChangeTimes->{{3.772988639744824*^9, 3.77298865088166*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"3cb84464-c7da-42cf-91c7-4e0fab22cd12"],

Cell[BoxData[
 Graphics3DBox[
  {RGBColor[0.9045776, 0.6888327999999999, 0.31364080000000005`], EdgeForm[
   RGBColor[0.880722, 0.611041, 0.142051]], 
   StyleBox[{{}, 
     {RGBColor[0.9045776, 0.6888327999999999, 0.31364080000000005`], EdgeForm[
      RGBColor[0.880722, 0.611041, 0.142051]], 
      StyleBox[{{{}, CuboidBox[{-1.1, -0.4, 0.}, {-1., -0.3, 1.}]}, {{}, 
         CuboidBox[{-1.1, -0.3, 0.}, {-1., -0.2, 27.}]}, {{}, 
         CuboidBox[{-1.1, -0.2, 0.}, {-1., -0.1, 26.}]}, {{}, 
         CuboidBox[{-1.1, -0.1, 0.}, {-1., 0., 53.}]}, {{}, 
         CuboidBox[{-1.1, 0., 0.}, {-1., 0.1, 37.}]}, {{}, 
         CuboidBox[{-1.1, 0.1, 0.}, {-1., 0.2, 33.}]}, {{}, 
         CuboidBox[{-1.1, 0.2, 0.}, {-1., 0.3, 18.}]}, {{}, 
         CuboidBox[{-1.1, 0.3, 0.}, {-1., 0.4, 1.}]}, {{}, 
         CuboidBox[{-1., -0.6, 0.}, {-0.9, -0.5, 4.}]}, {{}, 
         CuboidBox[{-1., -0.5, 0.}, {-0.9, -0.4, 47.}]}, {{}, 
         CuboidBox[{-1., -0.4, 0.}, {-0.9, -0.3, 90.}]}, {{}, 
         CuboidBox[{-1., -0.3, 0.}, {-0.9, -0.2, 71.}]}, {{}, 
         CuboidBox[{-1., -0.2, 0.}, {-0.9, -0.1, 57.}]}, {{}, 
         CuboidBox[{-1., -0.1, 0.}, {-0.9, 0., 49.}]}, {{}, 
         CuboidBox[{-1., 0., 0.}, {-0.9, 0.1, 57.}]}, {{}, 
         CuboidBox[{-1., 0.1, 0.}, {-0.9, 0.2, 59.}]}, {{}, 
         CuboidBox[{-1., 0.2, 0.}, {-0.9, 0.3, 92.}]}, {{}, 
         CuboidBox[{-1., 0.3, 0.}, {-0.9, 0.4, 80.}]}, {{}, 
         CuboidBox[{-1., 0.4, 0.}, {-0.9, 0.5, 44.}]}, {{}, 
         CuboidBox[{-1., 0.5, 0.}, {-0.9, 0.6, 5.}]}, {{}, 
         CuboidBox[{-0.9, -0.7, 0.}, {-0.8, -0.6, 20.}]}, {{}, 
         CuboidBox[{-0.9, -0.6, 0.}, {-0.8, -0.5, 92.}]}, {{}, 
         CuboidBox[{-0.9, -0.5, 0.}, {-0.8, -0.4, 58.}]}, {{}, 
         CuboidBox[{-0.9, -0.4, 0.}, {-0.8, -0.3, 20.}]}, {{}, 
         CuboidBox[{-0.9, -0.3, 0.}, {-0.8, -0.2, 1.}]}, {{}, 
         CuboidBox[{-0.9, 0.2, 0.}, {-0.8, 0.3, 1.}]}, {{}, 
         CuboidBox[{-0.9, 0.3, 0.}, {-0.8, 0.4, 15.}]}, {{}, 
         CuboidBox[{-0.9, 0.4, 0.}, {-0.8, 0.5, 56.}]}, {{}, 
         CuboidBox[{-0.9, 0.5, 0.}, {-0.8, 0.6, 88.}]}, {{}, 
         CuboidBox[{-0.9, 0.6, 0.}, {-0.8, 0.7, 27.}]}, {{}, 
         CuboidBox[{-0.8, -0.8, 0.}, {-0.7, -0.7, 35.}]}, {{}, 
         CuboidBox[{-0.8, -0.7, 0.}, {-0.7, -0.6, 89.}]}, {{}, 
         CuboidBox[{-0.8, -0.6, 0.}, {-0.7, -0.5, 23.}]}, {{}, 
         CuboidBox[{-0.8, 0.5, 0.}, {-0.7, 0.6, 20.}]}, {{}, 
         CuboidBox[{-0.8, 0.6, 0.}, {-0.7, 0.7, 94.}]}, {{}, 
         CuboidBox[{-0.8, 0.7, 0.}, {-0.7, 0.8, 31.}]}, {{}, 
         CuboidBox[{-0.7, -0.9, 0.}, {-0.6, -0.8, 20.}]}, {{}, 
         CuboidBox[{-0.7, -0.8, 0.}, {-0.6, -0.7, 83.}]}, {{}, 
         CuboidBox[{-0.7, -0.7, 0.}, {-0.6, -0.6, 18.}]}, {{}, 
         CuboidBox[{-0.7, 0.6, 0.}, {-0.6, 0.7, 13.}]}, {{}, 
         CuboidBox[{-0.7, 0.7, 0.}, {-0.6, 0.8, 89.}]}, {{}, 
         CuboidBox[{-0.7, 0.8, 0.}, {-0.6, 0.9, 27.}]}, {{}, 
         CuboidBox[{-0.6, -1., 0.}, {-0.5, -0.9, 5.}]}, {{}, 
         CuboidBox[{-0.6, -0.9, 0.}, {-0.5, -0.8, 87.}]}, {{}, 
         CuboidBox[{-0.6, -0.8, 0.}, {-0.5, -0.7, 31.}]}, {{}, 
         CuboidBox[{-0.6, -0.3, 0.}, {-0.5, -0.2, 4.}]}, {{}, 
         CuboidBox[{-0.6, -0.2, 0.}, {-0.5, -0.1, 52.}]}, {{}, 
         CuboidBox[{-0.6, -0.1, 0.}, {-0.5, 0., 102.}]}, {{}, 
         CuboidBox[{-0.6, 0., 0.}, {-0.5, 0.1, 92.}]}, {{}, 
         CuboidBox[{-0.6, 0.1, 0.}, {-0.5, 0.2, 64.}]}, {{}, 
         CuboidBox[{-0.6, 0.2, 0.}, {-0.5, 0.3, 7.}]}, {{}, 
         CuboidBox[{-0.6, 0.7, 0.}, {-0.5, 0.8, 20.}]}, {{}, 
         CuboidBox[{-0.6, 0.8, 0.}, {-0.5, 0.9, 83.}]}, {{}, 
         CuboidBox[{-0.6, 0.9, 0.}, {-0.5, 1., 11.}]}, {{}, 
         CuboidBox[{-0.5, -1., 0.}, {-0.4, -0.9, 52.}]}, {{}, 
         CuboidBox[{-0.5, -0.9, 0.}, {-0.4, -0.8, 55.}]}, {{}, 
         CuboidBox[{-0.5, -0.4, 0.}, {-0.4, -0.3, 43.}]}, {{}, 
         CuboidBox[{-0.5, -0.3, 0.}, {-0.4, -0.2, 170.}]}, {{}, 
         CuboidBox[{-0.5, -0.2, 0.}, {-0.4, -0.1, 151.}]}, {{}, 
         CuboidBox[{-0.5, -0.1, 0.}, {-0.4, 0., 92.}]}, {{}, 
         CuboidBox[{-0.5, 0., 0.}, {-0.4, 0.1, 91.}]}, {{}, 
         CuboidBox[{-0.5, 0.1, 0.}, {-0.4, 0.2, 146.}]}, {{}, 
         CuboidBox[{-0.5, 0.2, 0.}, {-0.4, 0.3, 160.}]}, {{}, 
         CuboidBox[{-0.5, 0.3, 0.}, {-0.4, 0.4, 42.}]}, {{}, 
         CuboidBox[{-0.5, 0.8, 0.}, {-0.4, 0.9, 65.}]}, {{}, 
         CuboidBox[{-0.5, 0.9, 0.}, {-0.4, 1., 49.}]}, {{}, 
         CuboidBox[{-0.4, -1., 0.}, {-0.3, -0.9, 83.}]}, {{}, 
         CuboidBox[{-0.4, -0.9, 0.}, {-0.3, -0.8, 11.}]}, {{}, 
         CuboidBox[{-0.4, -0.5, 0.}, {-0.3, -0.4, 48.}]}, {{}, 
         CuboidBox[{-0.4, -0.4, 0.}, {-0.3, -0.3, 168.}]}, {{}, 
         CuboidBox[{-0.4, -0.3, 0.}, {-0.3, -0.2, 51.}]}, {{}, 
         CuboidBox[{-0.4, -0.2, 0.}, {-0.3, -0.1, 1.}]}, {{}, 
         CuboidBox[{-0.4, 0.1, 0.}, {-0.3, 0.2, 1.}]}, {{}, 
         CuboidBox[{-0.4, 0.2, 0.}, {-0.3, 0.3, 42.}]}, {{}, 
         CuboidBox[{-0.4, 0.3, 0.}, {-0.3, 0.4, 196.}]}, {{}, 
         CuboidBox[{-0.4, 0.4, 0.}, {-0.3, 0.5, 37.}]}, {{}, 
         CuboidBox[{-0.4, 0.8, 0.}, {-0.3, 0.9, 10.}]}, {{}, 
         CuboidBox[{-0.4, 0.9, 0.}, {-0.3, 1., 79.}]}, {{}, 
         CuboidBox[{-0.4, 1., 0.}, {-0.3, 1.1, 1.}]}, {{}, 
         CuboidBox[{-0.3, -1.1, 0.}, {-0.2, -1., 17.}]}, {{}, 
         CuboidBox[{-0.3, -1., 0.}, {-0.2, -0.9, 84.}]}, {{}, 
         CuboidBox[{-0.3, -0.9, 0.}, {-0.2, -0.8, 1.}]}, {{}, 
         CuboidBox[{-0.3, -0.6, 0.}, {-0.2, -0.5, 5.}]}, {{}, 
         CuboidBox[{-0.3, -0.5, 0.}, {-0.2, -0.4, 187.}]}, {{}, 
         CuboidBox[{-0.3, -0.4, 0.}, {-0.2, -0.3, 47.}]}, {{}, 
         CuboidBox[{-0.3, 0.3, 0.}, {-0.2, 0.4, 62.}]}, {{}, 
         CuboidBox[{-0.3, 0.4, 0.}, {-0.2, 0.5, 160.}]}, {{}, 
         CuboidBox[{-0.3, 0.5, 0.}, {-0.2, 0.6, 6.}]}, {{}, 
         CuboidBox[{-0.3, 0.9, 0.}, {-0.2, 1., 79.}]}, {{}, 
         CuboidBox[{-0.3, 1., 0.}, {-0.2, 1.1, 22.}]}, {{}, 
         CuboidBox[{-0.2, -1.1, 0.}, {-0.1, -1., 39.}]}, {{}, 
         CuboidBox[{-0.2, -1., 0.}, {-0.1, -0.9, 56.}]}, {{}, 
         CuboidBox[{-0.2, -0.6, 0.}, {-0.1, -0.5, 50.}]}, {{}, 
         CuboidBox[{-0.2, -0.5, 0.}, {-0.1, -0.4, 133.}]}, {{}, 
         CuboidBox[{-0.2, -0.4, 0.}, {-0.1, -0.3, 1.}]}, {{}, 
         CuboidBox[{-0.2, 0.4, 0.}, {-0.1, 0.5, 147.}]}, {{}, 
         CuboidBox[{-0.2, 0.5, 0.}, {-0.1, 0.6, 47.}]}, {{}, 
         CuboidBox[{-0.2, 0.9, 0.}, {-0.1, 1., 55.}]}, {{}, 
         CuboidBox[{-0.2, 1., 0.}, {-0.1, 1.1, 39.}]}, {{}, 
         CuboidBox[{-0.1, -1.1, 0.}, {0., -1., 46.}]}, {{}, 
         CuboidBox[{-0.1, -1., 0.}, {0., -0.9, 49.}]}, {{}, 
         CuboidBox[{-0.1, -0.6, 0.}, {0., -0.5, 91.}]}, {{}, 
         CuboidBox[{-0.1, -0.5, 0.}, {0., -0.4, 103.}]}, {{}, 
         CuboidBox[{-0.1, 0.4, 0.}, {0., 0.5, 111.}]}, {{}, 
         CuboidBox[{-0.1, 0.5, 0.}, {0., 0.6, 95.}]}, {{}, 
         CuboidBox[{-0.1, 0.9, 0.}, {0., 1., 47.}]}, {{}, 
         CuboidBox[{-0.1, 1., 0.}, {0., 1.1, 54.}]}, {{}, 
         CuboidBox[{0., -1.1, 0.}, {0.1, -1., 45.}]}, {{}, 
         CuboidBox[{0., -1., 0.}, {0.1, -0.9, 50.}]}, {{}, 
         CuboidBox[{0., -0.6, 0.}, {0.1, -0.5, 95.}]}, {{}, 
         CuboidBox[{0., -0.5, 0.}, {0.1, -0.4, 98.}]}, {{}, 
         CuboidBox[{0., 0.4, 0.}, {0.1, 0.5, 95.}]}, {{}, 
         CuboidBox[{0., 0.5, 0.}, {0.1, 0.6, 90.}]}, {{}, 
         CuboidBox[{0., 0.9, 0.}, {0.1, 1., 56.}]}, {{}, 
         CuboidBox[{0., 1., 0.}, {0.1, 1.1, 39.}]}, {{}, 
         CuboidBox[{0.1, -1.1, 0.}, {0.2, -1., 38.}]}, {{}, 
         CuboidBox[{0.1, -1., 0.}, {0.2, -0.9, 65.}]}, {{}, 
         CuboidBox[{0.1, -0.6, 0.}, {0.2, -0.5, 52.}]}, {{}, 
         CuboidBox[{0.1, -0.5, 0.}, {0.2, -0.4, 157.}]}, {{}, 
         CuboidBox[{0.1, 0.4, 0.}, {0.2, 0.5, 162.}]}, {{}, 
         CuboidBox[{0.1, 0.5, 0.}, {0.2, 0.6, 47.}]}, {{}, 
         CuboidBox[{0.1, 0.9, 0.}, {0.2, 1., 54.}]}, {{}, 
         CuboidBox[{0.1, 1., 0.}, {0.2, 1.1, 41.}]}, {{}, 
         CuboidBox[{0.2, -1.1, 0.}, {0.3, -1., 12.}]}, {{}, 
         CuboidBox[{0.2, -1., 0.}, {0.3, -0.9, 88.}]}, {{}, 
         CuboidBox[{0.2, -0.6, 0.}, {0.3, -0.5, 4.}]}, {{}, 
         CuboidBox[{0.2, -0.5, 0.}, {0.3, -0.4, 154.}]}, {{}, 
         CuboidBox[{0.2, -0.4, 0.}, {0.3, -0.3, 54.}]}, {{}, 
         CuboidBox[{0.2, 0.3, 0.}, {0.3, 0.4, 53.}]}, {{}, 
         CuboidBox[{0.2, 0.4, 0.}, {0.3, 0.5, 167.}]}, {{}, 
         CuboidBox[{0.2, 0.5, 0.}, {0.3, 0.6, 3.}]}, {{}, 
         CuboidBox[{0.2, 0.8, 0.}, {0.3, 0.9, 1.}]}, {{}, 
         CuboidBox[{0.2, 0.9, 0.}, {0.3, 1., 76.}]}, {{}, 
         CuboidBox[{0.2, 1., 0.}, {0.3, 1.1, 19.}]}, {{}, 
         CuboidBox[{0.3, -1., 0.}, {0.4, -0.9, 85.}]}, {{}, 
         CuboidBox[{0.3, -0.9, 0.}, {0.4, -0.8, 19.}]}, {{}, 
         CuboidBox[{0.3, -0.5, 0.}, {0.4, -0.4, 44.}]}, {{}, 
         CuboidBox[{0.3, -0.4, 0.}, {0.4, -0.3, 189.}]}, {{}, 
         CuboidBox[{0.3, -0.3, 0.}, {0.4, -0.2, 47.}]}, {{}, 
         CuboidBox[{0.3, 0.2, 0.}, {0.4, 0.3, 58.}]}, {{}, 
         CuboidBox[{0.3, 0.3, 0.}, {0.4, 0.4, 167.}]}, {{}, 
         CuboidBox[{0.3, 0.4, 0.}, {0.4, 0.5, 40.}]}, {{}, 
         CuboidBox[{0.3, 0.8, 0.}, {0.4, 0.9, 23.}]}, {{}, 
         CuboidBox[{0.3, 0.9, 0.}, {0.4, 1., 83.}]}, {{}, 
         CuboidBox[{0.3, 1., 0.}, {0.4, 1.1, 3.}]}, {{}, 
         CuboidBox[{0.4, -1., 0.}, {0.5, -0.9, 43.}]}, {{}, 
         CuboidBox[{0.4, -0.9, 0.}, {0.5, -0.8, 55.}]}, {{}, 
         CuboidBox[{0.4, -0.4, 0.}, {0.5, -0.3, 45.}]}, {{}, 
         CuboidBox[{0.4, -0.3, 0.}, {0.5, -0.2, 169.}]}, {{}, 
         CuboidBox[{0.4, -0.2, 0.}, {0.5, -0.1, 153.}]}, {{}, 
         CuboidBox[{0.4, -0.1, 0.}, {0.5, 0., 100.}]}, {{}, 
         CuboidBox[{0.4, 0., 0.}, {0.5, 0.1, 113.}]}, {{}, 
         CuboidBox[{0.4, 0.1, 0.}, {0.5, 0.2, 152.}]}, {{}, 
         CuboidBox[{0.4, 0.2, 0.}, {0.5, 0.3, 157.}]}, {{}, 
         CuboidBox[{0.4, 0.3, 0.}, {0.5, 0.4, 52.}]}, {{}, 
         CuboidBox[{0.4, 0.8, 0.}, {0.5, 0.9, 56.}]}, {{}, 
         CuboidBox[{0.4, 0.9, 0.}, {0.5, 1., 45.}]}, {{}, 
         CuboidBox[{0.5, -1., 0.}, {0.6, -0.9, 4.}]}, {{}, 
         CuboidBox[{0.5, -0.9, 0.}, {0.6, -0.8, 87.}]}, {{}, 
         CuboidBox[{0.5, -0.8, 0.}, {0.6, -0.7, 25.}]}, {{}, 
         CuboidBox[{0.5, -0.3, 0.}, {0.6, -0.2, 5.}]}, {{}, 
         CuboidBox[{0.5, -0.2, 0.}, {0.6, -0.1, 46.}]}, {{}, 
         CuboidBox[{0.5, -0.1, 0.}, {0.6, 0., 99.}]}, {{}, 
         CuboidBox[{0.5, 0., 0.}, {0.6, 0.1, 83.}]}, {{}, 
         CuboidBox[{0.5, 0.1, 0.}, {0.6, 0.2, 45.}]}, {{}, 
         CuboidBox[{0.5, 0.7, 0.}, {0.6, 0.8, 24.}]}, {{}, 
         CuboidBox[{0.5, 0.8, 0.}, {0.6, 0.9, 75.}]}, {{}, 
         CuboidBox[{0.5, 0.9, 0.}, {0.6, 1., 12.}]}, {{}, 
         CuboidBox[{0.6, -0.9, 0.}, {0.7, -0.8, 29.}]}, {{}, 
         CuboidBox[{0.6, -0.8, 0.}, {0.7, -0.7, 95.}]}, {{}, 
         CuboidBox[{0.6, -0.7, 0.}, {0.7, -0.6, 11.}]}, {{}, 
         CuboidBox[{0.6, 0.6, 0.}, {0.7, 0.7, 18.}]}, {{}, 
         CuboidBox[{0.6, 0.7, 0.}, {0.7, 0.8, 85.}]}, {{}, 
         CuboidBox[{0.6, 0.8, 0.}, {0.7, 0.9, 28.}]}, {{}, 
         CuboidBox[{0.7, -0.8, 0.}, {0.8, -0.7, 31.}]}, {{}, 
         CuboidBox[{0.7, -0.7, 0.}, {0.8, -0.6, 80.}]}, {{}, 
         CuboidBox[{0.7, -0.6, 0.}, {0.8, -0.5, 28.}]}, {{}, 
         CuboidBox[{0.7, -0.5, 0.}, {0.8, -0.4, 1.}]}, {{}, 
         CuboidBox[{0.7, 0.5, 0.}, {0.8, 0.6, 26.}]}, {{}, 
         CuboidBox[{0.7, 0.6, 0.}, {0.8, 0.7, 90.}]}, {{}, 
         CuboidBox[{0.7, 0.7, 0.}, {0.8, 0.8, 30.}]}, {{}, 
         CuboidBox[{0.8, -0.7, 0.}, {0.9, -0.6, 26.}]}, {{}, 
         CuboidBox[{0.8, -0.6, 0.}, {0.9, -0.5, 86.}]}, {{}, 
         CuboidBox[{0.8, -0.5, 0.}, {0.9, -0.4, 59.}]}, {{}, 
         CuboidBox[{0.8, -0.4, 0.}, {0.9, -0.3, 21.}]}, {{}, 
         CuboidBox[{0.8, 0.3, 0.}, {0.9, 0.4, 21.}]}, {{}, 
         CuboidBox[{0.8, 0.4, 0.}, {0.9, 0.5, 59.}]}, {{}, 
         CuboidBox[{0.8, 0.5, 0.}, {0.9, 0.6, 82.}]}, {{}, 
         CuboidBox[{0.8, 0.6, 0.}, {0.9, 0.7, 26.}]}, {{}, 
         CuboidBox[{0.9, -0.6, 0.}, {1., -0.5, 4.}]}, {{}, 
         CuboidBox[{0.9, -0.5, 0.}, {1., -0.4, 47.}]}, {{}, 
         CuboidBox[{0.9, -0.4, 0.}, {1., -0.3, 78.}]}, {{}, 
         CuboidBox[{0.9, -0.3, 0.}, {1., -0.2, 73.}]}, {{}, 
         CuboidBox[{0.9, -0.2, 0.}, {1., -0.1, 59.}]}, {{}, 
         CuboidBox[{0.9, -0.1, 0.}, {1., 0., 55.}]}, {{}, 
         CuboidBox[{0.9, 0., 0.}, {1., 0.1, 55.}]}, {{}, 
         CuboidBox[{0.9, 0.1, 0.}, {1., 0.2, 46.}]}, {{}, 
         CuboidBox[{0.9, 0.2, 0.}, {1., 0.3, 75.}]}, {{}, 
         CuboidBox[{0.9, 0.3, 0.}, {1., 0.4, 85.}]}, {{}, 
         CuboidBox[{0.9, 0.4, 0.}, {1., 0.5, 44.}]}, {{}, 
         CuboidBox[{0.9, 0.5, 0.}, {1., 0.6, 6.}]}, {{}, 
         CuboidBox[{1., -0.4, 0.}, {1.1, -0.3, 2.}]}, {{}, 
         CuboidBox[{1., -0.3, 0.}, {1.1, -0.2, 23.}]}, {{}, 
         CuboidBox[{1., -0.2, 0.}, {1.1, -0.1, 37.}]}, {{}, 
         CuboidBox[{1., -0.1, 0.}, {1.1, 0., 41.}]}, {{}, 
         CuboidBox[{1., 0., 0.}, {1.1, 0.1, 40.}]}, {{}, 
         CuboidBox[{1., 0.1, 0.}, {1.1, 0.2, 47.}]}, {{}, 
         CuboidBox[{1., 0.2, 0.}, {1.1, 0.3, 26.}]}, {{}, 
         CuboidBox[{1., 0.3, 0.}, {1.1, 0.4, 1.}]}},
       FontColor->GrayLevel[0.4]]}, {}, {}},
    FontColor->GrayLevel[0.4]]},
  Axes->{True, True, True},
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  FaceGridsStyle->Automatic,
  ImageSize->{358.28480367772715`, 301.920249495319},
  ImageSizeRaw->Automatic,
  Lighting->"Neutral",
  Method->{"RotationControl" -> "Globe"},
  PlotRange->{{-1.1, 1.1}, {-1.1, 1.1}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.1]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.1706480365944285`, -2.0915134311076713`, 2.388546575202974},
  ViewVertical->{-0.3447610100101566, 0.6159599302418747, 
   0.7083312857083199}]], "Output",
 CellChangeTimes->{{3.772988654538336*^9, 3.7729886572446694`*^9}, 
   3.7729892903857527`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"5b378da3-eb1a-42b3-a538-f35cac83f774"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "data", "]"}]], "Input",
 CellChangeTimes->{{3.7729825425553637`*^9, 3.772982545053692*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"b4c092e4-5296-4805-834f-8819e9d0bbc2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"12000", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7729825454526157`*^9, 3.7729832651637306`*^9, 3.7729833367072268`*^9, 
   3.772983502398962*^9, 3.772988462188224*^9, {3.7729885575001307`*^9, 
   3.7729885754953127`*^9}, 3.7729892940032606`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"ff1f28d8-a7af-4451-95f4-db37482f95b7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["LearnDistribution with Real-NVP", "Subsection",
 CellChangeTimes->{{3.7728146985497675`*^9, 
  3.772814704989588*^9}},ExpressionUUID->"02859dcc-83f7-468f-bc02-\
b8061d7359b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "=", 
  RowBox[{"LearnDistribution", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<RealNVP\>\"", ",", 
       RowBox[{"\"\<NetworkDepth\>\"", "\[Rule]", "8"}], ",", 
       RowBox[{"\"\<CouplingLayersNumber\>\"", "\[Rule]", "4"}], ",", 
       RowBox[{"\"\<ActivationFunction\>\"", "\[Rule]", "Ramp"}], ",", 
       RowBox[{"MaxTrainingRounds", "\[Rule]", "500"}]}], "}"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<DirectTraining\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771691097157357*^9, 3.771691123858289*^9}, {
   3.7716912095220165`*^9, 3.77169125720986*^9}, {3.771691320777122*^9, 
   3.7716914169006786`*^9}, 3.771691455862616*^9, {3.7716922287764378`*^9, 
   3.7716922595552025`*^9}, {3.771777439680786*^9, 3.7717774400101624`*^9}, {
   3.7717774947073097`*^9, 3.771777494806123*^9}, {3.7728145851497684`*^9, 
   3.772814611795025*^9}, {3.772814823737076*^9, 3.772814946525828*^9}, {
   3.7728151127753277`*^9, 3.7728151203361464`*^9}, {3.772815336977915*^9, 
   3.772815340512494*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"c31d5cb8-3edc-4b5b-8d0a-7575a5198536"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LearnedDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.250632626872198}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.250632626872198}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["10000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LearnedDistribution[
   Association[
   "ExampleNumber" -> 10000, "Preprocessor" -> 
    MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association[
        "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]], 
       "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
       "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
       "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Standardize", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Mean" -> {4.547473508864641*^-16, -1.5916157281026244`*^-16}, 
       "StandardDeviation" -> {0.9999499987499367, 0.999949998749937}, 
       "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Version" -> {12., 0}, "ID" -> 7612164254450540647]], 
    "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> Automatic, 
    "Model" -> Association["Sampler" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "checker_b" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "checker_w" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "coupling_4net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.47400811314582825`, -0.8142053484916687}, \
{-0.9381108283996582, -0.9096481204032898}, {-1.2824023962020874`, 
                    0.06401971727609634}, {-0.07836522907018661, 
                    0.48831385374069214`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.10472651571035385`, -0.899893045425415, \
-0.8831688165664673, 0.841711699962616}, {
                    0.639081597328186, -1.0726513862609863`, 
                    0.016854742541909218`, 0.6379846930503845}, {
                    0.29376646876335144`, -1.0531771183013916`, \
-0.7469577193260193, -0.6804822683334351}, {-0.3903186321258545, 
                    0.41556766629219055`, -0.44766518473625183`, 
                    0.5781077742576599}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.1779835969209671, -0.7659265995025635, \
-0.6955357789993286, -0.46534663438796997`}, {
                    0.40920573472976685`, -0.5140355825424194, \
-1.0458946228027344`, 1.022903561592102}, {
                    0.6857390999794006, -0.1890314221382141, \
-0.9970906972885132, 1.1968910694122314`}, {
                    1.0493556261062622`, -0.5241221189498901, 
                    0.996066153049469, 0.6140029430389404}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.09778854995965958, -0.08884620666503906, \
-0.981550395488739, 0.14494751393795013`}, {-1.1741719245910645`, 
                    0.5936166644096375, -0.8853036165237427, 
                    1.1288560628890991`}, {1.0192004442214966`, 
                    0.45757684111595154`, 
                    0.4314703643321991, -0.4057874381542206}, {
                    0.34138989448547363`, -1.2073633670806885`, 
                    0.6353721618652344, -1.1829006671905518`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7903922200202942, 
                    1.0306997299194336`, -1.094161868095398, \
-0.23096758127212524`}, {0.5526812076568604, 0.24305129051208496`, 
                    0.5017563104629517, 
                    0.14767198264598846`}, {-0.6947301626205444, 
                    1.087038278579712, -0.9804190397262573, 
                    0.5635855197906494}, {
                    0.838047981262207, -0.9405266642570496, \
-0.47020044922828674`, 0.298164427280426}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.3400888741016388, -0.1795671135187149, 
                    0.29517868161201477`, -1.0533629655838013`}, {
                    0.5913594365119934, -0.9476831555366516, 
                    0.1860104650259018, 
                    0.02964492328464985}, {-0.28369805216789246`, 
                    0.2887578308582306, 0.6344670057296753, 
                    0.21172834932804108`}, {0.7833213806152344, 
                    0.15075556933879852`, 0.19456005096435547`, 
                    0.9793469309806824}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.5568111538887024, -0.2508641481399536, \
-0.8237136602401733, -0.2236444056034088}, {-1.0766154527664185`, \
-0.14689864218235016`, -1.129744529724121, 
                    0.4696337580680847}, {-0.082916259765625, 
                    0.3892093598842621, -0.8197648525238037, \
-0.99456787109375}, {0.9241390824317932, -0.8137200474739075, 
                    0.5294305682182312, -0.8215039968490601}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5217711329460144, 
                    0.7797710299491882, -0.41279080510139465`, 
                    0.5107153058052063}, {-0.22225850820541382`, 
                    0.27820247411727905`, -0.8235942125320435, 
                    0.6491014361381531}, {-0.2466532438993454, \
-0.6058765053749084, -0.5460322499275208, -0.7440249919891357}, \
{-0.7497199773788452, 0.5091549158096313, -0.8626350164413452, 
                    0.23669159412384033`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.008660465478897095, 0., 
                    0.020563967525959015`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0004466772079468`, 1., 
                    1.0005074739456177`}], "Biases" -> 
                    RawArray["Real32",{0., 0.9064932465553284, 
                    0., -0.1170889362692833}], "MovingMean" -> 
                    RawArray["Real32",{0., -0.008652647025883198, 0., 
                    0.020534871146082878`}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6304361820220947, -1.0520421266555786`}, \
{-1.2773617506027222`, -0.5163175463676453}, {1.0575640201568604`, 
                    0.4758467674255371}, {-0.2984674572944641, \
-0.5416990518569946}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.02016102522611618, -0.020137911662459373`, 
                    0.009103432297706604, -0.020071636885404587`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.05553991347551346, 
                    0.4838116466999054, 0.6280455589294434, 
                    0.9579535126686096}, {
                    0.4094116985797882, -0.7297202944755554, \
-0.5407580137252808, 1.0920393466949463`}, {0.3416574001312256, 
                    0.8166967630386353, 0.027458971366286278`, 
                    0.5231937766075134}, {-1.0214983224868774`, 
                    1.1557561159133911`, -0.73240065574646, \
-0.3085293173789978}}], "Biases" -> 
                    RawArray["Real32",{-0.005659567657858133, 
                    0.018651708960533142`, -0.027242522686719894`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7295066118240356, -0.9585456252098083, 
                    0.4683768153190613, 0.013072196394205093`}, {
                    0.7268832325935364, 1.0297549962997437`, 
                    0.13010364770889282`, 0.8511728644371033}, {
                    0.5311985015869141, -0.7490038275718689, 
                    1.1106948852539062`, -0.783568799495697}, \
{-0.11016649007797241`, -0.7793685793876648, 0.7892118692398071, 
                    0.6283679008483887}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.02789856493473053, -0.0267933439463377, \
-0.020013725385069847`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8662037253379822, -0.7305806279182434, 
                    0.5959702134132385, 
                    0.15533588826656342`}, {-0.16451825201511383`, \
-0.9961524605751038, -1.136181116104126, 0.4645577669143677}, {
                    0.3575422465801239, -0.3326648473739624, \
-1.0992751121520996`, 0.055531591176986694`}, {1.0984028577804565`, 
                    0.4548112154006958, 0.666391134262085, 
                    1.1845535039901733`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.028072068467736244`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8098240494728088, 
                    1.155951976776123, -0.6447374224662781, 
                    0.45518845319747925`}, {-0.6766847372055054, \
-0.47551292181015015`, -0.3867071270942688, 1.1213455200195312`}, {
                    0.9464103579521179, -1.1102110147476196`, 
                    0.7772281169891357, 
                    0.23293203115463257`}, {-1.182234764099121, \
-0.47915083169937134`, -1.1138650178909302`, -0.3971502184867859}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0002449585881549865, -0.004986758343875408, \
-0.03427859768271446, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.1852563619613647`, 
                    0.7036933302879333, 0.8977159857749939, 
                    0.928520679473877}, {-0.9681017994880676, 
                    0.7755762934684753, 
                    0.1256440281867981, -0.6624584197998047}, {
                    0.6240013241767883, -0.14710289239883423`, 
                    0.5384515523910522, 0.6343113780021667}, {
                    0.6885873675346375, 0.07010910660028458, 
                    0.09267108887434006, 0.12848487496376038`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0070115430280566216`, \
-0.015095503069460392`, -0.009009095840156078, 0.003930181264877319}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6698826551437378, -0.29908081889152527`, \
-0.2068452537059784, -0.30872347950935364`}, {0.6599966287612915, 
                    0.04333231970667839, -1.0408837795257568`, \
-0.306166410446167}, {-0.9370322823524475, -0.3536984920501709, \
-0.6001484394073486, 0.02215658314526081}, {-0.1800127923488617, 
                    0.8332293033599854, -1.1162543296813965`, \
-0.6609154343605042}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.008087989874184132, -0.011284451000392437`, \
-0.02397492341697216}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.5182785987854004, 
                    0.6566182374954224, 0.5928246974945068, 
                    0.12140579521656036`}, {
                    0.1699356734752655, -0.27175694704055786`, 
                    0.7886574864387512, 0.6768583655357361}, {
                    0.5189081430435181, 
                    0.2447454184293747, -0.5930821299552917, \
-0.08741005510091782}, {0.0417998731136322, -0.3245701491832733, 
                    0.5038024187088013, -0.023459866642951965`}}], "Biases" -> 
                    RawArray["Real32",{-0.008279794827103615, 
                    0., -0.01587769389152527, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.9806042313575745, 1., 
                    0.9761574268341064, 1.}], "Biases" -> 
                    RawArray["Real32",{0.5513590574264526, 0., 
                    0.12312658131122589`, 0.}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.008144805207848549, -5.605193857299268*^-45, \
-0.015940163284540176`, -5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.007866621017456, -1.1302850246429443`}, \
{-1.1292991638183594`, 
                    0.32867714762687683`}, {-0.9661316275596619, \
-1.2228132486343384`}, {-0.35992372035980225`, 1.0590423345565796`}}], 
                    "Biases" -> 
                    RawArray[
                    "Real32",{-0.19781887531280518`, -0.052421003580093384`, \
-0.26478883624076843`, 0.10271609574556351`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.04167582467198372, -0.039781633764505386`, \
-0.026082627475261688`, 1.3676934242248535`}, {
                    0.8291130661964417, -1.4437823295593262`, \
-0.5611294507980347, -0.9822043776512146}, {-0.3967604637145996, \
-0.753619909286499, 0.362751841545105, 
                    0.14525388181209564`}, {-0.9395437836647034, \
-0.5477266907691956, -1.133709192276001, 0.847710371017456}}], "Biases" -> 
                    RawArray["Real32",{0.07890690863132477, 
                    0.3761350214481354, 
                    0.3376272916793823, -0.1185382828116417}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6026408672332764, 
                    0.3285408020019531, -0.41105180978775024`, 
                    0.8543686866760254}, {-0.11997757107019424`, 
                    0.8851994872093201, 
                    0.6833640336990356, -0.3456652760505676}, \
{-0.39565959572792053`, -0.3138121962547302, -0.6649273037910461, 
                    0.35737353563308716`}, {-0.4911477863788605, \
-1.1042778491973877`, -0.36274898052215576`, -0.11533467471599579`}}], 
                    "Biases" -> 
                    RawArray["Real32",{0.020833812654018402`, 
                    0.20892350375652313`, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.9802055358886719, 
                    0.44653260707855225`, -1.1153992414474487`, \
-0.5422317981719971}, {1.0233982801437378`, -0.0626722201704979, 
                    1.0991966724395752`, -1.063027024269104}, \
{-0.6796855330467224, 
                    0.23226308822631836`, -0.3158417344093323, \
-0.5147196054458618}, {-0.8717750310897827, -0.3191491961479187, 
                    0.4369300305843353, -0.6443153619766235}}], "Biases" -> 
                    RawArray["Real32",{
                    0.16314755380153656`, -0.009577592834830284, 
                    0.18332423269748688`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.18324266374111176`, -0.5023815035820007, \
-0.7085782289505005, 
                    0.20978394150733948`}, {-0.8939442038536072, \
-0.6249310970306396, -0.21290069818496704`, 
                    0.979325532913208}, {-0.5504775643348694, \
-0.05832118168473244, -0.11689189821481705`, 0.053812094032764435`}, {
                    1.0853383541107178`, 0.0061812330968678, 
                    0.5580741763114929, -0.3068590462207794}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.05754492059350014}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.36064276099205017`, 
                    0.6194612383842468, -0.27823686599731445`, \
-8.196585440600757*^-6}, {0.4804772138595581, -0.165147066116333, 
                    0.9228812456130981, 
                    0.7461766004562378}, {-0.3477061092853546, \
-0.09727273136377335, 
                    0.4745616912841797, -1.1461161375045776`}, \
{-0.9887083172798157, 0.6576195955276489, -0.8700469732284546, 
                    1.0412739515304565`}}], "Biases" -> 
                    RawArray["Real32",{0.07557635009288788, 
                    0.018580619245767593`, 0., -0.030154014006257057`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{9.325220162281767*^-6, 
                    0.8228119611740112, -0.4993772506713867, \
-0.21248407661914825`}, {0.07443057745695114, -0.26470720767974854`, 
                    0.2867298722267151, -0.2581230103969574}, {
                    6.920875421201345*^-6, 
                    0.09026002883911133, -0.5431668758392334, 
                    0.31951263546943665`}, {-0.8487663269042969, \
-0.5759012699127197, 0.33831918239593506`, 0.3584586977958679}}], "Biases" -> 
                    RawArray["Real32",{-0.05139141529798508, 
                    0., -0.0088221849873662, 0.004635503049939871}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8246548771858215, -0.2259514480829239, 
                    0.3128778040409088, 0.3548484742641449}, {
                    0.03844049572944641, -0.7165543437004089, \
-0.6533167362213135, 0.02939617820084095}, {
                    0.8554775714874268, -0.7347059845924377, \
-0.7679096460342407, -0.06620988994836807}, {1.0089783668518066`, 
                    0.7805302143096924, 
                    0.42812126874923706`, -0.013497886247932911`}}], "Biases" -> 
                    RawArray["Real32",{0., 0.015746716409921646`, 
                    0., -0.005764590576291084}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.35106638073921204`, 1., 
                    2.100911855697632}], "Biases" -> 
                    RawArray["Real32",{0., -0.12786923348903656`, 0., 
                    0.05423612520098686}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.10744404792785645`, -0.13281498849391937`, 
                    0.005403124261647463, 0.32040634751319885`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0011073986534029245`, 
                    0.0017343112267553806`, 0.000022023315978003666`, 
                    0.009115437045693398}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.4652402400970459, 
                    0.49676209688186646`}, {0.1175260916352272, 
                    1.2375682592391968`}, {-0.8456810712814331, \
-0.6227266788482666}, {-1.4109878540039062`, 0.37913620471954346`}}], 
                    "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9029104709625244, -0.7850021123886108, \
-0.45101794600486755`, 
                    0.5204910039901733}, {-0.18260669708251953`, \
-1.0518146753311157`, -0.006921728607267141, -0.26572009921073914`}, \
{-1.0894790887832642`, -1.0242424011230469`, -0.9082985520362854, 
                    1.1481907367706299`}, {-1.1608684062957764`, \
-0.9526859521865845, -0.5282173156738281, 0.20659083127975464`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6848381757736206, 
                    0.6082578301429749, 
                    0.7840158939361572, -0.5883799195289612}, \
{-0.9217560887336731, 
                    0.40544581413269043`, -0.33492571115493774`, \
-0.3102727234363556}, {-0.5688890814781189, 
                    1.046210527420044, -0.9115222096443176, \
-0.5828470587730408}, {-0.05852051451802254, 0.9531077146530151, 
                    0.32824960350990295`, 0.16221819818019867`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9153900742530823, 
                    0.6633276343345642, -0.6811608672142029, 
                    0.19160978496074677`}, {-0.5331753492355347, \
-0.15094305574893951`, 
                    0.5140804052352905, -0.9406359195709229}, \
{-0.16569238901138306`, 0.47429540753364563`, -1.0168081521987915`, 
                    0.1246163472533226}, {-0.8730981349945068, \
-0.8632358312606812, 0.33973273634910583`, -0.3848488926887512}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6421592831611633, 
                    0.7852470874786377, 
                    0.9743026494979858, -0.5576608777046204}, {
                    1.029341697692871, -0.7168751955032349, \
-0.06433585286140442, 0.08959601074457169}, {0.27530547976493835`, 
                    0.5117119550704956, 
                    0.7906123995780945, -0.4385753571987152}, {
                    0.7723061442375183, -0.06683015823364258, \
-0.8859438896179199, -1.218153953552246}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    1.203736662864685, -0.25375401973724365`, 
                    0.7500302195549011, -0.22818173468112946`}, \
{-1.0999925136566162`, 0.9465587139129639, 0.3289337754249573, 
                    0.8465142846107483}, {
                    0.028109243139624596`, -0.03129323944449425, 
                    1.1834310293197632`, -0.44804665446281433`}, \
{-0.037871867418289185`, 0.010917437262833118`, -0.8484542369842529, 
                    0.20530910789966583`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.9259331226348877, 
                    0.37142977118492126`, 0.1256236582994461, 
                    0.04828003793954849}, {
                    0.9989590048789978, -0.2154754400253296, \
-0.016423378139734268`, 0.9485648274421692}, {1.040073037147522, 
                    0.12642869353294373`, -0.3693975806236267, \
-1.1077848672866821`}, {-0.5319598317146301, -0.4387214481830597, \
-0.534461259841919, -0.4620550572872162}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.0833996906876564, -0.46460387110710144`, \
-0.1812361478805542, 0.679459273815155}, {-0.8004432320594788, 
                    0.10009783506393433`, 
                    0.24950337409973145`, -0.41158491373062134`}, \
{-0.47476792335510254`, -0.3978653848171234, -0.15602312982082367`, 
                    0.8161223530769348}, {0.02307536080479622, 
                    0.14550918340682983`, 0.8530614376068115, 
                    0.5101252198219299}}], "Biases" -> 
                    RawArray["Real32",{0.011915917508304119`, 0., 
                    0.034721240401268005`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.000890851020813, 1., 
                    1.0057798624038696`, 1.}], "Biases" -> 
                    RawArray["Real32",{0.2999424636363983, 0., 
                    0.3054947257041931, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.01201102789491415, 0., 
                    0.0346289798617363, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    1.0418953895568848`, -0.513334333896637}, {
                    0.1687389612197876, -0.3302590548992157}, {
                    0.495919793844223, 
                    0.8434527516365051}, {-0.5314626693725586, 
                    1.3900585174560547`}}], "Biases" -> 
                    RawArray["Real32",{0.3659566044807434, 
                    0.13351543247699738`, 0.10686391592025757`, 
                    0.15509799122810364`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.3263261318206787`, -0.27763131260871887`, 
                    0.3791273236274719, 
                    0.2657627761363983}, {-1.4778060913085938`, 
                    0.8390009999275208, -0.9616281986236572, \
-0.025680365040898323`}, {
                    0.6034183502197266, -0.43304872512817383`, \
-0.3603288531303406, 
                    0.9616199731826782}, {-0.49781331419944763`, \
-0.529888391494751, -0.09996475279331207, -0.051624953746795654`}}], "Biases" -> 
                    RawArray["Real32",{0.08929497003555298, 
                    0.05597096309065819, -0.15732471644878387`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5539706945419312, 
                    0.7471994757652283, 0.46178996562957764`, 
                    0.25351831316947937`}, {-0.4265191853046417, \
-0.7486802339553833, -0.7460475564002991, -0.6947806477546692}, {
                    0.9243960976600647, 
                    1.1926639080047607`, -0.17698706686496735`, \
-0.6852891445159912}, {0.09440665692090988, 0.27125465869903564`, 
                    0.869486391544342, -1.0169434547424316`}}], "Biases" -> 
                    RawArray["Real32",{0.2866675853729248, 0., 
                    0.04700961336493492, -0.1856992095708847}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.8231660723686218, -0.8155822157859802, \
-1.1855549812316895`, 
                    0.29907849431037903`}, {-0.4099087715148926, \
-0.6159327626228333, 
                    0.3841255307197571, -0.5931782722473145}, \
{-0.24869844317436218`, -0.5106825232505798, -0.07572083175182343, 
                    0.9675281047821045}, {
                    0.14630478620529175`, -0.14799608290195465`, \
-1.059540867805481, -1.1832749843597412`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.18658752739429474`, -0.023231053724884987`, \
-0.24010439217090607`, -0.05971395596861839}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.23073528707027435`, -0.4012846350669861, \
-0.2839476466178894, -1.0680859088897705`}, {-0.3161003589630127, \
-0.20132650434970856`, -1.0062566995620728`, 0.19635431468486786`}, {
                    0.46060413122177124`, 
                    0.20692935585975647`, -0.08522094786167145, 
                    1.1850789785385132`}, {0.0030966363847255707`, 
                    0.2825815677642822, -1.091651439666748, 
                    1.1223691701889038`}}], "Biases" -> 
                    RawArray["Real32",{0.09239514917135239, 
                    0., -0.013500048778951168`, 0.2942027449607849}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.1700756549835205`, 
                    0.13764449954032898`, 0.6639665365219116, 
                    0.5552995204925537}, {-0.4826156497001648, \
-0.8768376708030701, -1.0968669652938843`, -0.4557706117630005}, {
                    0.516022801399231, -1.1965264081954956`, 
                    0.3426477015018463, -1.1791882514953613`}, \
{-0.18313869833946228`, 1.1725883483886719`, 
                    0.6765085458755493, -0.4567888677120209}}], "Biases" -> 
                    RawArray["Real32",{0.0691957175731659, 
                    0., -0.052879009395837784`, -0.14714697003364563`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.3545922040939331, -1.0969960689544678`, \
-0.7072638869285583, -0.6124459505081177}, {0.5162127614021301, 
                    0.6238583326339722, 
                    0.34327301383018494`, -0.26791563630104065`}, \
{-0.5693504214286804, 1.2117674350738525`, -0.11955609917640686`, 
                    0.9526163935661316}, {
                    0.0004830145335290581, -0.6953133940696716, \
-0.8744909763336182, 0.5600712895393372}}], "Biases" -> 
                    RawArray["Real32",{-0.04417675733566284, 
                    0.016460709273815155`, -0.018018431961536407`, \
-0.003621066454797983}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.08364911377429962, -0.41293445229530334`, 
                    0.7456597089767456, -0.6112605333328247}, {
                    0.38328656554222107`, 
                    0.026827214285731316`, -0.6304061412811279, 
                    0.0014338655164465308`}, {
                    0.2936494052410126, -0.4953831434249878, \
-0.8156598806381226, 
                    0.7646706700325012}, {-0.037835653871297836`, \
-0.9449551701545715, 0.7161888480186462, 0.32395997643470764`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.004959477577358484, 0., 
                    0.018554257228970528`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.4236890375614166, 1., 
                    0.8259796500205994}], "Biases" -> 
                    RawArray["Real32",{0., 0.8121699094772339, 0., 
                    0.15723752975463867`}], "MovingMean" -> 
                    RawArray["Real32",{-0.12917044758796692`, 
                    0.05554655194282532, -0.09991323947906494, \
-0.25477808713912964`}], "MovingVariance" -> 
                    RawArray["Real32",{0.000266525661572814, 
                    0.00009923988545779139, 0.00010416119766887277`, 
                    0.0011296860175207257`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8055242896080017, -0.5046042799949646}, \
{-1.0678335428237915`, -0.9697098135948181}, {-0.561033308506012, \
-0.8877573609352112}, {0.9595621824264526, -0.0500657856464386}}], "Biases" -> 
                    RawArray["Real32",{0.33588457107543945`, 
                    0.07756032794713974, -0.09569449722766876, \
-0.11187814921140671`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.32993894815444946`, 
                    0.5002012252807617, -0.49956807494163513`, 
                    0.40580034255981445`}, {
                    0.07131551206111908, -0.16277313232421875`, \
-1.1159601211547852`, 1.1482741832733154`}, {1.2370935678482056`, 
                    1.6028075218200684`, -0.42574992775917053`, \
-0.755722165107727}, {-0.5497583150863647, 
                    0.5320141911506653, -1.025053858757019, 
                    0.9358385801315308}}], "Biases" -> 
                    RawArray["Real32",{-0.037944987416267395`, 
                    0.22707660496234894`, 
                    0.007558062672615051, -0.03027201071381569}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.1833183318376541, -0.5434562563896179, 
                    0.35900264978408813`, 
                    0.6587458252906799}, {-0.15809792280197144`, 
                    0.8733894228935242, -0.9908549785614014, 
                    1.045094609260559}, {0.7978456616401672, 
                    0.35350021719932556`, -0.2868674695491791, \
-1.0262768268585205`}, {-0.7124864459037781, 
                    1.0488007068634033`, -0.5228165984153748, 
                    0.926790177822113}}], "Biases" -> 
                    RawArray["Real32",{-0.04258950427174568, 
                    0.17276756465435028`, -0.12131209671497345`, 
                    0.27382320165634155`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.05914736166596413, 
                    0.47175294160842896`, 0.17754751443862915`, 
                    0.9169224500656128}, {-1.0569748878479004`, 
                    0.4991212785243988, -0.6323114037513733, \
-0.8411307334899902}, {1.0993962287902832`, 
                    0.18369415402412415`, -1.0187921524047852`, \
-1.3645762205123901`}, {
                    0.6631592512130737, -0.4769909679889679, \
-0.28027579188346863`, -0.49332156777381897`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.04119429364800453, -0.005328983999788761, \
-0.18500567972660065`, 0.14757290482521057`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.11408688127994537`, 
                    0.4024689495563507, 0.3531888723373413, 
                    0.9709101915359497}, {0.6454603672027588, 
                    0.6429744362831116, 0.6609175205230713, 
                    0.41047388315200806`}, {-0.021838761866092682`, 
                    0.7679307460784912, -0.9821698665618896, 
                    0.5330458283424377}, {-0.48661771416664124`, \
-0.8861293196678162, 0.2985672652721405, -0.24996596574783325`}}], "Biases" -> 
                    RawArray["Real32",{-0.029024148359894753`, 
                    0.10164622962474823`, 
                    0.22822213172912598`, -0.0643431693315506}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.25814053416252136`, -0.5698228478431702, 
                    0.9926735162734985, 1.1822365522384644`}, {
                    0.30227944254875183`, -0.5475373864173889, \
-1.221463918685913, -0.7576279044151306}, {-0.6261985898017883, 
                    0.32760244607925415`, 0.2221505343914032, 
                    0.49372488260269165`}, {-1.0299720764160156`, \
-0.8712263703346252, 0.4709862470626831, -0.9809171557426453}}], "Biases" -> 
                    RawArray["Real32",{-0.05840636044740677, 0., 
                    0.34599795937538147`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7178837060928345, 
                    0.0754539743065834, -0.07109770178794861, 
                    0.10907488316297531`}, {-0.39196500182151794`, \
-1.0391287803649902`, 0.5946069955825806, 0.3916831910610199}, {
                    0.5160495042800903, -0.4873242974281311, 
                    0.49311238527297974`, -0.24718569219112396`}, \
{-0.6341967582702637, 
                    0.36129269003868103`, -0.6919680833816528, \
-1.0163519382476807`}}], "Biases" -> 
                    RawArray["Real32",{-0.18687163293361664`, 
                    0.02596762776374817, 0.03363369405269623, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2952757179737091, 
                    0.4504634737968445, -0.04413805529475212, 
                    0.18807938694953918`}, {-0.7450427412986755, \
-0.8215761184692383, -0.4584442377090454, -0.4913382828235626}, \
{-0.2416420727968216, 0.3537132441997528, 0.27950969338417053`, 
                    0.5292163491249084}, {-0.7373591065406799, 
                    0.36556029319763184`, -0.41158556938171387`, \
-0.2839217483997345}}], "Biases" -> 
                    RawArray["Real32",{-0.01831594482064247, 0., 
                    0.017417605966329575`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.2714173197746277, 1., 
                    0.9956449866294861, 1.}], "Biases" -> 
                    RawArray["Real32",{0.19552762806415558`, 
                    0., -0.39802759885787964`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.07385575026273727, -0.2899567484855652, 
                    0.16089841723442078`, -0.009371621534228325}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0014104446163401008`, 
                    0.011190064251422882`, 0.0026832493022084236`, 
                    0.00038680279976688325`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2642930746078491`, 
                    0.8268188238143921}, {-0.5022134184837341, 
                    0.5101158618927002}, {-1.3381139039993286`, 
                    1.166893720626831}, {0.4878425598144531, 
                    0.20256587862968445`}}], "Biases" -> 
                    RawArray["Real32",{-0.17179343104362488`, 
                    0.08783379197120667, 
                    0.06922435760498047, -0.2568233013153076}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.32112014293670654`, -1.063812017440796, \
-2.908308267593384, -0.48695436120033264`}, {-0.9814897179603577, \
-0.32749828696250916`, -0.28614771366119385`, -0.8372399806976318}, {
                    0.3182300329208374, 
                    0.1996791958808899, -0.3122684061527252, 
                    0.7359107136726379}, {1.2977542877197266`, 
                    0.28099775314331055`, -1.060470461845398, \
-0.36558130383491516`}}], "Biases" -> 
                    RawArray["Real32",{0.22945696115493774`, 0., 
                    0.3949333429336548, 0.16519878804683685`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7585293650627136, -1.1807243824005127`, 
                    0.6534357070922852, -0.26351964473724365`}, \
{-1.112922191619873, 0.17868958413600922`, 
                    1.4414318799972534`, -1.1912803649902344`}, {
                    0.31313610076904297`, 
                    0.05311939865350723, -0.7185114026069641, 
                    1.1544849872589111`}, {0.7256407141685486, 
                    0.9326233267784119, 0.028320958837866783`, 
                    0.2747834324836731}}], "Biases" -> 
                    RawArray["Real32",{0.2263377159833908, 
                    0.09536410123109818, 
                    0.23931525647640228`, -0.015928028151392937`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9092296957969666, 
                    0.7737902402877808, -0.5791275501251221, 
                    0.007331222761422396}, {-0.3860591948032379, 
                    0.7988179326057434, 0.483842134475708, 
                    0.7352887988090515}, {
                    0.19772590696811676`, -1.0622608661651611`, \
-0.7747647166252136, 0.07980397343635559}, {
                    0.5633371472358704, -0.814481258392334, \
-0.4070219397544861, -1.0397902727127075`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.26312559843063354`, -0.09947662800550461, \
-0.020687200129032135`, -0.03377986699342728}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2686201333999634`, 
                    0.24814386665821075`, -0.27694377303123474`, 
                    0.5479679107666016}, {0.0696205124258995, 
                    1.102692723274231, 
                    1.0082558393478394`, -0.8493449091911316}, \
{-0.12962917983531952`, -0.6112529039382935, -1.1061062812805176`, 
                    0.1692829132080078}, {-0.17391467094421387`, \
-1.1689257621765137`, 0.9973315596580505, -0.7050062417984009}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.093745157122612, -0.05702408775687218, 0., 
                    0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.7096297740936279, -0.3120685815811157, 
                    1.0470035076141357`, 0.19487692415714264`}, {
                    0.009518268518149853, -0.9735857844352722, 
                    0.15269295871257782`, 
                    0.2565949261188507}, {-0.11307663470506668`, \
-1.1760481595993042`, 
                    1.039278507232666, -0.01588474214076996}, \
{-0.8765694499015808, 
                    1.1391587257385254`, -1.179132342338562, \
-0.9810775518417358}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.09613307565450668, -0.031668826937675476`, 
                    0., -0.03938092663884163}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5577342510223389, -1.0093947649002075`, \
-0.41194576025009155`, -0.3543873131275177}, {1.0553799867630005`, 
                    1.1880255937576294`, -0.30832621455192566`, \
-0.4425933361053467}, {-1.3836721181869507`, 0.09204135090112686, 
                    0.8451066017150879, 0.22725027799606323`}, {
                    0.7735462784767151, 
                    0.21771612763404846`, -0.5773540735244751, \
-1.2089533805847168`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.8894547820091248, -0.4685942828655243, \
-0.20228110253810883`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.07895833253860474, 
                    0.3609413206577301, 0.4526773691177368, 
                    0.37655872106552124`}, {
                    0.8290538191795349, -0.023191213607788086`, \
-0.12195669859647751`, -0.31643494963645935`}, {
                    0.7179055213928223, -0.08120162039995193, \
-0.26662132143974304`, -0.5745231509208679}, {
                    0.11935969442129135`, -0.5377625226974487, \
-0.52306067943573, 0.5917158126831055}}], "Biases" -> 
                    RawArray["Real32",{0., 0.037078045308589935`, 
                    0., -0.022038575261831284`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.8302268981933594, 1., 
                    1.316287636756897}], "Biases" -> 
                    RawArray["Real32",{0., 0.15166693925857544`, 
                    0., -0.45056086778640747`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.39726001024246216`, -0.0194294061511755, \
-0.14308758080005646`, -0.48614558577537537`}], "MovingVariance" -> 
                    RawArray["Real32",{0.05312395840883255, 
                    0.002626831643283367, 0.01282864436507225, 
                    0.04547467827796936}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2269245386123657`, 
                    0.5300783514976501}, {-1.0680961608886719`, 
                    
                    1.2279157638549805`}, {-0.9560098648071289, \
-0.6157021522521973}, {-1.3427678346633911`, -0.5092048645019531}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.055263977497816086`, -0.0357687771320343, 
                    0.009987019933760166, -0.409896582365036}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2102319300174713, 
                    0.7911170721054077, 0.7531107068061829, 
                    0.05388656258583069}, {
                    0.7294581532478333, -1.0154672861099243`, \
-0.8989071249961853, -0.8402823805809021}, {0.8225075602531433, 
                    1.0055885314941406`, -0.8146655559539795, 
                    0.14929859340190887`}, {
                    0.3443886935710907, -0.23406171798706055`, 
                    0.648874044418335, -0.974784791469574}}], "Biases" -> 
                    RawArray["Real32",{
                    0.10877753049135208`, -0.10987579822540283`, \
-0.05968782678246498, 0.007396911736577749}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5818372368812561, 
                    0.6368904113769531, -0.6741195321083069, \
-0.9550532102584839}, {-0.9334428906440735, -0.2268291413784027, \
-1.1252663135528564`, 1.0908485651016235`}, {
                    0.49197691679000854`, -0.903556227684021, 
                    0.16529005765914917`, 
                    0.7606364488601685}, {-0.060122277587652206`, \
-0.559829831123352, -0.7184230089187622, 0.19126306474208832`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.09598984569311142, 
                    0.11792483925819397`, -0.0518016554415226}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.05107980966567993, -0.5076199173927307, 
                    0.8656588792800903, 1.169507384300232}, {
                    0.043214909732341766`, -0.12430473417043686`, 
                    1.0353971719741821`, 
                    0.2244076430797577}, {-0.004986797459423542, 
                    0.7752837538719177, -0.08317965269088745, \
-0.519730269908905}, {-0.1021399050951004, 
                    0.12337113171815872`, -0.1672910451889038, \
-0.06014348939061165}}], "Biases" -> 
                    RawArray["Real32",{-0.07721059769392014, 
                    0.09335753321647644, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5864083170890808, -1.1515958309173584`, \
-0.9700015187263489, -1.0751793384552002`}, {-0.44147804379463196`, 
                    0.904954195022583, -0.572465717792511, \
-0.07864737510681152}, {0.8050349950790405, -1.1519731283187866`, 
                    0.5112066864967346, 
                    0.06149987503886223}, {-0.2646709978580475, 
                    0.6335101127624512, -0.013110958971083164`, \
-0.9270269870758057}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.02993219904601574, -0.005128767807036638, 
                    0.016426386311650276`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.3305329382419586, -1.0482378005981445`, \
-0.1924656182527542, -0.7495168447494507}, {
                    0.47665491700172424`, -0.5365244150161743, 
                    1.124621868133545, 0.6901269555091858}, {
                    1.1700797080993652`, 0.4269246757030487, 
                    1.1931535005569458`, 0.17938324809074402`}, {
                    0.3727201223373413, 
                    0.7936676144599915, -1.1791568994522095`, 
                    0.9097337126731873}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.007643654942512512, -0.08279790729284286, 
                    0.09779099375009537}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.41163170337677, 1.0882995128631592`,
                     0.0033295280300080776`, -0.19062167406082153`}, {
                    1.1305721998214722`, -0.7240346670150757, \
-0.5251972675323486, -0.7583861947059631}, {-0.9256356954574585, \
-0.7151260375976562, -0.14005182683467865`, 
                    0.4736833870410919}, {-0.78333580493927, 
                    0.30321186780929565`, -0.9420959949493408, \
-0.8564635515213013}}], "Biases" -> 
                    RawArray["Real32",{-0.07011282444000244, 0., 
                    0.03244610130786896, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7035068273544312, 
                    0.18534383177757263`, 0.0613018162548542, 
                    0.11431510001420975`}, {
                    0.4332052171230316, -0.5943752527236938, \
-0.8540732860565186, -0.13494515419006348`}, {-0.21640744805335999`, 
                    0.8409658670425415, -0.45774969458580017`, 
                    0.2688940465450287}, {
                    0.16293755173683167`, -0.7081860303878784, \
-0.43753185868263245`, 0.13354924321174622`}}], "Biases" -> 
                    RawArray["Real32",{0.006494243163615465, 
                    0., -0.055063627660274506`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.046222977340221405`, 1., 
                    1.0855382680892944`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.4094805121421814, 0., 
                    0.3329516053199768, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.037118829786777496`, -0.42928051948547363`, \
-0.28365957736968994`, -0.21991543471813202`}], "MovingVariance" -> 
                    RawArray["Real32",{0.00012735245400108397`, 
                    0.025137698277831078`, 0.007188437506556511, 
                    0.006597123574465513}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6084913015365601, 
                    0.34091585874557495`}, {
                    0.35409799218177795`, -0.7107595205307007}, \
{-0.47736838459968567`, 1.3376765251159668`}, {
                    1.0174744129180908`, -0.40096160769462585`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.08730413764715195, -0.30411016941070557`, 
                    0.08460777997970581, 0.1346454918384552}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7835296988487244, -0.2876985967159271, \
-0.7150038480758667, -0.441653847694397}, {-0.6377336978912354, 
                    2.105273485183716, 0.03946137800812721, 
                    0.962832510471344}, {-0.5244331359863281, \
-0.6607128381729126, 
                    0.8806125521659851, -0.4075981080532074}, \
{-0.0207088440656662, -0.8347008228302002, -0.21375447511672974`, \
-1.024819254875183}}], "Biases" -> 
                    RawArray["Real32",{0., 0.10184445232152939`, 
                    0.2095145285129547, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.25878214836120605`, -0.6802108287811279, 
                    0.23190860450267792`, -0.5543636083602905}, \
{-1.0917338132858276`, -0.141453817486763, -0.7815151810646057, \
-1.0538750886917114`}, {-0.9915717244148254, 1.0146677494049072`, 
                    0.46070724725723267`, 1.2237516641616821`}, {
                    0.18021562695503235`, -1.0064103603363037`, 
                    0.028769556432962418`, 1.207274317741394}}], "Biases" -> 
                    RawArray["Real32",{-0.17457066476345062`, 0., 
                    0.14317403733730316`, -0.03311567381024361}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7010096907615662, 
                    0.5386219024658203, 0.13931305706501007`, 
                    1.0312293767929077`}, {
                    0.7909489870071411, -0.42114776372909546`, 
                    0.24118812382221222`, -0.9541829228401184}, {
                    0.48835626244544983`, -0.46471327543258667`, 
                    0.619662880897522, 
                    0.6258669495582581}, {-0.99852454662323, \
-0.3097281754016876, 0.25753268599510193`, -0.12958447635173798`}}], "Biases" -> 
                    RawArray["Real32",{0.05355251580476761, 
                    0.05030385032296181, 
                    0.12225575000047684`, -0.05507795140147209}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7661686539649963, 
                    0.7926455140113831, -1.0148553848266602`, \
-0.2221817821264267}, {0.6779279708862305, 0.4717486798763275, 
                    0.6864776611328125, -1.1918736696243286`}, {
                    0.7604702711105347, 
                    1.1436012983322144`, -0.9900761842727661, \
-0.9546067714691162}, {0.14667591452598572`, 
                    0.5370497703552246, -0.7491148114204407, 
                    0.08863148838281631}}], "Biases" -> 
                    RawArray["Real32",{-0.005557596683502197, 
                    0.08889354765415192, -0.039164479821920395`, \
-0.00436381995677948}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6535167694091797, 
                    0.9468663334846497, -0.6574264168739319, \
-0.5250082015991211}, {-1.0625808238983154`, -0.00959259457886219, 
                    1.0252410173416138`, -0.7745680212974548}, \
{-0.7256602048873901, -0.15038423240184784`, 
                    1.0325127840042114`, -0.8182397484779358}, \
{-0.7448923587799072, 
                    0.2248680740594864, -0.4737423360347748, \
-1.117297887802124}}], "Biases" -> 
                    RawArray["Real32",{
                    0.006623828783631325, -0.030691642314195633`, \
-0.005555391777306795, 0.02767174318432808}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.4338841438293457, 
                    0.02327045425772667, 
                    0.003029894083738327, -0.8972814679145813}, \
{-0.2538984417915344, -0.8802012801170349, 0.6719919443130493, 
                    1.069201946258545}, {
                    0.1005774438381195, -0.8963965773582458, \
-0.9779155254364014, -0.4103488326072693}, {-0.23362062871456146`, \
-0.38641712069511414`, 0.3283616006374359, 0.06959308683872223}}], "Biases" -> 
                    RawArray["Real32",{0.06830772012472153, 
                    0.08361774682998657, -0.0053450302220880985`, \
-0.006242052186280489}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7368323802947998, 
                    0.8498879671096802, -0.4320899248123169, 
                    0.8462148904800415}, {0.581718385219574, 
                    0.09062107652425766, 
                    0.7757717967033386, -0.22117385268211365`}, \
{-0.5401679873466492, 0.4012470841407776, -0.3824312686920166, 
                    0.21749524772167206`}, {-0.3506982624530792, \
-0.05828291177749634, -0.6220205426216125, 0.7043546438217163}}], "Biases" -> 
                    RawArray["Real32",{0., -0.0989883542060852, 0., 
                    0.034546662122011185`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0943498611450195`, 1., 
                    0.5707899332046509}], "Biases" -> 
                    RawArray["Real32",{0., -0.011473491787910461`, 0., 
                    0.02301899343729019}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.016649531200528145`, \
-0.0011380029609426856`, -0.036924321204423904`, -0.02508625201880932}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00038284322363324463`, 
                    0.0002371612936258316, 0.0002056993980659172, 
                    0.00008736725430935621}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.0232733488082886`, 
                    0.4123275578022003}, {-0.42913058400154114`, \
-0.7507485747337341}, {-0.6771546006202698, -0.42921799421310425`}, \
{-1.1501773595809937`, -0.5237459540367126}}], "Biases" -> 
                    RawArray["Real32",{-0.06611915677785873, 
                    0.38374435901641846`, -0.21494361758232117`, \
-0.08891620486974716}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.938681423664093, 
                    0.5236425399780273, -0.4462301731109619, 
                    0.7413621544837952}, {
                    0.36929574608802795`, -0.5489752292633057, \
-0.3339131772518158, 0.44864922761917114`}, {-0.6584511995315552, 
                    0.2634795606136322, 
                    1.1334044933319092`, -0.7523109912872314}, \
{-0.03542015701532364, -0.8779085874557495, -0.809063196182251, 
                    0.03728779777884483}}], "Biases" -> 
                    RawArray["Real32",{-0.10400308668613434`, 
                    0.2816414535045624, -0.09269170463085175, \
-0.004481355659663677}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.24621422588825226`, 
                    0.985656201839447, 0.09558389335870743, 
                    1.2012335062026978`}, {
                    0.7117063999176025, -0.4811817705631256, \
-0.2930569648742676, -0.07616393268108368}, {1.1045162677764893`, 
                    0.2911427617073059, -0.34115180373191833`, \
-0.8265060782432556}, {-0.9755216836929321, 0.4526450037956238, 
                    0.43766549229621887`, 0.5006574988365173}}], "Biases" -> 
                    RawArray["Real32",{0.013371359556913376`, 
                    0.04690810665488243, -0.03512047231197357, \
-0.1534721404314041}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9985904693603516, 
                    0.3187827467918396, -1.0587326288223267`, \
-1.0089114904403687`}, {
                    0.43743884563446045`, -0.15510369837284088`, \
-0.9138410687446594, 0.3631367087364197}, {
                    0.9080770611763, -0.3844505250453949, 
                    0.6118550896644592, -0.5183600187301636}, {
                    0.6724507212638855, 0.93711918592453, 0.4640797972679138, 
                    0.9890212416648865}}], "Biases" -> 
                    RawArray["Real32",{
                    0.027951490134000778`, -0.10686809569597244`, 
                    0.013608737848699093`, -0.06892822682857513}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2668100893497467, 
                    0.15058819949626923`, -1.1104614734649658`, 
                    0.03640010580420494}, {-0.13042515516281128`, 
                    0.7564303874969482, 
                    0.006577329710125923, -0.6690428853034973}, \
{-0.5001853704452515, 0.4691876769065857, 
                    0.7996487021446228, -0.14533911645412445`}, {
                    0.4526841938495636, 0.8468631505966187, 
                    0.09007269889116287, -0.23484553396701813`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0052228025160729885`, -0.005015995819121599, 
                    0.04361181706190109, 0.20404070615768433`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.1011145114898682`, 
                    0.7110188603401184, 0.5675764083862305, 
                    0.9290199875831604}, {
                    0.22922439873218536`, -0.3610682487487793, 
                    0.17099426686763763`, 0.6951537132263184}, {
                    0.3940970301628113, 0.389936625957489, 
                    0.21339713037014008`, -0.9525924921035767}, {
                    0.40970227122306824`, -0.8975924849510193, 
                    1.0971708297729492`, 0.16968782246112823`}}], "Biases" -> 
                    RawArray["Real32",{0.0006359686376526952, 
                    0.025261353701353073`, -0.20041799545288086`, \
-0.0014764054212719202`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6824387907981873, 
                    0.1007201224565506, -0.13071443140506744`, \
-0.9145658612251282}, {-0.2611132264137268, -0.4049318730831146, \
-0.3291284143924713, -0.40765678882598877`}, {0.4567570090293884, 
                    0.23558172583580017`, 0.21312430500984192`, 
                    0.0910617858171463}, {0.15193194150924683`, 
                    0.8316170573234558, -0.14471234381198883`, \
-0.26284971833229065`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0.00010937114711850882`, 
                    0.01756111904978752}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5749830007553101, -0.5930800437927246, 
                    0.07424910366535187, 0.11974163353443146`}, {
                    0.5756600499153137, 0.14637413620948792`, 
                    0.6387523412704468, -0.14677976071834564`}, {
                    0.6429774165153503, 0.32796573638916016`, 
                    0.5578079223632812, -0.08706668764352798}, {
                    0.7294813394546509, -0.5185415148735046, \
-0.3751922845840454, -0.19885247945785522`}}], "Biases" -> 
                    RawArray["Real32",{0.10288982093334198`, 
                    0., -0.053429532796144485`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.7660358548164368, 1., 
                    0.6746312379837036, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.1611233502626419, 
                    0., -0.16056616604328156`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.1324150562286377, 
                    0.14110837876796722`, 
                    0.07327874004840851, -0.11011964827775955`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00007790406380081549, 
                    0.004116098862141371, 0.0031010578386485577`, 
                    0.001395107712596655}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.6247974634170532, 
                    1.0719972848892212`}, {-0.8147713541984558, \
-0.951488196849823}, {0.4458984434604645, 
                    1.009402871131897}, {-0.6509699821472168, 
                    0.6131016612052917}}], "Biases" -> 
                    RawArray["Real32",{-0.30463317036628723`, 
                    0.23118887841701508`, 
                    0.06617609411478043, -0.30046290159225464`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.308014988899231, 
                    0.41012367606163025`, 
                    1.1328684091567993`, -0.6759518980979919}, \
{-0.06172512471675873, -0.27633190155029297`, 1.1597766876220703`, 
                    1.054457664489746}, {
                    1.1483964920043945`, -1.1610616445541382`, \
-0.32596054673194885`, 1.2034265995025635`}, {
                    0.2506335377693176, -0.5807443261146545, 
                    0.09045513719320297, -0.3083084225654602}}], "Biases" -> 
                    RawArray["Real32",{
                    0.024193117395043373`, -0.22505512833595276`, \
-0.05639704689383507, 0.3493075966835022}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.2778819501399994, 
                    0.7496756315231323, 1.0025731325149536`, 
                    0.5138924717903137}, {-0.7969806790351868, \
-0.2784910798072815, -0.546769380569458, 0.6271833777427673}, {
                    0.5501472353935242, 1.320475697517395, 0.7035324573516846,
                     1.2081241607666016`}, {0.9598748087882996, 
                    0.6415534615516663, -1.3248586654663086`, 
                    0.24694617092609406`}}], "Biases" -> 
                    RawArray["Real32",{-0.17849385738372803`, 
                    0.2985064685344696, -0.1312658190727234, 
                    0.1636054366827011}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.2408421039581299`, 
                    0.6402130722999573, -0.5636037588119507, 
                    0.7157518267631531}, {
                    0.7387978434562683, -1.0216920375823975`, 
                    0.22834144532680511`, 0.30655571818351746`}, {
                    0.5690512657165527, -0.35685232281684875`, \
-0.41032058000564575`, -1.1276694536209106`}, {0.022032486274838448`, 
                    0.18081532418727875`, -0.7020317912101746, 
                    0.533079206943512}}], "Biases" -> 
                    RawArray["Real32",{
                    0.13038139045238495`, -0.26013192534446716`, \
-0.03431916981935501, 0.26744359731674194`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.884698212146759, -0.9137963056564331, \
-0.6820396184921265, -1.1969163417816162`}, {1.02857506275177, 
                    0.6642537713050842, 0.028140507638454437`, 
                    0.06875970214605331}, {-0.09183403104543686, 
                    0.0021497849375009537`, -0.2629159390926361, \
-0.16911469399929047`}, {0.6566782593727112, 0.6675363183021545, 
                    0.553555428981781, 1.0056182146072388`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.05621147155761719, -0.010769825428724289`, 
                    0.07819464057683945}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2057257890701294`, 
                    0.24814435839653015`, 1.1151946783065796`, 
                    0.49364256858825684`}, {-0.34746411442756653`, 
                    0.6987231373786926, 0.943751871585846, 
                    0.7946571707725525}, {
                    0.46374526619911194`, -0.4114575982093811, 
                    0.6955560445785522, 
                    0.3322679400444031}, {-0.47509536147117615`, \
-1.0886939764022827`, 0.07419174164533615, 0.6524626612663269}}], "Biases" -> 
                    RawArray["Real32",{
                    0.013026686385273933`, -0.007407285738736391, 
                    0.11372725665569305`, -0.07177607715129852}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.723952054977417, 0.631230354309082,
                     0.07747747749090195, 
                    0.4074034094810486}, {-1.197285771369934, \
-0.5476441979408264, -0.5596575736999512, 
                    1.183302879333496}, {-0.8752565979957581, \
-0.4132252037525177, 0.293244332075119, 0.21619480848312378`}, {
                    0.4112408757209778, -0.07134272903203964, 
                    0.25418463349342346`, 0.15527468919754028`}}], "Biases" -> 
                    RawArray["Real32",{0.06009580194950104, 0., 0., 
                    0.009850728325545788}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.6709763407707214, -0.8419735431671143, \
-0.6108553409576416, 
                    0.31385189294815063`}, {-0.3921840488910675, \
-0.27944886684417725`, -0.44053006172180176`, 
                    0.30910852551460266`}, {-0.07277870178222656, 
                    0.5416227579116821, -0.749184787273407, \
-0.22155964374542236`}, {-0.03492600470781326, -0.5857563018798828, \
-0.289907842874527, -0.40806424617767334`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.03365085646510124, 0., 
                    0.04534592106938362}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.51395183801651, 1., 
                    0.9517407417297363}], "Biases" -> 
                    RawArray["Real32",{0., 0.2162855863571167, 
                    0., -0.33053067326545715`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.2486773431301117, -0.09127230942249298, \
-0.06003804877400398, -0.03530314937233925}], "MovingVariance" -> 
                    RawArray["Real32",{0.004154358524829149, 
                    0.00032402551732957363`, 0.00022630792227573693`, 
                    0.00040684040868654847`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.0272393226623535`, 
                    1.1851426362991333`}, {-1.1013171672821045`, 
                    1.3560041189193726`}, {-0.2645794451236725, 
                    0.8190812468528748}, {0.2288351058959961, 
                    0.5987197160720825}}], "Biases" -> 
                    RawArray["Real32",{0.020290987566113472`, 
                    0.02084389515221119, -0.020147942006587982`, \
-0.020126312971115112`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.24388974905014038`, 
                    0.4529878795146942, -1.1013665199279785`, \
-0.1728794127702713}, {
                    0.4499173164367676, -1.1148042678833008`, \
-0.5451153516769409, -0.17451262474060059`}, {-0.8063437938690186, \
-0.12459979951381683`, 1.1342663764953613`, 0.8231135010719299}, {
                    0.05881085246801376, -0.11509258300065994`, \
-1.204534888267517, 0.33516672253608704`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020205922424793243`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.32763224840164185`, -1.1029812097549438`, \
-1.1657968759536743`, 0.07768034934997559}, {
                    0.5615560412406921, -0.18220843374729156`, \
-0.6637734770774841, 1.1732587814331055`}, {0.5226121544837952, 
                    0.09836286306381226, 0.663692057132721, 
                    0.5882529020309448}, {-1.1400552988052368`, 
                    0.48360323905944824`, -0.0822700560092926, \
-0.4636894762516022}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020308714359998703`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.6304903030395508, -0.17651955783367157`, \
-0.46612972021102905`, 0.6061276793479919}, {-0.4681702256202698, 
                    0.5416781306266785, 
                    0.5326633453369141, -0.21141549944877625`}, {
                    0.095125213265419, 1.1963318586349487`, 
                    0.6131061911582947, 
                    0.16446593403816223`}, {-0.04447731375694275, 
                    0.8583840727806091, -0.6535158157348633, \
-0.8978548645973206}}], "Biases" -> 
                    RawArray["Real32",{0., -0.02120339125394821, 
                    0.02140180952847004, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.4623880088329315, 
                    0.9883906841278076, -0.6045739054679871, \
-0.1552111953496933}, {-0.6422726511955261, 
                    0.015349535271525383`, -0.8583002686500549, \
-0.9189561009407043}, {-0.6069546937942505, 
                    0.2909195125102997, -0.3387618958950043, \
-0.2795550227165222}, {-1.1471445560455322`, -0.769105076789856, 
                    0.006018396466970444, 1.1222515106201172`}}], "Biases" -> 
                    RawArray["Real32",{-0.02127707563340664, 0., 
                    0., -0.0055557615123689175`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.03880154713988304, 
                    0.1930888295173645, -0.2744407653808594, 
                    0.9316576719284058}, {
                    1.04044508934021, -0.5252693295478821, 
                    1.1132738590240479`, -0.17558589577674866`}, {
                    0.23562754690647125`, -0.11817649751901627`, \
-0.8234222531318665, -0.994630753993988}, {
                    1.1251013278961182`, -0.18200336396694183`, 
                    0.7495065927505493, 0.5922220349311829}}], "Biases" -> 
                    RawArray["Real32",{-0.008491064421832561, 
                    0.0037082810886204243`, -0.00048256112495437264`, \
-0.013342808000743389`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.5927290916442871, -0.5807473659515381, 
                    0.04569912701845169, 0.5453850030899048}, {
                    0.3536730706691742, -0.3382004201412201, 
                    0.3208562731742859, -1.1065701246261597`}, \
{-0.043284542858600616`, 0.31835034489631653`, 0.22545592486858368`, 
                    1.1699867248535156`}, {0.4927527606487274, 
                    0.26720207929611206`, -0.5632683038711548, \
-0.3714267313480377}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008471638895571232, -0.006288113072514534, \
-0.024764614179730415`, -0.002935498021543026}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8400803208351135, -0.2918619215488434, \
-0.36224615573883057`, -0.4248539209365845}, {0.21804450452327728`, 
                    0.6871101260185242, -0.09039194136857986, 
                    0.6381481289863586}, {-0.017969254404306412`, \
-0.2533146142959595, -0.5403133630752563, -0.6244195699691772}, \
{-0.557862401008606, -0.3409421443939209, -0.08292922377586365, 
                    0.37390872836112976`}}], "Biases" -> 
                    RawArray["Real32",{0.14098723232746124`, 
                    0., -0.1755669116973877, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.0340676307678223`, 1., 
                    0.9480414390563965, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.11188255250453949`, 
                    0., -0.03459589555859566, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.14253473281860352`, 
                    5.605193857299268*^-45, -0.17651954293251038`, 
                    5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.23329117894172668`, 
                    0.43448686599731445`}, {-0.5498430132865906, \
-0.2333453744649887}, {
                    0.127238467335701, -0.3405781686306}, \
{-1.3462013006210327`, -1.2543599605560303`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.032579317688941956`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.1024048328399658`, 
                    0.7728956937789917, -0.06355833262205124, 
                    1.0792820453643799`}, {-0.6330763697624207, \
-0.6129856109619141, -0.6057496070861816, -0.7020090818405151}, {
                    0.3616458475589752, -0.8576364517211914, \
-0.05248260870575905, 0.8957068920135498}, {-0.8764091730117798, 
                    0.6311792731285095, 
                    0.5927261710166931, -0.298856258392334}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.03286946564912796}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.24815647304058075`, -0.37761324644088745`, \
-1.100022554397583, 
                    0.6481032371520996}, {-0.6488040685653687, \
-0.679099977016449, 
                    0.2214793711900711, -0.601083517074585}, \
{-1.1225425004959106`, 
                    1.0572394132614136`, -1.221137523651123, \
-0.21756841242313385`}, {-0.34284016489982605`, -0.961559534072876, \
-0.9971440434455872, -0.7323741912841797}}], "Biases" -> 
                    RawArray["Real32",{-0.0331658273935318, 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.2651151418685913, -0.8428170680999756, 
                    0.4288094937801361, -0.6984238624572754}, \
{-0.36055707931518555`, -0.40606963634490967`, 
                    0.18076859414577484`, -0.8186793923377991}, {
                    0.3470284640789032, -0.7862091660499573, 
                    1.0312302112579346`, -1.1828734874725342`}, \
{-0.7150039672851562, 0.02474166825413704, 0.4519364535808563, 
                    0.24253782629966736`}}], "Biases" -> 
                    RawArray["Real32",{0.04722980037331581, 
                    0., -0.07259402424097061, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.49899449944496155`, -1.1440858840942383`, \
-0.5056160688400269, -0.9733536243438721}, {-0.9348592758178711, \
-0.2542707324028015, 1.079600214958191, 
                    0.0029605808667838573`}, {-0.3890341520309448, \
-0.12657929956912994`, 0.02132675051689148, -0.4675881266593933}, {
                    0.5685173869132996, -0.45166826248168945`, \
-0.9953811764717102, -0.35574910044670105`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008726036176085472, -0.050475168973207474`, 
                    0., 0.01855863258242607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8794720768928528, 
                    0.45291027426719666`, -1.1260080337524414`, \
-0.4375465512275696}, {-0.5684416890144348, 
                    0.4649476706981659, -0.24840471148490906`, \
-0.28038305044174194`}, {-0.8279221653938293, 
                    0.4214527904987335, -0.2367471605539322, \
-1.2243705987930298`}, {-0.17251811921596527`, 0.9857721328735352, 
                    1.1452807188034058`, 0.36024707555770874`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011650129221379757`, -0.01572592556476593, \
-0.012774167582392693`, -0.030365219339728355`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.327743262052536, 0.7532622814178467,
                     0.7607889175415039, 
                    1.1032756567001343`}, {-0.2636410892009735, \
-0.13159549236297607`, -0.22760000824928284`, -0.846391499042511}, {
                    0.08058207482099533, -0.8095343708992004, 
                    0.5150863528251648, 0.1342550665140152}, {
                    0.8215001821517944, 
                    0.5603652000427246, -0.7315725088119507, 
                    0.8480975031852722}}], "Biases" -> 
                    RawArray["Real32",{-0.026365989819169044`, 
                    0., -0.0005013612098991871, -0.044547807425260544`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.32944807410240173`, 
                    0.5410114526748657, -0.7933152914047241, \
-0.8292582631111145}, {0.4512331187725067, -0.12782202661037445`, 
                    0.023232072591781616`, 0.8463086485862732}, {
                    0.5111056566238403, 0.8652687668800354, 
                    0.7632277011871338, 0.24700802564620972`}, {
                    0.13815216720104218`, -0.7928653359413147, 
                    0.38433071970939636`, -0.7218269109725952}}], "Biases" -> 
                    RawArray["Real32",{0., -0.01726776547729969, 
                    0., -0.03475910797715187}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0376012325286865`, 1., 
                    0.952485203742981}], "Biases" -> 
                    RawArray["Real32",{0., 0.07142296433448792, 0., 
                    0.35761305689811707`}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-5.605193857299268*^-45, -0.017946388572454453`,
                     5.605193857299268*^-45, -0.034391891211271286`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.8957763910293579, 
                    0.3623362183570862}, {-0.174520343542099, 
                    0.9252927303314209}, {-0.1321897804737091, 
                    1.408540964126587}, {-0.429532915353775, 
                    0.6881443858146667}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9142180681228638, -0.3998311460018158, 
                    0.373794823884964, -0.8428809642791748}, \
{-1.013462781906128, -0.9153012633323669, 
                    1.2214096784591675`, -0.8198782205581665}, {
                    0.05613064020872116, -1.1520932912826538`, \
-0.2508637011051178, 1.1238369941711426`}, {0.9063417315483093, 
                    0.021235918626189232`, 1.1031527519226074`, 
                    0.7188641428947449}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.09319031983613968, 
                    1.0391968488693237`, 
                    0.270325243473053, -0.6375017166137695}, {
                    0.9597233533859253, -0.16874465346336365`, 
                    0.22008773684501648`, -1.0515003204345703`}, \
{-0.6845393776893616, -0.9731258153915405, -0.014127678237855434`, \
-0.6081287860870361}, {-1.1281071901321411`, -0.6320348381996155, \
-0.7507789731025696, -0.836697518825531}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.1619548201560974, 
                    0.6321669816970825, -0.12518945336341858`, \
-0.8754209280014038}, {0.42449310421943665`, 0.09920264780521393, 
                    1.120271921157837, -0.2694827914237976}, {
                    0.7911468744277954, 
                    0.107190802693367, -0.15914228558540344`, \
-0.7212669253349304}, {
                    0.45065775513648987`, -0.7895684242248535, \
-0.5509428977966309, -0.7949679493904114}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.7017349004745483, -0.5246540307998657, 
                    0.44179415702819824`, 
                    0.9635450839996338}, {-1.0937368869781494`, 
                    0.3026067614555359, 0.6850050687789917, 
                    0.3425700068473816}, {-0.1728016585111618, \
-0.728571355342865, -0.5919033288955688, 
                    0.519510805606842}, {-0.3456636965274811, \
-0.5398943424224854, 1.1310919523239136`, -0.7293530106544495}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.3090231418609619, -1.064344882965088, 
                    0.8869056701660156, 0.5164023041725159}, {
                    1.1150511503219604`, 
                    1.074715256690979, -1.0552726984024048`, 
                    0.646506130695343}, {-0.9056016802787781, \
-0.989912748336792, -0.6263928413391113, 0.06015612930059433}, {
                    1.0773271322250366`, 
                    0.3191694915294647, -0.6086782813072205, \
-1.1192924976348877`}}], "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9385467171669006, -0.9668304920196533, \
-0.26482826471328735`, -0.07200281322002411}, {-0.7782991528511047, \
-0.7488662004470825, -0.847709059715271, 
                    0.68807452917099}, {-0.8480285406112671, 
                    0.22617769241333008`, 
                    0.7120975255966187, -1.198423147201538}, \
{-1.0725282430648804`, 1.0682932138442993`, 
                    0.7012400031089783, -0.7183460593223572}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.5295577049255371, 
                    0.3512469232082367, 
                    0.2275642305612564, -0.06166284903883934}, \
{-0.7875308990478516, -0.5696789622306824, -0.6910265684127808, 
                    0.08407719433307648}, {0.25443747639656067`, 
                    0.8309063911437988, 0.7666983008384705, 
                    0.2845258116722107}, {-0.8493523001670837, 
                    0.3944772183895111, 0.11803640425205231`, 
                    0.08188746124505997}}], "Biases" -> 
                    RawArray["Real32",{-0.15906153619289398`, 0., 
                    0.017862647771835327`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.1062151193618774`, 1., 
                    1.0263330936431885`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.08614708483219147, 
                    0., -0.03560680150985718, 0.}], "MovingMean" -> 
                    RawArray["Real32",{-0.1589561104774475, 0., 
                    0.01827838644385338, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.0055826902389526`, -0.9614297151565552}, {
                    0.9427697658538818, -0.7433678507804871}, \
{-0.4351021945476532, 0.04881863296031952}, {-0.9517213106155396, 
                    0.9961529970169067}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.19117866456508636`, 
                    0.27121517062187195`, -0.1893296241760254, \
-0.4572905898094177}, {0.708571195602417, 0.16505128145217896`, 
                    1.0478155612945557`, -0.656966507434845}, {
                    0.29914435744285583`, -0.7274119257926941, 
                    1.0795044898986816`, -0.7368828058242798}, {
                    0.6509546637535095, -0.9017858505249023, 
                    0.14681188762187958`, -0.6649592518806458}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.46432384848594666`, 
                    0.908102810382843, 1.0478026866912842`, 
                    0.8622851967811584}, {-0.21355552971363068`, \
-0.2557402551174164, -1.1127070188522339`, 
                    0.6246770024299622}, {-0.7064324021339417, \
-0.29214048385620117`, -0.30093252658843994`, -0.7913140058517456}, \
{-0.2682134807109833, -1.0217411518096924`, -1.0430132150650024`, 
                    1.1392306089401245`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6836269497871399, -0.30448874831199646`, \
-0.5775110125541687, 
                    0.4721684455871582}, {-0.570763349533081, \
-0.8921632170677185, 
                    0.4863985776901245, -1.2229053974151611`}, \
{-0.4215686619281769, -0.9302003383636475, -0.7996142506599426, 
                    1.215777039527893}, {-0.6872756481170654, \
-0.6428603529930115, 0.386488676071167, -0.9340691566467285}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.531825840473175, 
                    1.0124754905700684`, -0.9074230194091797, \
-0.7805092334747314}, {
                    1.098265528678894, -0.24796715378761292`, \
-0.11630570888519287`, -0.8168771266937256}, {
                    0.8796766996383667, -0.18376733362674713`, \
-0.03014848753809929, 0.46239835023880005`}, {
                    0.8197591304779053, -0.939045786857605, \
-0.5731520652770996, -0.3073666989803314}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.06325596570968628, 
                    1.1152753829956055`, -0.6454733610153198, 
                    0.887650191783905}, {0.5683873295783997, 
                    0.2518492341041565, -0.9079412817955017, \
-0.963146984577179}, {0.13283513486385345`, 
                    0.7189369797706604, -0.33037254214286804`, 
                    0.0840630754828453}, {0.07897438108921051, 
                    0.08171245455741882, -0.33058255910873413`, 
                    0.11540823429822922`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.4389474391937256, 
                    0.7196488976478577, 0.09832611680030823, 
                    0.6244978308677673}, {-0.3684132695198059, \
-0.5929128527641296, -0.20331576466560364`, 
                    1.0255637168884277`}, {-0.1422601044178009, 
                    0.8687633872032166, -0.3134025037288666, \
-0.8768927454948425}, {-0.3123319447040558, 0.13173586130142212`, 
                    1.1398409605026245`, -0.04513677582144737}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.28371381759643555`, -0.022410541772842407`, \
-0.7774190902709961, 0.5423662662506104}, {
                    0.4330427944660187, -0.6156600117683411, 
                    0.3195442855358124, -0.852202832698822}, {
                    0.4456996023654938, 0.6105488538742065, 
                    0.7942044138908386, 
                    0.6567155122756958}, {-0.33267030119895935`, 
                    0.09951091557741165, 0.2645964026451111, 
                    0.2095808982849121}}], "Biases" -> 
                    RawArray["Real32",{0., 0.17369158565998077`, 0., 
                    0.09452357888221741}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.1056221723556519`, 1., 
                    0.9821265339851379}], "Biases" -> 
                    RawArray["Real32",{0., -0.010287722572684288`, 0., 
                    0.36241286993026733`}], "MovingMean" -> 
                    RawArray["Real32",{0., 0.1741284281015396, 0., 
                    0.09339499473571777}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.28040042519569397`, 
                    0.8754277229309082}, {-0.1258702576160431, 
                    0.9857667088508606}, {-1.380333662033081, \
-0.5188001990318298}, {1.0989738702774048`, -1.3736345767974854`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.22989614307880402`, -0.24420808255672455`, \
-0.07359588891267776, -0.011434712447226048`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8308497667312622, 
                    0.5850459933280945, 0.55536288022995, 
                    0.2275981903076172}, {-0.45424148440361023`, \
-1.0565913915634155`, 
                    0.9683523178100586, -0.6303821206092834}, \
{-0.75920170545578, -0.9600221514701843, -0.5091850757598877, 
                    
                    1.1499882936477661`}, {-1.1887308359146118`, \
-0.31259822845458984`, 0.8612467050552368, 0.24493707716464996`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.2655591368675232, -0.0065243481658399105`, 
                    0.021921809762716293`, 0.014092521741986275`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.19533894956111908`, -1.0829535722732544`, 
                    0.9076451659202576, 
                    0.7930638790130615}, {-0.16771440207958221`, 
                    1.153153419494629, 
                    0.2588096559047699, -0.39757826924324036`}, {
                    0.42902880907058716`, -0.5507331490516663, \
-0.8617340326309204, -1.2063547372817993`}, {-0.9219340682029724, \
-1.0360429286956787`, -1.0778638124465942`, 0.49378475546836853`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0036274082958698273`, -0.07150954008102417, \
-0.14796485006809235`, -0.008579540997743607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2615041136741638, 
                    0.21138696372509003`, -0.9717984199523926, \
-0.39667075872421265`}, {-0.4116203188896179, 
                    0.5252212882041931, -0.4073011875152588, \
-0.8352898955345154}, {0.569722592830658, 0.043254997581243515`, 
                    1.390390396118164, 
                    1.1961472034454346`}, {-0.2173124998807907, 
                    1.1219031810760498`, -0.05218074470758438, \
-0.5121939182281494}}], "Biases" -> 
                    RawArray["Real32",{
                    0.1688094139099121, -0.015401605516672134`, \
-0.047859013080596924`, -0.023609118536114693`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.4043121337890625`, 
                    0.989319920539856, 0.8493707180023193, 
                    0.3664087951183319}, {-0.00433536758646369, \
-1.148911952972412, 
                    0.8351345658302307, -0.5400360822677612}, \
{-0.5725638270378113, 
                    0.5460139513015747, -0.001732580829411745, \
-0.7900643944740295}, {-0.6436707973480225, -0.3394011855125427, \
-1.2217543125152588`, -0.8703947067260742}}], "Biases" -> 
                    RawArray["Real32",{
                    0.03309731185436249, -0.061290040612220764`, \
-0.003327625570818782, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7225061655044556, 
                    0.7556267976760864, 
                    0.2262432724237442, -0.1884404867887497}, \
{-0.36302366852760315`, -0.2926149070262909, -0.7215145826339722, 
                    0.20516319572925568`}, {0.7662841081619263, 
                    0.3093644082546234, 0.1925813853740692, 
                    0.39481011033058167`}, {-0.16232548654079437`, 
                    0.8706628680229187, -1.236894130706787, \
-0.8296151161193848}}], "Biases" -> 
                    RawArray["Real32",{0.01828683353960514, 0., 
                    0.15081633627414703`, -0.45662227272987366`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7094109654426575, -0.700827419757843, 
                    0.5683406591415405, 
                    0.3210662305355072}, {-1.219648838043213, 
                    0.5808302164077759, -0.19560769200325012`, \
-0.6605221629142761}, {-0.3890421986579895, -0.03711126372218132, 
                    0.6946619153022766, -0.993706464767456}, {
                    0.6287885904312134, 0.7380457520484924, 
                    0.08613798022270203, 1.0832852125167847`}}], "Biases" -> 
                    RawArray["Real32",{0.23517915606498718`, 0., 
                    0.14619426429271698`, 0.09177739173173904}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.21444521844387054`, -0.7537563443183899, 
                    0.8711041808128357, 
                    0.8564229011535645}, {-0.007904307916760445, \
-0.5445233583450317, 0.4207858741283417, 
                    0.0682104229927063}, {-0.3529924750328064, \
-0.5852335691452026, -0.21044248342514038`, 0.003850610926747322}, {
                    0.08303238451480865, 
                    0.5906074643135071, -0.15651191771030426`, 
                    0.25543975830078125`}}], "Biases" -> 
                    RawArray["Real32",{-0.0009580579353496432, 
                    0., -0.013556385412812233`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.04379437118768692, 1., 
                    0.04486582428216934, 1.}], "Biases" -> 
                    RawArray["Real32",{0.4153086245059967, 0., 
                    0.1518605500459671, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.520790696144104, 
                    0.11277378350496292`, -0.12201576679944992`, 
                    0.10225825011730194`}], "MovingVariance" -> 
                    RawArray["Real32",{0.06241406872868538, 
                    0.0012842623982578516`, 0.0028616664931178093`, 
                    0.009552285075187683}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}]], 
         "Edges" -> {
          NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath["Outputs", "X_out"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Outputs", "X_out"]}], 
        Association["Version" -> "12.0.10", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["Center", 
        Association[
        "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Mean" -> {-0.00011694978920109752`, 0.00007700457070020814}, 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Version" -> {12., 0}, "ID" -> 5267004855378899174]], 
      "PostProcessor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "ProbabilityNet" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "checker_b" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "checker_w" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Total_Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
           "Z_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "coupling_1" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.28040042519569397`, 
                    0.8754277229309082}, {-0.1258702576160431, 
                    0.9857667088508606}, {-1.380333662033081, \
-0.5188001990318298}, {1.0989738702774048`, -1.3736345767974854`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.22989614307880402`, -0.24420808255672455`, \
-0.07359588891267776, -0.011434712447226048`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8308497667312622, 
                    0.5850459933280945, 0.55536288022995, 
                    0.2275981903076172}, {-0.45424148440361023`, \
-1.0565913915634155`, 
                    0.9683523178100586, -0.6303821206092834}, \
{-0.75920170545578, -0.9600221514701843, -0.5091850757598877, 
                    1.1499882936477661`}, {-1.1887308359146118`, \
-0.31259822845458984`, 0.8612467050552368, 0.24493707716464996`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.2655591368675232, -0.0065243481658399105`, 
                    0.021921809762716293`, 0.014092521741986275`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.19533894956111908`, -1.0829535722732544`, 
                    0.9076451659202576, 
                    0.7930638790130615}, {-0.16771440207958221`, 
                    1.153153419494629, 
                    0.2588096559047699, -0.39757826924324036`}, {
                    0.42902880907058716`, -0.5507331490516663, \
-0.8617340326309204, -1.2063547372817993`}, {-0.9219340682029724, \
-1.0360429286956787`, -1.0778638124465942`, 0.49378475546836853`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0036274082958698273`, -0.07150954008102417, \
-0.14796485006809235`, -0.008579540997743607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2615041136741638, 
                    0.21138696372509003`, -0.9717984199523926, \
-0.39667075872421265`}, {-0.4116203188896179, 
                    0.5252212882041931, -0.4073011875152588, \
-0.8352898955345154}, {0.569722592830658, 0.043254997581243515`, 
                    1.390390396118164, 
                    1.1961472034454346`}, {-0.2173124998807907, 
                    1.1219031810760498`, -0.05218074470758438, \
-0.5121939182281494}}], "Biases" -> 
                    RawArray["Real32",{
                    0.1688094139099121, -0.015401605516672134`, \
-0.047859013080596924`, -0.023609118536114693`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.4043121337890625`, 
                    0.989319920539856, 0.8493707180023193, 
                    0.3664087951183319}, {-0.00433536758646369, \
-1.148911952972412, 
                    0.8351345658302307, -0.5400360822677612}, \
{-0.5725638270378113, 
                    0.5460139513015747, -0.001732580829411745, \
-0.7900643944740295}, {-0.6436707973480225, -0.3394011855125427, \
-1.2217543125152588`, -0.8703947067260742}}], "Biases" -> 
                    RawArray["Real32",{
                    0.03309731185436249, -0.061290040612220764`, \
-0.003327625570818782, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7225061655044556, 
                    0.7556267976760864, 
                    0.2262432724237442, -0.1884404867887497}, \
{-0.36302366852760315`, -0.2926149070262909, -0.7215145826339722, 
                    0.20516319572925568`}, {0.7662841081619263, 
                    0.3093644082546234, 0.1925813853740692, 
                    0.39481011033058167`}, {-0.16232548654079437`, 
                    0.8706628680229187, -1.236894130706787, \
-0.8296151161193848}}], "Biases" -> 
                    RawArray["Real32",{0.01828683353960514, 0., 
                    0.15081633627414703`, -0.45662227272987366`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7094109654426575, -0.700827419757843, 
                    0.5683406591415405, 
                    0.3210662305355072}, {-1.219648838043213, 
                    0.5808302164077759, -0.19560769200325012`, \
-0.6605221629142761}, {-0.3890421986579895, -0.03711126372218132, 
                    0.6946619153022766, -0.993706464767456}, {
                    0.6287885904312134, 0.7380457520484924, 
                    0.08613798022270203, 1.0832852125167847`}}], "Biases" -> 
                    RawArray["Real32",{0.23517915606498718`, 0., 
                    0.14619426429271698`, 0.09177739173173904}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.21444521844387054`, -0.7537563443183899, 
                    0.8711041808128357, 
                    0.8564229011535645}, {-0.007904307916760445, \
-0.5445233583450317, 0.4207858741283417, 
                    0.0682104229927063}, {-0.3529924750328064, \
-0.5852335691452026, -0.21044248342514038`, 0.003850610926747322}, {
                    0.08303238451480865, 
                    0.5906074643135071, -0.15651191771030426`, 
                    0.25543975830078125`}}], "Biases" -> 
                    RawArray["Real32",{-0.0009580579353496432, 
                    0., -0.013556385412812233`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.04379437118768692, 1., 
                    0.04486582428216934, 1.}], "Biases" -> 
                    RawArray["Real32",{0.4153086245059967, 0., 
                    0.1518605500459671, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.520790696144104, 
                    0.11277378350496292`, -0.12201576679944992`, 
                    0.10225825011730194`}], "MovingVariance" -> 
                    RawArray["Real32",{0.06241406872868538, 
                    0.0012842623982578516`, 0.0028616664931178093`, 
                    0.009552285075187683}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.0055826902389526`, -0.9614297151565552}, {
                    0.9427697658538818, -0.7433678507804871}, \
{-0.4351021945476532, 0.04881863296031952}, {-0.9517213106155396, 
                    0.9961529970169067}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.19117866456508636`, 
                    0.27121517062187195`, -0.1893296241760254, \
-0.4572905898094177}, {0.708571195602417, 0.16505128145217896`, 
                    1.0478155612945557`, -0.656966507434845}, {
                    0.29914435744285583`, -0.7274119257926941, 
                    1.0795044898986816`, -0.7368828058242798}, {
                    0.6509546637535095, -0.9017858505249023, 
                    0.14681188762187958`, -0.6649592518806458}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.46432384848594666`, 
                    0.908102810382843, 1.0478026866912842`, 
                    0.8622851967811584}, {-0.21355552971363068`, \
-0.2557402551174164, -1.1127070188522339`, 
                    0.6246770024299622}, {-0.7064324021339417, \
-0.29214048385620117`, -0.30093252658843994`, -0.7913140058517456}, \
{-0.2682134807109833, -1.0217411518096924`, -1.0430132150650024`, 
                    1.1392306089401245`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6836269497871399, -0.30448874831199646`, \
-0.5775110125541687, 
                    0.4721684455871582}, {-0.570763349533081, \
-0.8921632170677185, 
                    0.4863985776901245, -1.2229053974151611`}, \
{-0.4215686619281769, -0.9302003383636475, -0.7996142506599426, 
                    1.215777039527893}, {-0.6872756481170654, \
-0.6428603529930115, 0.386488676071167, -0.9340691566467285}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.531825840473175, 
                    1.0124754905700684`, -0.9074230194091797, \
-0.7805092334747314}, {
                    1.098265528678894, -0.24796715378761292`, \
-0.11630570888519287`, -0.8168771266937256}, {
                    0.8796766996383667, -0.18376733362674713`, \
-0.03014848753809929, 0.46239835023880005`}, {
                    0.8197591304779053, -0.939045786857605, \
-0.5731520652770996, -0.3073666989803314}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.06325596570968628, 
                    1.1152753829956055`, -0.6454733610153198, 
                    0.887650191783905}, {0.5683873295783997, 
                    0.2518492341041565, -0.9079412817955017, \
-0.963146984577179}, {0.13283513486385345`, 
                    0.7189369797706604, -0.33037254214286804`, 
                    0.0840630754828453}, {0.07897438108921051, 
                    0.08171245455741882, -0.33058255910873413`, 
                    0.11540823429822922`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.4389474391937256, 
                    0.7196488976478577, 0.09832611680030823, 
                    0.6244978308677673}, {-0.3684132695198059, \
-0.5929128527641296, -0.20331576466560364`, 
                    1.0255637168884277`}, {-0.1422601044178009, 
                    0.8687633872032166, -0.3134025037288666, \
-0.8768927454948425}, {-0.3123319447040558, 0.13173586130142212`, 
                    1.1398409605026245`, -0.04513677582144737}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.28371381759643555`, -0.022410541772842407`, \
-0.7774190902709961, 0.5423662662506104}, {
                    0.4330427944660187, -0.6156600117683411, 
                    0.3195442855358124, -0.852202832698822}, {
                    0.4456996023654938, 0.6105488538742065, 
                    0.7942044138908386, 
                    0.6567155122756958}, {-0.33267030119895935`, 
                    0.09951091557741165, 0.2645964026451111, 
                    0.2095808982849121}}], "Biases" -> 
                    RawArray["Real32",{0., 0.17369158565998077`, 0., 
                    0.09452357888221741}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.1056221723556519`, 1., 
                    0.9821265339851379}], "Biases" -> 
                    RawArray["Real32",{0., -0.010287722572684288`, 0., 
                    0.36241286993026733`}], "MovingMean" -> 
                    RawArray["Real32",{0., 0.1741284281015396, 0., 
                    0.09339499473571777}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.8957763910293579, 
                    0.3623362183570862}, {-0.174520343542099, 
                    0.9252927303314209}, {-0.1321897804737091, 
                    1.408540964126587}, {-0.429532915353775, 
                    0.6881443858146667}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9142180681228638, -0.3998311460018158, 
                    0.373794823884964, -0.8428809642791748}, \
{-1.013462781906128, -0.9153012633323669, 
                    1.2214096784591675`, -0.8198782205581665}, {
                    0.05613064020872116, -1.1520932912826538`, \
-0.2508637011051178, 1.1238369941711426`}, {0.9063417315483093, 
                    0.021235918626189232`, 1.1031527519226074`, 
                    0.7188641428947449}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.09319031983613968, 
                    1.0391968488693237`, 
                    0.270325243473053, -0.6375017166137695}, {
                    0.9597233533859253, -0.16874465346336365`, 
                    0.22008773684501648`, -1.0515003204345703`}, \
{-0.6845393776893616, -0.9731258153915405, -0.014127678237855434`, \
-0.6081287860870361}, {-1.1281071901321411`, -0.6320348381996155, \
-0.7507789731025696, -0.836697518825531}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.1619548201560974, 
                    0.6321669816970825, -0.12518945336341858`, \
-0.8754209280014038}, {0.42449310421943665`, 0.09920264780521393, 
                    1.120271921157837, -0.2694827914237976}, {
                    0.7911468744277954, 
                    0.107190802693367, -0.15914228558540344`, \
-0.7212669253349304}, {
                    0.45065775513648987`, -0.7895684242248535, \
-0.5509428977966309, -0.7949679493904114}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.7017349004745483, -0.5246540307998657, 
                    0.44179415702819824`, 
                    0.9635450839996338}, {-1.0937368869781494`, 
                    0.3026067614555359, 0.6850050687789917, 
                    0.3425700068473816}, {-0.1728016585111618, \
-0.728571355342865, -0.5919033288955688, 
                    0.519510805606842}, {-0.3456636965274811, \
-0.5398943424224854, 1.1310919523239136`, -0.7293530106544495}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.3090231418609619, -1.064344882965088, 
                    0.8869056701660156, 0.5164023041725159}, {
                    1.1150511503219604`, 
                    1.074715256690979, -1.0552726984024048`, 
                    0.646506130695343}, {-0.9056016802787781, \
-0.989912748336792, -0.6263928413391113, 0.06015612930059433}, {
                    1.0773271322250366`, 
                    0.3191694915294647, -0.6086782813072205, \
-1.1192924976348877`}}], "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9385467171669006, -0.9668304920196533, \
-0.26482826471328735`, -0.07200281322002411}, {-0.7782991528511047, \
-0.7488662004470825, -0.847709059715271, 
                    0.68807452917099}, {-0.8480285406112671, 
                    0.22617769241333008`, 
                    0.7120975255966187, -1.198423147201538}, \
{-1.0725282430648804`, 1.0682932138442993`, 
                    0.7012400031089783, -0.7183460593223572}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.5295577049255371, 
                    0.3512469232082367, 
                    0.2275642305612564, -0.06166284903883934}, \
{-0.7875308990478516, -0.5696789622306824, -0.6910265684127808, 
                    0.08407719433307648}, {0.25443747639656067`, 
                    0.8309063911437988, 0.7666983008384705, 
                    0.2845258116722107}, {-0.8493523001670837, 
                    0.3944772183895111, 0.11803640425205231`, 
                    0.08188746124505997}}], "Biases" -> 
                    RawArray["Real32",{-0.15906153619289398`, 0., 
                    0.017862647771835327`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.1062151193618774`, 1., 
                    1.0263330936431885`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.08614708483219147, 
                    0., -0.03560680150985718, 0.}], "MovingMean" -> 
                    RawArray["Real32",{-0.1589561104774475, 0., 
                    0.01827838644385338, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.23329117894172668`, 
                    0.43448686599731445`}, {-0.5498430132865906, \
-0.2333453744649887}, {
                    0.127238467335701, -0.3405781686306}, \
{-1.3462013006210327`, -1.2543599605560303`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.032579317688941956`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.1024048328399658`, 
                    0.7728956937789917, -0.06355833262205124, 
                    1.0792820453643799`}, {-0.6330763697624207, \
-0.6129856109619141, -0.6057496070861816, -0.7020090818405151}, {
                    0.3616458475589752, -0.8576364517211914, \
-0.05248260870575905, 0.8957068920135498}, {-0.8764091730117798, 
                    0.6311792731285095, 
                    0.5927261710166931, -0.298856258392334}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.03286946564912796}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.24815647304058075`, -0.37761324644088745`, \
-1.100022554397583, 
                    0.6481032371520996}, {-0.6488040685653687, \
-0.679099977016449, 
                    0.2214793711900711, -0.601083517074585}, \
{-1.1225425004959106`, 
                    1.0572394132614136`, -1.221137523651123, \
-0.21756841242313385`}, {-0.34284016489982605`, -0.961559534072876, \
-0.9971440434455872, -0.7323741912841797}}], "Biases" -> 
                    RawArray["Real32",{-0.0331658273935318, 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.2651151418685913, -0.8428170680999756, 
                    0.4288094937801361, -0.6984238624572754}, \
{-0.36055707931518555`, -0.40606963634490967`, 
                    0.18076859414577484`, -0.8186793923377991}, {
                    0.3470284640789032, -0.7862091660499573, 
                    1.0312302112579346`, -1.1828734874725342`}, \
{-0.7150039672851562, 0.02474166825413704, 0.4519364535808563, 
                    0.24253782629966736`}}], "Biases" -> 
                    RawArray["Real32",{0.04722980037331581, 
                    0., -0.07259402424097061, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.49899449944496155`, -1.1440858840942383`, \
-0.5056160688400269, -0.9733536243438721}, {-0.9348592758178711, \
-0.2542707324028015, 1.079600214958191, 
                    0.0029605808667838573`}, {-0.3890341520309448, \
-0.12657929956912994`, 0.02132675051689148, -0.4675881266593933}, {
                    0.5685173869132996, -0.45166826248168945`, \
-0.9953811764717102, -0.35574910044670105`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008726036176085472, -0.050475168973207474`, 
                    0., 0.01855863258242607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8794720768928528, 
                    0.45291027426719666`, -1.1260080337524414`, \
-0.4375465512275696}, {-0.5684416890144348, 
                    0.4649476706981659, -0.24840471148490906`, \
-0.28038305044174194`}, {-0.8279221653938293, 
                    0.4214527904987335, -0.2367471605539322, \
-1.2243705987930298`}, {-0.17251811921596527`, 0.9857721328735352, 
                    1.1452807188034058`, 0.36024707555770874`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011650129221379757`, -0.01572592556476593, \
-0.012774167582392693`, -0.030365219339728355`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.327743262052536, 
                    0.7532622814178467, 0.7607889175415039, 
                    1.1032756567001343`}, {-0.2636410892009735, \
-0.13159549236297607`, -0.22760000824928284`, -0.846391499042511}, {
                    0.08058207482099533, -0.8095343708992004, 
                    0.5150863528251648, 0.1342550665140152}, {
                    0.8215001821517944, 
                    0.5603652000427246, -0.7315725088119507, 
                    0.8480975031852722}}], "Biases" -> 
                    RawArray["Real32",{-0.026365989819169044`, 
                    0., -0.0005013612098991871, -0.044547807425260544`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.32944807410240173`, 
                    0.5410114526748657, -0.7933152914047241, \
-0.8292582631111145}, {0.4512331187725067, -0.12782202661037445`, 
                    0.023232072591781616`, 0.8463086485862732}, {
                    0.5111056566238403, 0.8652687668800354, 
                    0.7632277011871338, 0.24700802564620972`}, {
                    0.13815216720104218`, -0.7928653359413147, 
                    0.38433071970939636`, -0.7218269109725952}}], "Biases" -> 
                    RawArray["Real32",{0., -0.01726776547729969, 
                    0., -0.03475910797715187}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0376012325286865`, 1., 
                    0.952485203742981}], "Biases" -> 
                    RawArray["Real32",{0., 0.07142296433448792, 0., 
                    0.35761305689811707`}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-5.605193857299268*^-45, -0.017946388572454453`,
                     5.605193857299268*^-45, -0.034391891211271286`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.0272393226623535`, 
                    1.1851426362991333`}, {-1.1013171672821045`, 
                    1.3560041189193726`}, {-0.2645794451236725, 
                    0.8190812468528748}, {0.2288351058959961, 
                    0.5987197160720825}}], "Biases" -> 
                    RawArray["Real32",{0.020290987566113472`, 
                    0.02084389515221119, -0.020147942006587982`, \
-0.020126312971115112`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.24388974905014038`, 
                    0.4529878795146942, -1.1013665199279785`, \
-0.1728794127702713}, {
                    0.4499173164367676, -1.1148042678833008`, \
-0.5451153516769409, -0.17451262474060059`}, {-0.8063437938690186, \
-0.12459979951381683`, 1.1342663764953613`, 0.8231135010719299}, {
                    0.05881085246801376, -0.11509258300065994`, \
-1.204534888267517, 0.33516672253608704`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020205922424793243`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.32763224840164185`, -1.1029812097549438`, \
-1.1657968759536743`, 0.07768034934997559}, {
                    0.5615560412406921, -0.18220843374729156`, \
-0.6637734770774841, 1.1732587814331055`}, {0.5226121544837952, 
                    0.09836286306381226, 0.663692057132721, 
                    0.5882529020309448}, {-1.1400552988052368`, 
                    0.48360323905944824`, -0.0822700560092926, \
-0.4636894762516022}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020308714359998703`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.6304903030395508, -0.17651955783367157`, \
-0.46612972021102905`, 0.6061276793479919}, {-0.4681702256202698, 
                    0.5416781306266785, 
                    0.5326633453369141, -0.21141549944877625`}, {
                    0.095125213265419, 1.1963318586349487`, 
                    0.6131061911582947, 
                    0.16446593403816223`}, {-0.04447731375694275, 
                    0.8583840727806091, -0.6535158157348633, \
-0.8978548645973206}}], "Biases" -> 
                    RawArray["Real32",{0., -0.02120339125394821, 
                    0.02140180952847004, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.4623880088329315, 
                    0.9883906841278076, -0.6045739054679871, \
-0.1552111953496933}, {-0.6422726511955261, 
                    0.015349535271525383`, -0.8583002686500549, \
-0.9189561009407043}, {-0.6069546937942505, 
                    
                    0.2909195125102997, -0.3387618958950043, \
-0.2795550227165222}, {-1.1471445560455322`, -0.769105076789856, 
                    0.006018396466970444, 1.1222515106201172`}}], "Biases" -> 
                    RawArray["Real32",{-0.02127707563340664, 0., 
                    0., -0.0055557615123689175`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.03880154713988304, 
                    0.1930888295173645, -0.2744407653808594, 
                    0.9316576719284058}, {
                    1.04044508934021, -0.5252693295478821, 
                    1.1132738590240479`, -0.17558589577674866`}, {
                    0.23562754690647125`, -0.11817649751901627`, \
-0.8234222531318665, -0.994630753993988}, {
                    1.1251013278961182`, -0.18200336396694183`, 
                    0.7495065927505493, 0.5922220349311829}}], "Biases" -> 
                    RawArray["Real32",{-0.008491064421832561, 
                    
                    0.0037082810886204243`, -0.00048256112495437264`, \
-0.013342808000743389`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.5927290916442871, -0.5807473659515381, 
                    0.04569912701845169, 0.5453850030899048}, {
                    0.3536730706691742, -0.3382004201412201, 
                    0.3208562731742859, -1.1065701246261597`}, \
{-0.043284542858600616`, 0.31835034489631653`, 0.22545592486858368`, 
                    1.1699867248535156`}, {0.4927527606487274, 
                    0.26720207929611206`, -0.5632683038711548, \
-0.3714267313480377}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008471638895571232, -0.006288113072514534, \
-0.024764614179730415`, -0.002935498021543026}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8400803208351135, -0.2918619215488434, \
-0.36224615573883057`, -0.4248539209365845}, {0.21804450452327728`, 
                    0.6871101260185242, -0.09039194136857986, 
                    0.6381481289863586}, {-0.017969254404306412`, \
-0.2533146142959595, -0.5403133630752563, -0.6244195699691772}, \
{-0.557862401008606, -0.3409421443939209, -0.08292922377586365, 
                    0.37390872836112976`}}], "Biases" -> 
                    RawArray["Real32",{0.14098723232746124`, 
                    0., -0.1755669116973877, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.0340676307678223`, 1., 
                    0.9480414390563965, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.11188255250453949`, 
                    0., -0.03459589555859566, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.14253473281860352`, 
                    5.605193857299268*^-45, -0.17651954293251038`, 
                    5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.6247974634170532, 
                    1.0719972848892212`}, {-0.8147713541984558, \
-0.951488196849823}, {0.4458984434604645, 
                    1.009402871131897}, {-0.6509699821472168, 
                    0.6131016612052917}}], "Biases" -> 
                    RawArray["Real32",{-0.30463317036628723`, 
                    0.23118887841701508`, 
                    0.06617609411478043, -0.30046290159225464`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.308014988899231, 
                    0.41012367606163025`, 
                    1.1328684091567993`, -0.6759518980979919}, \
{-0.06172512471675873, -0.27633190155029297`, 1.1597766876220703`, 
                    1.054457664489746}, {
                    1.1483964920043945`, -1.1610616445541382`, \
-0.32596054673194885`, 1.2034265995025635`}, {
                    0.2506335377693176, -0.5807443261146545, 
                    0.09045513719320297, -0.3083084225654602}}], "Biases" -> 
                    RawArray["Real32",{
                    0.024193117395043373`, -0.22505512833595276`, \
-0.05639704689383507, 0.3493075966835022}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.2778819501399994, 
                    0.7496756315231323, 1.0025731325149536`, 
                    0.5138924717903137}, {-0.7969806790351868, \
-0.2784910798072815, -0.546769380569458, 0.6271833777427673}, {
                    0.5501472353935242, 1.320475697517395, 0.7035324573516846,
                     1.2081241607666016`}, {0.9598748087882996, 
                    0.6415534615516663, -1.3248586654663086`, 
                    0.24694617092609406`}}], "Biases" -> 
                    RawArray["Real32",{-0.17849385738372803`, 
                    0.2985064685344696, -0.1312658190727234, 
                    0.1636054366827011}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.2408421039581299`, 
                    0.6402130722999573, -0.5636037588119507, 
                    0.7157518267631531}, {
                    0.7387978434562683, -1.0216920375823975`, 
                    0.22834144532680511`, 0.30655571818351746`}, {
                    0.5690512657165527, -0.35685232281684875`, \
-0.41032058000564575`, -1.1276694536209106`}, {0.022032486274838448`, 
                    0.18081532418727875`, -0.7020317912101746, 
                    0.533079206943512}}], "Biases" -> 
                    RawArray["Real32",{
                    0.13038139045238495`, -0.26013192534446716`, \
-0.03431916981935501, 0.26744359731674194`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.884698212146759, -0.9137963056564331, \
-0.6820396184921265, -1.1969163417816162`}, {1.02857506275177, 
                    0.6642537713050842, 0.028140507638454437`, 
                    0.06875970214605331}, {-0.09183403104543686, 
                    0.0021497849375009537`, -0.2629159390926361, \
-0.16911469399929047`}, {0.6566782593727112, 0.6675363183021545, 
                    0.553555428981781, 1.0056182146072388`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.05621147155761719, -0.010769825428724289`, 
                    0.07819464057683945}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2057257890701294`, 
                    0.24814435839653015`, 1.1151946783065796`, 
                    0.49364256858825684`}, {-0.34746411442756653`, 
                    0.6987231373786926, 0.943751871585846, 
                    0.7946571707725525}, {
                    0.46374526619911194`, -0.4114575982093811, 
                    0.6955560445785522, 
                    0.3322679400444031}, {-0.47509536147117615`, \
-1.0886939764022827`, 0.07419174164533615, 0.6524626612663269}}], "Biases" -> 
                    RawArray["Real32",{
                    0.013026686385273933`, -0.007407285738736391, 
                    0.11372725665569305`, -0.07177607715129852}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.723952054977417, 
                    0.631230354309082, 0.07747747749090195, 
                    0.4074034094810486}, {-1.197285771369934, \
-0.5476441979408264, -0.5596575736999512, 
                    1.183302879333496}, {-0.8752565979957581, \
-0.4132252037525177, 0.293244332075119, 0.21619480848312378`}, {
                    0.4112408757209778, -0.07134272903203964, 
                    0.25418463349342346`, 0.15527468919754028`}}], "Biases" -> 
                    RawArray["Real32",{0.06009580194950104, 0., 0., 
                    0.009850728325545788}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.6709763407707214, -0.8419735431671143, \
-0.6108553409576416, 
                    0.31385189294815063`}, {-0.3921840488910675, \
-0.27944886684417725`, -0.44053006172180176`, 
                    0.30910852551460266`}, {-0.07277870178222656, 
                    0.5416227579116821, -0.749184787273407, \
-0.22155964374542236`}, {-0.03492600470781326, -0.5857563018798828, \
-0.289907842874527, -0.40806424617767334`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.03365085646510124, 0., 
                    0.04534592106938362}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.51395183801651, 1., 
                    0.9517407417297363}], "Biases" -> 
                    RawArray["Real32",{0., 0.2162855863571167, 
                    0., -0.33053067326545715`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.2486773431301117, -0.09127230942249298, \
-0.06003804877400398, -0.03530314937233925}], "MovingVariance" -> 
                    RawArray["Real32",{0.004154358524829149, 
                    0.00032402551732957363`, 0.00022630792227573693`, 
                    0.00040684040868654847`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.0232733488082886`, 
                    0.4123275578022003}, {-0.42913058400154114`, \
-0.7507485747337341}, {-0.6771546006202698, -0.42921799421310425`}, \
{-1.1501773595809937`, -0.5237459540367126}}], "Biases" -> 
                    RawArray["Real32",{-0.06611915677785873, 
                    0.38374435901641846`, -0.21494361758232117`, \
-0.08891620486974716}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.938681423664093, 
                    0.5236425399780273, -0.4462301731109619, 
                    0.7413621544837952}, {
                    0.36929574608802795`, -0.5489752292633057, \
-0.3339131772518158, 0.44864922761917114`}, {-0.6584511995315552, 
                    0.2634795606136322, 
                    1.1334044933319092`, -0.7523109912872314}, \
{-0.03542015701532364, -0.8779085874557495, -0.809063196182251, 
                    0.03728779777884483}}], "Biases" -> 
                    RawArray["Real32",{-0.10400308668613434`, 
                    0.2816414535045624, -0.09269170463085175, \
-0.004481355659663677}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.24621422588825226`, 
                    0.985656201839447, 0.09558389335870743, 
                    1.2012335062026978`}, {
                    0.7117063999176025, -0.4811817705631256, \
-0.2930569648742676, -0.07616393268108368}, {1.1045162677764893`, 
                    0.2911427617073059, -0.34115180373191833`, \
-0.8265060782432556}, {-0.9755216836929321, 0.4526450037956238, 
                    0.43766549229621887`, 0.5006574988365173}}], "Biases" -> 
                    RawArray["Real32",{0.013371359556913376`, 
                    0.04690810665488243, -0.03512047231197357, \
-0.1534721404314041}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9985904693603516, 
                    0.3187827467918396, -1.0587326288223267`, \
-1.0089114904403687`}, {
                    0.43743884563446045`, -0.15510369837284088`, \
-0.9138410687446594, 0.3631367087364197}, {
                    0.9080770611763, -0.3844505250453949, 
                    0.6118550896644592, -0.5183600187301636}, {
                    0.6724507212638855, 0.93711918592453, 0.4640797972679138, 
                    0.9890212416648865}}], "Biases" -> 
                    RawArray["Real32",{
                    0.027951490134000778`, -0.10686809569597244`, 
                    0.013608737848699093`, -0.06892822682857513}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2668100893497467, 
                    0.15058819949626923`, -1.1104614734649658`, 
                    0.03640010580420494}, {-0.13042515516281128`, 
                    0.7564303874969482, 
                    0.006577329710125923, -0.6690428853034973}, \
{-0.5001853704452515, 0.4691876769065857, 
                    0.7996487021446228, -0.14533911645412445`}, {
                    0.4526841938495636, 0.8468631505966187, 
                    0.09007269889116287, -0.23484553396701813`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0052228025160729885`, -0.005015995819121599, 
                    0.04361181706190109, 0.20404070615768433`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.1011145114898682`, 
                    0.7110188603401184, 0.5675764083862305, 
                    0.9290199875831604}, {
                    0.22922439873218536`, -0.3610682487487793, 
                    0.17099426686763763`, 0.6951537132263184}, {
                    0.3940970301628113, 0.389936625957489, 
                    0.21339713037014008`, -0.9525924921035767}, {
                    0.40970227122306824`, -0.8975924849510193, 
                    1.0971708297729492`, 0.16968782246112823`}}], "Biases" -> 
                    RawArray["Real32",{0.0006359686376526952, 
                    0.025261353701353073`, -0.20041799545288086`, \
-0.0014764054212719202`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6824387907981873, 
                    0.1007201224565506, -0.13071443140506744`, \
-0.9145658612251282}, {-0.2611132264137268, -0.4049318730831146, \
-0.3291284143924713, -0.40765678882598877`}, {0.4567570090293884, 
                    0.23558172583580017`, 0.21312430500984192`, 
                    0.0910617858171463}, {0.15193194150924683`, 
                    0.8316170573234558, -0.14471234381198883`, \
-0.26284971833229065`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0.00010937114711850882`, 
                    0.01756111904978752}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5749830007553101, -0.5930800437927246, 
                    0.07424910366535187, 0.11974163353443146`}, {
                    0.5756600499153137, 0.14637413620948792`, 
                    0.6387523412704468, -0.14677976071834564`}, {
                    0.6429774165153503, 0.32796573638916016`, 
                    0.5578079223632812, -0.08706668764352798}, {
                    0.7294813394546509, -0.5185415148735046, \
-0.3751922845840454, -0.19885247945785522`}}], "Biases" -> 
                    RawArray["Real32",{0.10288982093334198`, 
                    0., -0.053429532796144485`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.7660358548164368, 1., 
                    0.6746312379837036, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.1611233502626419, 
                    0., -0.16056616604328156`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.1324150562286377, 
                    0.14110837876796722`, 
                    0.07327874004840851, -0.11011964827775955`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00007790406380081549, 
                    0.004116098862141371, 0.0031010578386485577`, 
                    0.001395107712596655}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6084913015365601, 
                    0.34091585874557495`}, {
                    0.35409799218177795`, -0.7107595205307007}, \
{-0.47736838459968567`, 1.3376765251159668`}, {
                    1.0174744129180908`, -0.40096160769462585`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.08730413764715195, -0.30411016941070557`, 
                    0.08460777997970581, 0.1346454918384552}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7835296988487244, -0.2876985967159271, \
-0.7150038480758667, -0.441653847694397}, {-0.6377336978912354, 
                    2.105273485183716, 0.03946137800812721, 
                    0.962832510471344}, {-0.5244331359863281, \
-0.6607128381729126, 
                    0.8806125521659851, -0.4075981080532074}, \
{-0.0207088440656662, -0.8347008228302002, -0.21375447511672974`, \
-1.024819254875183}}], "Biases" -> 
                    RawArray["Real32",{0., 0.10184445232152939`, 
                    0.2095145285129547, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.25878214836120605`, -0.6802108287811279, 
                    0.23190860450267792`, -0.5543636083602905}, \
{-1.0917338132858276`, -0.141453817486763, -0.7815151810646057, \
-1.0538750886917114`}, {-0.9915717244148254, 1.0146677494049072`, 
                    0.46070724725723267`, 1.2237516641616821`}, {
                    0.18021562695503235`, -1.0064103603363037`, 
                    0.028769556432962418`, 1.207274317741394}}], "Biases" -> 
                    RawArray["Real32",{-0.17457066476345062`, 0., 
                    0.14317403733730316`, -0.03311567381024361}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7010096907615662, 
                    0.5386219024658203, 0.13931305706501007`, 
                    1.0312293767929077`}, {
                    0.7909489870071411, -0.42114776372909546`, 
                    0.24118812382221222`, -0.9541829228401184}, {
                    0.48835626244544983`, -0.46471327543258667`, 
                    0.619662880897522, 
                    0.6258669495582581}, {-0.99852454662323, \
-0.3097281754016876, 0.25753268599510193`, -0.12958447635173798`}}], "Biases" -> 
                    RawArray["Real32",{0.05355251580476761, 
                    0.05030385032296181, 
                    0.12225575000047684`, -0.05507795140147209}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7661686539649963, 
                    0.7926455140113831, -1.0148553848266602`, \
-0.2221817821264267}, {0.6779279708862305, 0.4717486798763275, 
                    0.6864776611328125, -1.1918736696243286`}, {
                    0.7604702711105347, 
                    1.1436012983322144`, -0.9900761842727661, \
-0.9546067714691162}, {0.14667591452598572`, 
                    0.5370497703552246, -0.7491148114204407, 
                    0.08863148838281631}}], "Biases" -> 
                    RawArray["Real32",{-0.005557596683502197, 
                    0.08889354765415192, -0.039164479821920395`, \
-0.00436381995677948}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6535167694091797, 
                    0.9468663334846497, -0.6574264168739319, \
-0.5250082015991211}, {-1.0625808238983154`, -0.00959259457886219, 
                    1.0252410173416138`, -0.7745680212974548}, \
{-0.7256602048873901, -0.15038423240184784`, 
                    1.0325127840042114`, -0.8182397484779358}, \
{-0.7448923587799072, 
                    0.2248680740594864, -0.4737423360347748, \
-1.117297887802124}}], "Biases" -> 
                    RawArray["Real32",{
                    0.006623828783631325, -0.030691642314195633`, \
-0.005555391777306795, 0.02767174318432808}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.4338841438293457, 
                    0.02327045425772667, 
                    0.003029894083738327, -0.8972814679145813}, \
{-0.2538984417915344, -0.8802012801170349, 0.6719919443130493, 
                    1.069201946258545}, {
                    0.1005774438381195, -0.8963965773582458, \
-0.9779155254364014, -0.4103488326072693}, {-0.23362062871456146`, \
-0.38641712069511414`, 0.3283616006374359, 0.06959308683872223}}], "Biases" -> 
                    RawArray["Real32",{0.06830772012472153, 
                    0.08361774682998657, -0.0053450302220880985`, \
-0.006242052186280489}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7368323802947998, 
                    0.8498879671096802, -0.4320899248123169, 
                    0.8462148904800415}, {0.581718385219574, 
                    0.09062107652425766, 
                    0.7757717967033386, -0.22117385268211365`}, \
{-0.5401679873466492, 0.4012470841407776, -0.3824312686920166, 
                    0.21749524772167206`}, {-0.3506982624530792, \
-0.05828291177749634, -0.6220205426216125, 0.7043546438217163}}], "Biases" -> 
                    RawArray["Real32",{0., -0.0989883542060852, 0., 
                    0.034546662122011185`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0943498611450195`, 1., 
                    0.5707899332046509}], "Biases" -> 
                    RawArray["Real32",{0., -0.011473491787910461`, 0., 
                    0.02301899343729019}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.016649531200528145`, \
-0.0011380029609426856`, -0.036924321204423904`, -0.02508625201880932}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00038284322363324463`, 
                    0.0002371612936258316, 0.0002056993980659172, 
                    0.00008736725430935621}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_3" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2269245386123657`, 
                    0.5300783514976501}, {-1.0680961608886719`, 
                    1.2279157638549805`}, {-0.9560098648071289, \
-0.6157021522521973}, {-1.3427678346633911`, -0.5092048645019531}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.055263977497816086`, -0.0357687771320343, 
                    0.009987019933760166, -0.409896582365036}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2102319300174713, 
                    0.7911170721054077, 0.7531107068061829, 
                    0.05388656258583069}, {
                    0.7294581532478333, -1.0154672861099243`, \
-0.8989071249961853, -0.8402823805809021}, {0.8225075602531433, 
                    1.0055885314941406`, -0.8146655559539795, 
                    0.14929859340190887`}, {
                    0.3443886935710907, -0.23406171798706055`, 
                    0.648874044418335, -0.974784791469574}}], "Biases" -> 
                    RawArray["Real32",{
                    0.10877753049135208`, -0.10987579822540283`, \
-0.05968782678246498, 0.007396911736577749}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5818372368812561, 
                    0.6368904113769531, -0.6741195321083069, \
-0.9550532102584839}, {-0.9334428906440735, -0.2268291413784027, \
-1.1252663135528564`, 1.0908485651016235`}, {
                    0.49197691679000854`, -0.903556227684021, 
                    0.16529005765914917`, 
                    0.7606364488601685}, {-0.060122277587652206`, \
-0.559829831123352, -0.7184230089187622, 0.19126306474208832`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.09598984569311142, 
                    0.11792483925819397`, -0.0518016554415226}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.05107980966567993, -0.5076199173927307, 
                    0.8656588792800903, 1.169507384300232}, {
                    0.043214909732341766`, -0.12430473417043686`, 
                    1.0353971719741821`, 
                    0.2244076430797577}, {-0.004986797459423542, 
                    
                    0.7752837538719177, -0.08317965269088745, \
-0.519730269908905}, {-0.1021399050951004, 
                    0.12337113171815872`, -0.1672910451889038, \
-0.06014348939061165}}], "Biases" -> 
                    RawArray["Real32",{-0.07721059769392014, 
                    0.09335753321647644, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5864083170890808, -1.1515958309173584`, \
-0.9700015187263489, -1.0751793384552002`}, {-0.44147804379463196`, 
                    0.904954195022583, -0.572465717792511, \
-0.07864737510681152}, {0.8050349950790405, -1.1519731283187866`, 
                    0.5112066864967346, 
                    0.06149987503886223}, {-0.2646709978580475, 
                    0.6335101127624512, -0.013110958971083164`, \
-0.9270269870758057}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.02993219904601574, -0.005128767807036638, 
                    0.016426386311650276`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.3305329382419586, -1.0482378005981445`, \
-0.1924656182527542, -0.7495168447494507}, {
                    0.47665491700172424`, -0.5365244150161743, 
                    1.124621868133545, 0.6901269555091858}, {
                    1.1700797080993652`, 0.4269246757030487, 
                    1.1931535005569458`, 0.17938324809074402`}, {
                    0.3727201223373413, 
                    0.7936676144599915, -1.1791568994522095`, 
                    0.9097337126731873}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.007643654942512512, -0.08279790729284286, 
                    0.09779099375009537}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.41163170337677, 
                    1.0882995128631592`, 
                    0.0033295280300080776`, -0.19062167406082153`}, {
                    1.1305721998214722`, -0.7240346670150757, \
-0.5251972675323486, -0.7583861947059631}, {-0.9256356954574585, \
-0.7151260375976562, -0.14005182683467865`, 
                    0.4736833870410919}, {-0.78333580493927, 
                    0.30321186780929565`, -0.9420959949493408, \
-0.8564635515213013}}], "Biases" -> 
                    RawArray["Real32",{-0.07011282444000244, 0., 
                    0.03244610130786896, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7035068273544312, 
                    0.18534383177757263`, 0.0613018162548542, 
                    0.11431510001420975`}, {
                    0.4332052171230316, -0.5943752527236938, \
-0.8540732860565186, -0.13494515419006348`}, {-0.21640744805335999`, 
                    0.8409658670425415, -0.45774969458580017`, 
                    0.2688940465450287}, {
                    0.16293755173683167`, -0.7081860303878784, \
-0.43753185868263245`, 0.13354924321174622`}}], "Biases" -> 
                    RawArray["Real32",{0.006494243163615465, 
                    0., -0.055063627660274506`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.046222977340221405`, 1., 
                    1.0855382680892944`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.4094805121421814, 0., 
                    0.3329516053199768, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.037118829786777496`, -0.42928051948547363`, \
-0.28365957736968994`, -0.21991543471813202`}], "MovingVariance" -> 
                    RawArray["Real32",{0.00012735245400108397`, 
                    0.025137698277831078`, 0.007188437506556511, 
                    0.006597123574465513}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2642930746078491`, 
                    0.8268188238143921}, {-0.5022134184837341, 
                    0.5101158618927002}, {-1.3381139039993286`, 
                    1.166893720626831}, {0.4878425598144531, 
                    0.20256587862968445`}}], "Biases" -> 
                    RawArray["Real32",{-0.17179343104362488`, 
                    0.08783379197120667, 
                    0.06922435760498047, -0.2568233013153076}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.32112014293670654`, -1.063812017440796, \
-2.908308267593384, -0.48695436120033264`}, {-0.9814897179603577, \
-0.32749828696250916`, -0.28614771366119385`, -0.8372399806976318}, {
                    0.3182300329208374, 
                    0.1996791958808899, -0.3122684061527252, 
                    0.7359107136726379}, {1.2977542877197266`, 
                    0.28099775314331055`, -1.060470461845398, \
-0.36558130383491516`}}], "Biases" -> 
                    RawArray["Real32",{0.22945696115493774`, 0., 
                    0.3949333429336548, 0.16519878804683685`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7585293650627136, -1.1807243824005127`, 
                    0.6534357070922852, -0.26351964473724365`}, \
{-1.112922191619873, 0.17868958413600922`, 
                    1.4414318799972534`, -1.1912803649902344`}, {
                    0.31313610076904297`, 
                    0.05311939865350723, -0.7185114026069641, 
                    1.1544849872589111`}, {0.7256407141685486, 
                    0.9326233267784119, 0.028320958837866783`, 
                    0.2747834324836731}}], "Biases" -> 
                    RawArray["Real32",{0.2263377159833908, 
                    0.09536410123109818, 
                    0.23931525647640228`, -0.015928028151392937`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9092296957969666, 
                    0.7737902402877808, -0.5791275501251221, 
                    0.007331222761422396}, {-0.3860591948032379, 
                    0.7988179326057434, 0.483842134475708, 
                    0.7352887988090515}, {
                    0.19772590696811676`, -1.0622608661651611`, \
-0.7747647166252136, 0.07980397343635559}, {
                    0.5633371472358704, -0.814481258392334, \
-0.4070219397544861, -1.0397902727127075`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.26312559843063354`, -0.09947662800550461, \
-0.020687200129032135`, -0.03377986699342728}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2686201333999634`, 
                    0.24814386665821075`, -0.27694377303123474`, 
                    0.5479679107666016}, {0.0696205124258995, 
                    1.102692723274231, 
                    1.0082558393478394`, -0.8493449091911316}, \
{-0.12962917983531952`, -0.6112529039382935, -1.1061062812805176`, 
                    
                    0.1692829132080078}, {-0.17391467094421387`, \
-1.1689257621765137`, 0.9973315596580505, -0.7050062417984009}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.093745157122612, -0.05702408775687218, 0., 
                    0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.7096297740936279, -0.3120685815811157, 
                    1.0470035076141357`, 0.19487692415714264`}, {
                    0.009518268518149853, -0.9735857844352722, 
                    0.15269295871257782`, 
                    0.2565949261188507}, {-0.11307663470506668`, \
-1.1760481595993042`, 
                    1.039278507232666, -0.01588474214076996}, \
{-0.8765694499015808, 
                    1.1391587257385254`, -1.179132342338562, \
-0.9810775518417358}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.09613307565450668, -0.031668826937675476`, 
                    0., -0.03938092663884163}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5577342510223389, -1.0093947649002075`, \
-0.41194576025009155`, -0.3543873131275177}, {1.0553799867630005`, 
                    1.1880255937576294`, -0.30832621455192566`, \
-0.4425933361053467}, {-1.3836721181869507`, 0.09204135090112686, 
                    0.8451066017150879, 0.22725027799606323`}, {
                    0.7735462784767151, 
                    0.21771612763404846`, -0.5773540735244751, \
-1.2089533805847168`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.8894547820091248, -0.4685942828655243, \
-0.20228110253810883`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.07895833253860474, 
                    0.3609413206577301, 0.4526773691177368, 
                    0.37655872106552124`}, {
                    0.8290538191795349, -0.023191213607788086`, \
-0.12195669859647751`, -0.31643494963645935`}, {
                    0.7179055213928223, -0.08120162039995193, \
-0.26662132143974304`, -0.5745231509208679}, {
                    0.11935969442129135`, -0.5377625226974487, \
-0.52306067943573, 0.5917158126831055}}], "Biases" -> 
                    RawArray["Real32",{0., 0.037078045308589935`, 
                    0., -0.022038575261831284`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.8302268981933594, 1., 
                    1.316287636756897}], "Biases" -> 
                    RawArray["Real32",{0., 0.15166693925857544`, 
                    0., -0.45056086778640747`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.39726001024246216`, -0.0194294061511755, \
-0.14308758080005646`, -0.48614558577537537`}], "MovingVariance" -> 
                    RawArray["Real32",{0.05312395840883255, 
                    0.002626831643283367, 0.01282864436507225, 
                    0.04547467827796936}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8055242896080017, -0.5046042799949646}, \
{-1.0678335428237915`, -0.9697098135948181}, {-0.561033308506012, \
-0.8877573609352112}, {0.9595621824264526, -0.0500657856464386}}], "Biases" -> 
                    RawArray["Real32",{0.33588457107543945`, 
                    0.07756032794713974, -0.09569449722766876, \
-0.11187814921140671`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.32993894815444946`, 
                    0.5002012252807617, -0.49956807494163513`, 
                    0.40580034255981445`}, {
                    0.07131551206111908, -0.16277313232421875`, \
-1.1159601211547852`, 1.1482741832733154`}, {1.2370935678482056`, 
                    1.6028075218200684`, -0.42574992775917053`, \
-0.755722165107727}, {-0.5497583150863647, 
                    0.5320141911506653, -1.025053858757019, 
                    0.9358385801315308}}], "Biases" -> 
                    RawArray["Real32",{-0.037944987416267395`, 
                    0.22707660496234894`, 
                    0.007558062672615051, -0.03027201071381569}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.1833183318376541, -0.5434562563896179, 
                    0.35900264978408813`, 
                    0.6587458252906799}, {-0.15809792280197144`, 
                    0.8733894228935242, -0.9908549785614014, 
                    1.045094609260559}, {0.7978456616401672, 
                    0.35350021719932556`, -0.2868674695491791, \
-1.0262768268585205`}, {-0.7124864459037781, 
                    1.0488007068634033`, -0.5228165984153748, 
                    0.926790177822113}}], "Biases" -> 
                    RawArray["Real32",{-0.04258950427174568, 
                    0.17276756465435028`, -0.12131209671497345`, 
                    0.27382320165634155`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.05914736166596413, 
                    0.47175294160842896`, 0.17754751443862915`, 
                    0.9169224500656128}, {-1.0569748878479004`, 
                    0.4991212785243988, -0.6323114037513733, \
-0.8411307334899902}, {1.0993962287902832`, 
                    0.18369415402412415`, -1.0187921524047852`, \
-1.3645762205123901`}, {
                    0.6631592512130737, -0.4769909679889679, \
-0.28027579188346863`, -0.49332156777381897`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.04119429364800453, -0.005328983999788761, \
-0.18500567972660065`, 0.14757290482521057`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.11408688127994537`, 
                    0.4024689495563507, 0.3531888723373413, 
                    0.9709101915359497}, {0.6454603672027588, 
                    0.6429744362831116, 0.6609175205230713, 
                    0.41047388315200806`}, {-0.021838761866092682`, 
                    0.7679307460784912, -0.9821698665618896, 
                    0.5330458283424377}, {-0.48661771416664124`, \
-0.8861293196678162, 0.2985672652721405, -0.24996596574783325`}}], "Biases" -> 
                    RawArray["Real32",{-0.029024148359894753`, 
                    0.10164622962474823`, 
                    0.22822213172912598`, -0.0643431693315506}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.25814053416252136`, -0.5698228478431702, 
                    0.9926735162734985, 1.1822365522384644`}, {
                    0.30227944254875183`, -0.5475373864173889, \
-1.221463918685913, -0.7576279044151306}, {-0.6261985898017883, 
                    0.32760244607925415`, 0.2221505343914032, 
                    
                    0.49372488260269165`}, {-1.0299720764160156`, \
-0.8712263703346252, 0.4709862470626831, -0.9809171557426453}}], "Biases" -> 
                    RawArray["Real32",{-0.05840636044740677, 0., 
                    0.34599795937538147`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7178837060928345, 
                    0.0754539743065834, -0.07109770178794861, 
                    0.10907488316297531`}, {-0.39196500182151794`, \
-1.0391287803649902`, 0.5946069955825806, 0.3916831910610199}, {
                    0.5160495042800903, -0.4873242974281311, 
                    0.49311238527297974`, -0.24718569219112396`}, \
{-0.6341967582702637, 
                    0.36129269003868103`, -0.6919680833816528, \
-1.0163519382476807`}}], "Biases" -> 
                    RawArray["Real32",{-0.18687163293361664`, 
                    0.02596762776374817, 0.03363369405269623, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2952757179737091, 
                    0.4504634737968445, -0.04413805529475212, 
                    0.18807938694953918`}, {-0.7450427412986755, \
-0.8215761184692383, -0.4584442377090454, -0.4913382828235626}, \
{-0.2416420727968216, 0.3537132441997528, 0.27950969338417053`, 
                    0.5292163491249084}, {-0.7373591065406799, 
                    0.36556029319763184`, -0.41158556938171387`, \
-0.2839217483997345}}], "Biases" -> 
                    RawArray["Real32",{-0.01831594482064247, 0., 
                    0.017417605966329575`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.2714173197746277, 1., 
                    0.9956449866294861, 1.}], "Biases" -> 
                    RawArray["Real32",{0.19552762806415558`, 
                    0., -0.39802759885787964`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.07385575026273727, -0.2899567484855652, 
                    0.16089841723442078`, -0.009371621534228325}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0014104446163401008`, 
                    0.011190064251422882`, 0.0026832493022084236`, 
                    0.00038680279976688325`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    1.0418953895568848`, -0.513334333896637}, {
                    0.1687389612197876, -0.3302590548992157}, {
                    0.495919793844223, 
                    0.8434527516365051}, {-0.5314626693725586, 
                    1.3900585174560547`}}], "Biases" -> 
                    RawArray["Real32",{0.3659566044807434, 
                    0.13351543247699738`, 0.10686391592025757`, 
                    0.15509799122810364`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.3263261318206787`, -0.27763131260871887`, 
                    0.3791273236274719, 
                    0.2657627761363983}, {-1.4778060913085938`, 
                    0.8390009999275208, -0.9616281986236572, \
-0.025680365040898323`}, {
                    0.6034183502197266, -0.43304872512817383`, \
-0.3603288531303406, 
                    0.9616199731826782}, {-0.49781331419944763`, \
-0.529888391494751, -0.09996475279331207, -0.051624953746795654`}}], "Biases" -> 
                    RawArray["Real32",{0.08929497003555298, 
                    0.05597096309065819, -0.15732471644878387`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5539706945419312, 
                    0.7471994757652283, 0.46178996562957764`, 
                    0.25351831316947937`}, {-0.4265191853046417, \
-0.7486802339553833, -0.7460475564002991, -0.6947806477546692}, {
                    0.9243960976600647, 
                    1.1926639080047607`, -0.17698706686496735`, \
-0.6852891445159912}, {0.09440665692090988, 0.27125465869903564`, 
                    0.869486391544342, -1.0169434547424316`}}], "Biases" -> 
                    RawArray["Real32",{0.2866675853729248, 0., 
                    0.04700961336493492, -0.1856992095708847}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.8231660723686218, -0.8155822157859802, \
-1.1855549812316895`, 
                    0.29907849431037903`}, {-0.4099087715148926, \
-0.6159327626228333, 
                    0.3841255307197571, -0.5931782722473145}, \
{-0.24869844317436218`, -0.5106825232505798, -0.07572083175182343, 
                    0.9675281047821045}, {
                    0.14630478620529175`, -0.14799608290195465`, \
-1.059540867805481, -1.1832749843597412`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.18658752739429474`, -0.023231053724884987`, \
-0.24010439217090607`, -0.05971395596861839}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.23073528707027435`, -0.4012846350669861, \
-0.2839476466178894, -1.0680859088897705`}, {-0.3161003589630127, \
-0.20132650434970856`, -1.0062566995620728`, 0.19635431468486786`}, {
                    0.46060413122177124`, 
                    0.20692935585975647`, -0.08522094786167145, 
                    1.1850789785385132`}, {0.0030966363847255707`, 
                    0.2825815677642822, -1.091651439666748, 
                    1.1223691701889038`}}], "Biases" -> 
                    RawArray["Real32",{0.09239514917135239, 
                    0., -0.013500048778951168`, 0.2942027449607849}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.1700756549835205`, 
                    0.13764449954032898`, 0.6639665365219116, 
                    0.5552995204925537}, {-0.4826156497001648, \
-0.8768376708030701, -1.0968669652938843`, -0.4557706117630005}, {
                    0.516022801399231, -1.1965264081954956`, 
                    0.3426477015018463, -1.1791882514953613`}, \
{-0.18313869833946228`, 1.1725883483886719`, 
                    0.6765085458755493, -0.4567888677120209}}], "Biases" -> 
                    RawArray["Real32",{0.0691957175731659, 
                    0., -0.052879009395837784`, -0.14714697003364563`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.3545922040939331, -1.0969960689544678`, \
-0.7072638869285583, -0.6124459505081177}, {0.5162127614021301, 
                    0.6238583326339722, 
                    0.34327301383018494`, -0.26791563630104065`}, \
{-0.5693504214286804, 1.2117674350738525`, -0.11955609917640686`, 
                    0.9526163935661316}, {
                    0.0004830145335290581, -0.6953133940696716, \
-0.8744909763336182, 0.5600712895393372}}], "Biases" -> 
                    RawArray["Real32",{-0.04417675733566284, 
                    0.016460709273815155`, -0.018018431961536407`, \
-0.003621066454797983}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.08364911377429962, -0.41293445229530334`, 
                    0.7456597089767456, -0.6112605333328247}, {
                    0.38328656554222107`, 
                    0.026827214285731316`, -0.6304061412811279, 
                    0.0014338655164465308`}, {
                    0.2936494052410126, -0.4953831434249878, \
-0.8156598806381226, 
                    0.7646706700325012}, {-0.037835653871297836`, \
-0.9449551701545715, 0.7161888480186462, 0.32395997643470764`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.004959477577358484, 0., 
                    0.018554257228970528`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.4236890375614166, 1., 
                    0.8259796500205994}], "Biases" -> 
                    RawArray["Real32",{0., 0.8121699094772339, 0., 
                    0.15723752975463867`}], "MovingMean" -> 
                    RawArray["Real32",{-0.12917044758796692`, 
                    0.05554655194282532, -0.09991323947906494, \
-0.25477808713912964`}], "MovingVariance" -> 
                    RawArray["Real32",{0.000266525661572814, 
                    0.00009923988545779139, 0.00010416119766887277`, 
                    0.0011296860175207257`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_4" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.4652402400970459, 
                    0.49676209688186646`}, {0.1175260916352272, 
                    1.2375682592391968`}, {-0.8456810712814331, \
-0.6227266788482666}, {-1.4109878540039062`, 0.37913620471954346`}}], 
                    "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9029104709625244, -0.7850021123886108, \
-0.45101794600486755`, 
                    0.5204910039901733}, {-0.18260669708251953`, \
-1.0518146753311157`, -0.006921728607267141, -0.26572009921073914`}, \
{-1.0894790887832642`, -1.0242424011230469`, -0.9082985520362854, 
                    1.1481907367706299`}, {-1.1608684062957764`, \
-0.9526859521865845, -0.5282173156738281, 0.20659083127975464`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6848381757736206, 
                    0.6082578301429749, 
                    0.7840158939361572, -0.5883799195289612}, \
{-0.9217560887336731, 
                    0.40544581413269043`, -0.33492571115493774`, \
-0.3102727234363556}, {-0.5688890814781189, 
                    1.046210527420044, -0.9115222096443176, \
-0.5828470587730408}, {-0.05852051451802254, 0.9531077146530151, 
                    0.32824960350990295`, 0.16221819818019867`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9153900742530823, 
                    0.6633276343345642, -0.6811608672142029, 
                    0.19160978496074677`}, {-0.5331753492355347, \
-0.15094305574893951`, 
                    0.5140804052352905, -0.9406359195709229}, \
{-0.16569238901138306`, 0.47429540753364563`, -1.0168081521987915`, 
                    0.1246163472533226}, {-0.8730981349945068, \
-0.8632358312606812, 0.33973273634910583`, -0.3848488926887512}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6421592831611633, 
                    0.7852470874786377, 
                    0.9743026494979858, -0.5576608777046204}, {
                    1.029341697692871, -0.7168751955032349, \
-0.06433585286140442, 0.08959601074457169}, {0.27530547976493835`, 
                    0.5117119550704956, 
                    0.7906123995780945, -0.4385753571987152}, {
                    0.7723061442375183, -0.06683015823364258, \
-0.8859438896179199, -1.218153953552246}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    1.203736662864685, -0.25375401973724365`, 
                    0.7500302195549011, -0.22818173468112946`}, \
{-1.0999925136566162`, 0.9465587139129639, 0.3289337754249573, 
                    0.8465142846107483}, {
                    0.028109243139624596`, -0.03129323944449425, 
                    1.1834310293197632`, -0.44804665446281433`}, \
{-0.037871867418289185`, 0.010917437262833118`, -0.8484542369842529, 
                    0.20530910789966583`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.9259331226348877, 
                    0.37142977118492126`, 0.1256236582994461, 
                    0.04828003793954849}, {
                    0.9989590048789978, -0.2154754400253296, \
-0.016423378139734268`, 0.9485648274421692}, {1.040073037147522, 
                    0.12642869353294373`, -0.3693975806236267, \
-1.1077848672866821`}, {-0.5319598317146301, -0.4387214481830597, \
-0.534461259841919, -0.4620550572872162}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.0833996906876564, -0.46460387110710144`, \
-0.1812361478805542, 0.679459273815155}, {-0.8004432320594788, 
                    0.10009783506393433`, 
                    0.24950337409973145`, -0.41158491373062134`}, \
{-0.47476792335510254`, -0.3978653848171234, -0.15602312982082367`, 
                    0.8161223530769348}, {0.02307536080479622, 
                    0.14550918340682983`, 0.8530614376068115, 
                    0.5101252198219299}}], "Biases" -> 
                    RawArray["Real32",{0.011915917508304119`, 0., 
                    0.034721240401268005`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.000890851020813, 1., 
                    1.0057798624038696`, 1.}], "Biases" -> 
                    RawArray["Real32",{0.2999424636363983, 0., 
                    0.3054947257041931, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.01201102789491415, 0., 
                    0.0346289798617363, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.007866621017456, -1.1302850246429443`}, \
{-1.1292991638183594`, 
                    0.32867714762687683`}, {-0.9661316275596619, \
-1.2228132486343384`}, {-0.35992372035980225`, 1.0590423345565796`}}], 
                    "Biases" -> RawArray[
                    "Real32",{-0.19781887531280518`, -0.052421003580093384`, \
-0.26478883624076843`, 0.10271609574556351`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.04167582467198372, -0.039781633764505386`, \
-0.026082627475261688`, 1.3676934242248535`}, {
                    0.8291130661964417, -1.4437823295593262`, \
-0.5611294507980347, -0.9822043776512146}, {-0.3967604637145996, \
-0.753619909286499, 0.362751841545105, 
                    
                    0.14525388181209564`}, {-0.9395437836647034, \
-0.5477266907691956, -1.133709192276001, 0.847710371017456}}], "Biases" -> 
                    RawArray["Real32",{0.07890690863132477, 
                    0.3761350214481354, 
                    0.3376272916793823, -0.1185382828116417}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6026408672332764, 
                    0.3285408020019531, -0.41105180978775024`, 
                    0.8543686866760254}, {-0.11997757107019424`, 
                    0.8851994872093201, 
                    0.6833640336990356, -0.3456652760505676}, \
{-0.39565959572792053`, -0.3138121962547302, -0.6649273037910461, 
                    0.35737353563308716`}, {-0.4911477863788605, \
-1.1042778491973877`, -0.36274898052215576`, -0.11533467471599579`}}], 
                    "Biases" -> RawArray["Real32",{0.020833812654018402`, 
                    0.20892350375652313`, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.9802055358886719, 
                    0.44653260707855225`, -1.1153992414474487`, \
-0.5422317981719971}, {1.0233982801437378`, -0.0626722201704979, 
                    1.0991966724395752`, -1.063027024269104}, \
{-0.6796855330467224, 
                    0.23226308822631836`, -0.3158417344093323, \
-0.5147196054458618}, {-0.8717750310897827, -0.3191491961479187, 
                    0.4369300305843353, -0.6443153619766235}}], "Biases" -> 
                    RawArray["Real32",{
                    0.16314755380153656`, -0.009577592834830284, 
                    0.18332423269748688`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.18324266374111176`, -0.5023815035820007, \
-0.7085782289505005, 
                    0.20978394150733948`}, {-0.8939442038536072, \
-0.6249310970306396, -0.21290069818496704`, 
                    0.979325532913208}, {-0.5504775643348694, \
-0.05832118168473244, -0.11689189821481705`, 0.053812094032764435`}, {
                    1.0853383541107178`, 0.0061812330968678, 
                    0.5580741763114929, -0.3068590462207794}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.05754492059350014}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.36064276099205017`, 
                    0.6194612383842468, -0.27823686599731445`, \
-8.196585440600757*^-6}, {0.4804772138595581, -0.165147066116333, 
                    0.9228812456130981, 
                    0.7461766004562378}, {-0.3477061092853546, \
-0.09727273136377335, 
                    0.4745616912841797, -1.1461161375045776`}, \
{-0.9887083172798157, 0.6576195955276489, -0.8700469732284546, 
                    1.0412739515304565`}}], "Biases" -> 
                    RawArray["Real32",{0.07557635009288788, 
                    0.018580619245767593`, 0., -0.030154014006257057`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{9.325220162281767*^-6, 
                    0.8228119611740112, -0.4993772506713867, \
-0.21248407661914825`}, {0.07443057745695114, -0.26470720767974854`, 
                    0.2867298722267151, -0.2581230103969574}, {
                    6.920875421201345*^-6, 
                    0.09026002883911133, -0.5431668758392334, 
                    0.31951263546943665`}, {-0.8487663269042969, \
-0.5759012699127197, 0.33831918239593506`, 0.3584586977958679}}], "Biases" -> 
                    RawArray["Real32",{-0.05139141529798508, 
                    0., -0.0088221849873662, 0.004635503049939871}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8246548771858215, -0.2259514480829239, 
                    0.3128778040409088, 0.3548484742641449}, {
                    0.03844049572944641, -0.7165543437004089, \
-0.6533167362213135, 0.02939617820084095}, {
                    0.8554775714874268, -0.7347059845924377, \
-0.7679096460342407, -0.06620988994836807}, {1.0089783668518066`, 
                    0.7805302143096924, 
                    0.42812126874923706`, -0.013497886247932911`}}], "Biases" -> 
                    RawArray["Real32",{0., 0.015746716409921646`, 
                    0., -0.005764590576291084}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.35106638073921204`, 1., 
                    2.100911855697632}], "Biases" -> 
                    RawArray["Real32",{0., -0.12786923348903656`, 0., 
                    0.05423612520098686}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.10744404792785645`, -0.13281498849391937`, 
                    0.005403124261647463, 0.32040634751319885`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0011073986534029245`, 
                    0.0017343112267553806`, 0.000022023315978003666`, 
                    0.009115437045693398}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6304361820220947, -1.0520421266555786`}, \
{-1.2773617506027222`, -0.5163175463676453}, {1.0575640201568604`, 
                    0.4758467674255371}, {-0.2984674572944641, \
-0.5416990518569946}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.02016102522611618, -0.020137911662459373`, 
                    0.009103432297706604, -0.020071636885404587`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.05553991347551346, 
                    0.4838116466999054, 0.6280455589294434, 
                    0.9579535126686096}, {
                    0.4094116985797882, -0.7297202944755554, \
-0.5407580137252808, 1.0920393466949463`}, {0.3416574001312256, 
                    0.8166967630386353, 0.027458971366286278`, 
                    0.5231937766075134}, {-1.0214983224868774`, 
                    1.1557561159133911`, -0.73240065574646, \
-0.3085293173789978}}], "Biases" -> 
                    RawArray["Real32",{-0.005659567657858133, 
                    0.018651708960533142`, -0.027242522686719894`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7295066118240356, -0.9585456252098083, 
                    0.4683768153190613, 0.013072196394205093`}, {
                    0.7268832325935364, 1.0297549962997437`, 
                    0.13010364770889282`, 0.8511728644371033}, {
                    0.5311985015869141, -0.7490038275718689, 
                    1.1106948852539062`, -0.783568799495697}, \
{-0.11016649007797241`, -0.7793685793876648, 0.7892118692398071, 
                    0.6283679008483887}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.02789856493473053, -0.0267933439463377, \
-0.020013725385069847`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8662037253379822, -0.7305806279182434, 
                    0.5959702134132385, 
                    0.15533588826656342`}, {-0.16451825201511383`, \
-0.9961524605751038, -1.136181116104126, 0.4645577669143677}, {
                    0.3575422465801239, -0.3326648473739624, \
-1.0992751121520996`, 0.055531591176986694`}, {1.0984028577804565`, 
                    0.4548112154006958, 0.666391134262085, 
                    1.1845535039901733`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.028072068467736244`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8098240494728088, 
                    1.155951976776123, -0.6447374224662781, 
                    0.45518845319747925`}, {-0.6766847372055054, \
-0.47551292181015015`, -0.3867071270942688, 1.1213455200195312`}, {
                    0.9464103579521179, -1.1102110147476196`, 
                    0.7772281169891357, 
                    0.23293203115463257`}, {-1.182234764099121, \
-0.47915083169937134`, -1.1138650178909302`, -0.3971502184867859}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0002449585881549865, -0.004986758343875408, \
-0.03427859768271446, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.1852563619613647`, 
                    0.7036933302879333, 0.8977159857749939, 
                    0.928520679473877}, {-0.9681017994880676, 
                    0.7755762934684753, 
                    0.1256440281867981, -0.6624584197998047}, {
                    0.6240013241767883, -0.14710289239883423`, 
                    0.5384515523910522, 0.6343113780021667}, {
                    0.6885873675346375, 0.07010910660028458, 
                    0.09267108887434006, 0.12848487496376038`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0070115430280566216`, \
-0.015095503069460392`, -0.009009095840156078, 0.003930181264877319}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6698826551437378, -0.29908081889152527`, \
-0.2068452537059784, -0.30872347950935364`}, {0.6599966287612915, 
                    0.04333231970667839, -1.0408837795257568`, \
-0.306166410446167}, {-0.9370322823524475, -0.3536984920501709, \
-0.6001484394073486, 0.02215658314526081}, {-0.1800127923488617, 
                    0.8332293033599854, -1.1162543296813965`, \
-0.6609154343605042}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.008087989874184132, -0.011284451000392437`, \
-0.02397492341697216}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.5182785987854004, 
                    0.6566182374954224, 0.5928246974945068, 
                    0.12140579521656036`}, {
                    0.1699356734752655, -0.27175694704055786`, 
                    0.7886574864387512, 0.6768583655357361}, {
                    0.5189081430435181, 
                    0.2447454184293747, -0.5930821299552917, \
-0.08741005510091782}, {0.0417998731136322, -0.3245701491832733, 
                    0.5038024187088013, -0.023459866642951965`}}], "Biases" -> 
                    RawArray["Real32",{-0.008279794827103615, 
                    0., -0.01587769389152527, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.9806042313575745, 1., 
                    0.9761574268341064, 1.}], "Biases" -> 
                    RawArray["Real32",{0.5513590574264526, 0., 
                    0.12312658131122589`, 0.}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.008144805207848549, -5.605193857299268*^-45, \
-0.015940163284540176`, -5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"]
                     -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.47400811314582825`, -0.8142053484916687}, \
{-0.9381108283996582, -0.9096481204032898}, {-1.2824023962020874`, 
                    0.06401971727609634}, {-0.07836522907018661, 
                    0.48831385374069214`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    
                    0.10472651571035385`, -0.899893045425415, \
-0.8831688165664673, 0.841711699962616}, {
                    0.639081597328186, -1.0726513862609863`, 
                    0.016854742541909218`, 0.6379846930503845}, {
                    0.29376646876335144`, -1.0531771183013916`, \
-0.7469577193260193, -0.6804822683334351}, {-0.3903186321258545, 
                    0.41556766629219055`, -0.44766518473625183`, 
                    0.5781077742576599}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.1779835969209671, -0.7659265995025635, \
-0.6955357789993286, -0.46534663438796997`}, {
                    0.40920573472976685`, -0.5140355825424194, \
-1.0458946228027344`, 1.022903561592102}, {
                    0.6857390999794006, -0.1890314221382141, \
-0.9970906972885132, 1.1968910694122314`}, {
                    1.0493556261062622`, -0.5241221189498901, 
                    0.996066153049469, 0.6140029430389404}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.09778854995965958, -0.08884620666503906, \
-0.981550395488739, 0.14494751393795013`}, {-1.1741719245910645`, 
                    0.5936166644096375, -0.8853036165237427, 
                    1.1288560628890991`}, {1.0192004442214966`, 
                    0.45757684111595154`, 
                    0.4314703643321991, -0.4057874381542206}, {
                    0.34138989448547363`, -1.2073633670806885`, 
                    0.6353721618652344, -1.1829006671905518`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7903922200202942, 
                    1.0306997299194336`, -1.094161868095398, \
-0.23096758127212524`}, {0.5526812076568604, 0.24305129051208496`, 
                    0.5017563104629517, 
                    0.14767198264598846`}, {-0.6947301626205444, 
                    1.087038278579712, -0.9804190397262573, 
                    0.5635855197906494}, {
                    0.838047981262207, -0.9405266642570496, \
-0.47020044922828674`, 0.298164427280426}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.3400888741016388, -0.1795671135187149, 
                    0.29517868161201477`, -1.0533629655838013`}, {
                    0.5913594365119934, -0.9476831555366516, 
                    0.1860104650259018, 
                    0.02964492328464985}, {-0.28369805216789246`, 
                    0.2887578308582306, 0.6344670057296753, 
                    0.21172834932804108`}, {0.7833213806152344, 
                    0.15075556933879852`, 0.19456005096435547`, 
                    0.9793469309806824}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.5568111538887024, -0.2508641481399536, \
-0.8237136602401733, -0.2236444056034088}, {-1.0766154527664185`, \
-0.14689864218235016`, -1.129744529724121, 
                    0.4696337580680847}, {-0.082916259765625, 
                    0.3892093598842621, -0.8197648525238037, \
-0.99456787109375}, {0.9241390824317932, -0.8137200474739075, 
                    0.5294305682182312, -0.8215039968490601}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5217711329460144, 
                    0.7797710299491882, -0.41279080510139465`, 
                    0.5107153058052063}, {-0.22225850820541382`, 
                    0.27820247411727905`, -0.8235942125320435, 
                    0.6491014361381531}, {-0.2466532438993454, \
-0.6058765053749084, -0.5460322499275208, -0.7440249919891357}, \
{-0.7497199773788452, 0.5091549158096313, -0.8626350164413452, 
                    0.23669159412384033`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.008660465478897095, 0., 
                    0.020563967525959015`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0004466772079468`, 1., 
                    1.0005074739456177`}], "Biases" -> 
                    RawArray["Real32",{0., 0.9064932465553284, 
                    0., -0.1170889362692833}], "MovingMean" -> 
                    RawArray["Real32",{0., -0.008652647025883198, 0., 
                    0.020534871146082878`}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
               "$Dimensions" -> {2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "summation_z" -> 
           Association[
            "Type" -> "Summation", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "minus_half" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "gaussian_coef" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "Total_loss_jac" -> 
           Association[
            "Type" -> "Threading", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
             "Inputs" -> 
             Association[
              "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "summation_jacobian" -> 
           Association[
            "Type" -> "Summation", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "plus" -> Association[
            "Type" -> "Threading", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
             "Inputs" -> 
             Association[
              "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "2" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "density_coef" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "minus_prob" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "perpixel" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]],
          "Edges" -> {
          NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath["Nodes", "coupling_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "coupling_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_1", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "1"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "coupling_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_2", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "2"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_3", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "3"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "square", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "4"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "summation_z", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "square", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "minus_half", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "summation_z", "Outputs", "Output"], 
           NeuralNetworks`NetPath[
            "Nodes", "gaussian_coef", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "minus_half", "Outputs", "Output"],
            NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "gaussian_coef", "Outputs", "Output"], 
           NeuralNetworks`NetPath[
            "Nodes", "summation_jacobian", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "Total_loss_jac", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "summation_jacobian", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "density_coef", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "plus", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "minus_prob", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "density_coef", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "perpixel", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "minus_prob", "Outputs", "Output"],
            NeuralNetworks`NetPath["Outputs", "Total_Loss"] -> 
           NeuralNetworks`NetPath["Nodes", "perpixel", "Outputs", "Output"]}], 
        Association["Version" -> "12.0.10", "Unstable" -> False]], "Method" -> 
      "RealNVP", "Options" -> 
      Association[
       MaxTrainingRounds -> 
        Association["Value" -> 500, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> Ramp, "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 8, "Options" -> Association[]], 
        "CouplingLayersNumber" -> 
        Association["Value" -> 4, "Options" -> Association[]], "NetworkType" -> 
        Association[
         "Value" -> "FullyConnected", "Options" -> Association[]]]], 
    "TrainingInformation" -> Association["Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "RealNVP", "Options" -> 
           Association[
            MaxTrainingRounds -> Association["Value" -> 500], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "CouplingLayersNumber" -> Association["Value" -> 4], 
             "NetworkType" -> Association["Value" -> "FullyConnected"]], 
           "NaiveImputer" -> MachineLearning`MLProcessor["ImputeMissing", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Mean" -> {-0.00011694978920027098`, 0.00007700457069977347}, 
              "StandardDeviation" -> {0.9999923764062054, 
               1.0000250705186169`}, "Method" -> "NaiveSampler", 
              "VectorLength" -> 2, "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
              "NumericalVector", "Version" -> {12., 0}, "ID" -> 
              6728614895511755230]], "EMIterations" -> 1] -> Association[]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
           TypeSystem`AnyType, 
           TypeSystem`Atom[Integer]}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], 
        Association["ID" -> 251092553336860]], "BestModelInformation" -> 
      Dataset[
        Association[
        "Configuration" -> {
          "RealNVP", MaxTrainingRounds -> 500, "ActivationFunction" -> Ramp, 
           "NetworkDepth" -> 8, "CouplingLayersNumber" -> 4, "NetworkType" -> 
           "FullyConnected"}, "ModelUtility" -> Missing[]], 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], 
        Association["ID" -> 251096848304156]]], "NaiveImputer" -> 
    MachineLearning`MLProcessor["ImputeMissing", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Mean" -> {-0.00011694978920027098`, 0.00007700457069977347}, 
       "StandardDeviation" -> {0.9999923764062054, 1.0000250705186169`}, 
       "Method" -> "NaiveSampler", "VectorLength" -> 2, "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Type" -> "NumericalVector", "Version" -> {12., 0}, "ID" -> 
       6728614895511755230]], "InputDimension" -> 0, "OutputDimension" -> 2, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{-0.48249699075707647`, 1.4091840047834874`}}, "ID" -> 
           5216113400745425930]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 366.848324009674, 
      "MaxTrainingMemory" -> 13947480, "DataMemory" -> 160152, 
      "FunctionMemory" -> 4317032, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 7, 22, 16, 21, 48.5664587`9.438911295598352}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}], "LogPDFDistribution" -> 
    MachineLearning`TailedQuantileDistribution[
      Association["Quantiles" -> CompressedData["
1:eJwBNQPK/CFib1JlAQAAAGUAAAAvleaX7zb9v7GF6RQCovS/AJxTa6IZ8b+d
dGTGHGbvv+UVeMNqVe6/NRyyt7I97b+Aw6cz0fLrv0VJ9eXmzeq/o/so4V1n
6b/z7czD/NDov8Xt7Z6EiOi/YJpX/y7J578GR7WOEOnmv0O5NWUPeOa/r0N4
VSMa5r9ppEwUyJzlvysJd9fk/+S/2EjWhNON5L/xqCMGyB7kvyuCpVuHseO/
sIe+vKNW4782PxTCV9Xiv33CkgsLceK/tHShresH4r87JIUbEbPhvxBr9J2r
f+G/3JptanVC4b9IQkjQIAjhv87v4aJ10eC/4HQquMKk4L8RQLHYEVDgv5un
6sdzM+C/vOqxFGS237/olF/mRTffv+ErnoJE8d6/Oa33dd+23r+y4kQIaYXe
v+YXOodqNt6/DVd1PBb93b/R8A4Eu6fdv+trp5F+WN2//y+jhC3l3L/sVtO4
47Xcv54snC0bYty/rKPaKQYQ3L8bBvytFdDbvz+oHrS5qNu/1x1DIUps2794
3Dq3lz7bv99SpHP6INu/GrBija7x2r8zCPqiuMTav7Uifnf2lNq/AarCx6pu
2r+JTXP0F1Dav27s/ObdKtq/CzzIufMW2r/Sw8cIJ/fZvy039OJWwNm/aGCO
2w+O2b94OdZjATfZv1/Z768l7ti/GyxxRCe/2L+wjd0K7nTYv004RLzyD9i/
p0C7kB7O17/GTzKPLLDXv7uL+vHga9e/89zFFGgN17+RUljF6OrWv/C/bK8t
tta/1zQ9yC+F1r9iwhQA2VfWv78unnd2K9a/WZQRQKwK1r/WwaFHfeTVv3wc
tCdsuNW/9IcX/XiT1b9uRFrtD13VvxSjPMYGO9W/hhWrEjIO1b9gi1yvjNzU
vyeNe2VpvdS/mSEyLYKK1L/xVyYHxTvUv9aWs4KADNS/pZ6u2BjJ07/Gv+RP
W2bTv71+fXwXTdO/yDVCbnMT07/5APl0msbSv318mTyoRtK/RvYeaFbW0b98
EYV5Lp/RvxzHhj2DO9G/UJPmAgO70L/Ma5wrugLQv2OekHYkjc6/LSA7zR9E
zb/Gb+BTxLvIvxB0VNvNacO/ECfTTA==
        "], "LeftBoundary" -> -1.2666992147795368`, "LeftScale" -> 
       0.20060917237550235`, "LeftTailNorm" -> 0.011]], "Entropy" -> 
    Around[0.9592977740892532, 0.013404012495377662`], "EntropySampleSize" -> 
    1000]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{
  3.7728145984700885`*^9, 3.7728146354628344`*^9, {3.772814829376995*^9, 
   3.7728148442302847`*^9}, {3.772814907492152*^9, 3.772814933111657*^9}, {
   3.772815048821305*^9, 3.772815073569142*^9}, 3.772815200470866*^9, 
   3.772815708598374*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"66865cd8-df89-4960-b728-8f0d351d30ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "@", 
  RowBox[{"RandomVariate", "[", 
   RowBox[{"ld", ",", "5000"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7728147738793707`*^9, 3.772814791942112*^9}, 
   3.772815077427827*^9, {3.7728159955828395`*^9, 3.772816001870055*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"e141c67f-00d0-4e4a-9123-6ea44749aedb"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
09E4s++s1dYJeHrpl4eE6zConP0Q94tnAB9Huls929UOx9abSH3m6gMWO8Zp
hc4VXHWKSn426oY3VFTH+nrpQJ62Z3fQG8F1BTHJqaKt6PpEN820pRstU3Jn
3iSWotqxD9pyO0YxK/SJzQzT5+3EQ+43/EdCxWbuW2N7xiD25/vfidwMdMuP
+HI9nowHtC4NSMhTwHByqlR6axqe/6EqaNoyBxuP6pSJiBfibrV3Jv5ZJBAO
PKBz8MwwbFTt9VCuJ+K6Xzy6lw0I+O4sf9bN6gVoIwx0DBOJ8NaLzfwiOx0L
Pn23MvjZifOSL/IuHq3D0w/G/N5HjaOArAV882HAmbt75SqzZsGrXftxzSgV
t7FwyrlotMErGfvVyLs09J4s4iF2/8THlptY1RKZfO9xxSi5mgT6TkPubl/I
2Oumtyc+qhaeZOs95rOhomTCos/NkhGskflRTWTyMYuLgvOHa4Owl4XttOZo
O77jd0jZad0Ga21CgXJ8nXDQR5ltJ/N8om7VPK+omMFPr7exHfreBZaJjXal
SjQ0CLnqqaTC5PjAK5HWHHNgts//IqOCCg4mPB2Oz6ZxTHm3taEK05cjqRyd
6tMotjP/y4nby5ias+gY/K0FNuqrvtsfNIJv/f44qTgMgIvpyWYb7SGYlv2S
sk90ACWq9WR+roRApJnPYELVFHAwPlzreDQB1aQa76PM/P8ckKo4xt4Evxvt
+NQeUVBoiuH6u2ABNlpnxYrr9KNm8ew0IYYIo8oq5iMn21DglF53ElsPkgpv
8Wn+KkO4uPXMPa0BSCU8eto1TUNO7WjiyPMJ+C7c/li1gobJzQL/bR4fhY3P
u5LkmX3Fna3EQjV1CjL8Nc63qdOQ5n1721nrJZwgbBaxvUsAvUuNf4L8u0GO
fdjwDEcqzDJefD/zYgjWMtf8/O/24Utlxzf7r6xhTLZ7+OTOAfxs/UZdJGcI
3+xIfNrF1gUH3qnUFm1ox8rP27cMX/yHGz6qv9RT/QhWug8W7ptNg8z9PlJi
Wy+sae0d/PiqBBU5n/PF7uoF/97LNwsT48A51Ko1sZeELS02W7/wUkFgU45y
zwqbLvFEhamPLRlAfOHCGc1hNHGfPs7KXQv05+HrnonVgEiRRIeJIAG2y7Xe
0OmcA9fhTBN1aWZO39IavJU3DpqiVZNtzXQsPLnMZfTXFSv2fAXupjnYsLFr
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
k99dX47AkNS8ypdrLHQOMJ5v6OoAgXa2yo06Jv6ICvsis7YNL5UZv1haPYCB
rDi64rJvln2g7HliPQ0y+tG080556Nnz6rbB0DBKPwm7uGNgBMoDnR6OnyPg
LP93UmJRJU5SUuQDl3NiZ0CuiZUOFYyfHi8nztMx492BY/b7h/De2d1ajvfm
4P2tAV29NzX46btS02UTBhzLCFwZv5WDGV43bA+MDwGtVbocLzGg0CpEcXUX
DS3Dd2xYH8XEXvdcg3XmNJA9ytB4ojqNWZL3CIYENiS4TvoZ5E9DLOerTrYs
E099TRJ0sPmHyhkLJ779qce7PuffR8SMYNfYcKzs61mY7evzJyQT4G6kgvbx
L2wcCrhvtvr0CHKbCS59KuHAuY/8nj9WDaCUPZmPIZSFqnV2d56HTeKJKS13
O/dZaF54NLkluR3HuwvFz7gxQSMuT/3dpgVw/UAx29tfi8nJN7InXcuhm05t
j3Ecg+lQpQTf/4jQbn1353s3Nv6TbCPo8C6B5uq7KpoPmiFo5PIDbvEBMNq7
7gwnNgFl7tKkzDnl8DVxePi69jDYS5t+/2+mEy0Wuc6uI7bjWEg0ptixYN5I
vHun9CjKhKg7ykbPQ1ip1TO5yzXYkjRnGmpJhhY1nj9iomzkNm8XtBrLBNfH
vfqUDBpKLw2OZXfHwwSv5ecePRqWOpcd1Vu9rOdPD/5sTirGH3aWpdVqXdiT
bn5JNqEJz9xaOKkjQYZcwxe5DCE2XntW5a59mAlp/JsHHmpR8aj3gNXCowSM
y7264qYqFe/9KzMfPDgIKokv6rnXslF3fd2OHNkqKHxgUr20dRj2pfQIDTAp
cPhp04dx7j68vI4S6zJIhScjZyZe6DPwvXSwkt+Vf7j16c+ukytL8UBi/mW9
+X7sk6UweMZScfwOJOgVEvE//0s3wgz+QNBs2cjwIg20L01dV0ibQe/ohONO
f+jwmW8jNc2OgX4LKcyxCwvYXHFv9EN6DXTUus1HrIqH7E+i/3jPTuO95Lue
LNG/4Mxy3dZSkowfj587KaBRDQHNJzU+SDFQ1P1Fl93JMXi/T+ItL42Fmw5k
dnKH9mNLUb5wVBsLZrMcPRKeU/A/RRnahfcDoCzaEo/tbNCsjC1eTyCjieD5
6O6ONlSP7/9VTWjDzvODaTrLefVpOSGMKUsCT+LNC0yPYhTUzF/VJDmCt3gq
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{491.9999999999861, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.292200989132774, 2.6839460302673532`}, {-1.590765091604971, 
   1.7016957002537711`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772814792463683*^9, 3.7728148042342153`*^9}, {
   3.772814844918444*^9, 3.7728148511936674`*^9}, {3.7728149082281837`*^9, 
   3.7728149350544634`*^9}, {3.7728150514921637`*^9, 3.772815078257606*^9}, 
   3.7728152023179274`*^9, 3.772815709510934*^9, {3.772815996042604*^9, 
   3.7728160026639013`*^9}},
 CellLabel->
  "Out[267]=",ExpressionUUID->"71a05f65-309c-4833-a601-3b4577176481"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"PDF", "[", 
      RowBox[{"ld", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7728157230128374`*^9, 3.7728157428009334`*^9}, 
   3.7728160243997917`*^9},
 CellLabel->
  "In[268]:=",ExpressionUUID->"6680d8c5-1215-4e66-a79b-aed9fc20309f"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7728158267930965`*^9, 3.7728158992214584`*^9, 
  3.772816029820298*^9},
 CellLabel->
  "Out[268]=",ExpressionUUID->"c08b4f3b-583e-421b-8342-8f2eebe4b0a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "\"\<Model\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.772815866321417*^9, 3.7728158723124*^9}},
 CellLabel->
  "In[265]:=",ExpressionUUID->"2e867fff-85d9-4503-80e9-b7ff53759bdc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Sampler\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"X_out\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["16", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 3}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    LineBox[CompressedData["
1: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
8F8IhPH5
                    "]], 
                    LineBox[CompressedData["
1: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
btZs6g==
                    "]], 
                    LineBox[CompressedData["
1:eJwtlHk41HkcxweDDskV2VS/OcyMmTHzS0WE7zrGkVuUUlt0I4WpKXTZHCtK
2Rzl7pBqaysqxvb9oCRNqbaH3FdICDnKYtvaej/P+3k/7//ez/uPF81/j+c2
eQqF4vvV3/K7lsDjXFFKHLwyj7+VE9g0QoJdkC2n63kqSo5N/2lpNwk6+w8t
1XEpQAui3qtQ60hY0TZjcP/8QsTMTbZ2qyQhLX7QMcKxFF17+7tUq5AE7Y2m
3rKMcnTb+YPEK4eEAyaOcTvEj5FpfbZE9QQJYi+25alrMoTiC0qsxSQoNuyS
0mgv0cNNs62GfUlYyGPrWuu9RpUJRXf87EmwJv+9KDtYi5R6uSpJRiTUerbe
1U16g2LEgasiF5JQf6ba1WBTA7ISSoJZM0iwH8JBk92NKNwoY0ivSwjMQKyW
xG5G/VvbanYWCyFY4YlZD9GCmsZKwslEIbCKm95T/m5Bq7p4w2GbheCU8A/R
bNGKnsm+SQAiqX1jhF8rUvCaT92fLQCHxrvpTNtW5DPovV4SKoBy86u1i/pb
UHVWdM0LkQD+bKWdCVjXgtb452+J0hWA+sOFMuWEZkQ1k2onDBhCd2/m8fFf
m9Bz/bJ3A2WGQHrkSY2tGlGRfnF9foohDE1wQ6oq6lGJ6YXe4kBDYLw1uXRt
9psfe/igRrR3GO59gSjSfKpzNh/Kwm8ROSEy5HYieUNNCB8SOtep2lGqUJFF
0us1tnw4FC496ZJQgYxeZQZ1aPPB4Mh1m928B+ipQykztJcHBdu8TsmbFqHI
3L4pxVIejLo3U+5GXUGiJt5Y5kkelJo33CtkxCPOROQcMz8edI9oF14dT8Hf
93DBsbKv/97lMizRotO3ZnNhaAmjvs2iEusPR74ShnJBoBXgMTFcjRv8m5uF
Ii5Qd4O3XEUNTtplY7t1PhdWLNIMi/R5hZ0Ubyo+6zMAszIXuaHm11jFmKAH
YAOIW5zk3RhSh19OpqSvTDYAwrRhj6VWAz63RjPIaocBKKry3XUfNeHI8AWp
Xk85MKrOic3y7MR1As1CIosDN5QT7PLK3uL1UUqxnXs54OKStztS2I2p+8bm
Ztpw4EVHwBQ/owe/VmpzddHmwPKqro93lHvxM5NKm9F3bDg6reGhHvoe9ytf
+XBayoYbUR+1RY192EgS7cY6yYbytcdt3WwGcFb0L9tvbWbD/ciqeuHVDz/+
YQE507GjOH0Yp/h3Hg7JZoFlymjTIdePONcgSrQtlAXZOeyMfOURPEQrIK6I
WODB6Vhs8mgEH3byUTPT/doNmTv5saPY4/IprQUD+nDx5oA41mUMbzdyM3Qq
0wf7m5Z2DvPHcelgyvrqs/pgztdpCu4Zx94t2zPSAvThGEtiPFnyCWtQZ83z
K2dCY05EK2hM4v5mVZpqKhPk9SISIwYm8Y5lEteDgUwIWqJz8cLDKXxU2SYz
DzFBp92NYZo2jU3Xhs6J12SCHE9/tvnOf/FphmK2sIcB/LmpvteXfcEngiY9
kksYcC7xklb89BfMMPJmFSUygLGacz7AjwIbxBp6Zzcz4Dzfuc2unAL/3yOj
g+znunnWY3JQlHfbMTOHDiqjoZ9jfOSBwcV7tSR0OBKmOfH5kTzM2/LRysid
Dkx8XyfNQgF+c3H+a5xHh4laf6+tWAGO9so6/GbRQU6qfnOjExWmjcW3w/po
sDLwEft4OxWmllvz+TU0uNxz6EHdMUU40m3sfqKI9pUvK8N8+EoQ7eC56HQW
DdRF0yKldiVI7HO1fuJLg/O8mMNTC2dCqrePt3ARDa6JxXFRgtmQFxO8tqKL
ADuiakuaxhy4cfi0Q/RtArYLjqlZVquC1KKMs+84AXE1bo+LuWpQXTH96Ywv
AUSx+h69BjVoVLO/22JCwNTqmC92YeowwMzc4qNLgF7OHwdMx9XhO58JOJIZ
2zDirwH/ATy2yyg=
                    "]], 
                    LineBox[CompressedData["
1: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
WfHaC/8FNcGCVA==
                    "]], 
                    LineBox[CompressedData["
1:eJwBgQN+/CFib1JlAgAAADcAAAACAAAAAAAAAAAAMcDHoUWWiMDSPF5/745s
8zDAmgDvkE/8sr/lvtSnc+QwwDSlz89fy8S/lL6vShXTMMBINwQL1PPQv2x+
gHdRvzDAMO6QTYBp2L9q/kYuKKkwwKn7xldaY+C/kz4Db5mQMMBWqX2YuAXl
v+Q+tTmldTDAIoDs6Nob6r9d/1yOS1gwwAmAE0nBpe+//n/6bIw4MMCHVHnc
tdHyv+MBaYdqKzDAQADgemLw87+xTkDOJh0wwMUSyCRV7fS/ZmaAQcENMMAZ
jDHajcj1vwOSUsJz+i/ANmwcmwyC9r8I7XVaIdcvwCKziGfRGfe/3t1qS4ux
L8DYYHY/3I/3v4BkMZWxiS/AXHXlIi3k97/ygMk3lF8vwK3w1RHEFvi/zczM
zMzMLsAvo7kMoSf4v0SuQ6Omny7AE2HQEQ8y+L9bWAPXOXMuwLtvryBZUfi/
EssLaIZHLsAkz1Y5f4X4v2UGXVaMHC7AUH/GW4HO+L9bCvehS/ItwD+A/odf
LPm/7tbZSsTILcDw0f69GZ/5vyFsBVH2ny3AZHTH/a8m+r/zyXm04XctwJ1n
WEciw/q/MBO38768LMDz1dOu6Tv+vzndEquakizAcnyDfaQC/7/dQyLoEGgs
wAxP/aD2wv+/HEflqiE9LMDgpqAMcD4AwPLmW/PMESzARrwnczCYAMBmI4bB
EuYrwLjnE4S87gDAcvxjFfO5K8A2KWU/FEIBwBhy9e5tjSvAwoAbpTeSAcBZ
hDpOg2ArwFruNrUm3wHAzczMzMzMKsD+UgqzKssCwPK8QJukoCrAFi/+WhkZ
A8AUk/e2MXcqwAqmczOkcgPAMk/xH3RQKsDat2o8y9cDwEnxLdZrLCrAhWTj
dY5IBMBdea3ZGAsqwAys3d/txATAbudvKnvsKcBujll66UwFwHk7dciS0CnA
rAtXRYHgBcCAdb2zX7cpwMUj1kC1fwbAg5VI7OGgKcC61tZshSoHwI561aWd
XSnA9CtOepZcCcAUW4vxlR8pwNy4Tf/lYgvAFDdqz8rmKMBufdX7cz0NwIsO
cj88syjArXnlb0DsDsB84aJB6oQowMzWvq2lNxDA56/81dRbKMCYDE9fSuMQ
wMx5f/z7NyjAOV6jTA55EcApPyu1XxkowLHLu3Xx+BHAAAAAAAAAKMD/VJja
82ISwAGgyZE=
                    "]], 
                    LineBox[CompressedData["
1:eJwtlGs01HkAhmdGWClFo5ZSixnD3PzZOqWmw6rU1maxq7PlKFGy6SJWMnF2
x8qtVC472aToIqmtpLQu+b10YeQSoqLRZOwsytQ0NIOV3U77nPOc9/vz4bUN
3uu3nUGj0b7+z4/7CRfUFaySpqBNlHvPWtilpWDmG/X7xN0c0tkuYXFVFDyv
eczr9C8mNwSLlG86KTSlrtXVDt0kVNvCnbwHFOp2dtsmx94h3jW/lD8vpbAm
fuDB3B13idn4560G+RSyT+XYDEbXkz0/T1zPT6PgNWs8WzjQRCK8hRtLoyiU
RKRIf1K0Eouwy7JlART2GQy9O/LhMdH5LPVr86IQbXW22W7vE7LsWMoqO1cK
Ya4ZZ5ZLn5GXdtJzPBsK67wrtsujuslfpiG71MYU5u62sWV8JieZ2T3uHX3O
eHa0ovWyXw+xroqO8yh3RlJpRkzXdy9IyNHDR+enO+P4bl+TOkMFCTf9Yv/e
IGd0MGJ8lSIFaWr8iBCbzYKYnt8qyP6xrPi0M0IcWBCqkQcpCCt1pYcsUohu
+w0pJb8pSMeBHmaqlxC/zqWeVQ0pSJJs67jMWohIo2HlZNhL4nGwWXv4jQBF
fQVFYuNeMpbO+tB8TwBWmRtHIOslt+nbrLNOCtAvrtwy56qSxHYeWfM0QgCN
K8fPrayP3GfQDVvq+Hi63vjW6uoBcsX71cYfcvm4w5o9kjHrFSkfm7St3cNH
nH5LqXjba/LayD1wmicfFrK+N/SSIbIyqsh0sSUfEun5Ys6omtS6iwSe/Txs
u96iiZ7/loTuGqsRVPIwnLVzPaf6LaFGe2Wj6TxoRuz6LwZoyALVyMrCIB42
deprdO81//fhQqafOcZWaYleVFAsOcPFkdSCxxLJMBFkxQ5fiOSietJbm2w/
QsJb/IvdvLjYGmC1YUnjCLmqWdQosuYi8hRtIvPgezI2arXpmtoJ72qn9J9w
0RGffvr3GXed0NvMnrNarSNXqobKe3Oc4IGQtPwSPZkVIz98bo8TZpyo/ur8
wVEy2/9ipbTKEXLdoYU1jAnCHR9QijMdkbgic2BzxwRpeF+Ypd/hiGN/JKb9
U/CBDK/uaZix3BHjiwLnnAybJBfUx1Jh7ohg9fT6XCYNLwcrW6aqOND7BIkH
99FQJArOU5dzUF17wc6tkQadMuFdeDoHN1f0INmejkcKm5aEIA662k38O2Po
+NTHAQ8bTqfdimOgsCIm52y+A5J866/NaGNAmdp+2SnGAfITTEuJqwESlyqM
gn0c0JT3a4XJaQMkNeZdWsd3wIYQy/xLzCkYcp+WrZrqAHG/7H6QdArKsnkP
XF+zsURQwHO2N4SyYdydesTGcZfcVmalIaJ64+gvythIGLl923yzEUK7r051
z2fDLFYnZ08zhuTvbO28QDbCbtQ/6fI0Qfyg+Y9fLmAjtF21Nn69KQL62OEJ
KhaMnvsuns6fDquOR6MmpSx4NZrkpfWY4c8qC8uGRBaYfsbVYteZWJr7qqo2
gIVOF2qw8MVMnIwI0GgXsxB2aLJNtt8cclHwjUArFh5+E31AqTPHp/9hYTI5
o0sbbIF/AcMEc4Y=
                    "]], 
                    
                    LineBox[{{-17., 
                    1.0409497792752501`*^-15}, {-16., -3.509675075268432}}], 
                    LineBox[CompressedData["
1:eJwBYQKe/SFib1JlAgAAACUAAAACAAAAAAAAAAAAMcDHoUWWiMDSPLga06Ex
8zDAMS+LrtERwL9MLGPzh+MwwGWwqK2o3NG/vDSw9ALRMMBQSimDP3vdvwg0
uqWiuzDArrLjq1Zy5b8wKoEGZ6MwwMWAwRV5DO2/NBcFF1CIMMC1B5d/A8by
vxT7RdddajDAUa8UNIB497/Q1UNHkEkwwDO3Waiynfy/aKf+ZuclMMCvDzNu
zRoBwFbYT0CvHDDA7MKJY4W6AcDiCtFr3xEwwNodx/9yRwLABz+C6XcFMMB2
IOtClsECwIzpxnLx7i/Avcr1LO8oA8BDWOm2w88vwLYc5719fQPALsprn2at
L8BcFr/1Qb8DwE8/Tizahy/AsLd91DvuA8Cmt5BdHl8vwLMAI1prCgTAzczM
zMzMLsCYS62G0BMEwE+0SokHoC7A2kKXR/caBMCKcB9vvXQuwI2fVoprMATA
egFLfu5KLsC1YetOLVQEwB5nzbaaIi7ATIlVlTyGBMB8oaYYwvstwFcWlV2Z
xgTAjrDWo2TWLcDUCKqnQxUFwFeUXViCsi3Aw2CUcztyBcDXTDs2G5AtwCQe
VMGA3QXADdpvPS9vLcD4QOmQE1cGwORRUyhZNi3ACtta5Ws6B8Dxs3OBhQEt
wM3V2IC6DQjANADRSLTQLMA6MWNj/9AIwKg2a37loyzAVO35jDqECcBSV0Ii
GXsswBwKnf1rJwrALmJWNE9WLMCRh0y1k7oKwEBXp7SHNSzAs2UItLE9C8CG
NjWjwhgswIKk0PnFsAvAAAAAAAAALMD+Q6WG0BMMwFETHDM=
                    "]], 
                    
                    LineBox[{{-17., -3.509675075507629}, {-16., \
-3.509675075268432}}], 
                    
                    LineBox[{{-16., -3.509675075268432}, {-15., \
-3.509675081307818}}], 
                    LineBox[CompressedData["
1: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
                    "]], 
                    LineBox[CompressedData["
1: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

                    "]], 
                    LineBox[CompressedData["
1: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
xA9f+anhfw23Wxk=
                    "]], 
                    LineBox[CompressedData["
1:eJwtlAtUzAkUxntIihymmmY0M///TE0zzbMXemlLLwrlzVqikEJercnmUTu1
SaXHJOFksqksoRStMcvnFFmKVqGt9dhSHpNEU82KtWP1nXPPPfece+79ne/c
c9mRWxasMzIwMFihjy/5q5ywr/dwR86ILXRVqui2HimMVw2MUQczcDmEJnt+
S4ro8FRl3M8MzLxNk9iXSVFeN/fMqfFM5DmpMw/vlaKudg4/Vs7E6T1GCp8F
UlwV/UitNmPhQJXGl86WooDT9738OAuujbICnkaCkCM5QR1+BE42lSliKiV4
nBOzXzVA4PHFBPenWyUoS1EXTfqWROX9q6nlSyRYaV3q3LeHxF1N1jWBpwSm
6nEFiiISUsOe7g22EpQmvLhtcJnEI0qDbs0HMVxD/ZqnNpOoJ5111o/EqHGl
lrl0kRgW2D9PqRKD77J+zvA7Eludi9Xn0sU4GORcJ/+on+dWmqyIEOPFVpl5
mxEbTY1fJELmh6kc7Rg2Jn7MPhCjFOGqV0e0SF+nZbvFB24X4e6GJvcHhmy4
panSVweKcCV5wqG+TySsuth3VDQR5D8V7k7QkRCWxLov6hXCUbbt7Xb9fllD
/h8iCFGx8PCbxy/1fGHFBQH5QpgzzGWXn5A4652VdmyDEEHNv2eYtJCjPAJo
fd1855wgcXpZ7qZQpQBeayxmpOSR0Bp6fmzcJoC4kxtcLSdRcetm4vwAAW7U
7Vn1ZzyJxorpmjaqACZjreVD60gsP5cZEvXKEb2nNDXmS0ksarpxpP+KI3ZX
GGqtZ5FQmXW1JR10RM2kpb40DxKZUc9NrdY4Iv+B5shkgX7e/+Kj5/J0SfU7
AqK1kcORSj44PTeGdPcJfJbu5Qm382FsaVI7o5qAvxO5khvIR4bvYFxyHoHh
tbMK59P4+DWugFW/lQDr7lDbeQ0P6UUvb5jMI3Bpo5DwvcaDQZNmbZCAAGb0
xBopeGB8Uo6kmhDwDOCph9bz8ERscqD+KWvUHwdc2Fm/ecwSFoSOYXfClA6o
SMqmWYlZGPZ3lj3Z5oA+d4XFO2MWnJg7mhMCHLBDeW/OsXYmHtRYPWLZOOCb
moCHlComXplTM5pfcREue//L0jQmYghZb5aai7KXbQ0xK5lY8n76yJJsLnzH
6aSzXZmoki+rFUZywXkY1jk4jjnKYw8X+83PXicyMMXimwmblfYIr4o6vi6c
geqW/h8WbrdHmYe9R4cdA4VkJy0pUN//27nK0CFbNAxQet7T7DHoZWxS22AL
v7nyzjO9dui/yJ7GLLTFOLHrxDOwAyk0D9gbbQu6ghPTn2+H/cfUkvaptti5
b/5AYowd+KYeQ07GtlDPLP/rn5scvA6vfn3fZwpy46V9549yYEfncneaTcFV
XorUL46DeO9dJkdb6fD5rrT4rB8H7arzGT7FdEymKPwGrThYlH+rNmoTHV6z
51JoL9novlWXbuZBh8qwlUK9wkbmshOGTmPpOOjF83+bxUaQ/xriUQsNl4aC
SkpWs0FLN+769wRt1B8S+zxztS5GNDwLWzhRpyRh1N3ydss9GzQ+8ZPv09/t
2eDKDYuP2CBnV6EwKoTErkiHiK4IGwjJpaYlbBIbp05rodvZwLt0RLRXSyAZ
T+t1nVTcZ9MvxJ0ioDK2c0tSUkG9NPa4TQSBKZ8/k5XLqBgfWd+fQCNw/MLO
jP0TqTjPXXA6r5WFIFbaDrPr1uBv0rZq17IQ3a654+1tjdBBl37mJ6aeL/VN
JazAuG7x0aKICRufxW3r5lnh0L0UXX0AEye7l2eu6LaEiizsnqll4HSHwiwv
1RIZNcF1aWcYEJDG4WZSS5hmKHIVsQxwqssjrv9NgeRkYvh6ZwYO5Se7q4oo
+PqfGUiqz2kfiKTgP+zUwGA=
                    "]], 
                    LineBox[CompressedData["
1:eJwtVGlQUwcYhOo03mggyePlPZRcBHJREFArMhxBoFYRtMoMlcilTctRxDgF
kcODSkDFqRiPKTRSxVZEQOKBU9agpWigYBGNONIRgchl5fAAxWLtzuzsj93Z
H998s47RSWFxH1lZWQVP8b1+gCsyB452HJrg4mKpU0R1rwJ+815Aa0ehjGVa
HmpSoCPznU+1K4WHYYO/tJcrsMr34kZGKIXVkdpTgfkKHA6zm/19CgUrt9Oi
ki0KVFQv3OChozD8l/fiLh8F9LHty22uU+D7hZlsWAqo45ZcYw1SOLKza0jY
K8csg/JuEEUjcPfzE0KDHJlfTOaWraahz574O6ZAjvGIN/TYdhp1m7eOMWPl
SBD9Sep1NI7yl5jdlsnRXqvZVWGgIW1Q59fbyLGEHAmiW2hkrbKyuflEhkO+
AWn9T2gUVr9SeV2RofMTNZMcoxH1JjyHLJBB1B+74KyVA/pFzG2JKhliExbv
0DEc0GR6Dyl66l/7W2Y6QGUcH88oluLbL/Nv9k/5LWWdHkdTpDDcEoW8sHYA
Jys9gwiUonp2YyvjFQ3PoOZWa1KKuEXbIhf10XC1vu8WPiRBywxhn899GtN/
1ZXMqZdg9MajtHgjjUrlfK5cJ0HTupJ5P5TR8Gpdob+UIIHq8lc//5FHQ9Ly
/McVDS44T+bvq52kcEEk8es57oL4TRdq/M0U6IctDepEF+SS7oycixSS/nms
MPm6YMEau3TNIQqnYzanzWK5YPqb8AWOCRTqPVadEVqcoXIcbswOofB7/CkD
XesMQd1QqU481f8ivmy4wBmhd4P1cQwKmd1FO0tVzuiNmWa09HDx33lMYtgb
0+uSsrhQdypDdxeLUVqSfHi2iosJao72XIoYXTWINXhz8d3ehRlBgWLctf7G
M9mei24iS7SBFEOzJ4WxdISE/z1Z7v0hJ9zybrs3/zaJAxAXm+qd0CorPPOy
hERjW3Ki+zEn7F93VjOYSmLE9uOxOUlOGK2klMOBJGoCNG9TIULAPvZgVJo9
ZFWm0P1HROidqDUfCLKHJW968Rq1CG3+j356xrFHdzNtaVghwqxNGcocCwHe
LkI6zBQhL+TYjcCrBPS6UXVzjxChM90WehcQiHWoKo28KkT08ZXr4zYT2Gqz
1nyyQIhrb83xdZ4Ezn3dOuOgSgiV+9Pwz+YS//+PAFVXTnqatBxotKbR18UC
sIu6sz+N5kDQJKJzUwUQBktedizmoL2wQ5kaIsDDOwlF5dM4yDP3JV53FMDL
vTzqQjMbfqXrdInjfPion4Y9OcLG5HPCmN7Gx8AOXnJwBBu/Gb0GLBV8BERu
vNRJsJHNrmQb8vnw42jFZ9pYCBrc49ul5uNp2dX64nwWDnIbZ4y68TF/PKPj
jg0LGx9/zhqY5GF978rdtSfscMrXdsvtZh6qkonaCFc7JC21nyzU8yAuepZT
3mSLa41RD3zSeLi8oemBYZsttMM9E23reYipqTRu59mio/p89FqPqXzFyWV9
ZibK516aV0PwwFAe8LM7zsSH/eHhnWbfg5FoJv4F1GI+KQ==
                    "]], 
                    LineBox[CompressedData["
1:eJwlk39QkwUAhgd2qCkX7Pe+j5Fx8e33loSRUsZEJOgoECFZizjvhrsFJwME
4nZwSQVXONB0kzzniFJiiIFwx9Zwr53KxAFeyJWNimKodBgb81CHSpnP3XvP
/+/d88KefTs14TQaLem/PfFTXkL9vNnbukzCIy+ftN9SYMvlqAv3Z0is2bok
03kUeHAX/pIrJAZkzWujexQYqunU3bGRGH/0sranWYGGnGF57RckVD13MrZp
FXinnv86Q0ti1xv2Hk+KArHhtqODShKu702mLLYC/hv7XtVxSXwV/lnYpdty
uCNK4oXzBHyJjQsJg3J0NJ1ULzoJnF5tCYa3yGH1xk8VmgmornW7sjVyNJ8r
jUqqIhAynsuNSZZDE1X9oLaAQGNq31lNlBySRaVZrCQQ9k/nhHRWhundY3Np
MgI6o9mlt8vQsD0m4OETwIt1FYkHZWAOSM646ARW9aoXKotkONz1kB+7nsCo
5wlSrJSWp95eSyCjO3Px+EkpNkTilH41AX3284znKqQ4X/bjtUgaAaU9U0Gl
S/HzsY8uOIM8OG56dvxJSqH7dLam7i8e/vjl24KUgAS1r0Tc2+nh4UzL5N7U
YQkiur3JW3p5iF+n1v99QoLIm5r0xEM8pL+1uWrTfglafd/wlCU8rOkdW2xy
iOFushVOWLgwuq2V3lYxOi1kxWk9F8/Olx9wFIvxu3z/RusOLgxkWgz1mhi6
zYNtQ3wupvM522Kjxcg477OtLHGQbJkLfj0rgmEotLf4Jw4+D/ywsd8uwjNJ
odHAWQ7Gso3LOQdFmBbP/NbewkGEsyjHUCQCvW3AXKXn4P97PEIULz1WjXA5
MGQ0XgmzCnF1+LqrfpmNlEvRZacqhbD47xqabrDBSimBI1MIb9kHh319bITs
JsfWOCEa3mTSjjSyEUw4VJiwLICpmnHZ9C4bD7ve6z46KQDrsdo3H8cGN26p
Q9srAG3KrzLNsZB2rCjNZhQgP3pc9KWNhU8ij7e+XyoAx3Ive0bLQu6JmqS5
RAGq9d+1ZwWY6FOuH/2QJkBWnXuCf4CJ9lBezuw4hbaLu27lkkzEuvMu5nVQ
2L397akFJwOyrnXUUC2Flkf9fYFiBkas1VVkPoVkf5OugMfAfVvbQNkmCuqY
kVWC63T0X9XPOLkUgh/X1KnMdDzti8LKhiO/BvfQ8S9TiLRO
                    "]], 
                    LineBox[CompressedData["
1:eJwlkv0vlAEAxw+57pzdOPc87m0Vo+l57oXo5aRC/CDd0skoM7rlbdPYVSpN
1syWrLqa4dhOXdHS3GE2IuuLpMmtQodTW9Y46apb1wvKKvPZPvv8A58ATaE6
253BYAT/d63rhKLMUTuj+y3GCOHh/W5eAa6bdd/bNjEYNiXr13MFvD0j6xhp
YhgP3fuualbg/NKgfdUpgulU7OvZSwqoZ07LJi6KsHUv39ChVqC+NSG/fEkI
r15hOgIUSCqMb+DkCnHMrmZxHHKc3ZI7WDAsADHwpOlWuxysftNss1CAqMSs
8FStHOwjkp+PMvwRODxZ+ypVjjRrMjOP9IeLmR/G3SPH8nUjv2SShNmLz/CR
yLFYwgpw3iahHpvysK7IQNVX0CNaEu8zuqKyJmXocQgjWCoSqa3mFlO7DPXa
ocgWBYku9Kv6K2UYoa/sbxORcKv7HFyXKUOCQBMr4pKwjK4hRfZ04oEFNoly
WafS1SiFvaIou4xJIj1lKLTgjBSlgrkXcX8IHI5jdOw6KEXIzQfFuz8ROLFy
si8lQIr5r33Zx8cJVJ9zqZ8t0+iJCNS3dBKY632orRynYcy0+my7QeDo8DVJ
o4mGocg2+kZD4INen7SxioY5V25pUxDQhb/kDuTRGI8b8+35wYfT0B4bH0Yj
SH/fkaPj48v83XjjKoUptuWbeDsfVZxm/2kLBWdNbNC0zQ8D3t3dH+9QyIlm
XTZc9UP14nTIxAUK0cxN7IIYP2xo4uTVpVAoXSh/HPOXB98oVfHOHRTEdmXD
5qc89JoNySYBBYl7dJOnjof1fyiUKWtsLg0P/wD/ZBgj
                    "]], 
                    
                    LineBox[{{-16., -6.995669776103681}, {-15., \
-3.509675081307818}}], 
                    
                    LineBox[{{-15., -3.509675081307818}, {-14., \
-3.509675075453287}}], 
                    
                    LineBox[{{-14., -3.509675075453287}, {-13., \
-4.596633353632909}}], 
                    
                    LineBox[{{-13., -4.596633353632909}, {-12., \
-4.5966333537555775`}}], 
                    
                    LineBox[{{-12., -4.5966333537555775`}, {-11., \
-4.596633353510923}}], 
                    
                    LineBox[{{-11., -4.596633353510923}, {-10., \
-4.59663335335972}}], 
                    
                    LineBox[{{-10., -4.59663335335972}, {-9., \
-4.59663335271557}}], 
                    
                    LineBox[{{-9., -4.59663335271557}, {-8., \
-4.596633352782532}}], 
                    
                    LineBox[{{-8., -4.596633352782532}, {-7., \
-4.596633353315269}}], 
                    
                    LineBox[{{-7., -4.596633353315269}, {-6., \
-4.59663335191226}}], 
                    
                    LineBox[{{-6., -4.59663335191226}, {-5., \
-4.5966333517102385`}}], 
                    
                    LineBox[{{-5., -4.5966333517102385`}, {-4., \
-4.596633351789706}}], 
                    
                    LineBox[{{-4., -4.596633351789706}, \
{-3.0000000000000004`, -4.596633353828679}}], 
                    
                    LineBox[{{-3.0000000000000004`, -4.596633353828679}, \
{-2.0000000000000004`, -4.596633355211679}}], 
                    
                    LineBox[{{-2.0000000000000004`, -4.596633355211679}, \
{-1.0000000000000002`, -4.070744762183153}}], 
                    
                    LineBox[{{-1.0000000000000002`, -4.070744762183153}, \
{-2.4926122716790574`*^-16, -4.070744762350273}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.266849002507401`, 
                    2.079283430529795}, {-0.25, 0}, 
                    Offset[8], {0.08867008588000758, -0.024858466579425365`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.823778921606099`, 
                    3.2100458292197636`}, {-0.25, 0}, 
                    Offset[8], {0.08841272201852668, -0.015816350815419433`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.555201387965674`, 
                    0.3162795939006472}, {-0.25, 0}, 
                    Offset[8], {0.3104027759313457, -0.11886543253336973`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.9571397952037, 
                    1.1664366122916179`}, {-0.25, 0}, 
                    Offset[8], {
                    0.17655913189458872`, -0.058037594443174134`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.80784941629153, -1.4829146309918486`}, \
{-0.25, 0}, 
                    Offset[8], {0.07783288432682056, -0.02058495370263902}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.138256961847825`, -0.5311702306286505}, \
{-0.25, 0}, 
                    Offset[8], {0.17186942356039125`, -0.02579419988531384}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.523701904685602`, -1.6716515535227614`}, \
{-0.25, 0}, 
                    Offset[8], {1., -3.509675075268433}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.902679714531525`, -2.431687484333514}, \
{-0.25, 0}, 
                    Offset[8], {0.12801228034339474`, -0.07340008606247705}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -3.509675075364111}, {-0.25, 0}, 
                    Offset[8], {1., 2.3919710656628013`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -3.5096750788920636`}, {-0.25, 0}, 
                    Offset[8], {1., -6.039385880285408*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.822222222222223`, -3.596633353315102}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.08888888888888857, -2.3661961279231036`*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.266812112029669`, -10.290659201810383`}, \
{-0.25, 0}, 
                    Offset[8], {0.08871435445328046, 0.015537846904745578`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.957072050604559`, -9.269959482794954}, \
{-0.25, 0}, 
                    Offset[8], {0.17661124312469845`, 0.04445264938979321}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.55215579795401, -8.3635932802029}, {-0.25, 
                    0}, 
                    Offset[8], {0.30431159590801826`, 0.09711681557351781}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.137302513114497`, -7.490277577945916}, \
{-0.25, 0}, 
                    Offset[8], {0.1730147620403848, 0.023277010050677838`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.54419607165569, -6.510754357531432}, {-0.25,
                     0}, 
                    Offset[8], {0.2883921433113805, 0.0021585604546485726`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.72788029439669, -5.519917502366761}, {-0.25,
                     0}, 
                    Offset[8], {0.08234524216491579, 0.012290912102685958`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.521994291196185`, -5.329344411131446}, \
{-0.25, 0}, 
                    Offset[8], {1., 3.4859946947958633`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -3.5096750777950994`}, {-0.25, 0}, 
                    Offset[8], {1., 5.854531082150061*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -4.16185004236106}, {-0.25, 0}, 
                    Offset[8], {1., -1.0869582781796225`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -4.59663335370651}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.226680979016237*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -4.596633353608785}, {-0.25, 0}, 
                    Offset[8], {1., 2.446540747769177*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -4.596633353420201}, {-0.25, 0}, 
                    Offset[8], {1., 1.5120349416974932`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -4.59663335297323}, {-0.25, 
                    0}, 
                    Offset[8], {1., 6.441496225306764*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -4.596633352755747}, {-0.25, 0}, 
                    Offset[8], {1., -6.696154741803184*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -4.596633353102174}, {-0.25, 0}, 
                    Offset[8], {1., -5.327374097419124*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -4.5966333524734635`}, {-0.25, 0}, 
                    Offset[8], {1., 1.4030092643224634`*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -4.596633351791047}, {-0.25, 0}, 
                    Offset[8], {1., 2.0202151063131168`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -4.5966333517579185`}, {-0.25, 0}, 
                    Offset[8], {1., -7.94670995674096*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4000000000000004`, -4.59663335301309}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.0389734345371835`*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -4.596633354658479}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.383000380883459*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4000000000000004`, -4.281100199394563}, \
{-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.525888593028526}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000003, -4.070744762283425}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.6711965145077556`*^-10}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-17., 1.0409497792752501`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -4.596633351789706}], 
                    Offset[{12, 12}, {-4., -4.596633351789706}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-4., -4.596633351789706}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-2.0000000000000004`, \
-4.596633355211679}], 
                    
                    Offset[{12, 
                    12}, {-2.0000000000000004`, -4.596633355211679}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-2.0000000000000004`, -4.596633355211679}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -4.596633352782532}], 
                    Offset[{12, 12}, {-8., -4.596633352782532}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-8., -4.596633352782532}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -4.59663335191226}], 
                    Offset[{12, 12}, {-6., -4.59663335191226}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-6., -4.59663335191226}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -4.5966333537555775`}], 
                    Offset[{12, 12}, {-12., -4.5966333537555775`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-12., -4.5966333537555775`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., -4.59663335335972}], 
                    Offset[{12, 12}, {-10., -4.59663335335972}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., -4.59663335335972}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., -3.509675075268432}], 
                    Offset[{12, 12}, {-16., -3.509675075268432}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-16., -3.509675075268432}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -3.509675075453287}], 
                    Offset[{12, 12}, {-14., -3.509675075453287}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-14., -3.509675075453287}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-17., -3.509675075507629}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -3.509675081307818}], 
                    Offset[{12, 12}, {-15., -3.509675081307818}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-15., -3.509675081307818}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-16., -6.995669776103681}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-1.0000000000000002`, \
-4.070744762183153}], 
                    
                    Offset[{12, 
                    12}, {-1.0000000000000002`, -4.070744762183153}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-1.0000000000000002`, -4.070744762183153}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-3.0000000000000004`, \
-4.596633353828679}], 
                    
                    Offset[{12, 
                    12}, {-3.0000000000000004`, -4.596633353828679}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3.0000000000000004`, -4.596633353828679}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -4.5966333517102385`}], 
                    Offset[{12, 12}, {-5., -4.5966333517102385`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-5., -4.5966333517102385`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -4.596633353315269}], 
                    Offset[{12, 12}, {-7., -4.596633353315269}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 
                    1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-7., -4.596633353315269}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., -4.59663335271557}], 
                    Offset[{12, 12}, {-9., -4.59663335271557}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-9., -4.59663335271557}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -4.596633353510923}], 
                    Offset[{12, 12}, {-11., -4.596633353510923}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., -4.596633353510923}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -4.596633353632909}], 
                    Offset[{12, 12}, {-13., -4.596633353632909}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-13., -4.596633353632909}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.4926122716790574`*^-16, -4.070744762350273}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"X_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["X_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"checker_b\"", TraditionalForm], 
                    Offset[{0, -7}, {-17., 1.0409497792752501`*^-15}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-4., -4.596633351789706}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-2.0000000000000004`, -4.596633355211679}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-8., -4.596633352782532}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-6., -4.59663335191226}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-12., -4.5966333537555775`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-10., -4.59663335335972}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-16., -3.509675075268432}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-14., -3.509675075453287}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-17., -3.509675075507629}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-15., -3.509675081307818}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"checker_w\"", TraditionalForm], 
                    Offset[{0, -7}, {-16., -6.995669776103681}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-1.0000000000000002`, -4.070744762183153}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-3.0000000000000004`, -4.596633353828679}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-5., -4.5966333517102385`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-7., -4.596633353315269}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-9., -4.59663335271557}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-11., -4.596633353510923}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-13., -4.596633353632909}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"X_out\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-2.4926122716790574`*^-16, -4.070744762350273}], \
{0, 1.}, Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4846726653225846`, 
                    5.295823550387978}, {-13.266849002507401`, 
                    2.079283430529795}], {0., -0.17}, Automatic, {
                    0.9628770091614506, -0.2699404846041063}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0.9685317354845713, 
                    5.41405081961365}, {-12.823778921606099`, 
                    3.2100458292197636`}], {0., -0.17}, Automatic, {
                    0.984372876293391, -0.17609667917901295`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.9668835321657727`, 
                    5.136279701388457}, {-14.555201387965674`, 
                    0.3162795939006472}], {0., -0.17}, Automatic, {
                    0.9338690366160831, -0.35761518766650413`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.7175190497621067`, 
                    5.224952469994753}, {-13.9571397952037, 
                    1.1664366122916179`}], {0., -0.17}, Automatic, {
                    0.9499913581808642, -0.3122761908658376}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4062682811250309`, 
                    5.317180598917217}, {-15.80784941629153, \
-1.4829146309918486`}], {0., -0.17}, Automatic, {
                    0.9667601088940394, -0.2556851420227329}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0.8162991794478593, 
                    5.439085920412801}, {-15.138256961847825`, \
-0.5311702306286505}], {0., -0.17}, Automatic, {
                    0.9889247128023273, -0.14841803262688352`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{5.2894807955802055`, 
                    1.5071141009187714`}, {-16.523701904685602`, \
-1.6716515535227614`}], {0., -0.17}, Automatic, {
                    0.2740207456215948, -0.9617237810145828}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.735791547565353, 
                    4.771314767259646}, {-15.902679714531525`, \
-2.431687484333514}], {0., -0.17}, Automatic, {
                    0.8675117758653902, -0.4974166450118824}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3155840861145407`*^-9, 
                    5.5}, {-16.4, -3.509675075364111}], {0., -0.17}, 
                    Automatic, {1., 2.3919710656628013`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3216622341569746`*^-8, 
                    5.5}, {-15.4, -3.5096750788920636`}], {0., -0.17}, 
                    Automatic, {1., -6.039385880285408*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4640838541524257`*^-9, 
                    5.5}, {-11.822222222222223`, -3.596633353315102}], {
                    0., -0.17}, Automatic, {1., -2.6619706439135014`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.9488523145076093, 
                    5.41753442861728}, {-12.266812112029669`, \
-10.290659201810383`}], {0., -0.17}, Automatic, {0.9850062597485963, 
                    0.17251860263774715`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3424666865668047`, 
                    5.333646332056367}, {-12.957072050604559`, \
-9.269959482794954}], {0., -0.17}, Automatic, {0.9697538785557032, 
                    0.2440848521030554}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.672159910889413, 
                    5.239645143749175}, {-13.55215579795401, \
-8.3635932802029}], {0., -0.17}, Automatic, {0.9526627534089409, 
                    0.304029074707166}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.7333502100583538, 
                    5.450889603487432}, {-14.137302513114497`, \
-7.490277577945916}], {0., -0.17}, Automatic, {0.9910708369977148, 
                    0.13333640182879158`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.04116530300390593, 
                    5.499845944917785}, {-14.54419607165569, \
-6.510754357531432}], {0., -0.17}, Automatic, {0.9999719899850518, 
                    0.007484600546164714}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.8119394076200448, 
                    5.439738449443467}, {-14.72788029439669, \
-5.519917502366761}], {0., -0.17}, Automatic, {0.9890433544442667, 
                    0.14762534684000814`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-5.286775708708193, 
                    1.5165759479211662`}, {-15.521994291196185`, \
-5.329344411131446}], {0., -0.17}, Automatic, {0.27574108144021203`, 
                    0.9612319470378532}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.2199920951825334`*^-8, 
                    5.5}, {-14.4, -3.5096750777950994`}], {0., -0.17}, 
                    Automatic, {1., 5.854531082150061*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{4.047623562957408, 
                    3.7238076605259804`}, {-13.4, -4.16185004236106}], {
                    0., -0.17}, Automatic, {
                    0.677055938277451, -0.7359315569013469}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{6.746745384589303*^-10, 
                    5.5}, {-12.399999999999999`, -4.59663335370651}], {
                    0., -0.17}, Automatic, {1., -1.226680979016237*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3455974112730473`*^-9, 
                    5.5}, {-11.4, -4.596633353608785}], {0., -0.17}, 
                    Automatic, {1., 2.446540747769177*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-8.316192179336213*^-10, 
                    5.5}, {-10.4, -4.596633353420201}], {0., -0.17}, 
                    Automatic, {1., 1.5120349416974932`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.5428229239187203`*^-9, 
                    5.5}, {-9.399999999999999, -4.59663335297323}], {
                    0., -0.17}, Automatic, {1., 6.441496225306764*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.6828851079917513`*^-10, 
                    5.5}, {-8.4, -4.596633352755747}], {0., -0.17}, 
                    Automatic, {1., -6.696154741803184*^-11}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.9300557535805183`*^-9, 
                    5.5}, {-7.4, -4.596633353102174}], {0., -0.17}, 
                    Automatic, {1., -5.327374097419124*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-7.716550953773549*^-9, 
                    5.5}, {-6.4, -4.5966333524734635`}], {0., -0.17}, 
                    Automatic, {1., 1.4030092643224634`*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{-1.1111183084722143`*^-9, 
                    5.5}, {-5.4, -4.596633351791047}], {0., -0.17}, 
                    Automatic, {1., 2.0202151063131168`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{4.3706904762075283`*^-10, 
                    5.5}, {-4.4, -4.5966333517579185`}], {0., -0.17}, 
                    Automatic, {1., -7.94670995674096*^-11}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.1214353889954514`*^-8, 
                    5.5}, {-3.4000000000000004`, -4.59663335301309}], {
                    0., -0.17}, Automatic, {1., -2.0389734345371843`*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{7.606502094859025*^-9, 
                    5.5}, {-2.4000000000000004`, -4.596633354658479}], {
                    0., -0.17}, Automatic, {1., -1.383000380883459*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-2.559976780619099, 
                    4.867907033078084}, {-1.4000000000000004`, \
-4.281100199394563}], {0., -0.17}, Automatic, {0.8850740060141971, 
                    0.4654503237489271}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{9.191580829792656*^-10, 
                    5.5}, {-0.4000000000000003, -4.070744762283425}], {
                    0., -0.17}, Automatic, {1., -1.6711965145077556`*^-10}]}, 
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQAWIQDQGGB44vdJ3WceCSDYQvcIChv+zW5yShA4wQgQMM
kRvBfAhX4UD93HYkvsQBhlUVSHyNA/9DZiDxVQ78b5+IxDc48O/lvLYLwjxQ
vs6Bf85LkfiGB/4pLkfi6x34l5PXjuAbHKh/M/32hN/SUPd92N9waH5AoYcA
lM9xoGHaTCT7RA40GJYi8WUONByZgMRXOvC/rA2Jr3bgv8IUJL7WgXrLaWD+
GeWou3zfNu5pWLgIbB8AQrVwfA==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 24, 24, 24, 24, 8, 24, 8, 24, 24,
                     24, 24, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {998.5000000000001, 788.5387767066582}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.50000000000007, 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, True}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, 500}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_Bcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_WWcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_Wcore_net"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "X_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_4net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"]
                     -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"X_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
           Baseline, 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Processor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"Center\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{
          RowBox[{
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]], "\[Rule]", 
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]]}]}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Mean\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", "0.00011694978920109752`"}], ",", 
                    "0.00007700457070020814`"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Version\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"12.`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"ID\"", "\[Rule]", 
                TagBox["5267004855378899174", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Panel[
          Grid[{{"f1", "NumericalVector"}}]] -> Panel[
          Grid[{{"f1", "NumericalVector"}}]], 
        Column[{
         "Invertibility" -> Short["Perfect", 5], "Missing" -> 
          Short["Allowed", 5], "Mean" -> 
          Short[{-0.00011694978920109752`, 0.00007700457070020814}, 5], 
          "Version" -> Short[{12., 0}, 5], "ID" -> 
          Short[5267004855378899174, 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"PostProcessor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"FirstValues\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{""}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Info\"", "\[Rule]", 
                TagBox[
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Type\"", "\[Rule]", "\"NumericalVector\""}], 
                    ",", 
                    RowBox[{"\"Weight\"", "\[Rule]", "1"}]}], 
                   "\[RightAssociation]"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Key\"", "\[Rule]", 
                TagBox["\"f1\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Null, 
        Column[{"Info" -> Short[
            Association["Type" -> "NumericalVector", "Weight" -> 1], 5], 
          "Key" -> Short["f1", 5], "Invertibility" -> Short["Perfect", 5], 
          "Missing" -> Short["Allowed", 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"ProbabilityNet\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["2", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["14", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 3}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-13., 7.960204194457795*^-16}, {-12., 
                    5.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFaB7pFGYX/rT1jc8W47OOv55oHcrTPdPKxrrDX
DWKbl3dW84DEq2t/NnjstOeI3sAavUHzwHq7l5PtXh62T/Ir0TgwQfPA0fQ3
j76eP23voAPSoHlAo2KXqb3OJfv5XzyBSPOASs5BsZyD1+wbl0d/PqykeeA2
f/eUxuW37Z+5tDPx/NQ4sHRj93X7/Af2Z8BA44CVMQg8tl/Udvng+gUaB+au
Z7ppJPnM/uZOp8C4co0Dh08eOHJN6qV9bppU9Y0AjQMrG3O/yVm8sY/ribKX
09U4EHidI4+78L39Bm3mefo8GgfiUk+Knkv6aB/nIjKd5536gU9rW6e/kPps
n3OtV2vrJfUDma6WNlcffLG//jA/QnOX+oED2k+Yp2z5Zr8wbZdC5hL1Az8S
2t6pTPth/+RZu1d6gvqBtign5sBv/+zZvi0O3qGofmBneYBITDaTA/MUPpuY
F2oH7vMH6q+VZnW4c+A4c/AWtQMbvi66JN3D7jCp5vyqOa1qBww03f4t38Pp
oHxc1dAyRu1AwiqrTYFruR0mLDg1TcNC7YBNZcM7iTheh1sc+25nSaodODlV
fPPfc3wOkPhSO8AIpgUcAOALz3c=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFaB7pFGYX/rT1jc8W47OOv55oHDqjud62ffMZG
N4htXt5ZzQN/p16pNSs7Y8MRvYE1eoPmAfs0x93KYWdskvxKNA5M0DzQOo31
n5vxGRsHHZAGzQOX1BTdFvCesZn/xROINA+oiE+ZrP/0tE3j8ujPh5U0D9Sk
xz37svO0zTOXdiaenxoHbok32H3oPm1zBgw0Dthp/JytGH3a5uoWr072BRoH
sneuXMU8O8d+eZF8/l6glQFbQPweexs277p3XhoHnpX85zcSX2A/Lf/stllK
Gge4N4Pk19hvW7dM4tBv9QNHJofclYrcZj/r8LXFKdfUD0wFqz9g77IuNqJp
k/qBe29Wnlv37Kj9ljxrM+kJ6gd2bwLpP2N/FuwetQNWxiDw2L5TTei2+QK1
A1xqgmYSYs/s8yxtt9WVqh0oX/zLIofvpX0tq1/cQh+1Aw2r31vry7yx39zl
cnm+qtoBZbsPdon27+1FTiqIVjGoHdik+0+B0eaj/ZwDj5QN7qoemM/YpcT5
+JO9X2HX/4O7VQ/cniW95MSUL/aat8VX6M9RPZDyc9NS+8Bv9jr/umQr61QP
2MgGqOdJ/LA3e6A/K9dJ9UDPH8ZYtZu/7V9OWKBxlEv1QPHHb6Vrg//bOwrc
PVF/XeXAj1rxnYwujA4OcU+r5q5QOfCf96qGyG4mh2dVO+3k6lQOXNQw4eLj
Z3EwSosUYYpQOZB3ziT2vT2rg5rC0d8eZioHrvy7prjDl83hwIo/Xz5JqBxg
2yUVkWHB7gBJPyoHGME0hwMANC0OLw==
                    "]], 
                    LineBox[CompressedData["
1:eJxFkn0s1HEYwI9sqVbTdMJEfnfuxR/kCK1zP1m20x3RuUYpKS83aWZJFilD
ee+uMzrV5CXvpSzVcu37kPeXtGWJKMOO03G5bM5x6m7Mffb57nk+/z1/fO0v
x5+JMiYQCE66p5+bOEIe0ch848UAU9XTF+Y1SwfKXo+jle21qKI6hJPcR4eZ
l428sU8fkJmkrv9VHR0uSiXEQXEn8nz2cUKWSYfdqhIhu+szspUWpVuH0YGV
KhhsSh1GbQqndxxnOnyLwaxzLMaQPSM/7dYGDeYmmAdDLCcRK79xpLqXBkSm
R9bDqGlkufag/YuQBokBhJG/Khniijp6Z+JpECjmE/HROdQaVFFz258GPZl8
bvC9eSRg0sMe02kwjhFSXTW/0amg0FkvExpkX+NXjbstoFghwy9qggpDkfzO
0+6LqGP1Tfr+Fio0mxJ+5W8sotCCSaFPHhWcQ/lL4gIlonFaktThVGCf5a9H
TivR4IAeCqz+06NEy35lOimg3mqb7gSdFFjbat+Tegwd12ahkwKarS5iycUs
ucN2S1v1GHrGs3Das9DQe95e0mnozXvI261t5+SalJPBqp7hUDaqRCcaSNdf
J5MhpbavKDVaiUqygu9/5ZHh0Fp3wKPqRbQR9LMrlkEGbbkjTyVZQMlmbS43
D5DB7qmqPNdbgUza1rvVqyS4q7A7HlE6jyqviHKUUySwFzbbJtXMoWB1WtL5
IRKYZNdze2NkyOJOZyETkYAyvLPz3I9pFKEtFkhukIC7i5Wwz7UHsTJqmlUu
JNCILhhrcvrwerOVOPYyBv6TjaKrjCm86nlWSakUA5ulP8U7KhX4ER8eQ56L
QWK/C5ukUeFcWbiXWzgG3wXGuLX5Cq4WNbxPOYaBNHC+KfqJBnfzda9CVhgc
zpCXmhZr8c3/jIHR5uL9Hx7xncg=
                    "]], 
                    
                    LineBox[{{-13., 3.000000000000001}, {-12., 
                    5.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFaByBsDodPJ07F2D7XPGBx50oPVzKHw6JlEd4V
pzQPVKXOvSR3jcNBYObK0xtWah44PTvyok0kp4PFgr13n7VoHlCt5+xMecPp
ILdnSqNUjOaBbv61P6f2czkcfKO33Vtf88A/Hxfli07cDopGPXVV/zQO1Jmf
ZxVj43Gw61lzfdlJjQOc530XptzkcZD43X/owgSNAwuED3zds4fXwWfikZNP
8jUO3EgJPepvxuewO3DR8lpfjQNmiaLCUxfyOWTYaMbM1tQ4sIuD4X7PPz4H
r8DI57YsGgfSokU1zX35HbImGHmm3lU/YBYZ+nFyL7/DkZ9bGgW3qh8wYDpg
vng/v0Nk74MJTt3qBwLCQv+kPOZ30PDeWvYjXv3AtFBR+5s/+B2MwUD9ACM4
fAQcJHdX/P3MhuDXRyzhsbmrBucncm9L4N6G4B+4vPZn4kQEf/7G7uv2+Qj+
ryX+QITgXwEpN0Lwtc908rFKIPiQ+ELwATG9oyU=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFaByBsDocrxmUffz3XhPN1g9jm5Z3VPMAM5XNE
b2CN3qB5gAXKT/Ir0TgwAaHeQQekAcGf/8UTiBD8xuXRnw8rIfjPXNqZeH5q
wM0/AwYacPnPIO3zEXyZ44VAhFDvAgYacPdkHxTLOSiGUD/F7uVku5fqcP6e
3SCA4D+x6Hts0Yfgc29LACJ1uPlnwe5Rg8uDvTNfDc09anD1rmD3qMHdkwN2
jxqae1TR3KOK5h5VNPeows03BgOEvOTuir+f2VQPMEL5dRFLeGzuqsDlE8EG
IPgHLq/9mThRBa5+3sbu6/b5CP6vJf5AhOBfASk3QvC1z3TysUogzIOkH4Q8
ADX4mEw=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQFaByBsDodPJ07F2D7XPHBKWbv46xx2h0XLIrwr
Tmke6JyVpPtQk91BYObK0xtWah6wTlmmd3gZm4PFgr13n7VoHnjQ8K1stjCb
g9yeKY1SMZoHKj4EsWUVsDocfKO33Vtf8wDr5t139PayOCga9dRV/dM40HbC
4NfLn8wOdj1rri87qXHgt8GmuNlqzA4Sv/sPXZigcSD5jT2XszOTg8/EIyef
5Gsc0Jm9ymrDSUaH3YGLltf6ahw4P+/Vm6w4RocMG82Y2ZoaB7y+/1coZmR0
8AqMfG7LonFg/pJX105sYnDImmDkmXpX/cCZZav4cooYHI783NIouFX9wJW/
9idiHBgcInsfTHDqVj+wZeUq5tkyDA4a3lvLfsSrH8hf9eqAGjuDw9kzIKAG
DR8Ghy+e84EIwZc5XghECL6rCwgg+DkHxYAIwZ9i93Ky3UtVOH/PbhBA8J9Y
9D226EPwubclABGCD3GPygFGFPcg+LJg9yD4EPcg+BD3IPgQ9yjD+RD3IPgQ
9yD4PGD3IPjGYIDgS+6u+PuZDcGvj1jCY3NXCc5PBHsIwT9wee3PxIkI/ryN
3dft8xH8X0v8gQjBvwJSboTga5/p5GOVQPAhFIIPAO7v9j0=
                    "]], 
                    
                    LineBox[{{-13., 5.000000000000001}, {-12., 
                    5.000000000000001}}], 
                    
                    LineBox[{{-12., 5.000000000000001}, {-11., 
                    4.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQEaBxjBtIjDFeOyj7+eqx9ggPJ1g9jm5Z1VP8AE
5bNFb2CN3qAOV5/oV6JxYAKC76AD0oDgL/jiOf+LJ0J/0/Loz4eVEPLPXdqZ
eH6qwflnz4AAgg/WPl8N7h6Z44VApAY3z9UFBBDqcw6KARGCP8Xu5WS7l6pw
/p7dIKAK1//Eou+xRR9CnntbAhCporlHBc09KnD3yILdo4LmHhU096iguUcZ
zT3KaO5ByPOA3YPgg51zRgnOX9x2+eD6BUoHjs6xUKz6LexwY6dTYFy50gGJ
4kctL94KO+SmSVXfCFA68Lnpr5b3dWGH+J4oezldpQNRZzqFF20XdlivzTxP
n0fpgI9/u93bPmGHOBeR6TzvFA+c4v62WidW2CH7Wq/W1kuKBy4xXotOUBJ2
uPYwP0Jzl+KBVEN1v457Qg4L0nYpZC5RPNA862XTkolCDk+ftXulJygemDpb
Xmtuo6AD27fFwTsUFQ9I3uj3e9gm4MAyhc8m5oXCAZkFJQ8eOvE73DlwnDl4
i8KBx2x2cjMW8TpMqjm/ak6rwoGeJ9VhT3V4HJSOqxpaxigckLDU6zz5kMth
woJT0zQsFA60sIRucznI6XCLY9/tLEmFA5fdPtwNO83hAIkXBWj4cDgAAKUC
87U=
                    "]], 
                    
                    LineBox[{{-11., 4.000000000000001}, {-10., 
                    3.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFqBxjBtIDDFeOyj7+eq8L5OkFs8/LOIvjs0RtY
ozcg+El+JRoHJiD49mANCP6CL57zv3gi+E3Loz8fVkLwn7u0M/H8VIHzz54B
AQQfrH0+gi97vFDmeCGC7+oCAgh+zkExIELwp9i9nGz3UhnO37MbBBD8JxZ9
jy36EHyebQnc2xIQfLBzzijB+de2eHWyL1A6MDVU1P7mD36HZUXy+XtLlA4E
hIX+SXnM72DD5l33zkvpgAHTAfPF+/kdpuWf3TZLSemAeWTox8m9/A5b1y2T
OPRb8UBqtKimuS+/w6zD1xanXFM8sIuD4X7PPz4Hl3WxEU2bFA+YJYoKT13I
57Alz9pMeoLigZspoUf9zfgcXrAU2OrnKx5YKHzg6549vA6HioM1Is0UD3Cc
912YcpPH4f7Z4sZWRsUDtebnWcXYeBwchC96bLmgcOCfj4vyRSduh0fO2XVP
Fysc6OJf+3NqP5fDiXgnJclqhQPK9ZydKW84HT6lhZn4hykcODk78qJNJKdD
XOTyLe2mCgeqUudekrvG4cBnbrr4kITCAYs7V3q4kjkcIOlHARo+HA4AGn/G
Lg==
                    "]], 
                    
                    LineBox[{{-10., 3.0000000000000004`}, {-9., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEqBxjBNIfDVeOyj7+eK8P5OkFs8/LOKh9ggvLZ
ojewRm9AyCf6lWgcmIDg24M1IPjzv3gCEYLfuDz682ElBP+ZSzsTz08luPln
wEAJLv8ZpH0+gi9zvBCIEOpdXUAAIZ9zUAyIEPwpdi8n271UhPP37AYBBP+J
Rd9jiz4En2dbAve2BEW4+cZggJCX3F3x9zMbgl8XsYTH5q4CXH0iN8gABbj8
wctrfyZORPDnbey+bp+P4P9a4g9ECP4VkHIjBF/7TCcfqwTCfEh8IeQBi5xw
Mg==
                    "]], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    3.0000000000000004`}}], 
                    
                    LineBox[{{-8., 2.0000000000000004`}, {-7., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-7., 2.0000000000000004`}, {-6., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-6., 2.0000000000000004`}, {-5., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKBxjBNIfDivQ3j76el4fzI5bw2NydJX+ACcrn
2ZbAvS0BIX9ozouABkUEvw6sQQ7Ot3852e7lZASf2X/7s3ZXBP9sJx+rxCdZ
uPmzZoKALFz+BUi7HYJv2ffYou+xDFx9VwcIyMDlbzTpAhGCr1F7Sb32kjSc
X1EOAgj+iUKZ44UyCL5EzkGxnINSaO6RhMuDvWOH4FuA3SMBV98Jdo8EXP4m
2D0SaO4RR3MPgn8c7B4EXxzsHjG4+WlgIAaXNyr7+Os5L4L/d4OHZMUuUbh6
sO4cUbh84/Loz4eVEHzbZPH19fdE4PwvnvOBCMEHK09F8MNmCMtyGYjAzYek
H4Q8AJSllRg=
                    "]], 
                    
                    LineBox[{{-5., 3.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 2.}}], 
                    LineBox[{{-3., 2.}, {-1.9999999999999998`, 2.}}], 
                    
                    LineBox[{{-1.9999999999999998`, 2.}, {-0.9999999999999999,
                     2.}}], 
                    
                    LineBox[{{-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.632426463519458`, 
                    1.8378676824027063`}, {-0.25, 0}, 
                    Offset[8], {1., 5.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.235871269246914`, 
                    0.786213352753084}, {-0.25, 0}, 
                    Offset[8], {0.1559393025382665, 0.19127469773826666`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.920182958499248`, 
                    0.12919975755013535`}, {-0.25, 0}, 
                    Offset[8], {0.14306450739988819`, 0.08380524814062784}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    
                    False]], {-11.355555555555554`, -0.9999999999999991}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 
                    1.1102230246251565`*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.417705098312485`, 
                    4.164589803375033}, {-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.812820711494876`, 
                    3.9773027452952476`}, {-0.25, 0}, 
                    Offset[8], {0.08165695756016156, 0.017459426695964453`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.355555555555554`, 
                    3.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.266666666666666`, 
                    2.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888857, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    5.000000000000001}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    4.4}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.355555555555554`, 5.}, {-0.25, 0}, 
                    Offset[8], {
                    0.08888888888889035, -8.881784197001252*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    3.400000000000001}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000004`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.500723193132872, 
                    3.9982540573304046`}, {-0.25, 0}, 
                    Offset[8], {
                    0.37633139151203565`, -0.0034918853391929794`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.777777777777779, 
                    3.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    2.6000000000000005`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.355555555555556, 
                    3.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-2.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999999, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 2.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 7.960204194457795*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., 5.000000000000001}], 
                    Offset[{12, 12}, {-12., 5.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-12., 5.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 4.000000000000001}], 
                    Offset[{12, 12}, {-11., 4.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., 4.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 3.0000000000000004`}], 
                    Offset[{12, 12}, {-10., 3.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., 3.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-9., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-9., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 3.000000000000001}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 5.000000000000001}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 3.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 3.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-8., 3.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Total_loss_jac\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_loss_jac", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2, 2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., 1.0000000000000004`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Z_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Z_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/AcCkFpqAB9qGAJyT27Olvsgt4HwxP7PDdQwl4FK7ps1
638ByF3VVefWw9xIDXMZqOA+5LDbsfV/QGHBnvMg9tpV/6MHg/s2bvwfCnIP
yI0g/vIl/xOoGIYUu6+i7PhukFtA7oKJZWasfY8uRiagyH3HDv93gYUdMJ4V
YOKwMISF6UC5r6z0yH5c4USlMCTbfaC8ALIf5A7ksIMBKqVDst0HS3egsgWX
GlgY4lNDAJDlPkT62noXW9ihq6MgDEl2H3p5R0g9rDzs6XnTQQ/3gewB2QfK
G8SoB4UvLAzxhTU13AcyHxSnxIYdDMDqPzLKG5LcB6tfGxtvzSfRHnhe6Wx/
1k+CNqLdR2yewAVOn/7vgBTPgtR038sn/w1IyRO4ACyeSWgjEnQfKKyKC/ed
ITde0QHMn6B8Tan7QH6EpTmQeeTEKzaQlbnuHZFlAE73IbsNlOZAcUwNt8EA
LL8QcCNW94HcVldzaRWsTKC222AAFo540iOG+5DTGy3CDZ8bQf0WNHfC3Qdy
F6hsgqVfaJtOiZZugwFYnQTDNdVnN0yb9r/c17tpCkgO1BaBpQdYGUpBXvAh
Bzs7VOT5+TRu93Av+w/DxkbB/5H5vj4N+0HqyLWDTP9gAFCfBhx+Po0bQXEO
KtupFZcA7/Dzsw==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-8., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"square\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "2"], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["square", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[#^2& , {4, 3}], "Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_z\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_z", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWIO9uf9f///1+BgTrAh0rmwEFa6or/INzR9ngS0J0CFBpHdfeB
wg/mRhCe2P+5gQLjqO4+GKiuOrce2Z3Ll/xPIMMYmrkPBF4++W+Qm7PlPsyN
ebnbbp8+/d+BBCNo6j4YAIVdZsba9zB39na/6SQybdLFfTAwa9b/AvS0ScCd
dHUfDPT0vOlAdifI3TiUDoj7YAA9Dx07/N8FTcmAug8ENm78H4qch0qLDx5B
Kt8H3H0wgC0PqakFhQ+0u9DBtGn/y2Fu9HAv+w8q76lshQ81sI933XFjo2Cw
G0HY17tpChXMpSqwsspNQU6bIExi+U5rAPYzBeU7rQFKnKCX71RqI1ECsKYZ
9DbSokX/0+jtMCjAm6bRy/cdW/8H0MthUEAwz4HchJyHSooOnKBi+50QILpM
ANVDyHmotfnuTDqkTZLLLFCbiIrtd0KA7DIVFH5EtpEoARSV+aD2e2HBnvMw
N1LLUUiAKnUSLG1Swyw0QPU6EwBfZk3A
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-6., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_half\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_half", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[(-0.5) #& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHUgP+//+v0Np8d2Za6or/SGZSCzeSq1dNLSjcx6dpmZdn
1WMP97L/nh6VLyn1KxZAVvidPv3fobhw3xlQmIFwY+Ot+S+f/DegtuMYSHQf
KC7rai6tgrkrN2fLfRq5CwaIch/IXZ3tz/qzMte9g7hr693lS/4nAMUFaOg2
otw3a9b/AuS4BLmTxmGGDHC6D+SGwoI952Huqqw4uY2O7oIBDPeB4hKU3hFx
ueU+KC7p7C4YgLsPlJYWLfqfBnIPyF0g902b9r8c5N4BchvcfejlRVnpkf0D
EJcYwNIyKwkUlzB35eVuu71j6/+AgXYXKC4n9n9uAJX5sDS2a/t/vwGOSzAA
xSUsX4Lqpeqqc+sHQ1yCwgbkFuSy38oqN2UwuAtUpsLyJajsB5W50LKf4vYL
JQDkDuQydtKEL/VAdykhKRkQ94HCDNldeMoLuroPVvZnZqx9D0tjGzf+D8VT
j9PNfchxSULZT3P3IZcXsLhES2P4AM3cB4tL5PKCjLKf6u6Dlf2gcgLmLmh5
oUCGcVR3H5H5klhAdffBwoyENIYPUN190HqcWu1+qrsPAJ89jxE=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-5., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"gaussian_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.8378770664093453`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["gaussian_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.8378770664093453` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-4., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-4., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 3.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 3.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 3.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_jacobian", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 2.}], 
                    Offset[{10, 10}, {-3., 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzNlT1IQlEYhi/V0OjaZg3S2JhONaVhEYa0pviT4r35U5oV1UUimqwGIZdA
giKoENIkopaWMAqaopCWKFxqsP10v7ifXPxL7XivLxxBORwezvudx17rrMnR
wTBMoFv4MFlCw36/JTypEr6YuYDLydltBm7O7rT7B62dwo89wuoXVhdDPcb/
HkAIUa9HcrsO+yGhAVSSpvkELtV2tLDGsZknYGM9Z680wcQ0xZfNkqGA7+oO
uGDx/PNe/o0M0IZjGuSDLleWH4+QC+6sApeR4uLr2afVuq1jRj5p0IcK+pEg
MejDH8bRSFSjMU2V7KWdP8+Mx4lX2uXmxnu0RV1WSlU+YPB5Lx+QK7xwm5aR
C1PGBzMG8+52nXzijB3sk2mZuTBFPvBFIkEcwANcwBeLkRDwKsRW5Cv1RXD+
5lqBLssC7xK6RC6OTb9kUmRCaS50v+CJPM7YxTkZV7jL30CX+C7BZUuL96ft
0CXcDbBI3a/TsbZ24AKn4rtkPakcOBc6Zlrj/LoDHFLH7mx9rwpcfZItivDB
nUm5avhCVj50v2vm+AtnLJkkZrHLSpGNT9plA+5vOZ/UF9hlyYzVSsv4sEup
L5pwP3U+dD94ArlEX6ibOI46X53vst5Q58M7a2DGaoU6n/g/Xs0XjYY63w9V
CIu3
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-3., 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"density_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.3862943611198906`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["density_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.3862943611198906` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1.9999999999999998`, 2.}], 
                    Offset[{10, 10}, {-1.9999999999999998`, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/G9tvjvz////IPWUAh8qmIECQO6D4Z6eNx0UGkd194FA
Y+Ot+cjuPHb4vwuZRtHEfSAAjF+l3Jytd2FuLCs9sp+MOKeZ+2Bg+ZL/CZkZ
a9/D3Nnb/aaTBO00dx8MgNIicpzPmvW/gAhtdHMfDIDiGebGkqIDJ4BxroBH
Od3dBwLocY6nPBoQ98HAxP7PDchxvmjR/zQ0JQPqPhiorjq3HtmdO7b+D4BK
DQr3gQC2fK6mFhQ+0O5CB6A4hrnRw73sPygNUNkKH2pgH++648ZGwWA3grCX
e30NFcylKrCyyk3JzdlyHxaelRUnt1Gp3UEtAPYzetqkQZyTC1DihMw6iJYA
I82A6hvkOqiwYM95AnUQLQHONE1CHURLQDDPoddBdI5zossEPHUQLQFJZRa2
OojGcU5WmQqKY+SwpGF5RFGZX1dzaRWyO6nlKCRAcZ308sl/A1gdRA0HoQGq
1ZmgtAmiAQJrTNs=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-1.9999999999999998`, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_prob\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_prob", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 2.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGob8//9foaz0yH5qmIUGKHIfyF2NjbfmZ2asfZ+WuuI/
tRyFBMhyH8hdE/s/N+TmbLkPcldW5rp306b9L6e24xjIcN+sWf8LCgv2nAe5
C4RB8Qp0rxIN3AYCRLvv9On/DsjuAoXdyyf/DWjkLhgg6D5QXNbVXFqF7K4D
e/57AsUFaOw2vO4Duauz/Vk/LI3l5W67DYpbkDgd3IXTfaBwQU9jkyZ8qadh
GiPafehpDJT26ZDG8AGw+0BxVly47wxyGjt2+L/LALoLDCwts5KQy1ekNEaP
tI8TwMpXT4/KlyB3gdw3f87/XKC4IBWM96EE+/q0zPL2rL7r4V7239go+L+P
d91xZ4eKPErNZaCwrkRP+yC2lVVuCiVmUgOA4rK66tx6RNrfenf5kv8J0DRG
lfYLue4Cla+wtA/Kk2tX/Y9GS2N0dx8oXEBtCeS47Ol504GjHKOr+7CVrwTK
fbq4DxSXqG2LrXd3bP0fQIRWmroPvf1KRtuCJu5Db1vA2q9ktC2o7j5Q2YAc
l82Nt+dS0LaguvtA4QZyF6g+p0LbgibhB0pjVDJuwMpnIgHV3QcA3U2J6A==

                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999999999999, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perpixel\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["perpixel", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[0.5 #& , {4, 3}], "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.2246467991473532`*^-16, 2.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total_Loss\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"checker_b\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 7.960204194457795*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_1\"", TraditionalForm], 
                    Offset[{0, -15}, {-12., 5.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_2\"", TraditionalForm], 
                    Offset[{0, -15}, {-11., 4.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_3\"", TraditionalForm], 
                    Offset[{0, -15}, {-10., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_4\"", TraditionalForm], 
                    Offset[{0, -15}, {-9., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"checker_w\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 3.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 5.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Total_los..\"", "\"Total_loss_jac\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Total_loss_jac", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-8., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Z_out\"", TraditionalForm], 
                    Offset[{0, -7}, {-8., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"square\"", TraditionalForm], 
                    Offset[{0, -13}, {-8., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_z\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_z", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-7., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"minus_half\"", TraditionalForm], 
                    Offset[{0, -13}, {-6., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"gaussian_..\"", "\"gaussian_coef\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "gaussian_coef", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"plus\"", TraditionalForm], 
                    Offset[{0, -13}, {-4., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_jacobian\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_jacobian", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"density_c..\"", "\"density_coef\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "density_coef", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-3., 2.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"minus_prob\"", TraditionalForm], 
                    Offset[{0, -13}, {-1.9999999999999998`, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"perpixel\"", TraditionalForm], 
                    Offset[{0, -13}, {-0.9999999999999999, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Total_Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {1.2246467991473532`*^-16, 2.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-5.393193716300061, 
                    1.0786387432600122`}, {-12.632426463519458`, 
                    1.8378676824027063`}], {0., -0.17}, Automatic, {
                    0.19611613513818404`, 0.9805806756909202}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-4.262855384506947, 
                    3.47535091332949}, {-12.235871269246914`, 
                    0.786213352753084}], {0., -0.17}, Automatic, {
                    0.6318819842417255, 0.7750646153648996}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-2.7799720581843137`, 
                    4.7457091520356025`}, {-11.920182958499248`, 
                    0.12919975755013535`}], {0., -0.17}, Automatic, {
                    0.8628562094610186, 0.5054494651244207}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-6.869504964868043*^-15, 
                    5.5}, {-11.355555555555554`, -0.9999999999999991}], {
                    0., -0.17}, Automatic, {1., 1.2490009027032806`*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-4.919349550499537, 
                    2.4596747752497685`}, {-12.417705098312485`, 
                    4.164589803375033}], {0., -0.17}, Automatic, {
                    0.4472135954999579, 0.8944271909999159}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.1499858073915914`, 
                    5.378432173300869}, {-11.812820711494876`, 
                    3.9773027452952476`}], {0., -0.17}, Automatic, {
                    0.9778967587819761, 0.20908832861665297`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-11.355555555555554`, 
                    3.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-11.266666666666666`, 
                    2.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-12.399999999999999`, 
                    5.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-11.4, 
                    4.4}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{5.4956039718944346`*^-14, 
                    5.5}, {-10.355555555555554`, 5.}], {0., -0.17}, 
                    Automatic, {1., -9.992007221626245*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526012, 3.8890872965260104`}, {-10.4, 
                    3.400000000000001}], {0., -0.17}, Automatic, {
                    0.7071067811865474, -0.7071067811865477}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0.051030934720856874`, 
                    5.4997632534229615`}, {-9.500723193132872, 
                    3.9982540573304046`}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.009278351767428522}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, 
                    2.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3739009929736363`*^-14, 
                    5.5}, {-8.777777777777779, 3.000000000000001}], {
                    0., -0.17}, Automatic, {1., 2.4980018054066113`*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-8.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-8.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-8.4, 
                    2.6000000000000005`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-7.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-6.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-5.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-4.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-6.355555555555556, 
                    3.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-4.4, 
                    2.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-3.4, 2.}], {
                    0., -0.17}, Automatic, {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-2.4, 2.}], {0., -0.17}, Automatic, {
                    1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.4, 2.}], {0., -0.17}, Automatic, {
                    1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 2.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQFaB7pFGYX/rT1jA+FrHGAE0yIOEL4alC8A5atA
+RxQvhKUz+AAM48JRV4LzTwFNP0KUPUf7FHlYebJoPEl0PgiaHwBHPIw+zgO
QD3u8B8C9qPy38P57DEixmrLFtrA+AB7vCqY
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 8, 8, 20, 8, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {789., 376.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.49999999999998, 38.49999999999999}, {
                    28., 18.}}, ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_1"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_2"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_3"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_4"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total_loss_jac"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"], 
                    NeuralNetworks`NetPath["Nodes", "square"], 
                    NeuralNetworks`NetPath["Nodes", "summation_z"], 
                    NeuralNetworks`NetPath["Nodes", "minus_half"], 
                    NeuralNetworks`NetPath["Nodes", "gaussian_coef"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Nodes", "summation_jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "density_coef"], 
                    NeuralNetworks`NetPath["Nodes", "minus_prob"], 
                    NeuralNetworks`NetPath["Nodes", "perpixel"], 
                    NeuralNetworks`NetPath["Outputs", "Total_Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Total_Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "Z_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["net_W" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_z" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_half" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "gaussian_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "Total_loss_jac" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_jacobian" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "density_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_prob" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "perpixel" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Total_Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Z_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
           Baseline, 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Method\"\>", "\[Rule]", "\<\"RealNVP\"\>"}], ",", 
   RowBox[{"\<\"Options\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"MaxTrainingRounds", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "500"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"ActivationFunction\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "Ramp"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkDepth\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "8"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"CouplingLayersNumber\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "4"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkType\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"FullyConnected\"\>"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7728159282538395`*^9},
 CellLabel->
  "Out[265]=",ExpressionUUID->"fe4fa28a-dcdc-4939-86df-393e14b4a6ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PDF", "[", "ld", "]"}]], "Input",
 CellChangeTimes->{3.7728159137027445`*^9},
 CellLabel->
  "In[264]:=",ExpressionUUID->"c9f4a6be-4b46-4649-8845-2fc7b8ae4a10"],

Cell[BoxData[
 RowBox[{"PDF", "[", 
  TagBox[
   TemplateBox[{RowBox[{
       StyleBox[
        TagBox["LearnedDistribution", "SummaryHead"], 
        "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          TemplateBox[{
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                   FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                    AxesLabel -> {None, None}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                    Frame -> True, FrameLabel -> {{None, None}, {None, None}},
                     FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                    PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                   FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                    AxesLabel -> {None, None}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                    Frame -> True, FrameLabel -> {{None, None}, {None, None}},
                     FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                    PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["10000", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
           "SummaryPanel"], 
          ButtonBox[
           DynamicBox[
            ToBoxes[
             If[
              
              Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
               "Local"], 
              Style["This object cannot be used as input.", "SummaryEmbed"], 
              BoxForm`EmbedSummaryLabel[LearnedDistribution, 4371048, 
               Dynamic[Typeset`embedState$$]]], StandardForm]], 
           ButtonFunction :> 
           BoxForm`EmbedSummaryInterpretation[
            LearnedDistribution, 
             8813937620921881760724967665765432050373222368601455234304, 
             EvaluationBox[], 
             Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
           "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
           Dynamic[
             
             And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
              "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
           Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
         "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("LearnedDistribution[\[Ellipsis]]"& )],
   False,
   BoxID -> 8813937620921881760724967665765432050373222368601455234304,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "]"}]], "Output",
 CellChangeTimes->{{3.77281590584874*^9, 3.7728159140697837`*^9}},
 CellLabel->
  "Out[264]=",ExpressionUUID->"9ca9ef6d-7a4a-4047-bd5d-70e1a5d9afea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"PDF", "[", 
    RowBox[{"ld", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellLabel->
  "In[269]:=",ExpressionUUID->"7c3507ef-4f52-429c-be0c-f85529b99a53"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7728163186022325`*^9},
 CellLabel->
  "Out[269]=",ExpressionUUID->"7e82f26f-2e59-4ee5-9279-794eb3b49289"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  SqrtBox[
   RowBox[{"2", "\[Pi]"}]], "]"}]], "Input",
 CellChangeTimes->{{3.7729807433448596`*^9, 3.7729807764314113`*^9}, 
   3.7729811901721663`*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"6e64b7b1-be8f-473b-81cf-712b6a94128f"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"Log", "[", 
   RowBox[{"2", " ", "\[Pi]"}], "]"}]}]], "Output",
 CellChangeTimes->{3.7729811905002546`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"7b234074-55c3-4e5c-a8e8-405ee05322e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"2", " ", "\[Pi]"}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[27]:=",ExpressionUUID->"d23d9c0d-accf-4747-9750-501c3c8aa9c6"],

Cell[BoxData["0.9189385332046727`"], "Output",
 CellChangeTimes->{3.7729811920281696`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"8043abeb-0cc2-480c-b6f9-a586228651a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"1", "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Log", "[", 
         RowBox[{"Abs", "[", "x", "]"}], "]"}]}], "+", 
       SuperscriptBox["x", "2"]}]]}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772983089699545*^9, 3.77298313366263*^9}, {
  3.772983175368348*^9, 3.772983177605068*^9}, {3.772983921265996*^9, 
  3.772984032072254*^9}, {3.7729841032948656`*^9, 3.7729841601122603`*^9}, {
  3.7729842063639383`*^9, 3.7729842326266313`*^9}, {3.772984277763638*^9, 
  3.772984330040924*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"5d28aa98-e837-449b-84da-5584f4b2f396"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
8oEKb2euov8BKRmj9g==
        "]], LineBox[CompressedData["
1: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
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$73485#1"]& ], {}}, {{}, {}}, {{}, {}}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{709.599999999992, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772983113320288*^9, 3.772983134527012*^9}, 
   3.772983178108082*^9, {3.7729839219367986`*^9, 3.7729840327635965`*^9}, 
   3.772984126793395*^9, 3.772984161122393*^9, 3.7729842330976324`*^9, 
   3.7729842842542777`*^9, 3.772984331554239*^9},
 CellLabel->
  "Out[191]=",ExpressionUUID->"cd77bc8b-a2be-4f8c-8e4d-4d09c56658ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"Log", "[", 
            RowBox[{"Abs", "[", "x", "]"}], "]"}]}], "+", 
          SuperscriptBox["x", "2"]}], "]"}], ")"}], "2"], "+", "1"}], ")"}], 
    "^", 
    RowBox[{"-", "1"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.7729841772824893`*^9, 3.7729841880074224`*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"448382f4-687f-4736-82f8-aa3b3e45504f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.772984183517409*^9, 3.7729841891482124`*^9}},
 CellLabel->
  "Out[187]=",ExpressionUUID->"3158555d-34dd-4b85-9b4d-b8555f560c8b"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{682, 820},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 186, 3, 67, "Subsection",ExpressionUUID->"87337af6-f5dc-4bff-8981-81ba89099865"],
Cell[CellGroupData[{
Cell[791, 29, 828, 22, 56, "Input",ExpressionUUID->"82dfa91b-7333-4bfb-8cc5-f642e388cf04"],
Cell[1622, 53, 1827, 37, 149, "Output",ExpressionUUID->"b1b4dff8-3b3f-4c29-95c4-22dc579ec317"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3486, 95, 396, 9, 35, "Input",ExpressionUUID->"80295e3c-af49-42a2-89ee-bb33f8e0861f"],
Cell[3885, 106, 3542, 77, 299, "Output",ExpressionUUID->"cb27ec8e-7cbc-4935-a341-393451e89cab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7464, 188, 563, 12, 56, "Input",ExpressionUUID->"b9830594-90f4-4367-a6ae-0e9eb3bc2115"],
Cell[8030, 202, 383, 8, 46, "Output",ExpressionUUID->"f156bf38-9487-4067-a46f-0b0f518fb4cb"]
}, Open  ]],
Cell[8428, 213, 199, 5, 35, "Input",ExpressionUUID->"6cd38048-a909-42da-8264-0b92ad0ed2ad"],
Cell[8630, 220, 233, 6, 35, "Input",ExpressionUUID->"130c6805-872a-4ed3-90c1-0cbac929fba8"],
Cell[CellGroupData[{
Cell[8888, 230, 496, 12, 49, "Input",ExpressionUUID->"0ec16479-bf26-475d-907d-22272c67b717"],
Cell[9387, 244, 11649, 210, 297, "Output",ExpressionUUID->"565cd58f-21c6-4ba0-8806-7e5cda5aab3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21073, 459, 454, 11, 49, "Input",ExpressionUUID->"44bdc431-a7bb-47cb-99b8-c5d824b68e3d"],
Cell[21530, 472, 17126, 300, 325, "Output",ExpressionUUID->"e3dd7b3f-9539-45f4-98e6-9790e25935d6"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[38705, 778, 211, 4, 46, "Subsection",ExpressionUUID->"5e309b92-9483-4458-b46a-7a906d394649"],
Cell[CellGroupData[{
Cell[38941, 786, 2531, 63, 380, "Input",ExpressionUUID->"99d2366b-03db-44d4-9dcb-abca59e5308c"],
Cell[41475, 851, 100535, 1668, 427, "Output",ExpressionUUID->"44b41d22-fb11-45f4-b5a2-31d877574e6f"]
}, Open  ]],
Cell[142025, 2522, 1455, 43, 260, "Input",ExpressionUUID->"d6ef9274-ddef-4c5d-80f4-c039dbdf6b8a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143517, 2570, 167, 3, 67, "Subsection",ExpressionUUID->"6b2657a6-e234-497a-ac67-6a8995513b9a"],
Cell[143687, 2575, 347, 7, 60, "Input",ExpressionUUID->"01225747-25fc-49f6-b181-1efb08f6ab92"],
Cell[CellGroupData[{
Cell[144059, 2586, 2449, 59, 230, "Input",ExpressionUUID->"51be7a05-f3a5-4198-abb8-12e35b0a5a82"],
Cell[146511, 2647, 248324, 4092, 500, "Output",ExpressionUUID->"ee6c15a6-7c16-40b6-84b6-bcb4315a93ce"]
}, Open  ]],
Cell[394850, 6742, 318, 7, 35, "Input",ExpressionUUID->"347d0986-3242-4d24-af87-833aaa961750"],
Cell[395171, 6751, 366, 8, 35, "Input",ExpressionUUID->"b7b2216a-ff00-4375-8c78-e1f65d442b10"],
Cell[CellGroupData[{
Cell[395562, 6763, 222, 5, 35, "Input",ExpressionUUID->"23054810-4c8b-4192-bf4f-804c6b044845"],
Cell[395787, 6770, 248222, 4090, 501, "Output",ExpressionUUID->"b875d25c-5bd6-480e-8c11-af58553dbab2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[644046, 10865, 211, 3, 35, "Input",ExpressionUUID->"3cb84464-c7da-42cf-91c7-4e0fab22cd12"],
Cell[644260, 10870, 14069, 240, 398, "Output",ExpressionUUID->"5b378da3-eb1a-42b3-a538-f35cac83f774"]
}, Open  ]],
Cell[CellGroupData[{
Cell[658366, 11115, 213, 3, 35, "Input",ExpressionUUID->"b4c092e4-5296-4805-834f-8819e9d0bbc2"],
Cell[658582, 11120, 377, 7, 40, "Output",ExpressionUUID->"ff1f28d8-a7af-4451-95f4-db37482f95b7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[659008, 11133, 181, 3, 67, "Subsection",ExpressionUUID->"02859dcc-83f7-468f-bc02-b8061d7359b6"],
Cell[CellGroupData[{
Cell[659214, 11140, 1192, 22, 132, "Input",ExpressionUUID->"c31d5cb8-3edc-4b5b-8d0a-7575a5198536"],
Cell[660409, 11164, 1351313, 25543, 124, "Output",ExpressionUUID->"66865cd8-df89-4960-b728-8f0d351d30ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2011759, 36712, 349, 7, 35, "Input",ExpressionUUID->"e141c67f-00d0-4e4a-9123-6ea44749aedb"],
Cell[2012111, 36721, 105827, 1755, 402, "Output",ExpressionUUID->"71a05f65-309c-4833-a601-3b4577176481"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2117975, 38481, 788, 22, 60, "Input",ExpressionUUID->"6680d8c5-1215-4e66-a79b-aed9fc20309f"],
Cell[2118766, 38505, 211, 4, 40, "Output",ExpressionUUID->"c08b4f3b-583e-421b-8342-8f2eebe4b0a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2119014, 38514, 261, 6, 35, "Input",ExpressionUUID->"2e867fff-85d9-4503-80e9-b7ff53759bdc"],
Cell[2119278, 38522, 1364955, 23412, 351, "Output",ExpressionUUID->"fe4fa28a-dcdc-4939-86df-393e14b4a6ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3484270, 61939, 184, 4, 35, "Input",ExpressionUUID->"c9f4a6be-4b46-4649-8845-2fc7b8ae4a10"],
Cell[3484457, 61945, 77405, 1376, 110, "Output",ExpressionUUID->"9ca9ef6d-7a4a-4047-bd5d-70e1a5d9afea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3561899, 63326, 500, 15, 35, "Input",ExpressionUUID->"7c3507ef-4f52-429c-be0c-f85529b99a53"],
Cell[3562402, 63343, 162, 3, 40, "Output",ExpressionUUID->"7e82f26f-2e59-4ee5-9279-794eb3b49289"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3562601, 63351, 268, 6, 45, "Input",ExpressionUUID->"6e64b7b1-be8f-473b-81cf-712b6a94128f"],
Cell[3562872, 63359, 252, 6, 57, "Output",ExpressionUUID->"7b234074-55c3-4e5c-a8e8-405ee05322e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3563161, 63370, 259, 7, 52, "Input",ExpressionUUID->"d23d9c0d-accf-4747-9750-501c3c8aa9c6"],
Cell[3563423, 63379, 169, 2, 40, "Output",ExpressionUUID->"8043abeb-0cc2-480c-b6f9-a586228651a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3563629, 63386, 850, 21, 59, "Input",ExpressionUUID->"5d28aa98-e837-449b-84da-5584f4b2f396"],
Cell[3564482, 63409, 28640, 491, 570, "Output",ExpressionUUID->"cd77bc8b-a2be-4f8c-8e4d-4d09c56658ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3593159, 63905, 596, 18, 41, "Input",ExpressionUUID->"448382f4-687f-4736-82f8-aa3b3e45504f"],
Cell[3593758, 63925, 279, 7, 40, "Output",ExpressionUUID->"3158555d-34dd-4b85-9b4d-b8555f560c8b"]
}, Open  ]]
}, Open  ]]
}
]
*)

