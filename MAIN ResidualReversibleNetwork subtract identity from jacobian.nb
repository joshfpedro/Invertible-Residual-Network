(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2694475,      49197]
NotebookOptionsPosition[   2677014,      48911]
NotebookOutlinePosition[   2677355,      48926]
CellTagsIndexPosition[   2677312,      48923]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Training Net", "Section",
 CellChangeTimes->{{3.7712451283911304`*^9, 3.7712451316814165`*^9}, {
  3.771429487828245*^9, 
  3.7714294883105803`*^9}},ExpressionUUID->"2224c134-276d-45c7-94ea-\
4dd0ffa2d06b"],

Cell["\<\
Helpers to compute the Jacobian (of a function at a point) and LogDet (of a \
matrix):\
\>", "Text",
 CellChangeTimes->{{3.771430193599156*^9, 3.771430214330559*^9}, {
  3.771430871152418*^9, 
  3.771430891146223*^9}},ExpressionUUID->"5f016171-0170-4547-bb4e-\
08190d5bca0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Takes", " ", "input", " ", "of", " ", "and", " ", "outputs", " ", "a", 
    " ", "Jacobian", " ", "and", " ", "a", " ", "corresponding", " ", 
    "function"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"JacobianNet", "[", 
      RowBox[{"func_", ",", " ", 
       RowBox[{"epsilon_:", "1*^-4"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "lin", ",", " ", "net1", ",", "sharedFunc"}], 
        "}"}], ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"NetExtract", "[", 
          RowBox[{"func", ",", " ", "\"\<Input\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"net1", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", "n", "]"}], ",", " ", 
             RowBox[{"ConstantArrayLayer", "[", 
              RowBox[{"\"\<Array\>\"", " ", "\[Rule]", " ", 
               RowBox[{
                RowBox[{"N", "[", "epsilon", "]"}], "*", 
                RowBox[{"IdentityMatrix", "[", "n", "]"}]}]}], "]"}], ",", 
             " ", 
             RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}],
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
        RowBox[{"sharedFunc", " ", "=", " ", 
         RowBox[{"NetInsertSharedArrays", "[", "func", "]"}]}], ";", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"NetGraph", "[", 
         RowBox[{
          RowBox[{"<|", "\n", "\t\t", 
           RowBox[{
            RowBox[{"\"\<addEpsilon\>\"", "\[Rule]", " ", "net1"}], ",", "\n",
             "\t\t", 
            RowBox[{"\"\<MapFunction\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapOperator", "[", "sharedFunc", "]"}]}], ",", "\n", 
            "\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "sharedFunc"}], 
            ",", "\n", "\t\t", 
            RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapThreadOperator", "[", "\n", "\t\t\t", 
              RowBox[{
               RowBox[{"ThreadingLayer", "[", 
                RowBox[{"Subtract", ",", 
                 RowBox[{"\"\<Inputs\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
               RowBox[{"<|", 
                RowBox[{"\"\<1\>\"", "\[Rule]", "1"}], "|>"}]}], "]"}]}], ",",
             "\n", "\t\t\t", 
            RowBox[{"\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
             RowBox[{"ElementwiseLayer", "[", 
              RowBox[{
               RowBox[{"#", " ", "/", " ", "epsilon"}], " ", "&"}], "]"}]}], 
            ",", "\n", "\t\t\t", 
            RowBox[{"\"\<transpose\>\"", " ", "\[Rule]", " ", 
             RowBox[{"TransposeLayer", "[", "]"}]}]}], "\n", "\t\t", "|>"}], 
          ",", "\n", "\t\t", 
          RowBox[{"{", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{
            "\"\<addEpsilon\>\"", " ", "\[Rule]", " ", 
             "\"\<MapFunction\>\""}], ",", "\n", "\t\t\t", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<MapFunction\>\"", ",", "\"\<Function\>\""}], "}"}],
              "\[Rule]", 
             RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
              RowBox[{
              "\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
               "\"\<transpose\>\""}]}]}], ",", "\n", "\t\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetPort", "[", "\"\<z\>\"", "]"}]}]}], "\n", "\t\t", 
           "}"}]}], "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "\n", 
    RowBox[{"Input", ":", "\n", "Jacobian", ":", " ", 
     RowBox[{"nxn", " ", "array", "\n", 
      RowBox[{"k", ":", " ", 
       RowBox[{
       "number", " ", "of", " ", "power", " ", "series", "\n", "Output"}], 
       ":"}]}]}], "\n", "\n", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"LogDet", "[", 
      RowBox[{"n_", ",", "  ", 
       RowBox[{"k_:", "3"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "powers", ",", " ", "parts", ",", " ", "elementwise", ",", " ", 
         "chains", ",", " ", "diagonalElements", ",", " ", "trace"}], "}"}], 
       ",", "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Extract", " ", "the", " ", "dimension", " ", "of", " ", "the", " ", 
         "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"(", "1", ")"}], " ", "Find", " ", "the", " ", "power", " ", 
         "series", " ", "expansion", " ", "of", " ", "log", " ", "of", " ", 
         "the", " ", "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Create", " ", "k", " ", "powers", " ", "of", " ", "the", " ", 
         "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", 
              RowBox[{"k", "-", "1"}], "]"}], ",", " ", 
             RowBox[{"NetFoldOperator", "[", 
              RowBox[{
               RowBox[{"DotLayer", "[", 
                RowBox[{"\"\<Inputs\>\"", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}]}], "}"}]}], "]"}], 
               ",", " ", 
               RowBox[{"{", 
                RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<1\>\""}], 
                "}"}]}], "]"}], ",", 
             RowBox[{"PrependLayer", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", " ", "\[Rule]", " ", "2"}], ",", " ", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "\"\<1\>\""}], "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"2", ",", " ", 
                RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], "}"}], " ", 
              "\[Rule]", " ", "3"}]}], "}"}]}], "\t", "]"}]}], ";", "\n", 
        "\t", 
        RowBox[{"parts", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", "i", "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Combine", " ", "powers", " ", "of", " ", "Jacobian", " ", "with", 
          " ", "the", " ", "coefficients", " ", "of", " ", "power", " ", 
          "series", " ", "of", " ", "log"}], "*)"}], "\n", "\t", 
        RowBox[{"elementwise", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ElementwiseLayer", "[", 
            RowBox[{
             RowBox[{"#", "/", 
              RowBox[{"(", 
               RowBox[{"i", "*", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"i", "+", "1"}], ")"}]}]}], ")"}]}], " ", "&"}], 
            "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"chains", " ", "=", " ", 
         RowBox[{"NetChain", " ", "/@", " ", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"parts", ",", " ", "elementwise"}], "}"}], "]"}]}]}], ";",
         "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Sum", " ", "the", " ", "powers", " ", "and", " ", "combine", " ", 
          "with", " ", "the", " ", "corresponding", " ", "coefficients", " ", 
          "to", " ", "get", " ", "the", " ", "power", " ", "series", " ", 
          "expansion"}], " ", "*)"}], "\n", "\t", 
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"chains", ",", " ", 
             RowBox[{"{", 
              RowBox[{"powers", ",", " ", 
               RowBox[{"TotalLayer", "[", "]"}]}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"k", " ", "+", " ", "1"}], " ", "\[Rule]", " ", 
              RowBox[{"Range", "[", "k", "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"Range", "[", "k", "]"}], " ", "\[Rule]", " ", 
              RowBox[{"k", "+", "2"}]}]}], "}"}]}], "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"(", "2", ")"}], " ", "Take", " ", "the", " ", "trace", " ",
           "of", " ", "the", " ", "power", " ", "series"}], "*)"}], "\n", 
        "\t", 
        RowBox[{"diagonalElements", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "i"}], "}"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"diagonalElements", ",", " ", 
             RowBox[{"{", 
              RowBox[{"TotalLayer", "[", "]"}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Range", "[", "n", "]"}], " ", "\[Rule]", " ", 
             RowBox[{"n", "+", "1"}]}], "}"}], ",", " ", 
           RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "n"}], "}"}]}]}], "]"}]}], ";", "\n", 
        "\t", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{"powers", ",", "trace"}], "}"}], "]"}]}]}], "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{"NetGraph", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ConstantArrayLayer", "[", 
            RowBox[{"\"\<Array\>\"", " ", "\[Rule]", " ", 
             RowBox[{"IdentityMatrix", "[", "n", "]"}]}], "]"}], ",", " ", 
           "powers", ",", " ", 
           RowBox[{"DotLayer", "[", "]"}], ",", " ", 
           RowBox[{"SummationLayer", "[", "]"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}], 
           ",", " ", 
           RowBox[{"3", " ", "\[Rule]", " ", "4"}]}], "}"}]}]}], "*)"}], "\n",
       "\t", 
      RowBox[{"(*", 
       RowBox[{",", " ", 
        RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"n", ",", " ", "n"}], "}"}]}]}], "*)"}], "\n", "]"}]}], 
    ";"}]}]}]], "Code",
 CellChangeTimes->{{3.7712449742491846`*^9, 3.771245006366479*^9}, {
   3.7712451508831515`*^9, 3.7712451557841234`*^9}, {3.7712453144685216`*^9, 
   3.7712453285817113`*^9}, {3.7712457304715033`*^9, 
   3.7712457308931007`*^9}, {3.7712458259602227`*^9, 3.771245850404341*^9}, {
   3.7712459191204967`*^9, 3.7712459291404824`*^9}, {3.7712461153774204`*^9, 
   3.771246153338872*^9}, {3.7712462382690597`*^9, 3.7712462393199034`*^9}, {
   3.771246330313553*^9, 3.7712464063691993`*^9}, {3.7712464726031733`*^9, 
   3.7712464860937243`*^9}, {3.771246540718958*^9, 3.771246555169996*^9}, {
   3.7712466800239964`*^9, 3.7712466865206413`*^9}, {3.771252682820319*^9, 
   3.7712526886540747`*^9}, {3.771252902567024*^9, 3.771252978293189*^9}, {
   3.7712530384354324`*^9, 3.771253079399975*^9}, {3.771253116220532*^9, 
   3.771253123793268*^9}, {3.771253380719039*^9, 3.7712533889277287`*^9}, {
   3.7712534698197002`*^9, 3.771253554009178*^9}, 3.7712536853326907`*^9, {
   3.7712541530167217`*^9, 3.7712542144035273`*^9}, 3.771254424797951*^9, 
   3.771254598201507*^9, {3.7712546714725294`*^9, 3.7712547071027145`*^9}, 
   3.77125474946239*^9, {3.7712548842551365`*^9, 3.771254932131669*^9}, {
   3.7712558131951303`*^9, 3.7712558710050125`*^9}, {3.771255915368943*^9, 
   3.7712559808829327`*^9}, {3.771256068624137*^9, 3.771256118081049*^9}, {
   3.77125616620991*^9, 3.771256171259182*^9}, 3.7712564488714848`*^9, {
   3.7712565465180397`*^9, 3.771256552092588*^9}, {3.7712571653739414`*^9, 
   3.771257172429468*^9}, {3.7712573877926216`*^9, 3.7712574037348146`*^9}, {
   3.7713244660005426`*^9, 3.7713244910245776`*^9}, {3.7713245243790855`*^9, 
   3.771324531988117*^9}, {3.7713245908646317`*^9, 3.7713245959189453`*^9}, {
   3.7713249191158295`*^9, 3.771324946301439*^9}, 3.771325843479694*^9, {
   3.771335643376546*^9, 3.7713356487496405`*^9}, {3.7713356846427784`*^9, 
   3.7713357320037837`*^9}, {3.7713358479249325`*^9, 
   3.7713358505109787`*^9}, {3.7713359320692725`*^9, 3.771335959998743*^9}, {
   3.771336024185506*^9, 3.771336025487505*^9}, {3.771337124879886*^9, 
   3.7713371679068193`*^9}, {3.771337926772975*^9, 3.7713379470355263`*^9}, {
   3.7713380138964157`*^9, 3.7713380192122517`*^9}, {3.7713381625833273`*^9, 
   3.771338195343887*^9}, {3.771338382620248*^9, 3.7713383831857405`*^9}, {
   3.7713397317904825`*^9, 3.7713397656696844`*^9}, {3.7713397970856915`*^9, 
   3.7713397999350233`*^9}, {3.7713400425678825`*^9, 3.771340053186591*^9}, {
   3.7713401150641637`*^9, 3.7713402533748283`*^9}, {3.771340556522333*^9, 
   3.771340558227483*^9}, {3.771341022932105*^9, 3.7713410414968033`*^9}, {
   3.771341611078085*^9, 3.7713416137232957`*^9}, {3.7713417798994308`*^9, 
   3.771341837020052*^9}, {3.771341869097454*^9, 3.7713418781499043`*^9}, {
   3.771341928760856*^9, 3.771342024010883*^9}, {3.7713420669509897`*^9, 
   3.7713420734470963`*^9}, {3.771342137535701*^9, 3.771342226986998*^9}, 
   3.771342354281867*^9, {3.771342426565675*^9, 3.7713424279424815`*^9}, {
   3.771344621792909*^9, 3.771344631136168*^9}, {3.7713453428098526`*^9, 
   3.7713453451538863`*^9}, {3.7713463119730854`*^9, 
   3.7713463362949605`*^9}, {3.771348354959154*^9, 3.7713483590829926`*^9}, {
   3.771348749417597*^9, 3.7713487597311993`*^9}, {3.7713511952321477`*^9, 
   3.7713511997695894`*^9}, {3.771426249219207*^9, 3.771426252651078*^9}, 
   3.7714294811167603`*^9, {3.771429539535887*^9, 3.771429565927732*^9}, {
   3.771429713837861*^9, 3.771429715245688*^9}, {3.771429886985057*^9, 
   3.771429902583715*^9}, {3.771429956155987*^9, 3.771429962712124*^9}, {
   3.7715268930376472`*^9, 3.771526907093895*^9}, 3.77152714212579*^9, {
   3.771527318409111*^9, 3.771527319922534*^9}, {3.7715399434494057`*^9, 
   3.7715399443750134`*^9}, {3.7715404209072847`*^9, 3.771540423197483*^9}, {
   3.7715408380531435`*^9, 3.771540871034897*^9}, {3.7715415857666063`*^9, 
   3.77154158949069*^9}, {3.7715436241335382`*^9, 3.771543651514549*^9}, {
   3.77154368863717*^9, 3.7715436900327816`*^9}, 3.7715437406552467`*^9, 
   3.771543914348199*^9, {3.7715439448118973`*^9, 3.7715440275125427`*^9}, 
   3.772881423114967*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LogDet", "[", 
   RowBox[{"2", ",", "2"}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715433286197944`*^9, 3.771543329983551*^9}, {
   3.771544034300994*^9, 3.7715440597962437`*^9}, 3.772881423121975*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"1e6de7ad-254a-4c3c-b7ed-94684a4edc51"],

Cell[BoxData[
 RowBox[{"-", "9.5`"}]], "Output",
 CellChangeTimes->{{3.7715440377220387`*^9, 3.7715440602106*^9}, 
   3.772657799034724*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"28c390e9-7244-49fe-a09d-32072e4abd39"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"NetExtract", "[", 
    RowBox[{
     RowBox[{"JacobianNet", "[", "forward", "]"}], ",", "\"\<Output\>\""}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715409993351655`*^9, 3.7715410217000055`*^9}, 
   3.7728814231329412`*^9},
 CellLabel->"In[48]:=",ExpressionUUID->"969c71a2-1489-4a2a-b824-02a14debfb28"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 4}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox["\"CA\"", 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-3., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {{2, 2}, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-5., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, BaseStyle -> GrayLevel[0.4], 
                    ImageMargins -> 0., ImagePadding -> 0, ImageSize -> 15, 
                    PlotRange -> All, PlotRangePadding -> 0], {-4., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-2., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["4", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1b0OgjAQB/BGHRxdHd2cdXF1UpNOEB8AYiEumIDR+Ea+JZaBBLHQa/sv
ckn5KOXuR9OUVXwLkgljrJjLQxA993kevcKFvDlnxTXNxOWU3UUq8l08lZ1L
2dayzWRLxLtkuOCoRLWrOgONEF/TVF+DjM4+lWeMPmq/YTj5dAaA0dpHqQ1Y
i1Y+k7qORmOfTT0Ho5HPZS4s3yX7EPuaRQ6SD7nnGubS+sD/g6+chKFkH4Bl
k7fX58tmkL/T59vWrNFTR+nzsea6QlPrxzekjVCTE8d5j47aXPN80FAY+Fhs
dbQsfEy2OlS+f5vaUZmOh4cPG0e17SYskfnA38mq+UPn/ABbejsD
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Abs", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["5", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Abs, "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-5., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -15}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"4\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"5\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-4.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.0000000000000002`}, {-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{20, 20, 8, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {331., 101.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "4"], 
                    NeuralNetworks`NetPath["Nodes", "5"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "NetFold", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {314., {107.5, 113.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771541022787551*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"0a657c81-1754-4d08-9f3b-2b424ed9d930"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"2", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.771527193584897*^9, 3.771527199930225*^9}, 
   3.772881423153863*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"ba3de970-fe5b-4e10-9e53-662275b91808"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox["\"CA\"", 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {{2, 2}, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, BaseStyle -> GrayLevel[0.4], 
                    ImageMargins -> 0., ImagePadding -> 0, ImageSize -> 15, 
                    PlotRange -> All, PlotRangePadding -> 0], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[4], 
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["4", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -15}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"4\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}, {-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{20, 20, 8, 24, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {276., 101.}, PlotRangePadding -> 0], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "4"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "3" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[1], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "NetFold", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 1], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{1, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 2], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {240., {14.25, 20.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.771527194874174*^9, 3.771527200504779*^9}, 
   3.7715361326955276`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"f13ba7f1-fddc-4be9-a758-fdda973e5f14"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", 
      RowBox[{"-", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.7715295320714183`*^9, 3.7715295335380864`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"5488646e-fe41-43ac-b774-50552bdd346f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", 
      RowBox[{"-", "2"}]},
     {
      RowBox[{"-", "4"}], "6"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.771529534510659*^9},
 CellLabel->
  "Out[94]//MatrixForm=",ExpressionUUID->"ec2d9c06-dd53-4048-8226-\
bae14440f7b6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", "x1"}], ")"}], "2"], "+", 
  SuperscriptBox["x2", "2"], "+", 
  SuperscriptBox["x3", "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", "x4"}], ")"}], "2"]}]], "Input",
 CellChangeTimes->{{3.771529741947469*^9, 
  3.7715297962171407`*^9}},ExpressionUUID->"fbda823d-a94d-4242-a5af-\
84131dbc3598"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {"1", "0"},
       {"0", "1"}
      }], ")"}], "+", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"3", "4"},
        {
         RowBox[{"-", "4"}], "6"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.771529523049416*^9, 3.77152955955365*^9}, {
  3.771529645261484*^9, 3.771529652900774*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"e4113b3d-248b-4b3c-88e8-1ac9092771c6"],

Cell[BoxData["8.300735254367721`"], "Output",
 CellChangeTimes->{{3.7715295553554955`*^9, 3.7715295597375584`*^9}, {
  3.7715296457735476`*^9, 3.7715296532220836`*^9}},
 CellLabel->"Out[99]=",ExpressionUUID->"2c117cfc-f977-441b-bce2-7121c9319c29"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", 
  RowBox[{
   RowBox[{"IdentityMatrix", "[", "2", "]"}], "+", 
   RowBox[{"(", GridBox[{
      {"0.4", "0.2"},
      {"0.3", "0.5"}
     }], ")"}]}], "]"}]], "Input",
 CellLabel->
  "In[167]:=",ExpressionUUID->"637aa149-3c29-4812-9898-d1ed67c18af7"],

Cell[BoxData["2.0399999999999996`"], "Output",
 CellChangeTimes->{3.771531471364813*^9},
 CellLabel->
  "Out[167]=",ExpressionUUID->"a2409a9b-f8a0-470f-a72b-fc45c266ca98"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{
   RowBox[{"IdentityMatrix", "[", "2", "]"}], "+", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"-", "0.2"}], "0.1"},
       {"0.1", 
        RowBox[{"-", "0.3"}]}
      }], ")"}], "*", 
    SuperscriptBox["10", 
     RowBox[{"-", "2"}]]}]}]}]], "Input",
 CellChangeTimes->{{3.77154176990878*^9, 3.7715417755628147`*^9}, 
   3.771541876025696*^9, {3.771541967886256*^9, 3.771541999338742*^9}, {
   3.7715425209405394`*^9, 3.7715425353007336`*^9}, {3.7715425927822266`*^9, 
   3.771542596333469*^9}, {3.7715426498177004`*^9, 3.77154268718372*^9}, {
   3.7715427532525263`*^9, 3.771542754856821*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"1a93ad55-46ff-40d3-9766-c3bf3a716e09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.998`", ",", "0.001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.001`", ",", "0.997`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7715417767129498`*^9, 3.7715418779642*^9, {3.7715419702750573`*^9, 
   3.7715419997875123`*^9}, 3.771542535696248*^9, 3.771542613798957*^9, 
   3.771542688404403*^9, 3.7715427553026333`*^9, 3.772657986523081*^9, 
   3.77288085974047*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"106b1944-b5d4-4b9f-bf5a-0448425776ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "m", "]"}]], "Input",
 CellChangeTimes->{{3.7715427775023146`*^9, 3.771542788988152*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"c117c3cf-5581-460c-825d-2185c918843f"],

Cell[BoxData["0.995005`"], "Output",
 CellChangeTimes->{3.771542789271817*^9, 3.7728808667605267`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"50830322-53b6-4b23-a1d1-40c8f145c730"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  RowBox[{"Abs", "[", 
   RowBox[{"Det", "[", "m", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.77153023140029*^9, 3.7715302528152895`*^9}, {
   3.771530375255341*^9, 3.771530378180851*^9}, {3.7715304210888557`*^9, 
   3.7715304313440356`*^9}, {3.7715305372778983`*^9, 
   3.7715305385300207`*^9}, {3.771530577092393*^9, 3.7715306505241413`*^9}, {
   3.7715309052421856`*^9, 3.7715309084006557`*^9}, {3.771541552089636*^9, 
   3.7715415619127097`*^9}, {3.771541600741516*^9, 3.7715416319334087`*^9}, 
   3.7715417827356396`*^9, {3.771542023283225*^9, 3.77154202981846*^9}, {
   3.7715421306650867`*^9, 3.771542134596341*^9}, {3.7715425059650927`*^9, 
   3.7715425090782905`*^9}, {3.77154254303269*^9, 3.771542570240248*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"dd330ed3-30c2-4003-bb6e-17da2349f726"],

Cell[BoxData[
 RowBox[{"-", "0.005007516710542014`"}]], "Output",
 CellChangeTimes->{{3.771530248598607*^9, 3.771530253744954*^9}, 
   3.77153038031045*^9, {3.7715304215294247`*^9, 3.771530432475216*^9}, 
   3.7715305389215555`*^9, {3.7715305857965164`*^9, 3.7715305941224127`*^9}, 
   3.771530650904272*^9, 3.7715309121631074`*^9, 3.771541562894204*^9, {
   3.7715416070263433`*^9, 3.771541632553752*^9}, 3.7715417847220106`*^9, 
   3.771541884823737*^9, 3.7715419802848186`*^9, 3.771542030341674*^9, 
   3.7715421353790607`*^9, 3.7715424980223265`*^9, {3.771542538684457*^9, 
   3.7715425706269455`*^9}, 3.7715426966803474`*^9, 3.771542757708531*^9, 
   3.7726580976535187`*^9, 3.7728808810871696`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"c3bd4b0d-5efb-4fe2-8b2d-0f01e8bc829a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", "m", "]"}]], "Input",
 CellChangeTimes->{{3.771541935443328*^9, 3.771541948116143*^9}, {
  3.771542617402175*^9, 3.7715426199864397`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"c8155642-08b5-42cb-b949-93af967b40a6"],

Cell[BoxData["0.9986180339887502`"], "Output",
 CellChangeTimes->{3.771542620514015*^9, 3.771542781866054*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"01d5f802-64ef-4fbe-a2dd-c8c3d7ede0a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"2", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.771543797389802*^9, 3.771543800636811*^9}, 
   3.7728814231698203`*^9},
 CellLabel->
  "In[139]:=",ExpressionUUID->"109ae3f3-b3ad-45f9-a271-a6093f97fa87"],

Cell[BoxData[
 TemplateBox[{
  "PartLayer","invindata2",
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array of rank \[GreaterEqual] 1\\\\\\\"\\\"}]\
\\) (or a list of these).\"",2,139,89,23484937815697563828,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7715438011293745`*^9},
 CellLabel->
  "During evaluation of \
In[139]:=",ExpressionUUID->"057af982-3423-4fb4-8ce8-874268d333ed"],

Cell[BoxData[
 TemplateBox[{
  "PartLayer","invindata2",
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array of rank \[GreaterEqual] 1\\\\\\\"\\\"}]\
\\) (or a list of these).\"",2,139,90,23484937815697563828,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771543801188543*^9},
 CellLabel->
  "During evaluation of \
In[139]:=",ExpressionUUID->"9b9ebf56-612e-4a8a-896b-fbbcb0e66fb8"],

Cell[BoxData[
 TemplateBox[{
  "NetGraph","netinvnodes",
   "\"\\!\\(\\*RowBox[{\\\"$Failed\\\"}]\\) is not a layer, a net, or a valid \
specification for one.\"",2,139,91,23484937815697563828,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771543801249893*^9},
 CellLabel->
  "During evaluation of \
In[139]:=",ExpressionUUID->"1e7f44bc-563d-4c3d-8cb1-b6584110dbff"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.771543801313244*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"0d3a1358-95a7-4653-9d10-c3597e489996"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LogDet", "[", "2", "]"}], "[", 
  RowBox[{"m", "-", 
   RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7715302659447374`*^9, 3.771530345238954*^9}, {
   3.7715303869528055`*^9, 3.771530455602544*^9}, {3.7715306026199446`*^9, 
   3.771530606543962*^9}, {3.7715306600458407`*^9, 3.771530675615466*^9}, {
   3.771530917779987*^9, 3.771530958214696*^9}, {3.771541895648859*^9, 
   3.7715419234951696`*^9}, {3.7715419927845726`*^9, 3.771542016131011*^9}, {
   3.7715421233289804`*^9, 3.7715421539626927`*^9}, {3.7715424865046268`*^9, 
   3.771542488774886*^9}, {3.7715426404375153`*^9, 3.7715426406445055`*^9}, {
   3.7715427064872694`*^9, 3.771542712765584*^9}, {3.7715427652000093`*^9, 
   3.7715427666156416`*^9}, {3.771542804270658*^9, 3.771542808695859*^9}, {
   3.771543033087016*^9, 3.771543050179451*^9}, {3.7726582855033045`*^9, 
   3.7726582856708593`*^9}, {3.7728808976113777`*^9, 
   3.7728809145327597`*^9}, {3.772881021542714*^9, 3.7728810369233136`*^9}, 
   3.772881423180791*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"602ff970-bf97-4122-b240-20a2a49dc300"],

Cell[BoxData[
 RowBox[{"-", "0.005007516592741013`"}]], "Output",
 CellChangeTimes->{{3.7715302746324234`*^9, 3.771530345571364*^9}, {
   3.771530387506258*^9, 3.7715304563974514`*^9}, {3.7715306033850207`*^9, 
   3.7715306072381325`*^9}, {3.7715306623464565`*^9, 3.771530676775418*^9}, {
   3.7715309216719303`*^9, 3.7715309591527576`*^9}, 3.771541568803574*^9, {
   3.771541915074292*^9, 3.7715419243588862`*^9}, {3.771541976998995*^9, 
   3.7715420209487057`*^9}, {3.7715421239768777`*^9, 3.771542154825792*^9}, 
   3.7715424895074024`*^9, {3.7715425605352697`*^9, 3.7715425743855658`*^9}, {
   3.771542635080424*^9, 3.7715426417164507`*^9}, {3.771542702076743*^9, 
   3.7715427142503843`*^9}, {3.771542760728778*^9, 3.771542767401968*^9}, 
   3.7715428109046516`*^9, {3.7715430238733606`*^9, 3.77154305096803*^9}, {
   3.7715437600322247`*^9, 3.7715437780627985`*^9}, 3.7715440708008256`*^9, {
   3.7726581942233925`*^9, 3.7726582072812243`*^9}, 3.7726582863947287`*^9, {
   3.7728809040017214`*^9, 3.7728809151770077`*^9}, {3.772881024930708*^9, 
   3.7728810378525476`*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"d4a75e1c-d9a8-41f7-af80-d751eeac6120"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixLog", "[", "m", "]"}], "//", "Tr"}]], "Input",
 CellChangeTimes->{{3.771531164202422*^9, 3.7715311966330876`*^9}, 
   3.771542111853188*^9},
 CellLabel->"In[75]:=",ExpressionUUID->"5ad9e61e-10d1-4537-ac3a-7366932982c1"],

Cell[BoxData[
 RowBox[{"-", "1.9661128563728323`"}]], "Output",
 CellChangeTimes->{
  3.7715311973237295`*^9, {3.7715421065988803`*^9, 3.771542112768284*^9}},
 CellLabel->"Out[75]=",ExpressionUUID->"8500b35b-d9f5-4570-9a3a-6a0fc4421478"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], 
       RowBox[{"i", "+", "1"}]], 
      FractionBox[
       RowBox[{"MatrixPower", "[", 
        RowBox[{
         RowBox[{"m", "-", 
          RowBox[{"IdentityMatrix", "[", "2", "]"}]}], ",", "i"}], "]"}], 
       "i"]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "2"}], "}"}]}], "]"}], "]"}], "//", 
  "Tr"}]], "Input",
 CellChangeTimes->{{3.7715428903958254`*^9, 3.7715430042843237`*^9}, {
  3.7715430560362844`*^9, 3.7715430561858845`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"678a5b66-2f5d-4ea2-8a3f-44e6a08ed40f"],

Cell[BoxData[
 RowBox[{"-", "0.005007500000000004`"}]], "Output",
 CellChangeTimes->{
  3.7715429329815083`*^9, {3.7715429787686696`*^9, 3.7715430046699*^9}, 
   3.7715430565353765`*^9, 3.772658000663334*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"b3f8ed35-36b6-4b2e-bd80-5e0dd6828a31"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"createPowerNet", "[", 
    RowBox[{"2", ",", "2"}], "]"}], "[", 
   RowBox[{"m", "-", 
    RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}], "//", "Tr"}]], "Input",
 CellChangeTimes->{{3.7715433449695873`*^9, 3.7715433686747274`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"bb873a91-5a8c-4efb-bedc-5f642af228fd"],

Cell[BoxData[
 RowBox[{"-", "0.005007500061765313`"}]], "Output",
 CellChangeTimes->{{3.771543362195492*^9, 3.771543370824089*^9}, 
   3.7726580024527955`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"ab425a53-6137-4b5b-9264-25050773293c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PROBLEM TO SOLVE!", "Chapter",
 CellChangeTimes->{{3.771527062984722*^9, 
  3.771527067663816*^9}},ExpressionUUID->"3fe8ba72-de32-4b05-b8b2-\
e018a3b50e26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LogDet", "[", 
   RowBox[{"2", ",", "3"}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", 
      RowBox[{"-", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715248589978857`*^9, 3.7715248721307383`*^9}, {
   3.7715251795874557`*^9, 3.771525184495982*^9}, 3.771526728932768*^9, {
   3.771526917370605*^9, 3.771526926202158*^9}, {3.771527147634777*^9, 
   3.771527170403173*^9}, 3.7715272735031347`*^9, {3.7715273055699387`*^9, 
   3.771527306012393*^9}, {3.77152879694246*^9, 3.7715288185089836`*^9}, {
   3.7715289451500807`*^9, 3.7715289483760295`*^9}, {3.771534432016966*^9, 
   3.7715344412889423`*^9}, 3.7715344837910414`*^9, 3.7728814231867743`*^9},
 CellLabel->"In[69]:=",ExpressionUUID->"f4f1d128-44cf-4919-b0e4-8bb4ea5347b6"],

Cell[BoxData["10.499992370605469`"], "Output",
 CellChangeTimes->{
  3.771526926560123*^9, {3.771527148924992*^9, 3.771527171262877*^9}, 
   3.771527274661269*^9, 3.771527306973476*^9, {3.7715288011201167`*^9, 
   3.7715288189087615`*^9}, {3.771528946240471*^9, 3.7715289487569966`*^9}},
 CellLabel->"Out[69]=",ExpressionUUID->"1ac35751-8d4c-449c-97ea-6fe733af53c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"Log", "@", 
   RowBox[{"Abs", "@", 
    RowBox[{"Det", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", 
         RowBox[{"-", "2"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7715249343719893`*^9, 3.771524942673359*^9}, 
   3.7715251918625813`*^9, {3.7715267015337343`*^9, 3.7715267218572702`*^9}, {
   3.771527124077924*^9, 3.7715271304895697`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"4beb1873-01a1-47b3-ac18-9c7842874ee4"],

Cell[BoxData["2.302585092994046`"], "Output",
 CellChangeTimes->{
  3.7715249434062433`*^9, 3.77152519291066*^9, {3.771526711598728*^9, 
   3.771526721998951*^9}, {3.77152712701731*^9, 3.771527130857903*^9}, 
   3.771527277284959*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"b35e2c0e-38cc-4a4c-a007-2466aec67130"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MatrixLog", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", 
        RowBox[{"-", "2"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "]"}], "//", "Tr"}], "//",
   "N"}]], "Input",
 CellChangeTimes->{{3.7715269498829813`*^9, 3.7715270105474567`*^9}, {
  3.7715289334268847`*^9, 3.771528934726767*^9}, {3.7715312218774195`*^9, 
  3.7715312241687503`*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"eb36c990-2ef7-42dd-a64a-fed1ee8642f4"],

Cell[BoxData["2.302585092994046`"], "Output",
 CellChangeTimes->{{3.77152696384823*^9, 3.77152701088067*^9}, 
   3.7715272859542437`*^9, 3.771528935560044*^9, 3.771531226081673*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"d77669ff-b092-4929-919e-33d5063093b4"]
}, Open  ]],

Cell["An example forward net", "Text",
 CellChangeTimes->{{3.771430896863076*^9, 
  3.771430901805201*^9}},ExpressionUUID->"465678c8-6857-459a-9ce0-\
27d9fde14f46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wrapInResidual", "[", "net_", "]"}], " ", ":=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"net", ",", 
      RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], "}"}], 
      "\[Rule]", "2"}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771429247283904*^9, 3.771429328300106*^9}, {
   3.771429386940288*^9, 3.771429450399485*^9}, 3.7714295812728033`*^9, {
   3.7714296941643667`*^9, 3.771429734848818*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f819476e-d330-4fcb-a6ba-517319077e02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"wrapInResidual", "[", 
       RowBox[{"NetChain", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", 
          RowBox[{"ElementwiseLayer", "[", "\"\<ELU\>\"", "]"}], ",", 
          RowBox[{"DropoutLayer", "[", "]"}]}], "}"}], "]"}], "]"}], ",", " ",
       "3"}], "]"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7714362717703247`*^9, 3.771436274455502*^9}, {
   3.7714368488050213`*^9, 3.771436852522872*^9}, 3.771524541590192*^9, {
   3.7741970280031133`*^9, 3.7741970283858037`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"2afa95b1-6ca8-417e-a0be-82a553516c50"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.771429412394435*^9, 3.771429451090416*^9}, 
   3.77142958205961*^9, {3.771429694732185*^9, 3.771429736730548*^9}, 
   3.7714299136099987`*^9, 3.771429973177631*^9, 3.771432291473444*^9, 
   3.7714351394383*^9, 3.771436274686062*^9, 3.771436327645947*^9, 
   3.771436858306513*^9, {3.771524536782494*^9, 3.771524542071521*^9}, 
   3.7715358664300423`*^9, 3.7715359874186974`*^9, 3.771536044541588*^9, 
   3.771536142335204*^9, 3.771539104817891*^9, 3.7715398026500907`*^9, 
   3.772660800878518*^9, 3.772880814562708*^9, 3.772980236710076*^9, 
   3.7729887043354964`*^9, 3.7741936656029634`*^9, 3.7741970947210865`*^9, 
   3.7742068977905293`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"a18b17cf-ca44-49a5-95d0-de11fc5e5376"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"JacobianNet", "[", "forward", "]"}], ",", "\"\<Output\>\""}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771539309737015*^9, 3.7715393169217973`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3de59a66-f0e3-456a-a71e-6c457307fac7"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.7715393107560105`*^9, 3.7715393184175572`*^9}},
 CellLabel->"Out[21]=",ExpressionUUID->"0b63a532-2daf-4e9a-afed-c594936f5483"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"NetExtract", "[", 
    RowBox[{
     RowBox[{"JacobianNet", "[", "forward", "]"}], ",", "\"\<Output\>\""}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771539108212788*^9, 3.7715391309026723`*^9}, {
   3.7715392637477984`*^9, 3.7715393251109424`*^9}, {3.771539591121971*^9, 
   3.7715396059803324`*^9}, 3.771539895370803*^9, {3.771540076977256*^9, 
   3.7715400774134436`*^9}, 3.772881423198744*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"4a79ba22-401e-4713-99ca-7015bde8fc37"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-4., 
                    2.4492935982947064`*^-16}, {-3., -0.9999999999999998}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQECB9hjRIzVlm20CT5/4+jr+fwHimomzNAo3Giz
0UOyYpcp/4FXMbs5pptttJHIOSiWc5DvQO7fKc2F3zbYtFpeXMjgzHfgd6ws
544NG2z+bABp4D0wpS5kZlbqBpu6S+q1l9R5D1jGW5l0imywYZuXd5a/m+fA
pf9zN6vXrLeZISzLZfCE+4DXQRUR0SPrbIzBgPvADSbOrlsM62wugrTXch0o
ZJnDxWOx1qZI5nihzHHOA9xs+t22+WtshAVBgPPAEvZD3PnLVttsYI0GIo4D
dpyhPQvurrIJ+LXE/9cS9gPXuF7wXBJZZfP+HQiwHSjgqe5l9llp0/fYAojY
DnDx8fGZNq+w0bvRpHujifXAYv6FfWm7ltucAQOWAzaCJvwzPi6zSXvz6Ot5
aZYDJ4MkWmP1ltn8Spxo9KGE+YCjyPynXmVLbVp0QQYwHVgcesIg4eQSGxb/
7c/aXZkOvBabkjZXfYlN1TG9uP97GA/IRTC1M01cbPNqst3LyXaMB6wkhSf1
sy62ASs/xXDAIepYu0vrIps1BupWIgkMB/SlZTIUBRbZQCMMGl8LbQAwqL5x

                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQECB9hjRIzVlm20OaGsXfx1Dv+BPbzmposPrbBv
n5Wk+1CT/4DB+jXBtw7vsrdKWaZ3eBnfgZY9M0XPTj5qf6/hW9lsYb4DBp+m
T/A4ds6+7EMQW1YB74GAmoyz62uu2LNs3n1Hby/PgZfpSlKdYrfsW04Y/Hr5
k/vAp7s24hESD+x/GmyKm63GfUDOxrx1Uupj+8Q39lzOzlwHav0Yrn/+9Mze
0FVIffJ+zgORk0NF7W++sH/v1jnvmynngYstoT4hba/sZ3xcUpC7jOPAUyWG
GuNfr+21XFPnfhfgODAhN3TJHZO39ssdT6lMLWU/cCMl9Ki/2Tt7geeX2dyu
sB3YxcFwv+ffO/sU0yZnLl22AxaRoR8n9763X6xz9dbDetYDAWGhf1Iev7c3
MQYB5gOM4HD6YH9FvfaSei0TnF8ocxyIGOF8IUEQQPA3sEYDEcMBBih//hdP
IPq/H8a/dxcE/sL5YOMK/8D50WADfsP5M8HgJ5x/7sbR1/PNf8D5nw8rpT54
+Q3OZwMb8HU/zD1s8/LO8nd/gct/7Ynd86/yM5x/Cey/T3D+XJDyKR/h/IhE
vxKNAx/g/P9g8B7OBwA1xfT/
                    "]], 
                    
                    LineBox[{{-3., -0.9999999999999998}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4, -0.5999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.7777777777777777`,
                     1.7008983321491017`*^-16}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777776, -1.088574932575424*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.499276806867128, 
                    0.9982540573304038}, {-0.25, 0}, 
                    Offset[8], {0.37633139151203165`, 
                    0.0034918853391927573`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4000000000000004`, \
-0.39999999999999986`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., -0.9999999999999998}], 
                    Offset[{10, 10}, {-3., -0.9999999999999998}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[VerticalEllipsis]\"", StripOnInput -> False, 
                    FontSize -> 10], 
                    Offset[{0, -1}, {-3., -0.9999999999999998}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ReplicateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ReplicateLayer[2, "Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox["\"F\"", 
                    Offset[{0, -1}, {-2., 1.2246467991473532`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"DotLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Output\"", "\[Rule]", "\"1\""}], "}"}], ",", 
                    RowBox[{"{", "\"Output\"", "}"}], ",", 
                    RowBox[{"\"2\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    DotLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], {
                    "Output" -> "1"}, {"Output"}, "2" -> {2, 2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PrependLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Element\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    PrependLayer["Input" -> {2, 2, 2}, "Element" -> {2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-3., -0.9999999999999998}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-3.4, -0.5999999999999998}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 
                    5.5}, {-2.7777777777777777`, 1.7008983321491017`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-0.05103093472085416, 
                    5.499763253422961}, {-2.499276806867128, 
                    0.9982540573304038}], {0., -0.17}, Automatic, {
                    0.999956955167811, 0.00927835176742803}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-2.4000000000000004`, \
-0.39999999999999986`}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 
                    2.4492935982947064`*^-16}, {-3., -0.9999999999999998}, \
{-2., 1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{24., 26.5}, {27., 14.}}, 
                    ImageSize -> {270.5, 151.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]]],
                     "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> 
                    Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {323., {14.25, 20.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Echo",
 CellChangeTimes->{
  3.7715400835413313`*^9},ExpressionUUID->"85c128e3-7dd7-4656-b734-\
cfb883c0d6e7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 4}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox["\"CA\"", 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {{2, 2}, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, BaseStyle -> GrayLevel[0.4], 
                    ImageMargins -> 0., ImagePadding -> 0, ImageSize -> 15, 
                    PlotRange -> All, PlotRangePadding -> 0], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["4", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -15}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"4\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}, {-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{20, 20, 8, 24, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {276., 101.}, PlotRangePadding -> 0], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "4"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "NetFold", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[3]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {314., {107.5, 113.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.771539115731351*^9, 3.771539132020651*^9}, {
   3.7715392792613745`*^9, 3.771539325909423*^9}, {3.771539581565632*^9, 
   3.7715396069016714`*^9}, 3.7715398961807604`*^9, 3.7715400839150577`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"782e43b8-7cc5-43b4-9f9e-da5cb44c2ee8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"JacobianNet", "[", "forward", "]"}]], "Input",
 CellChangeTimes->{{3.771539812826972*^9, 
  3.7715398380571117`*^9}},ExpressionUUID->"8fd1c732-00c9-4093-99a3-\
6b4f909569d2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQESB7i65vlYVu6yeTJx6s6qc+IHzvGamy4+tMLe
xXfjtA9TxA9YrF8TfOvwLntZo+DpicHiB9r2zBQ9O/mofb5D9e6znOIHjD9N
n+Bx7Jy9TYUms+kOsQOBNRln19dcsW+6GZs3PU7swMt0JalOsVv2TikSf7/8
ET3w8a6NeITEA/taicj1vpNFD8jbmLdOSn1sb/BNvnWhouiBGj+G658/PbOf
qdQ5+eR9kQORk0NF7W++sC9f7OL/e5bIgYstoT4hba/sz1QE7TALFjnwWImh
xvjXa/tpizadq+YQOTAhN3TJHZO39lcUUied2iV84EZK6FF/s3f2HZ8zmZWz
hA/s4mC43/Pvnf0mqYOKrWLCBywiQz9O7n1vHzQt6+2H/UIHAsJC/6Q8fm+f
BgZCBxjB4fTB3qTs46/nvAj+3w0ekhW7BOH8Q2I5B8VyEPym5dGfDysh+HbJ
4uvr7wnA+V885wMRgr8CpDwVwQ+bISzLZYDgQ+ILwQcAeJy5Dw==
                    "]], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.812820711494877, 
                    0.9773027452952469}, {-0.25, 0}, 
                    Offset[8], {0.08165695756016156, 0.01745942669596423}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    0.40000000000000024`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6., 3.6739403974420594`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 3.061616997868383*^-16}], 
                    Offset[{12, 12}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-5., 3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"addEpsilon\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["addEpsilon", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-4., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Function\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Function", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox["\"M\"", 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MapFunction\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["MapFunction", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    NetChain[
                    Skeleton[3]], "Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox["\"MT\"", 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapThreadOperator", "[", 
                    RowBox[{
                    RowBox[{"ThreadingLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"\"1\"", "\[Rule]", "1"}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\"1\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"2\"", "\[Rule]", "2"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    NetMapThreadOperator[
                    ThreadingLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], 
                    Association["1" -> 1], "1" -> {2, 2}, "2" -> 2]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"z\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["z", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1bEOgjAQBuBGHRxdHd2cdXF1UpNOEB8AYiEuNQGi8Y18S22JNWhUoL3r
9U8OAsPlSwN3s/QUZQPGWDlWlyi5rIsiucYT9bCX5TGX4rCTlchFsUqH6uVU
1VzViIGHuzbIxO1uCgL0EScfsk3Hytd0Idp0evk8ukw6+whsOq0+IpfJXx+h
y+Srj/jMmnnzBeQyefkCtOnwQF31eW03ZwwXdy3t0rVcxPUdoicD3uXPM3Pu
CZUf3xi5r+X7J/N1/C9JfD1mhlefxSzz5rOcseg+x/mP5gPaSyg+wH0J7gPe
5Sg+wHbgvgdl3fd6
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"divideByEps\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"10000", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["divideByEps", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[10000 #& , {4, 3}], "Input" -> {2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox["\"T\"", 
                    Offset[{0, -1}, {-1., 6.123233995736766*^-17}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-6., 3.6739403974420594`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"addEpsilon\"", 
                    Offset[{0, -15}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Function\"", 
                    Offset[{0, -15}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"MapFuncti..\"", "\"MapFunction\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MapFunction", "Tooltip"]& ], 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"subtract\"", 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"z\"", 
                    Offset[{0, -7}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"divideByE..\"", "\"divideByEps\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "divideByEps", "Tooltip"]& ], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"transpose\"", 
                    Offset[{0, -13}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}]}, 
                    StripOnInput -> False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
                    3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736762*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-1.1499858073915776`, 
                    5.378432173300872}, {-4.812820711494877, 
                    0.9773027452952469}], {0., -0.17}, Automatic, {
                    0.9778967587819768, 0.20908832861665047`}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.40000000000000024`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, StripOnInput -> False, 
                    FontSize -> 8, FontWeight -> "Thin", FontColor -> 
                    GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}, {-4., 1.0000000000000002`}, {-4.,
                     2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28.999999999999982`, 18.}}, 
                    ImageSize -> {386., 102.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "addEpsilon"], 
                    NeuralNetworks`NetPath["Nodes", "Function"], 
                    NeuralNetworks`NetPath["Nodes", "MapFunction"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "z"], 
                    NeuralNetworks`NetPath["Nodes", "divideByEps"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> N\
euralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 10000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"z\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {298., {22.75, 28.75}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7715397807631025`*^9, 3.7715398155022135`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"4e05b8f7-e020-46c9-b2f3-77c6c49b1fbc"]
}, Open  ]],

Cell["The loss function is:", "Text",
 CellChangeTimes->{{3.7714309253998327`*^9, 
  3.771430929786023*^9}},ExpressionUUID->"1d34827a-9f75-40ee-b8a9-\
89112a67fb5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingnet", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<Jacobian\>\"", " ", "\[Rule]", " ", 
       RowBox[{"JacobianNet", "[", "forward", "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<LogDet\>\"", " ", "\[Rule]", " ", 
       RowBox[{"LogDet", "[", 
        RowBox[{"Length", "[", 
         RowBox[{"NetExtract", "[", 
          RowBox[{
           RowBox[{"JacobianNet", "[", "forward", "]"}], ",", 
           "\"\<Output\>\""}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"TODO", ":", " ", 
        RowBox[{"REPLACE", " ", "ME", " ", "BY", " ", "THE", " ", "STUFF"}]}],
        " ", "*)"}], "\n", "\t", 
      RowBox[{"\"\<norm\>\"", " ", "\[Rule]", " ", 
       RowBox[{"DotLayer", "[", "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<total\>\"", " ", "\[Rule]", " ", 
       RowBox[{"TotalLayer", "[", "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<minus\>\"", " ", "\[Rule]", "  ", 
       RowBox[{"ElementwiseLayer", "[", 
        RowBox[{
         RowBox[{"-", "#"}], "&"}], "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<MinusIdentity\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ConstantPlusLayer", "[", 
        RowBox[{"\"\<Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"-", 
          RowBox[{"IdentityMatrix", "[", 
           RowBox[{"Length", "[", 
            RowBox[{"NetExtract", "[", 
             RowBox[{
              RowBox[{"JacobianNet", "[", "forward", "]"}], ",", 
              "\"\<Output\>\""}], "]"}], "]"}], "]"}]}]}], "]"}]}]}], "\n", 
     "|>"}], ",", "\n", "\t", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Output\>\""}], "}"}], 
        "]"}], " ", "\[Rule]", 
       RowBox[{"\"\<MinusIdentity\>\"", " ", "\[Rule]", " ", 
        RowBox[{"\"\<LogDet\>\"", " ", "\[Rule]", " ", "\"\<minus\>\""}]}]}], 
      ",", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], "]"}], 
         ",", " ", 
         RowBox[{"NetPort", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], 
          "]"}]}], "}"}], " ", "\[Rule]", " ", "\"\<norm\>\""}], ",", "\n", 
      "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<minus\>\"", ",", " ", "\"\<norm\>\""}], "}"}], " ", 
       "\[Rule]", " ", 
       RowBox[{"\"\<total\>\"", " ", "\[Rule]", " ", 
        RowBox[{"NetPort", "[", "\"\<Loss\>\"", "]"}]}]}]}], "}"}]}], "\n", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.7712461733785934`*^9, 3.7712462797517805`*^9}, {
   3.7712467282968006`*^9, 3.771246971234892*^9}, {3.771247012593236*^9, 
   3.771247062931487*^9}, {3.7713355124382553`*^9, 3.771335514947486*^9}, {
   3.7713424860170774`*^9, 3.771342490632975*^9}, 3.771342643255226*^9, {
   3.771342720801722*^9, 3.7713427421698256`*^9}, {3.771342801133519*^9, 
   3.771342816975562*^9}, {3.7713443832768326`*^9, 3.7713443923025727`*^9}, {
   3.771346168774109*^9, 3.7713462368048964`*^9}, 3.7713463000914755`*^9, {
   3.7713482181981363`*^9, 3.771348242679274*^9}, {3.7713482945794554`*^9, 
   3.7713482997207875`*^9}, 3.7714292407229433`*^9, {3.771429902587538*^9, 
   3.7714299025891314`*^9}, {3.771429983803138*^9, 3.771429991742524*^9}, {
   3.7714351480099382`*^9, 3.771435149900608*^9}, {3.771436277291979*^9, 
   3.771436277422518*^9}, {3.7715245505834303`*^9, 3.771524557743154*^9}, {
   3.771524602084203*^9, 3.771524638035481*^9}, {3.7715246845227213`*^9, 
   3.771524695107903*^9}, {3.7715248127492228`*^9, 3.771524816425106*^9}, {
   3.7715359964987326`*^9, 3.7715360027931323`*^9}, {3.771536212303712*^9, 
   3.771536219846096*^9}, {3.771536307109409*^9, 3.771536319602399*^9}, 
   3.7715402363173018`*^9, {3.7726603773808994`*^9, 3.7726604141110134`*^9}, {
   3.7726605470423756`*^9, 3.7726605477045527`*^9}, {3.772660653609005*^9, 
   3.77266068264157*^9}, {3.77266073243651*^9, 3.772660776353501*^9}, {
   3.7726608525124454`*^9, 3.772660938848506*^9}, {3.7726610100581665`*^9, 
   3.772661079510709*^9}, {3.7726612610250435`*^9, 3.772661261544655*^9}, {
   3.7726613028474483`*^9, 3.7726613115890985`*^9}, {3.7726613570646467`*^9, 
   3.772661358987563*^9}, {3.7726614035043325`*^9, 3.7726614261171007`*^9}, 
   3.7726616848702292`*^9, {3.7728812875393124`*^9, 3.772881472843192*^9}, {
   3.7729802699003105`*^9, 3.7729802800262637`*^9}, {3.7729803334982634`*^9, 
   3.7729803350411654`*^9}, {3.7729803758679733`*^9, 3.772980415652627*^9}, {
   3.7729805358123164`*^9, 3.772980563818876*^9}, {3.772981168706562*^9, 
   3.772981174352434*^9}, {3.7729812350551567`*^9, 3.772981258276066*^9}, 
   3.7729828113925467`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEiBziLb+5fz7/N5snEqTurzgkfyOM1N118aMV+
Z9+N0z5MET7AsX5N8K3Du/bLGgVPTwwWPlCwZ6bo2clH9+c7VO8+yyl8QObT
9Akex87tt67QZDbdIXTAvSbj7PqaK/ubbsbmTY8TOnA/XUmqU+zWfqcUib9f
/ggeeHvXRjxC4sH+GonI9b6TBQ9I2Zi3Tkp9vN/gm3zrQkXBA5V+DNc/f3q2
f4ZS5+ST9wUOhE4OFbW/+WJ/xWIX/9+zBA6cawn1CWl7tf9MRdAOs2CBAw+U
GGqMf73eP3XRpnPVHAIHenJDl9wxebt/heMplaml/AeupIQe9Td7t1/g+WU2
tyt8B7ZzMNzv+fduf4ppkzOXLt8Bk8jQj5N73+9fonP11sN63gPeYaF/Uh6/
328MBtwH/v0Hgff7L6rXXlKv5TrwB8ovkjleKHOcEy4vLAgCnAf+Q/kbWKOB
iAMuH/Brif+vJexw/vt3IMAG5/c9tgAiBF/vRpPujSZWOP8MGLDA+WlvHn09
L80Cd8+vxIlGH0qY4fItuiADmODuYfHf/qzdFcGvOqYX938PI1z9q8l2Lyfb
Ifhg5acY4Pw1BupWIgkMcP3QBATnAwBZVmlq
                    "]], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.499276806867127, \
-0.9982540573304033}, {-0.25, 0}, 
                    Offset[8], {
                    0.37633139151203343`, -0.0034918853391926463`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.5999999999999999}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.9999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.4000000000000001, -1.}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6., 3.6739403974420594`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 3.061616997868383*^-16}], 
                    Offset[{12, 12}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-5., 3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox["\"CP\"", 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MinusIdentity\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantPlusLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["MinusIdentity", Bold], 
                    Style[
                    HoldForm[
                    ConstantPlusLayer[{2, 2}, "Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., -0.9999999999999999}], 
                    Offset[{10, 10}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, BaseStyle -> 
                    GrayLevel[0.4], ImageMargins -> 0., ImagePadding -> 0, 
                    ImageSize -> 16, PlotRange -> All, PlotRangePadding -> 
                    1], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LogDet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["LogDet", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/G9tvjvz////IPWUAh8qmIECQO6D4Z6eNx0UGkd194FA
Y+Ot+cjuPHb4vwuZRtHEfSAAjF+l3Jytd2FuLCs9sp+MOKeZ+2Bg+ZL/CZkZ
a9/D3Nnb/aaTBO00dx8MgNIicpzPmvW/gAhtdHMfDIDiGebGkqIDJ4BxroBH
Od3dBwLocY6nPBoQ98HAxP7PDchxvmjR/zQ0JQPqPhiorjq3HtmdO7b+D4BK
DQr3gQC2fK6mFhQ+0O5CB6A4hrnRw73sPygNUNkKH2pgH++648ZGwWA3grCX
e30NFcylKrCyyk3JzdlyHxaelRUnt1Gp3UEtAPYzetqkQZyTC1DihMw6iJYA
I82A6hvkOqiwYM95AnUQLQHONE1CHURLQDDPoddBdI5zossEPHUQLQFJZRa2
OojGcU5WmQqKY+SwpGF5RFGZX1dzaRWyO6nlKCRAcZ308sl/A1gdRA0HoQGq
1ZmgtAmiAQJrTNs=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"total\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TotalLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["total", Bold], 
                    Style[
                    HoldForm[
                    TotalLayer["Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-6., 3.6739403974420594`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"Jacobian\"", 
                    Offset[{0, -15}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"MinusIden..\"", "\"MinusIdentity\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MinusIdentity", "Tooltip"]& ], 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"norm\"", 
                    Offset[{0, -13}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"LogDet\"", 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"minus\"", 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"total\"", 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
                    3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736762*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0.0510309347208523, 
                    5.4997632534229615`}, {-3.499276806867127, \
-0.9982540573304033}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.009278351767427691}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}, {-2., -0.9999999999999999}, \
{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 20, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {386., 101.00000000000003`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "MinusIdentity"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "LogDet"], 
                    NeuralNetworks`NetPath["Nodes", "minus"], 
                    NeuralNetworks`NetPath["Nodes", "total"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, "$ArrayDimensions" -> 
                    {2, 2}], "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 10000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], 
                    "MinusIdentity" -> 
                    Association[
                    "Type" -> "ConstantPlus", "Arrays" -> 
                    Association[
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "LogDet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]]],
                     "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Dot", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{2, 
                    2}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "norm" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "total" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {224., {14.25, 20.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771534692596359*^9, {3.771535869434557*^9, 3.7715358902497005`*^9}, 
   3.7715360470324335`*^9, {3.771536145421508*^9, 3.7715361490463257`*^9}, {
   3.7715362162372313`*^9, 3.771536220989065*^9}, 3.7715363207374463`*^9, {
   3.7715404116517725`*^9, 3.771540428701798*^9}, {3.7726607855466695`*^9, 
   3.7726608057668734`*^9}, 3.7726608558925085`*^9, 3.772660925920901*^9, {
   3.7726610326211095`*^9, 3.7726610440359735`*^9}, {3.7726613060454454`*^9, 
   3.7726613125402536`*^9}, 3.7726613606410203`*^9, {3.7726615607837176`*^9, 
   3.772661565598684*^9}, 3.772880815415902*^9, 3.77288133917912*^9, 
   3.7728813777611847`*^9, {3.77288146844729*^9, 3.7728814749468365`*^9}, 
   3.772980287810445*^9, {3.7729804172174077`*^9, 3.7729804454250126`*^9}, {
   3.77298056058552*^9, 3.772980564756366*^9}, {3.7729811710123615`*^9, 
   3.772981175081481*^9}, 3.7729812593940463`*^9, 3.772982836563879*^9, 
   3.772983052613234*^9, 3.772983653746064*^9, 3.772988717639826*^9, 
   3.774193673038183*^9, 3.7741971044302907`*^9, 3.774206901370925*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"9df09716-c578-416c-8c1d-ddfeec3f87c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["trainingnet"], "Input",
 CellChangeTimes->{{3.771534624370186*^9, 3.7715346365342045`*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"b1a38df4-5e17-4a05-92d9-ca71b3b7044c"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.771534637048904*^9, 3.7715346703883905`*^9},
 CellLabel->
  "Out[187]=",ExpressionUUID->"b30892b8-2e92-4433-815d-11edb03d4882"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data from Gaussian", "Subsubsection",
 CellChangeTimes->{{3.7715331964581585`*^9, 
  3.7715332078559933`*^9}},ExpressionUUID->"8a6ce404-e178-4d6d-9530-\
5fc4467849fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"MultinormalDistribution", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "]"}], ",", "1000"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7715196559696407`*^9, 3.771519734738217*^9}, {
  3.7715330985638695`*^9, 3.771533123898946*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"50f31a85-4653-4363-8fb2-59de99da1373"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normdata", "=", 
   RowBox[{"data", "/", 
    RowBox[{"Norm", "[", "data", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7715331329979005`*^9, 3.771533144257516*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"427b5d98-8fa7-4a60-8853-1f24efbc5f82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "@", "data"}]], "Input",
 CellChangeTimes->{{3.7715196611376104`*^9, 3.7715196649538946`*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"0275baca-da5b-44c8-b34d-582acff95349"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.8726622466373266`, 
   3.085932347031172}, {-2.9645093041658526`, 2.993852666109462}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7715196656999626`*^9, {3.77151970940615*^9, 3.7715197380083036`*^9}, 
   3.771533147521261*^9, 3.7715332193392777`*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"8b8543a6-116e-4426-9440-10985ea3f38d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "@", "normdata"}]], "Input",
 CellChangeTimes->{{3.7715331491848707`*^9, 3.7715331522769747`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"b00d21c9-f5ac-4028-bbcc-2836ba9122e6"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
OVYDaH+j4sble3ybEplw3mZsz+IUFdes66zpJO6bfzvX9tvjVMz/+6l6YIoJ
lHElvqBRKmYqtkX3ijHgd4X9vx2DVDy5X3uZO4QJ/mHU6dFeKu69T+HT7GXC
iOrNobPPqOjDP7DpegITzJdfPTVtp+KkZbn3lCADHj1aauRCKg4nPF795gET
DuXsLG9rpKJY2J8LDZZMuGlmcjahjoqF4eyPcmsZILElNv3ATSqqKns21tgx
4PTopagv14j6/URt10YwYO21p56lxVQMizhm1xLPgPiA7xYuBVRUsrpxZEiI
CbNKIjpbTlFROOl1QyZxPvc/Osq9NCqWlQpu8LdlQX9roGR2OrHfOahkd2aA
YVr+Bh0SFTc8Y0hIE3rRcrx1ZTGOivNvFravcmPBPoHJ2dsRVPz8UZtL/hoL
rg7yjwYFEe+PqXw9Q+ivcPGh5zt9qHh648HfRceZkOPldu+tKxX/iU9svRbP
BLbd2TfO2VORGvB3H8cwEyK+1xWaWRL11re/P3WKCR8b32Rxn6SixtpBCVo0
A+xT1sQ9NKBiZzFF4Y0BC7r1FH0Ttag4LvAq2jieBVq81jYH1ai4/5KNo4IF
C+r7kvVnD1CxnOPUYGMpE3YVlB0s20PcL32hySeOAeddXsi4ylFxYqzT3Pgq
C/h3LmzaKkVFJ4nnZ8kEvqgzkqv7RKg4dIVl097MhPk6o+/ZQlRspPCeEyb0
MCAu4p0OP9HPB6JBFGL9KJx/8W8dFY22XXbZLkLgm7Md69mp+Eu5+xttnAHt
XV+qgv9R8D4ofLXrYMLhU5svyv6moBaL5WdD6E2lHdDHvlJQ+bK972ZFJkhK
+CYWfKag/LrxRaEhFpyaYAaYf6CgSu39lqkABqyrbLLnGaFg9Kua+s5aFiRE
vDd81E/BqS1dh9cWseDrYZ7DSS8oKFlRJzJynAEebAfkVDop2P48ZHcsMqH/
saPw14cUVHJJinkXzAJDehpneQsF+z99sfBtY0GLRdUv1wYKsk+F7/h+lglK
2wbGt9ZSUOzFDPfxRhZcG1t52VdBweuiFpcTR5mwpUzuYc5VCv463PBqhphn
WpBZne5FCk78kDAueMuAlf3xl5fOUnA2/kz2A6JfEX9LmHdYFDQ7o1zh+JoB
E/efpYTkUHCc1DoXEMcEh4yfwXJpFHy0pff3tSAG9BiLOb9LpqB3IfoJibNA
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
fJnCWeJJ3uLbXb7c45JFjrSs8rhASky0TEx7xaXG4dmTlOaHU1nvr4oxvVzq
ao0df60yjA5472+o+MUlyVtSoUs++tPFe04vZ4vxyClhs5RDihM9Mxkx5LRg
HWhrWDhox+hA+n7muLLJNB75vmwarlziTpJzfVfc1xCs40qiozYYeNOsXdKB
vvo86smR7FMf60eGMo15fSt4VG73/N7b5kByyeXUpNrz6Nj8kseqUzyI+0v+
uqQnj/yuB2gdvOJGBeGtPdtCeSTx6PWgdwm+tPtlvNTsOMH7SVYYmrzOh844
zNI8lcUjZ6czXt+y3On+lQf2K9fxaK5RndmNWZ7UpZ8dde8/Hk0dl6K4ssiH
hh/U3uRTw6O1+t7bx/usoWnTXtd/Pin4fbEct5vnbEln/dr2lCYenUx5Hbvd
1J5sRyz5PfoWj1znVK/XHu9LgfE98tue8ujHh5uy4QkelNG9zVDtA4/WSWw9
+WNCIG3xNPeq/8aj7d195lLyvnT0zo/0FUMiKDtnu+eHkz7UtmJf1d0xEXR0
/xnX25k+9ObUqsveUyJo6jo7cZlLLvRXfdi7TzMjKOGqgoc8/Elmx1HxlAUR
tOdpSmnKLS+aO8579mijCGpVuTPvzjo3Ms2Wsiy3iiBNpa1Ka+XdyPMHwme5
RlDK+fAq47NulBAaVnoyIIJ0dy77U3fUitY+n3xkOT+CujwmF4uG2lGNXcud
O6kRdG15Zd/zj8Z0+VJsv1dRBIlJRjn6uHrSE13ViZ+2RNCrFwazp7f50rea
e7rJeyJoE799qu0nSxqlmOky6mgEiY//JZNx1JtU12kmbm2IIIcJdEzini3R
sJcVM1sj6KJpfmSWpCs5xZY0nBDsEyfyFKms1ZYiPhq8NH4r+Hwu1xR/zLKm
PPcu0TufBa+f4f4w5uAaqry1VdnrbwQteLhzZMp0czplbLqid2Qk/TycZfe0
1YzunhwISJoYSZHyZxYUJ7lTj9qePAnlSBq+6Mj+iE8uNPQ/h5ot8yKp6qD+
GYcBb1IcO+S6qoHg92Vstnncd6OFmXU9x00jaW6kcZvnuWVkM+AhZbwqktZP
8n85XHsN+QdLat72jqRrj4orUetBaU/P2ntyIunEnPYObX0DKrcJiepJiKQJ
/mKXZ+/WpbqLspsScyNpUVuK2vtpztS68Gr9yA2RVNBtNqHhqRi9qo5u37wz
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
26Prm5d9XWdeBEWWx0fhztZra6kEwrw+ir4/v94psghpLM+P1gX7jEm9IHge
Wd4fzTS7PEz1XjFesTxAskieMzPlTzEmsbxAWpO62XuO4P4W5gnS03CeT6u8
YP1leYPkfaRTx+pCMYR5hDTU8Zbs511FeMzyCklW/tIgCUF9NYrlGdKxyi7e
2xUlEOYdUq9HxzeJFUXgsTxEshK72WFfVwxhXiIt8jQstbQoxG2Wp0go+8EZ
vL8IQ1jeIqnTH02f6kJoszxGmrv18q5wbgkCWV4jjbwrZ71ZrxDCPEd6ebzT
ckxgIa6xvEfyHlM3ZsV/RRDmQdLNw3ZhLjIlmM3yIumez1HRvn2FWMPyJOn3
08IDy9cXQZg3Sa3mizbEXSvEBZZHSfvz3fmxE4sgzKuk84daFe0E65Eyy7Ok
xqGi4z/OKoEDy7sk43tFK84eLkYWy8Oktc0tmTs/FeM0y8uk3nkNAyKC/VSY
p0lHN9otFxWsF5NZ3ia1DF5s27S0BMI8Tkofel/+e3YJklleJ904PgPjxhTj
EMvzpJkL3To2xRVDmPdJ6WuNx34PLsJ4lgdKfxNsUtZGF0KYF0qz82TDf/0q
RhTLE6WbL/V6W72LsIfljZJZU/5Yp5giPGB5pKSgfEr+cG0JJFheKUXwddep
nSyCMM+UpiR8b34kVowwlndKTY1y2r2WJRDmoVJPdbmvTFQh2lheKikF535N
FdR/g1ieKjmFf5Pb4VYCYd4qOTX01zsK1hs/lsdKB0wqFCV6iyDMa6WYH2YP
pp8vwhWW50qLrs3fVjK1BAOz/uW9Ulec2vz5gvVrJsuDpVcJ+pzFj0uwhuXF
0jLD/q830oohzJOloZIz1iZ3FQIsb5ZGtYU3hkuWQJhHS6OqO+ziJxRhKsur
pe97B3mLGBTDluXZknLyAjnNtcUQ5t3SyaUtom9MiuDK8nDp1/yZUffOF0KY
l0uhtbaha6uKUMDydGlp8WeZudnFqGJ5uxTtVvrw+dsSCPN46Vtonn7CjULc
Z3m99GeVo4HoPsH7Y3m+1F7bs2qPYP8UY3m/5EfHE6R9BesHywMm3+7Ay3sk
SqDL8oJp3B1O+KTKYvwfS1cajtX3dhuVpBQNSKWMqaQSKt2NylCmyhBK0aRU
5tkzz8M5IhKJFGlCCMUtIkmGhCikEtGEVFJ5z//t9/G5PM85e+91r7XXunxY
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
gx4brkTC30/TCuwpf7pUPoVTnRUJjL6EkkpKT7bQbNKdiyNhPBdvwiCJroN/
H/dURcIVO9cVNZRfCTx8sy+gORKe5bYWK+UTKG3ZJz/xXSRsYz5Ouu5M4DWr
Kfpnv0ZC68+6C1xnEosx30b9TyQ87jjSLjlM+dPzqwqaJ9DAXmNRTXUhgb+e
TamaL0cDvfox+zwo/WVPfdPqOYMG24/SRnZujMKZZgV9N+bQ4NDeVycLdxOY
GEn8HlSjQfmzhet771N+ruCI/DoNGswbTTTOmhGFeQMb5jOW0ID5fLF8P3Xf
bVk6W//xChpU1twzrhYQWOf5CRSMaHCz1cepXUzd/0kPbRxMaWDhkeFFo/Du
eXHB/eIWGjwO/XBtVgaBfjN9fbrMaWAzpeLghiwSx1pZMJfa0GCK0soID4JE
CVs92ncvDQKVXdWs/1L448/UQhcauMxjeAVS+KX9rM0de4gGrrkHhr7IE2iw
Mq1ixzEaJM1bHjXwivKLXhHN0lM0yG/5UDaP8qMWV/b0NPnTAMKUxjy+S/mJ
9qXDamE0YMtb3jMjqXmZO2GKJ4M6D49LV95XEvjV9qXKDR4N/FsSicZnJIYL
s/UGJTTgsmK37t1O+Y1y/vq1MTSYyV7WFd1CYszfAzvpF2iwN+ue0zzqeYuM
jd0qk2lwqfBV93IrEm+dmX5qejoNupbfO2J+lMR1199H7r1Fg41Xud8X8Ck/
9q6ISMyhQapjqJMf9Xz7+THJ7wppoD/Vcuv1H5Q/cziRrfeABnezfl2YaxCF
J8gtZT6PqPPlGC72rqD8eZXK84KnNFDtftm5NZhE1oSBd2Oe04DWsc3pbTE1
nxseD21vpUHc03cmbeMITAi8JCN9TYODdTePkWMI1M0KnNP0ngaCQ9dOTDhC
5dXeXTpqn2jwlZ62YOY4yt9paJl4DNLg/jhWby91P9e6/jG/PkyDi5nrS1+8
J3Bf7HPngVHqvLPv/ll8l8K77rqXiQwd5BsX5ChnUX5/CjOMNpUOfR6zJN5S
EsdsdRY/mkmHdbGz2ZMofMThBhenKdPhdtXbJN/XUlS+O/n2ngV0eE+v65tO
nefVrx2YoEmHxtEIgb1WFBosuVv3Vo8OGL1bEE35yeJDks4lK+mQop25x5bK
X5aJngNnjOlwZ3SP6ylqfpqa1o8v2ECHaW+mOhZQ/tpDQUlpzDY6nFve2JBE
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
p/UaFlQfmlNKUvN/b0uNbOx6Fuz2mjcaspXCO/yKSvtmFhxLW5o2Zgul53lh
eprmLNhwQuzmdIHEA1/t15+wZsHXDbqfOR+l+ElXb+edPSwI3Hna0XQWiUGH
xrn92kftr+NYf+9WKcoktnhvOsiCjUquP0yfSvFsU2Yk7ygL5BT2H9NUpfKk
Ao+o9WbBWF1j0w9Ufrhuvj95tj/1/kd33/7v/xFrmGuyXUNZ0OXOlXSbSbHs
vnxZKp0Fhqe4qpoOVP74/q6hj8sC2pwI9jTqPn2lf//dSgkL5kouvr9STvH7
2Nmh4GgWRIxWWpjuIfBbynGZB/EsKFlhsymA8uv0V5vmTE5mQRmp0kwGkSg/
W1nHOo0Fb3f3ljYXEBhv/dX43E0WNJ6r8ir6LEFt/iPztjssKGgxL9iYIcXs
0ovOGoUsWKTcnfK5Uorw29/Lq4QFW+NWrq5KpvKr4c6w7AoW2Hd3HzoaIEXH
Uxri4WoW/PXJHdf/V4Jd6SOJGxtYMEfZw3mLkMDTb57d4rawYHBsOUMOKD1X
zcCaDhYsO+19NZbK77w99LpZ71kQ9XvV3d8vJThL6tjp8pF6XvDz8/kMApMr
9QcuD7BgIFPlbcJrCS4fN2l8308WPGhoWJt/nMR769oVV46y4H2my1qNmSRu
98/VCJ7Ihv7gMXFXplF6fktkWCLHhhPPLsyJ2SPF/T2HzCbNZIMmcz4z1orA
j+rrHHbNZcPzfYtrT1J+PXjfzKMx89nAHrbxjaLy58SYD0GvNNhQ6BHWT6Py
QVRNCX+xHhvuKm/f3kn5N7XJcfHHDdgwKtM6acVEAjM2nbqeZcQGS8c0+l0X
Kl+Gmt3/acqGU1ZZ5oHU+ZXmqD2FrWw4ltJjEj4qQZvP39o4Fmy43X5+Yjil
Fy+1qz8/tWHDhQtxNTepfHPU/fKokgO13rqtrRUrCRyMD1FwcWXDkkqfexmU
36Q9t1W/fIgNjmODbpb9JFB+mu7K3mNs+EKk7+uyIPH89jFbDE5T61F6uSPJ
SIJa9Gb7oAA2+DywnfjyK4HZhbc8MIwNq4vy1r5TJBC+sf1lmGwQ7PWr6dsh
xcfLXDk7+Ww4z/o9S4YjRYcjq2OjpWxgvDrVqHlCgu8uyaW/jGFDilzmPifK
L51qfZO/KIENOm3lGad7JfhHsfDxsRQ25b80LEOo+4+3k2zNTGfD/OwSxbUc
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.022441469474083278`, 
   0.02244146947408327}, {-0.017823427653731263`, 0.017749025951657706`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.77153315268717*^9, 3.771533222898468*^9, 
  3.7729814167642713`*^9, 3.772981546752708*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"73d27224-8d52-4fd6-8f29-0de3e791d7ce"]
}, Open  ]],

Cell["\<\
Don\[CloseCurlyQuote]t forget to freeze the parts that have to be fixed when \
training:\
\>", "Text",
 CellChangeTimes->{{3.771430933789163*^9, 
  3.77143094582791*^9}},ExpressionUUID->"63d9e6f3-0a69-42aa-917b-\
bbb70c0ffbd9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingresult", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"trainingnet", ",", " ", 
    RowBox[{"<|", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "normdata"}], "|>"}], ",", " ", 
    "All", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", " ", 
    RowBox[{"LearningRateMultipliers", " ", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<Jacobian\>\"", ",", "\"\<addEpsilon\>\""}], "}"}], 
        "\[Rule]", "None"}], ",", 
       RowBox[{"\"\<MinusIdentity\>\"", "\[Rule]", "None"}]}], "}"}]}], ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", "\"\<ADAM\>\"", "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771247046865926*^9, 3.771247048679696*^9}, {
   3.7712470787565365`*^9, 3.771247086372901*^9}, {3.7713275492107897`*^9, 
   3.771327579317671*^9}, {3.771429596236251*^9, 3.7714296515610247`*^9}, {
   3.771429755517665*^9, 3.771429757118301*^9}, {3.771429795372838*^9, 
   3.7714298009237223`*^9}, {3.77153323819985*^9, 3.7715332564331703`*^9}, {
   3.771533299145425*^9, 3.7715333272329473`*^9}, {3.7715342460148287`*^9, 
   3.7715342479660416`*^9}, {3.771534282714764*^9, 3.7715343375244637`*^9}, {
   3.7715343963224936`*^9, 3.7715343966032934`*^9}, {3.771534507189704*^9, 
   3.7715345209021697`*^9}, {3.7715404838498774`*^9, 
   3.7715405035773726`*^9}, {3.7715405833971806`*^9, 3.7715406162776217`*^9}, 
   3.771544160965495*^9, {3.771544655443059*^9, 3.771544663664427*^9}, {
   3.772881746511156*^9, 3.77288182334968*^9}, {3.7729814795324416`*^9, 
   3.772981479866582*^9}, {3.772981568281146*^9, 3.772981586564294*^9}, {
   3.772982180793415*^9, 3.7729822351999736`*^9}, 3.772982379248987*^9, {
   3.7729832215085115`*^9, 3.772983221640048*^9}, {3.7729833441980457`*^9, 
   3.7729834429562955`*^9}, {3.772988746913071*^9, 3.7729887869366207`*^9}, {
   3.772989309136696*^9, 3.7729893562153625`*^9}, {3.774193686145171*^9, 
   3.77419369394208*^9}, 3.7741938524180307`*^9, {3.774194513083372*^9, 
   3.774194608745768*^9}, {3.7741946841364207`*^9, 3.7741947124466157`*^9}, 
   3.7741948363832283`*^9, {3.7741949284290295`*^9, 3.77419494152439*^9}, {
   3.774197144157242*^9, 3.774197144376757*^9}, {3.774197954050973*^9, 
   3.7741979692074194`*^9}, {3.7741981175656395`*^9, 3.774198132260981*^9}, {
   3.774206929737075*^9, 3.774206931761694*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"7979b8cc-375e-4c61-b5b3-4937a8b061e9"],

Cell[BoxData[
 FrameBox[GridBox[{
    {
     ItemBox[
      FrameBox[
       StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
        StripOnInput->False,
        FontSize->12],
       FrameMargins->{{10, 5}, {-4, 2}},
       FrameStyle->None,
       StripOnInput->False],
      Alignment->{Left, Bottom},
      Background->RGBColor[0.96, 0.96, 0.96],
      Frame->{{False, False}, {True, False}},
      FrameStyle->Opacity[0.1],
      ItemSize->{Automatic, 1},
      StripOnInput->False]},
    {
     ItemBox[
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"summary\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batches:\"", "29700"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"rounds:\"", "198"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"time:\"", "\"32s\""}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"examples/s:\"", "59975"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"data\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"training examples:\"", "9600"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"validation examples:\"", "2432"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"processed examples:\"", "1900800"},
                "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"skipped examples:\"", "0"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"method\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"ADAM\"", "\"optimizer\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batch size\"", "64"}, 
               "RowWithSeparators"],"\"CPU\""},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"round\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"-6.06\"", "\[Times]", 
                    SuperscriptBox["10", "\"19\""]}], -6.058263352613325*^19, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            
            TemplateBox[{
             TemplateBox[{5}, "Spacer1"],StyleBox["\"validation\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"-6.1\"", "\[Times]", 
                    SuperscriptBox["10", "\"6\""]}], -6.098518064555921*^6, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            ItemBox[GridBox[{
               {"", 
                ItemBox["\<\"rounds\"\>",
                 DefaultBaseStyle->"LabeledLabel"]},
               {
                RotationBox[
                 ItemBox["\<\"loss\"\>",
                  DefaultBaseStyle->"LabeledLabel"],
                 BoxRotation->1.5708], 
                GraphicsBox[
                 {AbsoluteThickness[1.25], {
                   {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
xNdL4/8BL1UD5Q==
                    "]]}, {}}, {
                   {Hue[0.59, 0.7, 0.75], LineBox[CompressedData["
1:eJwtVgk8lOkft4506lKKKCkh5ZbOeRnnmGHuyTUYhtnSltTKti2p1X9VVv2V
krTaDkVqdSpb76/tnFJ0h+0+lN1CdOxK+/zmfXz4zGe8z/P8fr/v9bz2moVS
rbGRkdEF8oefo6omfl/v/pyn5teOGV/fxeO+d/PyOks6jzl/pN/NGDU/647H
l888Oyu3ZqMV/ZlBz318fyszZja9/+Xq4fxhTF2eZ3xzignDrR/BSNQm2+zS
zBhuvTVjZJTT/nWvJVNOVls72DLznQ6qXi93ZG5te9C1Z5o9ec7EeqfNoOeN
Z3yLrJbteepPz5vI5HVaC1Tj7vGa+rTKmlY5kvpL/Vf3iNnYujSTLmdnptM6
33bSu2SWq+fClNflbddIv2W5elNIP/y93c2rWM2kb8nvVCZr0HPh6BmFbMY3
n/83rsCduStWX1+2vITl+vFgDpbPqsuduYvl+vFkrPVty7NOVrHvHXL9Znh7
YX1n93WH2eM/BA4JWeON/S380/Uky/XrQ/oRBKdGAsv164v9iOu3XmBneF8+
kzBlGuNTVNxaKbrC9hSsLV6Q48ekObm9Gd3WQOeZjufHWrndovPMIPjW3Fl+
8S6bjeUcZzJiNV/Und3CMjtu2BVlzWKe+9yy8296ROedTfBTdXhlPKXzzmH4
WfVJjQNfsH/IVdcOjOUhvlu+mvOKPXt3oCxuOkPw2O3p4vYX62D25vTTJwyj
n6/bsEL9luLhj+dFWs7tYA3tP/YneD3w3bH2Hfs8/tDmdp8ApujuEL2it5sN
Wr/BOPNhAOF3YXr57o8ULz6pP8h7dtC/rFKStIv9k0/Od2p4bNbLmiM8noFk
3u5pbblGoBvhE9y/JZDUu1turTMGDs8gMv/ieS/NTCHrPgIahP3Vut0yA+dF
H2yt3IIRn5iVH8whf/u9n7bfCyZ8NFltXdAfOLxDEP8Ds3cOhG2J+ye/vBNC
9lc08+5bQPjHEvKfUMbp4OOrYS1DwFDudijhT//TIrdhwPERRvDRGlsVD4ff
X4kWfnczDPm9cztkBHyTM2f3bCcBwaPseFfrSCDgDj3XKMB+a1cyo4DjKxz9
sjPO0hoepXfUDGoIR/w6r1XYQGHfJ60NE4QEL7fwtY220OGDDAlxvpysPuOA
41NE/Pepv727PRj/U0QUKcJ5zEu046Gm8EfXZPsIxkZf+epUuQMMP52y5bU+
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
eumX5qUCI/xhdYjH6k18FfwHdmnNtA==
                    "]]}, {}}},
                 AspectRatio->Full,
                 Axes->None,
                 Background->GrayLevel[1],
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6},
                 Frame->True,
                 FrameStyle->GrayLevel[0.5],
                 FrameTicks->None,
                 GridLines->{{50., 100., 150., 200., 250., 300.}, {{-8.*^19, 
                    GrayLevel[0.8501]}, {-7.5*^19, 
                    GrayLevel[0.8501]}, {-7.*^19, 
                    GrayLevel[0.8501]}, {-6.5*^19, 
                    GrayLevel[0.8501]}, {-6.*^19, 
                    GrayLevel[0.8501]}, {-6.*^19, 
                    GrayLevel[0.8501]}, {-5.5*^19, 
                    GrayLevel[0.8501]}, {-5.*^19, 
                    GrayLevel[0.8501]}, {-4.5*^19, 
                    GrayLevel[0.8501]}, {-4.*^19, 
                    GrayLevel[0.8501]}, {-4.*^19, 
                    GrayLevel[0.8501]}, {-3.5*^19, 
                    GrayLevel[0.8501]}, {-3.*^19, 
                    GrayLevel[0.8501]}, {-2.5*^19, 
                    GrayLevel[0.8501]}, {-2.*^19, 
                    GrayLevel[0.8501]}, {-2.*^19, 
                    GrayLevel[0.8501]}, {-1.5*^19, 
                    GrayLevel[0.8501]}, {-1.*^19, 
                    GrayLevel[0.8501]}, {-5.*^18, 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.8501]}, {5.*^18, 
                    GrayLevel[0.8501]}, {1.*^19, 
                    GrayLevel[0.8501]}, {1.5*^19, 
                    GrayLevel[0.8501]}, {2.*^19, 
                    GrayLevel[0.8501]}, {-8.*^19, 
                    GrayLevel[0.3001]}, {-6.*^19, 
                    GrayLevel[0.3001]}, {-4.*^19, 
                    GrayLevel[0.3001]}, {-2.*^19, 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {2.*^19, 
                    GrayLevel[0.3001]}}},
                 ImagePadding->1,
                 ImageSize->{302, 182.},
                 
                 PlotRange->{{0, 198.00333333333333`}, {-6.56825*^19, 
                   3.9325*^18}},
                 PlotRangeClipping->True,
                 PlotRangePadding->None,
                 Prolog->{{
                    InsetBox[
                    FormBox["50", TraditionalForm], 
                    Offset[{-2, -2}, {50., 3.9325*^18}], {1., 1.}], 
                    InsetBox[
                    FormBox["100", TraditionalForm], 
                    Offset[{-2, -2}, {100., 3.9325*^18}], {1., 1.}], 
                    InsetBox[
                    FormBox["150", TraditionalForm], 
                    Offset[{-2, -2}, {150., 3.9325*^18}], {1., 1.}], 
                    InsetBox[
                    FormBox["200", TraditionalForm], 
                    Offset[{-2, -2}, {200., 3.9325*^18}], {1., 1.}], 
                    InsetBox[
                    FormBox["250", TraditionalForm], 
                    Offset[{-2, -2}, {250., 3.9325*^18}], {1., 1.}], 
                    InsetBox[
                    FormBox["300", TraditionalForm], 
                    Offset[{-2, -2}, {300., 3.9325*^18}], {1., 1.}]}, {
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{"\"-6.\"", "\[Times]", 
                    SuperscriptBox["10", "\"19\""]}], -6.*^19, AutoDelete -> 
                    True], ScientificForm], TraditionalForm], 
                    Offset[{3, 0}, {0, -6.*^19}], {-1, -1.}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{"\"-4.\"", "\[Times]", 
                    SuperscriptBox["10", "\"19\""]}], -4.*^19, AutoDelete -> 
                    True], ScientificForm], TraditionalForm], 
                    Offset[{3, 0}, {0, -4.*^19}], {-1, -1.}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{"\"-2.\"", "\[Times]", 
                    SuperscriptBox["10", "\"19\""]}], -2.*^19, AutoDelete -> 
                    True], ScientificForm], TraditionalForm], 
                    Offset[{3, 0}, {0, -2.*^19}], {-1, -1.}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.\"", 0., AutoDelete -> True], 
                    ScientificForm], TraditionalForm], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}]}
              },
              
              BaseStyle->{
               FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                GrayLevel[0.4]},
              GridBoxAlignment->{
               "Columns" -> {{Center}}, "Rows" -> {{Center}}},
              GridBoxSpacings->{"Columns" -> {{0.5}}}],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"},
           {
            ItemBox[
             StyleBox[
              RowBox[{
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.083, 1., 1.],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.59, 0.7, 0.75],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
              FontFamily->"Verdana",
              FontSize->8,
              FontColor->GrayLevel[0.4]],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          ColumnsEqual->False,
          
          GridBoxAlignment->{
           "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {False, {
               Opacity[0.15]}, False}},
          GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], 
              Offset[1.1199999999999999`], {
               Offset[1.75]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.8]}, 
              Offset[0.2]}}],
         "Grid"],
        FrameMargins->{{10, 10}, {10, 5}},
        FrameStyle->None,
        StripOnInput->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Alignment->Center,
      BaseStyle->{
       FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
        NumberMarks -> False, Deployed -> False},
      StripOnInput->False]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], 
       Offset[0.8], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Background->GrayLevel[1],
  FrameMargins->{{0, 0}, {0, 0}},
  FrameStyle->GrayLevel[0.85],
  RoundingRadius->5,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.7712470921490593`*^9, 3.7713275671155896`*^9, 3.771327632265649*^9, 
   3.771335674811412*^9, 3.771348060288856*^9, 3.771425071743907*^9, {
   3.7714296410147133`*^9, 3.7714296549848547`*^9}, 3.771429721479094*^9, 
   3.771429767157854*^9, 3.771429824590098*^9, 3.7714299197089577`*^9, 
   3.771430014333067*^9, 3.771432299869401*^9, 3.7714352089965553`*^9, 
   3.771436284363997*^9, 3.771436334294784*^9, 3.771436866441619*^9, {
   3.771524806935855*^9, 3.771524826350263*^9}, 3.7715332399226103`*^9, 
   3.7715332709125223`*^9, 3.771534249941715*^9, {3.7715342860386076`*^9, 
   3.771534340225231*^9}, 3.7715343978623934`*^9, 3.7715345099763374`*^9, 
   3.771534549087354*^9, 3.7715347239766083`*^9, 3.7715404546432447`*^9, 
   3.7715405935170727`*^9, 3.7715406551193085`*^9, 3.771544183017167*^9, 
   3.7715446810873117`*^9, 3.7728818526067142`*^9, 3.7729804596808696`*^9, 
   3.772980522386208*^9, {3.7729812759138756`*^9, 3.7729812809643717`*^9}, 
   3.772981444637742*^9, 3.7729814936985636`*^9, {3.7729815539075766`*^9, 
   3.772981596953481*^9}, 3.7729821083471184`*^9, {3.7729821898172836`*^9, 
   3.7729822307997055`*^9}, 3.7729822621967554`*^9, 3.7729823926072683`*^9, 
   3.7729825834330387`*^9, 3.7729828714379654`*^9, 3.7729830484174786`*^9, 
   3.772983080602178*^9, 3.772983229997608*^9, {3.7729833502704177`*^9, 
   3.772983468281036*^9}, {3.7729835146767607`*^9, 3.7729835665174656`*^9}, 
   3.7729887400067654`*^9, {3.7729887713929334`*^9, 3.772988812600937*^9}, 
   3.772989193406945*^9, {3.7729893046683726`*^9, 3.7729893501770205`*^9}, 
   3.772989383772602*^9, {3.7741945308279047`*^9, 3.774194615797274*^9}, {
   3.7741947108420553`*^9, 3.7741947281144094`*^9}, 3.774194845973979*^9, {
   3.7741949356403794`*^9, 3.774194945066622*^9}, 3.7741971342620325`*^9, 
   3.7741971855642366`*^9, 3.7741977148767395`*^9, {3.7741979659596415`*^9, 
   3.7741979823971634`*^9}, 3.7741981304550705`*^9, 3.774198160496441*^9, 
   3.7741982524218187`*^9, 3.7741982897164097`*^9, 3.774206923953537*^9, 
   3.7742069646626787`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"8da367a4-d6bd-4b21-bb4c-3190d3c75b71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingresult", "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7741983672036185`*^9, 3.7741983970951667`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"a09319a3-6986-450f-954d-2feeb1c8c24d"],

Cell[BoxData[
 TemplateBox[{
  "NetGraph","nfspec",
   "\"Cannot \\!\\(\\*RowBox[{\\\"\\\\\\\"evaluate\\\\\\\"\\\"}]\\) net: \
\\!\\(\\*RowBox[{\\\"\\\\\\\"shared array \
\\\\\\\\\\\\\\\"1/1/1/Biases\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) is not fully \
specified.\"",2,50,14,23502374055710319047,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.774198384146264*^9, 3.7741983976223097`*^9}},
 CellLabel->
  "During evaluation of \
In[50]:=",ExpressionUUID->"a88837d2-7114-4633-a4d0-651043130b10"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.7741983842917004`*^9, 3.774198397687089*^9}},
 CellLabel->"Out[50]=",ExpressionUUID->"451e299e-c8d7-41d3-825a-9c5106b02658"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "=", 
  RowBox[{"LearnDistribution", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", "\"\<RealNVP\>\"", "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7715447881643496`*^9, 3.771544842089373*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"a4820af0-53d6-44b7-a23f-1f2bad21c625"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["LearnedDistribution", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                  FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                   ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                   Identity, DisplayFunction -> Identity, 
                   Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                   AxesLabel -> {None, None}, 
                   FrameLabel -> {{None, None}, {None, None}}, 
                   DisplayFunction -> Identity, AspectRatio -> 1, 
                   AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                   Frame -> True, FrameLabel -> {{None, None}, {None, None}}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                   Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                   PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> True,
                    PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                  FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                   ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                   Identity, DisplayFunction -> Identity, 
                   Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                   AxesLabel -> {None, None}, 
                   FrameLabel -> {{None, None}, {None, None}}, 
                   DisplayFunction -> Identity, AspectRatio -> 1, 
                   AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                   Frame -> True, FrameLabel -> {{None, None}, {None, None}}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                   Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                   PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> True,
                    PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[LearnedDistribution, 1365760, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           LearnedDistribution, 
            7991510226916621506349272593511063030532925579179502561056, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LearnedDistribution[\[Ellipsis]]"& )],
  False,
  BoxID -> 7991510226916621506349272593511063030532925579179502561056,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.77154485705823*^9, 3.771544929812026*^9},
 CellLabel->
  "Out[157]=",ExpressionUUID->"ea81b3db-03a7-4497-be68-dca30cd27ca3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomVariate", "[", 
   RowBox[{"ld", ",", "100"}], "]"}], "//", "ListPlot"}]], "Input",
 CellChangeTimes->{{3.7715449388237753`*^9, 
  3.771544971564458*^9}},ExpressionUUID->"e8b63814-61ac-4f0f-9dd0-\
95770e98bdf0"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwV0f8/E4gfwHHfzreVTzclUvkWpz5ISeRcb3J1lOtDPfLlcGpLkitJV1yf
7gu62Ud0fdGcLpYh8n3J5izvbanhyMawq3zdGnPYF0XEuvv88Ho8/4CXHSnp
UJyejo7O8X/6v36MjR9Uumogn6NvKvn5CSiPC54CQQQRbsP6tSiETk/mrzT9
Uai5KslZljfjhk0NU1nEVljp7JodvdSPn3ocXHnrsgKZmmmjX8wX8bfDVotc
fgXq1i90l+ZOgoHCMtP24jBcTUvGm+V9kNV+NJffIkMV4YDIlPIO9RN/CC8K
mMV3zTPVH2dr4Hz3e4+xEwqo/0S0+qfBNvxm2wM/hq0UTUZdPy3cuoQcMrmB
+XQSSmyf9A51/Yhm1smJh0Or4OTYANn+1AAmBAX3lHj2gMnd9IeWtH4ooeab
HtUX4jnXHctSpRpJgWu90nTmoaiC4vGmRAEuXhbq9IVZmKWrM2yaRpDYkzLf
ZysGj5HVhOwWBuZF/nlrZ2cX3hPsoao4PBwVOc+K7SaAlE+jkFhLeHk007d3
qxDuP36uTNTqci9UD7H5eb0oHM7Pp6dPQr2yuOpr81G0lzs+eTS9iF7qQ65u
imEIifafOUueBCdD+xuBrAmYswmVp8YqIP1AYFOzYhrqVwltKuqV6HSmJkc7
JAMnajzNd+tLvMDLGUwpbgQDhy++aE+WA4vUXrqersI1FLM+787n2FZdRp3v
nkURPUtUPaaA68FGKzYGK6CgsuWYYSULY8qNU+/J5yAgXrHY9LAPy15qEvW6
HoO7+lWX1/IoNEdLHWbP6HIdlJ59BC3Br5Acs8clSddvm8Uu+vjPKuxx4JKu
8UWoqqW9OLFbzy/VuOn20sAisHhsF8n8IFxTFh5b+/g9OptYujEEHCzo4ofx
HnVAS2EwMUdhwk0ssw6375nByNOeqyYMhHjQ+MiWBeEI7M3R3B5Lfg3uZ5T6
BQk8tLhOLOlu0eBmB/Ps0J3dGHb31OSLaDGMKU2//2HLOF66OtCW8fkc9Lcy
FypOa5Hypdn+gDQxXOy7J6v1MuDeiPKZmKpZhJ72WH/PCBG2NsscMzyHIIF6
0XKpfgotzB2NrCcG4M99HSFjzq+hOnSWtEavGC2+fXbE2V0G5cGp4u3sCbiy
KN6fuFMFZmYMS0eODpczoP97nFE7xnA2p/XfUqHMTWOwx+EtRNTwlrNXdgLF
6WOm16tlWBZ0vpb+TwrR3NtE5b5htFs9TrU6+wxLrFd6n5rrh3+tWrZPXjeP
ZXF1B5bfydH/1MLT2DgtjLFM7HiUBSw7T/J5vrYPuJ3EmFK2Ep7Surp174sx
WMfJrpszh4W6uYzH5AYQJLH8CqRqPBp7kqo2G0fJac+O3PMyZJMbrcJ5Giy1
caka7m6E6kifDB8bNe5HM22B7C18lnJSbsteQk1jxLofw5gon3p3Zc3dAYiC
9T4Rm9UgKQ27NH1LgryEZ1Ps5jkooNkMjFdJYLvvxq9q43W4M+SaiivFKsgM
WPA3Z32AxjuCmyR3FWJWdsp3pmqIqxsId/jnJ3OqePoDVQVD6cLdmUEiIIpc
hNqWOrDIqgp50C+HQfKvK0KmBSj03UlMuXQdfu+lSd583w6brHZVtG9+g7k7
jIy/4vdgebR5kHeSFg/sMl3Bj2ODcO6BoIYxiTF2LxbVuzuhezvB8LYXH5xv
FpGW1wkwcCLP8q95DcT3Nke1sZTQSr+Tpph/j3nSmbo916bQdMtDwteHJUB7
zqz8hi/GnJmPZM/0upD9WnaireIhhhOtdzt/3onDjIVW32MK/KhRrLg/I4Om
4yZJbG8phFAmMnbUCsEiNWo6mPQGwvMS/BjxGhxVb4/ssvoDrA0PM67Oi1FL
CWpiTo5AGNV9Xd/UW5DK95p32EzBvkPxfzQ0y2HXf93uuFwegl/O9rtYf9aD
NV/WcvbaD2JcUep/1j/QYJT23DXDuUfoSsi64Bb3EmwCPIw5Y6Po4XPdpTKt
HGfO0r1N2/kwfPzgv9+vpWP6t52/0YtUUBzZTx0/OgqBDUf2onoeXpE2+OyX
9CLNo/bexAUWriL6xbIc5yBktsW3pGMW9UI/2Ray4T5UfnfTP8+qA7b85RRf
6I24LzM/quunGqwrWqFLsB1B+xtSq4ygMbjkI1/fEjqMfwMtVWOz
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.527190958203103, 
   2.1792836365461445`}, {-3.2390386037476153`, 3.499046006878318}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.771544952492618*^9, 3.7715449617579546`*^9}},
 CellLabel->
  "Out[159]=",ExpressionUUID->"e0c696e6-0098-4ea9-b389-7de806c58496"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["To do", "Section",
 CellChangeTimes->{{3.7715458826652436`*^9, 
  3.771545883385559*^9}},ExpressionUUID->"7b035ac0-689c-4df8-acd4-\
8f627bfb233d"],

Cell[CellGroupData[{

Cell["\<\
Train network with LearnDistribution with method realNVP on MNIST\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.771545263902272*^9, 3.7715452771901417`*^9}, {3.7715458656319013`*^9, 
  3.7715458713357563`*^9}},ExpressionUUID->"cd1b41ab-eda9-42da-aac6-\
26a113e44c18"],

Cell["Extract Sampler and ProbabilityNet", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715459658294754`*^9}},ExpressionUUID->"66105fd6-9462-4fd8-8e23-\
d81c09a0ee41"],

Cell["Use ProbabilityNet as a feature extractor", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.77154600557452*^9}},ExpressionUUID->"c6bc0779-c7f3-4c48-bfa3-\
f0cdeaaca3ef"],

Cell["Feature vector from data should have a normal distribution", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.771546019440454*^9}},ExpressionUUID->"2289084f-7c83-479a-af96-\
dedb881e9daa"],

Cell["\<\
Give data that is not original distribution so you should have something \
different so you can learn this distribution using LearnDistribution - but \
not with RealNVP\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715460589103346`*^9}},ExpressionUUID->"f1456225-6cde-4d92-ab28-\
cf43d74d8155"],

Cell["Idea is to learn a simple distribution", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.771546069053322*^9}},ExpressionUUID->"61973021-92b7-48c7-bc9c-\
116e8dc39b31"],

Cell["\<\
Get new data \[Rule] pass it through probability net \[Rule] this gives \
features \[Rule] then learn distribution on these features \[Rule]If you want \
to sample, just sample on feature space and pass it through Sampler net\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715461624311404`*^9}},ExpressionUUID->"e6e00c02-fbd2-4e45-8906-\
13379f34499e"],

Cell["\<\
For example, train on digits 0 to 8, then give ProbabilityNet digit 9. Then \
you LearnDistribution of these features\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715462202755013`*^9}},ExpressionUUID->"42f2e06e-1af6-439c-b90c-\
5f07658053a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transfer Learning", "Subsubsection",
 CellChangeTimes->{{3.771546260506615*^9, 
  3.771546266978289*^9}},ExpressionUUID->"583c0676-a2ca-4b8d-9b39-\
25a02a72f6f6"],

Cell[CellGroupData[{

Cell["Suppose you have a network that is trained on a lot of data.", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 
  3.7715463036100373`*^9}},ExpressionUUID->"d36d8751-1c1a-4663-b027-\
febafaded811"],

Cell["\<\
Take a network, trained on big dataset, as a feature extractor of the new \
data you want to learn from.\
\>", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 
  3.7715463566604214`*^9}},ExpressionUUID->"067b1bb1-60d3-4421-9567-\
5ce528287d14"],

Cell["Then you learn the classifier in the feature space.", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 
  3.771546377098166*^9}},ExpressionUUID->"b293b62a-5805-46e4-b778-\
7582c435649f"],

Cell["Extract Z_out from coupling_2", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.77154742459601*^9, 
  3.771547424598006*^9}},ExpressionUUID->"9341c339-8754-4bb2-87f0-\
07fa4f254039"],

Cell["high level features are in Z_out", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.7715474255223885`*^9, 
  3.771547455284732*^9}},ExpressionUUID->"0d3b85a2-0408-4ccd-846a-\
0bdcb78fef09"],

Cell["\<\
Z_out is a vector of size 728 with MNIST. Ask amir if important features are \
at the end or the beginning.\
\>", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.7715474255223885`*^9, 3.7715474812211885`*^9}, {
  3.771547511365837*^9, 
  3.771547511369824*^9}},ExpressionUUID->"3a73fe75-5d24-48d1-8055-\
218ade225902"],

Cell["Recreate a vector of size 728 and pass it through Sampler", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.7715474255223885`*^9, 3.7715474812211885`*^9}, {
  3.7715475118124733`*^9, 
  3.771547522444431*^9}},ExpressionUUID->"5a1d1919-c4ae-4f4c-8183-\
1c0d2fec176f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "\[LeftDoubleBracket]", 
  RowBox[{"1", ",", "\"\<Model\>\""}], "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.7715458386246595`*^9, 3.771545838814453*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"24107cca-933b-4b22-a908-ef3700f170db"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Sampler\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = True), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"X_out\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["8", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 3}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = False), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = 4}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwB2IQDQFKBzqel/18deuwzacTp2JsnyseeMFrbrr40Ar7
RcsivCtOKR5wXb8m+NbhXfb8M1ee3rBS8UDPnpmiZycftbdYsPfusxbFA5af
pk/wOHbOXm7PlEapGMUDITUZZ9fXXLE/+EZvu7e+4oE36UpSnWK37BWNeuqq
/ikc+HzXRjxC4oG9Xc+a68tOKhxQsDFvnZT62F7id/+hCxMUDtT5MVz//OmZ
vc/EIyef5CsciJocKmp/84X97sBFy2t9FQ5cbgn1CWl7ZZ9moxkzW1PhwDMl
hhrjX6/tvQIjn9uyKByYnBu65I7JW/srCqmTTu2SP3AzJfSov9k7+47PmczK
WfIH9nIw3O/5985+k9RBxVYx+QOWkaEfJ/e+tw+alvX2w365A0FhoX9SHr+3
nzUTBGQPQMLqg/2LyXYvJ9sh+JZ9jy36HsvA+V0dIIDg32jSBSIEX6P2knrt
JWk4v6IcBBD8E4UyxwtlEHyJnINiOQel4HyIeyTh/Jdg9yD4FmD3SMD5nWD3
IPg3we6RQHOPOJp7EPzjYPcg+OJg94ihuUf0ACOUX3XEpyrDSfTAik0OLw7c
eG9fGyBT++CTyIG5p5gWMie/t19gy7GIcbXIgXvublon5r2zf9ot8PJ0lsiB
XC3uFr6et/Y+1qZB9kYiB7yKAtdd03pjf8W77G40o8iBEnnJlQrVr+zr9l7u
UrwhfOCNYVLJm5oX9p4TfKMmbBM+sGmljoCVwTN7syOPvVfMET5wpK2ihnPq
Y/u0WbV2PMzCBxoML7/5nNhhv+XP/zvqZUIHJmUyJLBYP9wv/zpL/fdXwQNK
foGdvgs+7F+auk+2rUnwwOqlkirzrn/f75Xza/8JacEDSdaRDCXO//bz/Jfj
O3xQ4MAido7+5x8ZD7yW1eEoLRE4sEpg/r7wGJYDz08orrtnLHDg5I6PfVyJ
bAcg+UvgwH8wYD8AAFnWfDQ=
                    "]], 
                    LineBox[CompressedData["
1:eJxdlHlM0mEYx4EIBVoikkdaQLPQSrLDjcp8S8RSE+yw2bpI0nWbZeXs1C6P
MtOw7DQxtWVrXWss5+8pljaj2jTSbNlhgzI7tMJAhOJn8dt+373vnn2254/P
nufdK0xOW5hCo1AoMX+vsw5mDOSadli62nXhY/vmBKqNQpC3u9e/Wq9FaavC
1rU2CiF+XkJKHE+POiTtTxs0QnjwKD1m/vBWlHYgNFGVJYRpxd+Wqm+9RYFI
YquNE0KB/+9MZb4R2Tf06DQ+Qkjd35x9hP0FWZnLa+d2CEClRDMO+feiAL/M
O6cvCiBx896aDIYZKctkb0qXCYC1vopdHG1FwaOLql/IBFD08JxEmNWP1MFb
DbEhApC6JaVl59mQ5t7ntT88BTBmUtv1mxkDqKLGois38UE8a5T19kw7ijTF
Zusu8yF1skie22FH46Y+ZipW8qGJbb46cYUDyY9mrZB68mGZPs+r4q4DaXuT
dpfXjwa/be8PfvziQGfKnBkF1MFBzf5YEvGpJILg6YWdksLOABfn5zpDcFtO
yN9DcNCeZtGeZn8XZ+50huBH6QGN6QEE+268773x/kgXD/r4ufgT7kOwBPfx
dXEe7kPwS9zHl+TjQ/IhuBH3IdgH9/Em+Ywg+YwgzYdH8uGRfHgkHy+SjxfJ
x4vkwyX5eLrYdugUjxnpCdzEsuJn3Q6Us2SuMbmHA5GLU2IjbjmQmH1leHU1
B4oHVKL5ixzIpqk7ZljDAdoCdbBFb0ffBTmqr0EcOCm3JMgEdsSl/+B3mjwg
ynz8fGj8AMovlI2rL/AA73lLPe4tsiH5u/6Xm2Z5gFtUYtWHqf1odTdiSaUs
qLs2hLdZpcMmy7iiEowJu1oOa+O0BuxbdN4FcxgTEuLZSRdfvMVO91Ru2VTl
DmNL28yNDUZsvCzlfB/HHcKjJmj517qx6jlNgertbqC/mq1oierBOKYWRvRz
BoxcG7pYLP6JrQnLkbJCGMBqvdRVzu3DNBMN7e/2DYWzvw3cCb0WTI+HDk/w
asNSu9//euZPB6U8IwiKHJh19Ykp3zOGwLDw12f43lQ46FxPGw36KxXWSgUN
6Iq7xiMyGvzvy2oQr3TUUYG9rUJKPUyHLnz/VBDjD38o4O1NFEh2tm9gQG2o
aAZPSYGaCzcKWpEb/PuA/lV3+ANTXtRd
                    "]], 
                    
                    LineBox[{{-9., 
                    5.51091059616309*^-16}, {-8., -0.9999999999999996}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFKBzqel/18deuwzVXjso+/nise2PfdRCfnwGEb
nSC2eXlnFQ/8TPdKUV582IYtegNr9AbFAzYW2xcKNB+2SfIr0TgwQfFAU0b1
E+OEwzb2YA2KB87/mKbTa3XYZsEXz/lfPBUPKL7krJIROmzTtDz682ElxQOV
llfOPHx2yOaZSzsTz0+FA9dfflW5u+OQzdkzIKBwwOpXXhNfxyEbsPb5CgcW
7Jr86FboIRuZ44VApHCAvXqH03LlQzauLiCgcCDP+u6i4o8HbXIOigGRwoEr
vxmZHfYftNGovaRee0n+gNUetWSe3oM2FeUgIH9gYY334RtRB21OgIyTkT/A
blugvFTjoI042AC5A3l/pzQXfjtgM2smCMge2JXHs8cz+IDN2sypQvwOsgem
r1u5inl2zn6/p3b3ql7KHFi4EcTv2V/JM+3PnakyB6xL/vMbiS/Yr3N/Vq6p
q8yBxE0g+TX7c2J9DVu+Sx/InxxyVypy236T9rXuJ9dIH8gCqz+wvyNm9waW
VOkDW96sPLfu2dH96XfLcswUpA9MBOs/s/8C54OquHtSB5iS/wdKSF3a3/x8
WcCmHKkD+9onfr1lcnP/vtnPmbiZpQ5IurRd9D9/f3+D2qKJGQslD3CdeVe0
+8uj/cfar/055S554PpBb8kVB5/un7i/xcXom8SBYuZbt3P9Xux/cnZNxrw1
EgfuTZi5i2f2q/17Nvll8mdLHJDM6trasvzNfpm8LLdWQ4kDKv1rzlwtfrcf
kn4kDvz9DwLv9wMA6+EtaA==
                    "]], 
                    
                    LineBox[{{-9., -0.9999999999999994}, {-8., \
-0.9999999999999996}}], 
                    
                    LineBox[{{-8., -0.9999999999999996}, {-7., \
-0.9999999999999996}}], 
                    LineBox[CompressedData["
1:eJxdlF1Ik1EYx993y73OSJ2bOt3mnIJOYsOKygpSsou8MGO7qlRS9KIhlhpq
ySAkSSuCmh+1hfYhQrvJ1o1lsUcknJKSIjHBvvDKZbVyLp0fa++ZPoPz5xkv
P/7nPfudM5im8pKhWsAwTFHowz/DSYcgCQcL97peX5tSgytzb8PKIw4Ki192
ezvVcNNaqfuew4Fqv7GnwqiGvKoB/eiACGoLWoYnxWqYv+5vtElFcKw5R3hw
KA0avQaR6XIUtM6V1faUp4Hg1fC8/t0uOFEl3/RtqOCGKzewuCYEs/zsi2KL
ClZzHeW2LCHs86vbnmhUcGEpP6awUAAPMjos41+VoLXZjw6Os9D07GTJulUJ
H3o9S6ZyFiabDUOHjEo49S+Y3sCy0PXUMdUSrQRbv+eTy8HAbHr1/Yk3CpgY
sMfW1DPQvnxRmGlSwPRmvqu0gAFH6oimLUkBjud2oU3JgKHb9NPrTIUauwey
OAasD/mkwFb4gpyLluOhSYGNbc67uxAaOfYd7Xzk2/cZdM616tytukivNc9k
m2eSkZub+ER4rE4Zmggn14wkhQY57JNI+SSizxHiI6N8ZJSPjPKRUj5SykdK
+SRQPhJkD/GRUD7x2N8iPvHo4yY+kf5MoL8k0B+H7P3FJxaZbJcXYT3ZYA/y
AZLdyNPZ/AFj0KeeP86YGHuphI8YfQajzocmmvLhkH8THxHlI6J8oigfIfIM
8RGgD7neMRb7BOLDUj4M8mNfUZ+vKOjcWf/lM59NZLJd3QZyKdlg3bnzfvj3
WkP+6H7/o+/wKq73jWZUf1v0Y8/xXz+44tz+owCut3Yy7rYPe/+dsrdbV5ex
nyXn+4tMlnf+QT5XcfqKFrzILHlE+D/mWunS
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwB2IQDQEKB/6DAfuBxxOn7qw6J3/A9M6VHq5kjgPOvhun
fZgif6Aide4luWscB2SNgqcnBssfODE78qJNJOeBPIfq3Wc55Q8o1XN2przh
PGBdoclsukPuQBf/2p9T+7kONN2MzZseJ3fgj4+L8kUn7gNOKRJ/v/yRPVBt
fp5VjI3nQK1E5HrfybIH2M77Lky5yXPA8Jt860JF2QPzhA983bOH98AMpc7J
J+/LHLicEnrU34zvQPliF//fs2QOGCeKCk9dyHfgbEXQDrNgmQM7OBju9/zj
OzB10aZz1RwyB5KiRTXNffkPXFFInXRql/QBk8jQj5N7+Q90fM5kVs6SPqDD
dMB88X7+A5ukDiq2ikkf8AkL/ZPymP9A0LSstx/2Sx2YFCpqf/MH/4FZM0FA
8sA/cPjwH3g52Q6IJA/8gfIt+h4DkQRcvrMDBCSg4cl/4GaT7o0mXYS8Ru0l
9dpL4nB+RTkIIPjHC2WACMEXzzkoBkRwPsQ9omjuEYW7xxLsHhE094iguUcE
zT3CaO4RRnOPMJp7hNDcIwjnr8+cKsTvIHhgAjT8/J7a3at6KXDAGxq+lTzT
/tyZKnBADxr+Ovdn5Zq6CsDj59quWUkc7/nh8ZfJF90/KZL/wHZo/ArsLEvk
PMV3wAga/2d2vb2R48B34Co0fcDSDYyGpSsYXQNNdzD6HzRdwmhYuoXRytB0
DaNh6R5GV0LzBYw2h+YbGA3JXwgaAPyx0hs=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKB/6DAfuBFelvHn09Lw/nRyzhsbk7C8Hn2ZbA
vS1B/gBEH8eBQ3NeBDQoIuTrwBrk4Hz7l5PtXk5G8Jn9tz9rd0Xwz3bysUp8
koXzZ80EAQT/BUi7HYJv2ffYou+xDJzf1QECMnD33GjSBSKEvEbtJfXaS9Jw
fkU5CCD4JwpljhfKIPgSOQfFcg5KoblHEs4He8cOwbcAu0cCzu8Eu0cC7p6b
YPdIoLlHHM09CP5xsHsQfHGwe8Tg/DQwQPCNyj7+es6L4P/d4CFZsUsUzgfr
zhGFu6dxefTnw0oIedtk8fX190Tg/C+e84EIwQcrT0Xww2YIy3IZIPgQcxF8
AAz1bJM=
                    "]], 
                    
                    LineBox[{{-8., -2.9999999999999996`}, {-7., \
-0.9999999999999996}}], 
                    
                    LineBox[{{-7., -0.9999999999999996}, {-6., \
-0.9999999999999997}}], 
                    
                    LineBox[{{-6., -0.9999999999999997}, {-5., \
-2.9999999999999996`}}], 
                    
                    LineBox[{{-5., -2.9999999999999996`}, {-4., \
-2.9999999999999996`}}], 
                    LineBox[{{-4., -2.9999999999999996`}, {-3., -3.}}], 
                    LineBox[{{-3., -3.}, {-2., -3.}}], 
                    LineBox[{{-2., -3.}, {-1.0000000000000002`, -2.}}], 
                    
                    LineBox[{{-1.0000000000000002`, -2.}, \
{-1.2246467991473532`*^-16, -2.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.72971736766897, 
                    0.9912702866520184}, {-0.25, 0}, 
                    Offset[8], {0.08454973009165201, 0.010475656017578605`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.133333333333333, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777803`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-8.4, -0.5999999999999995}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-7.500723193132872, \
-0.0017459426695959539`}, {-0.25, 0}, 
                    Offset[8], {0.3763313915120339, -0.0034918853391928497`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-8.4, -0.9999999999999996}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-7.4, -0.9999999999999996}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.133333333333333, \
-1.9999999999999996`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777626`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.222222222222222, \
-3.999999999999999}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -1.3322676295501878`*^-15}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.355555555555556, \
-2.9999999999999996`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-7.417705098312484, \
-1.8354101966249683`}, {-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.4, -0.9999999999999996}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-5.417705098312485, \
-2.164589803375031}, {-0.25, 0}, 
                    Offset[8], {1., -2.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-4.4, -2.9999999999999996`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, -3.}, {-0.25, 
                    0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4000000000000004`, -3.}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4000000000000001`, \
-2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.4000000000000002, -2.}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9., 5.51091059616309*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-4., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-4., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -3.}], 
                    Offset[{12, 12}, {-2., -3.}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-2., -3.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -0.9999999999999996}], 
                    Offset[{12, 12}, {-8., -0.9999999999999996}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-8., -0.9999999999999996}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -0.9999999999999997}], 
                    Offset[{12, 12}, {-6., -0.9999999999999997}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-6., -0.9999999999999997}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9., -0.9999999999999994}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -0.9999999999999996}], 
                    Offset[{12, 12}, {-7., -0.9999999999999996}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-7., -0.9999999999999996}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., -2.9999999999999996`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1.0000000000000002`, -2.}], 
                    Offset[{12, 12}, {-1.0000000000000002`, -2.}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-1.0000000000000002`, -2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., -3.}], 
                    Offset[{12, 12}, {-3., -3.}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-3., -3.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-5., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-5., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.2246467991473532`*^-16, -2.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"X_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["X_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"checker_b\"", 
                    Offset[{0, -7}, {-9., 5.51091059616309*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_BBcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_BBcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-4., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Bcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Bcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-2., -3.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_BBcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_BBcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-8., -0.9999999999999996}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Bcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Bcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-6., -0.9999999999999997}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-9., -0.9999999999999994}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_WWcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_WWcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-7., -0.9999999999999996}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"checker_w\"", 
                    Offset[{0, -7}, {-8., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Wcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Wcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-1.0000000000000002`, -2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_WWcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_WWcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-3., -3.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Wcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Wcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-5., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"X_out\"", 
                    Offset[{0, -7}, {-1.2246467991473532`*^-16, -2.}], {
                    0, 1.}, Automatic, {1, 0}]}, StripOnInput -> False, 
                    FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-0.6762753888102504, 
                    5.4582645225831214`}, {-7.72971736766897, 
                    0.9912702866520184}], {0., -0.17}, Automatic, {
                    0.9924117313787494, 0.12295916160186371`}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.133333333333333, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-8.4, -0.5999999999999995}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0.051030934720855216`, 
                    5.4997632534229615`}, {-7.500723193132872, \
-0.0017459426695959539`}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.00927835176742822}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{6.106226635438361*^-16, 
                    5.5}, {-8.4, -0.9999999999999996}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.4, -0.9999999999999996}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 
                    5.5}, {-6.133333333333333, -1.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{4.121702978920908*^-14, 
                    5.5}, {-6.222222222222222, -3.999999999999999}], {
                    0., -0.17}, Automatic, {1., -7.494005416219833*^-15}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 
                    5.5}, {-6.355555555555556, -2.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-4.919349550499537, 
                    2.4596747752497685`}, {-7.417705098312484, \
-1.8354101966249683`}], {0., -0.17}, Automatic, {0.4472135954999579, 
                    0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{6.106226635438361*^-16, 
                    5.5}, {-6.4, -0.9999999999999996}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{4.919349550499537, 
                    2.4596747752497685`}, {-5.417705098312485, \
-2.164589803375031}], {0., -0.17}, Automatic, {
                    0.4472135954999579, -0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-4.4, -2.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-3.4, -3.}], {
                    0., -0.17}, Automatic, {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-2.4000000000000004`, -3.}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.8890872965260117`, 
                    3.889087296526011}, {-1.4000000000000001`, \
-2.4000000000000004`}], {0., -0.17}, Automatic, {0.7071067811865475, 
                    0.7071067811865476}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-0.4000000000000002, -2.}], {
                    0., -0.17}, Automatic, {1., 0.}]}, StripOnInput -> False, 
                    FontSize -> 8, FontWeight -> "Thin", FontColor -> 
                    GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-9., 
                    5.51091059616309*^-16}, {-4., -2.9999999999999996`}, \
{-2., -3.}, {-8., -0.9999999999999996}, {-6., -0.9999999999999997}, {-9., \
-0.9999999999999994}, {-7., -0.9999999999999996}, {-8., \
-2.9999999999999996`}, {-1.0000000000000002`, -2.}, {-3., -3.}, {-5., \
-2.9999999999999996`}, {-1.2246467991473532`*^-16, -2.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 8, 24, 8, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{35.49999999999998, 28.}, {28., 18.}}, 
                    ImageSize -> {558.5, 376.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Bcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_WWcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Wcore_net"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "X_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_2net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["X_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"]
                     -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"X_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {504., {238.5, 244.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 1}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
           BaselinePosition -> Baseline]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Processor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"Center\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{
          RowBox[{
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]], "\[Rule]", 
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]]}]}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Mean\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"0.010197662057621874`", ",", 
                    RowBox[{"-", "0.0036822889054108597`"}]}], "}"}], 
                 Short[#, 5]& ]}]}, {
              RowBox[{"\"Version\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"12.`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"ID\"", "\[Rule]", 
                TagBox["7140486291497146618", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Panel[
          Grid[{{"f1", "NumericalVector"}}]] -> Panel[
          Grid[{{"f1", "NumericalVector"}}]], 
        Column[{
         "Invertibility" -> Short["Perfect", 5], "Missing" -> 
          Short["Allowed", 5], "Mean" -> 
          Short[{0.010197662057621874`, -0.0036822889054108597`}, 5], 
          "Version" -> Short[{12., 0}, 5], "ID" -> 
          Short[7140486291497146618, 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"PostProcessor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"FirstValues\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{""}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Info\"", "\[Rule]", 
                TagBox[
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Type\"", "\[Rule]", "\"NumericalVector\""}], 
                    ",", 
                    RowBox[{"\"Weight\"", "\[Rule]", "1"}]}], 
                   "\[RightAssociation]"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Key\"", "\[Rule]", 
                TagBox["\"f1\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Null, 
        Column[{"Info" -> Short[
            Association["Type" -> "NumericalVector", "Weight" -> 1], 5], 
          "Key" -> Short["f1", 5], "Invertibility" -> Short["Perfect", 5], 
          "Missing" -> Short["Allowed", 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"ProbabilityNet\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = True), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["2", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["12", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 3}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = False), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB7r+WbeVuJywuWJc9vHXc9UD+/l+7fiqecJG
J4htXt5Z1QN/6vg/ruE5YcMevYE1eoPqAXv/Gr1Zb47bJPmVaByYoHqgud6h
cO/J4zb2YA2qBy7xx+wUW3LcZsEXz/lfPFUPqDCcZ1tWfdymaXn058NKqgdq
AmZGZgcct3nu0s7E81PlwC2G3RvTlI7bnD0DAioHbAVN+Gd8PGZzfYtXJ/sC
lQOBO1auYp6dY7+8SD5/b4nKAa4tIH6PvS2bd907L5UDV0r+8xuJL7Cfln92
2ywllQO/NoHk19hvXbdM4tBv5QO7J4fclYrcZj/r8LXFKdeUD0wAqz9g77Iu
NqJpk/KBW29Wnlv37Kj95jxrM+kJyge2g/WfsX/OUmCrn698QDT5f6CE1CX7
A8XBGpFmygcutE/8esvkpv39s8WNrYzKB7Rd2i76n79vby980WPLBaUDwmfe
Fe3+8sj+kXN23dPFSgfuH/SWXHHwqf2JeCclyWqlA9XMt27n+r2w/5QWZuIf
pnTg2YSZu3hmv7KPi1y+pd1U6YBCVtfWluVv7PnMTRcfklA6oNW/5szV4nf2
kPhSOgCJuw/2ADwP1Xg=
                    "]], 
                    
                    LineBox[{{-11., 1.0000000000000007`}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB5jB9Af7K8ZlH389V4XzdYLY5uWdRfDZozew
Rm9QPcAC5Sf5lWgcmICQh2hA8Bd88Zz/xRPBb1oe/fmwEoL/3KWdieenCpx/
9gwIIPhg7fMRfNnjhTLHCxF8VxcQUIG7J+egGBAh5KfYvZxs91IZzt+zGwQQ
/CcWfY8t+hB8nm0J3NsSEHxjMEDwJXdX/P3MpnyACcqvj1jCY3NXCS6fyA0y
AME/cHntz8SJSnD18zZ2X7fPR/B/LfEHIgT/Cki5EYKvfaaTj1UCwYfEF4IP
AHfyieI=
                    "]], 
                    
                    LineBox[{{-11., 2.000000000000001}, {-10., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-10., 2.0000000000000004`}, {-9., 
                    1.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEqBxghDIerxmUffz1XhvN1gtjm5Z1F8NmiN7BG
b0DwE/1KNA5MQPDtwRoQ/PlfPIEIwW9cHv35sBKC/8ylnYnnpxKcfwYMEPzP
IO3zEXyZ44VAhOC7uoAAgp9zUAyIEPwpdi8n271UhPP37AYBBP+JRd9jiz4E
n2dbAve2BATfGAwQfMndFX8/syH4dRFLeGzuKiDCgxtkAIJ/8PLan4kTEfx5
G7uv2+cj+L+W+AMRgn8FpNwIwdc+08nHKoHgQygEHwDHvW9M
                    "]], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    4.898587196589413*^-16}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-8., 1.0000000000000004`}, {-7., 
                    1.0000000000000004`}}], 
                    LineBox[{{-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-6., 1.0000000000000004`}, {-5., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKBxghDIcV6W8efT0vD+dHLOGxuTsLwefZlsC9
LQHBPzTnRUCDIoJfB9YgB+fbv5xs93Iygs/sv/1ZuyuCf7aTj1XikyycP2sm
CCD4L0Da7RB8y77HFn2PZeD8rg4QQPBvNOkCEYKvUXtJvfaSNJxfUQ4CCP6J
QpnjhTIIvkTOQbGcg1Jo7pGE88HesUPwLcDukYDzO8HuQfBvgt0jgeYecTT3
IPjHwe5B8MXB7hGD89PAAME3Kvv46zkvgv93g4dkxS5ROB+sOwfBb1we/fmw
EoJvmyy+vv6eCJz/xXM+ECH4YOWpCH7YDGFZLgMEH0Ih+AA8RpPo
                    "]], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.417705098312485`,
                     1.1645898033750317`}, {-0.25, 0}, 
                    Offset[8], {1., 1.9999999999999998`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.883693638516403, 
                    0.14840512691569577`}, {-0.25, 0}, 
                    Offset[8], {0.07008586743419798, 0.04539450940950679}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    1.6000000000000005`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.777777777777779, 
                    1.0000000000000007`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.399999999999999, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.777777777777779, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    0.40000000000000047`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.6000000000000003`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.355555555555556, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 6.735557395310443*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-10., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-10., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 1.0000000000000004`}], 
                    Offset[{12, 12}, {-9., 1.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-9., 1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 1.0000000000000007`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 2.000000000000001}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-8., 
                    2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Total_loss_jac\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_loss_jac", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., 4.898587196589413*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Z_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Z_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAQAOCgDo6ujm7Ourg6qZCpxQdoMS0uFdqi+Ea+ZY2gECSNuZ/U
HFwhSXP3tYWSRX5JipEQopnqS5LdtnWd3dOZHhyr5lxW6nSoWlWqepOP9eRc
51LnRGehHp3gC8lV6OX6JFdNEcjHaGTxmabYfbYxIcg+myV2n2seGCSfyxC7
z2fdI9A+n96x+yD39QTKB+lJ/GeDfZh+//Bh9iCMIB/lWw3pA/ag7Pf2cfxv
Ee/fy8d5bgLW+ukLce4E1HT6Ap2JIbV7fSFtgB5W3xA2Wy9LPwm4dzCj0V86
1rAhsbnfXTsz16u0+56j1Cc8kzXeHtZ4AmoXS+8=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-8., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"square\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "2"], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["square", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[#^2& , {4, 3}], "Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 1.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-7., 1.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_z\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_z", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1jELgkAYxvGjGhpbG9uaa2ltqsBJ6QMondJioFL0jfqWdSe8ISTm6XN3
7x/eIIfjJ+ldq+QWphMhRDlXH2H82BdF/IwW6ss5L69ZLi+nvJKZLHbJVF1c
qlmrmalJ5estcAXAteq0jwawnFUfwAn3USCjNR810mndRw10OvNRhk7nPp2B
0YuP6uH06qM6nCx8VIuTlU/X9B0Pd9Q51CxAjLZtN1Ft1ANaF10APCtt9L1n
ps6f34SZs/WZYWTsfKYZOHu9cx6dRnuCB6fxngX+//6vwXuqI+PoPd+yEXYm
cfdRHyA4+ew=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-6., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_half\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_half", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[(-0.5) #& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-5., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8JIZlILN1Ki38O97D8ypoZf0QDZ4QcLM7Sw
ozYg2X10chcMEO0+OrsLBohy3wC5DQTwum8A3QUDWN03CNwFAxjuG0RuAwG4
+waZu2DAZ5C6CxxeoDJ/sLkLBGBugrlvoN0DA1jikirtA0oBnjQ24O4jkP4H
zH1E5ku6u4/E8oKu7iOjLKOL+ygoY2nqPiqU/TRxHxXrJKq7j8r1Jc3cRyXj
Brx8JgCo7j4A/6j8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-5., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"gaussian_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.8378770664093453`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["gaussian_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.8378770664093453` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-4., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-5., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_jacobian", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8LUMAsNUOQ+mLsGo/vo4DYQINl9RLjLh4q4
kVi1Hu5l/5ExDnXUBkSZSae4xAbwum8A3QUDWN03CNwFAxjuG0RuAwG4+waZ
u2DAZ5C6CxxeoHJisLkLBGBugrlvoN0DA1jikhZlKskATxobcPcRSP8D5j4i
8yXd3UdieUFX95FRltHFfRSUsTR1HxXKfpq4j4p1EtXdR+X6kmbuo5JxA14+
EwBUdx8ArTj8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"density_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.3862943611198906`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["density_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.3862943611198906` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1TELgkAYxvGjGhpbG9uaa2ltquAmpQ+gdErLBRpF36hvWXfBKwVipz7e
vX94BR3kJ+rdIr1E2UgIUU7NIUru26JIHvHMnBx1ec61Oh30VeWq2KRjc3Fu
ZmlmYiZTz5cdgUmC7lNFPpAT7rMBjYP4KIBzUB/Vw+nFZ+to9OajWjq9+yhH
ZzCfzcEY1Ec1OFn4qBonKx9Fvv3uhtwrKYkYa1uv4o/RDui+6CR4P0dXPTNT
5887YWis/WYYORu/aQbOv/9cYKPzmhDI2XrN8uzsvKZ6cvZa8z0YIXsSd993
b4jF/F4=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_prob\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_prob", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAUBeCgDo6ujm7Ourg6qZCpxQdoMS0uEdqi+Ea+pSbFK0WxtM3J
z4Hb0g6Xj5DmdpFeomzEGCun6hIlt21RJPd4ph6OsjznUpwOshK5KDbpWL2c
q1qqmjB4OKpRJh5PVK9GjH3aRYUAfWWwr+kKzefARenlc+iidPJ5cFFafR5d
lL++AGw6P75AXJSPLzAXhQfqqtdrv7vasHHT0i5d61Vc3xE9GXhWvtcL9n9g
kpY95tXXYe9783X8Lp37ep4XznwDzzHrPsPz1ZoP9P9qxQecSXAfeB5Z8QHb
BTE/WgL3vQAWOfns
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perpixel\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["perpixel", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[0.5 #& , {4, 3}], "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total_Loss\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"checker_b\"", 
                    Offset[{0, -7}, {-11., 6.735557395310443*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_1\"", 
                    Offset[{0, -15}, {-10., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_2\"", 
                    Offset[{0, -15}, {-9., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"checker_w\"", 
                    Offset[{0, -7}, {-11., 1.0000000000000007`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-11., 2.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"Total_los..\"", "\"Total_loss_jac\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Total_loss_jac", "Tooltip"]& ], 
                    Offset[{0, -13}, {-8., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Z_out\"", 
                    Offset[{0, -7}, {-8., 4.898587196589413*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"square\"", 
                    Offset[{0, -13}, {-8., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_z\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_z", "Tooltip"]& ], 
                    Offset[{0, -13}, {-7., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_half\"", 
                    Offset[{0, -13}, {-6., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"gaussian_..\"", "\"gaussian_coef\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "gaussian_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"plus\"", 
                    Offset[{0, -13}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_jacobian\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_jacobian", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox["\"density_c..\"", "\"density_coef\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "density_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_prob\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"perpixel\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Total_Loss\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-4.919349550499537, 
                    2.459674775249769}, {-10.417705098312485`, 
                    1.1645898033750317`}], {0., -0.17}, Automatic, {
                    0.447213595499958, 0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-2.989963099218088, 
                    4.616288624567811}, {-9.883693638516403, 
                    0.14840512691569577`}], {0., -0.17}, Automatic, {
                    0.8393252044668746, 0.5436296544032887}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-10.4, 
                    1.6000000000000005`}], {0., -0.17}, Automatic, {
                    0.7071067811865476, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-9.777777777777779, 
                    1.0000000000000007`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-10.4, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {
                    1., -4.440892098500626*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-8.777777777777779, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-8.4, 
                    0.40000000000000047`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-8.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-8.4, 
                    1.6000000000000003`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-6.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-5.4, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-4.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-6.355555555555556, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-4.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}, {-9., 1.0000000000000004`}, {-11., 
                    1.0000000000000007`}, {-11., 2.000000000000001}, {-8., 
                    2.0000000000000004`}, {-8., 4.898587196589413*^-16}, {-8.,
                     1.0000000000000004`}, {-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}, {-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-5., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 8, 8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{35.49999999999998, 38.49999999999999}, {
                    28., 18.}}, ImageSize -> {679., 156.00000000000003`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_1"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_2"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total_loss_jac"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"], 
                    NeuralNetworks`NetPath["Nodes", "square"], 
                    NeuralNetworks`NetPath["Nodes", "summation_z"], 
                    NeuralNetworks`NetPath["Nodes", "minus_half"], 
                    NeuralNetworks`NetPath["Nodes", "gaussian_coef"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Nodes", "summation_jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "density_coef"], 
                    NeuralNetworks`NetPath["Nodes", "minus_prob"], 
                    NeuralNetworks`NetPath["Nodes", "perpixel"], 
                    NeuralNetworks`NetPath["Outputs", "Total_Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Total_Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "Z_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_z" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_half" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "gaussian_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "Total_loss_jac" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_jacobian" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "density_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_prob" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "perpixel" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Total_Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Z_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {320., {31.25, 37.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 1}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
           BaselinePosition -> Baseline]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Method\"\>", "\[Rule]", "\<\"RealNVP\"\>"}], ",", 
   RowBox[{"\<\"Options\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"MaxTrainingRounds", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "500"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"ActivationFunction\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "Ramp"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkDepth\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "2"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"CouplingLayersNumber\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "2"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkType\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"FullyConnected\"\>"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.771545840112155*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"26e129fa-bd42-4c91-be96-36720b5f4b93"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "\[LeftDoubleBracket]", 
  RowBox[{"1", ",", "\"\<Model\>\"", ",", "\"\<ProbabilityNet\>\""}], 
  "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.771544976939814*^9, 3.7715449787357483`*^9}, {
  3.7715450290083275`*^9, 3.771545078370634*^9}, {3.77154522214507*^9, 
  3.7715452476903877`*^9}},ExpressionUUID->"5e28a254-006a-45d8-b4b6-\
1766d637525a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["12", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 3}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB7r+WbeVuJywuWJc9vHXc9UD+/l+7fiqecJG
J4htXt5Z1QN/6vg/ruE5YcMevYE1eoPqAXv/Gr1Zb47bJPmVaByYoHqgud6h
cO/J4zb2YA2qBy7xx+wUW3LcZsEXz/lfPFUPqDCcZ1tWfdymaXn058NKqgdq
AmZGZgcct3nu0s7E81PlwC2G3RvTlI7bnD0DAioHbAVN+Gd8PGZzfYtXJ/sC
lQOBO1auYp6dY7+8SD5/b4nKAa4tIH6PvS2bd907L5UDV0r+8xuJL7Cfln92
2ywllQO/NoHk19hvXbdM4tBv5QO7J4fclYrcZj/r8LXFKdeUD0wAqz9g77Iu
NqJpk/KBW29Wnlv37Kj95jxrM+kJyge2g/WfsX/OUmCrn698QDT5f6CE1CX7
A8XBGpFmygcutE/8esvkpv39s8WNrYzKB7Rd2i76n79vby980WPLBaUDwmfe
Fe3+8sj+kXN23dPFSgfuH/SWXHHwqf2JeCclyWqlA9XMt27n+r2w/5QWZuIf
pnTg2YSZu3hmv7KPi1y+pd1U6YBCVtfWluVv7PnMTRcfklA6oNW/5szV4nf2
kPhSOgCJuw/2ADwP1Xg=
                    "]], 
                    
                    LineBox[{{-11., 1.0000000000000007`}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB5jB9Af7K8ZlH389V4XzdYLY5uWdRfDZozew
Rm9QPcAC5Sf5lWgcmICQh2hA8Bd88Zz/xRPBb1oe/fmwEoL/3KWdieenCpx/
9gwIIPhg7fMRfNnjhTLHCxF8VxcQUIG7J+egGBAh5KfYvZxs91IZzt+zGwQQ
/CcWfY8t+hB8nm0J3NsSEHxjMEDwJXdX/P3MpnyACcqvj1jCY3NXCS6fyA0y
AME/cHntz8SJSnD18zZ2X7fPR/B/LfEHIgT/Cki5EYKvfaaTj1UCwYfEF4IP
AHfyieI=
                    "]], 
                    
                    LineBox[{{-11., 2.000000000000001}, {-10., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-10., 2.0000000000000004`}, {-9., 
                    1.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEqBxghDIerxmUffz1XhvN1gtjm5Z1F8NmiN7BG
b0DwE/1KNA5MQPDtwRoQ/PlfPIEIwW9cHv35sBKC/8ylnYnnpxKcfwYMEPzP
IO3zEXyZ44VAhOC7uoAAgp9zUAyIEPwpdi8n271UhPP37AYBBP+JRd9jiz4E
n2dbAve2BATfGAwQfMndFX8/syH4dRFLeGzuKiDCgxtkAIJ/8PLan4kTEfx5
G7uv2+cj+L+W+AMRgn8FpNwIwdc+08nHKoHgQygEHwDHvW9M
                    "]], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    4.898587196589413*^-16}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-8., 1.0000000000000004`}, {-7., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-6., 1.0000000000000004`}, {-5., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKBxghDIcV6W8efT0vD+dHLOGxuTsLwefZlsC9
LQHBPzTnRUCDIoJfB9YgB+fbv5xs93Iygs/sv/1ZuyuCf7aTj1XikyycP2sm
CCD4L0Da7RB8y77HFn2PZeD8rg4QQPBvNOkCEYKvUXtJvfaSNJxfUQ4CCP6J
QpnjhTIIvkTOQbGcg1Jo7pGE88HesUPwLcDukYDzO8HuQfBvgt0jgeYecTT3
IPjHwe5B8MXB7hGD89PAAME3Kvv46zkvgv93g4dkxS5ROB+sOwfBb1we/fmw
EoJvmyy+vv6eCJz/xXM+ECH4YOWpCH7YDGFZLgMEH0Ih+AA8RpPo
                    "]], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.417705098312485`,
                     1.1645898033750317`}, {-0.25, 0}, 
                    Offset[8], {1., 1.9999999999999998`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.883693638516403, 
                    0.14840512691569577`}, {-0.25, 0}, 
                    Offset[8], {0.07008586743419798, 0.04539450940950679}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    1.6000000000000005`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.777777777777779, 
                    1.0000000000000007`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.399999999999999, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.777777777777779, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    0.40000000000000047`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.6000000000000003`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.355555555555556, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 6.735557395310443*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-10., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-10., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 1.0000000000000004`}], 
                    Offset[{12, 12}, {-9., 1.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-9., 1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 1.0000000000000007`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 2.000000000000001}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-8., 
                    2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Total_loss_jac\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_loss_jac", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., 4.898587196589413*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Z_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Z_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAQAOCgDo6ujm7Ourg6qZCpxQdoMS0uFdqi+Ea+ZY2gECSNuZ/U
HFwhSXP3tYWSRX5JipEQopnqS5LdtnWd3dOZHhyr5lxW6nSoWlWqepOP9eRc
51LnRGehHp3gC8lV6OX6JFdNEcjHaGTxmabYfbYxIcg+myV2n2seGCSfyxC7
z2fdI9A+n96x+yD39QTKB+lJ/GeDfZh+//Bh9iCMIB/lWw3pA/ag7Pf2cfxv
Ee/fy8d5bgLW+ukLce4E1HT6Ap2JIbV7fSFtgB5W3xA2Wy9LPwm4dzCj0V86
1rAhsbnfXTsz16u0+56j1Cc8kzXeHtZ4AmoXS+8=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-8., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"square\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "2"], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["square", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[#^2& , {4, 3}], "Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 1.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-7., 1.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_z\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_z", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1jELgkAYxvGjGhpbG9uaa2ltqsBJ6QMondJioFL0jfqWdSe8ISTm6XN3
7x/eIIfjJ+ldq+QWphMhRDlXH2H82BdF/IwW6ss5L69ZLi+nvJKZLHbJVF1c
qlmrmalJ5estcAXAteq0jwawnFUfwAn3USCjNR810mndRw10OvNRhk7nPp2B
0YuP6uH06qM6nCx8VIuTlU/X9B0Pd9Q51CxAjLZtN1Ft1ANaF10APCtt9L1n
ps6f34SZs/WZYWTsfKYZOHu9cx6dRnuCB6fxngX+//6vwXuqI+PoPd+yEXYm
cfdRHyA4+ew=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-6., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_half\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_half", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[(-0.5) #& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-5., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8JIZlILN1Ki38O97D8ypoZf0QDZ4QcLM7Sw
ozYg2X10chcMEO0+OrsLBohy3wC5DQTwum8A3QUDWN03CNwFAxjuG0RuAwG4
+waZu2DAZ5C6CxxeoDJ/sLkLBGBugrlvoN0DA1jikirtA0oBnjQ24O4jkP4H
zH1E5ku6u4/E8oKu7iOjLKOL+ygoY2nqPiqU/TRxHxXrJKq7j8r1Jc3cRyXj
Brx8JgCo7j4A/6j8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-5., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"gaussian_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.8378770664093453`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["gaussian_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.8378770664093453` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-4., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-5., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_jacobian", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8LUMAsNUOQ+mLsGo/vo4DYQINl9RLjLh4q4
kVi1Hu5l/5ExDnXUBkSZSae4xAbwum8A3QUDWN03CNwFAxjuG0RuAwG4+waZ
u2DAZ5C6CxxeoHJisLkLBGBugrlvoN0DA1jikhZlKskATxobcPcRSP8D5j4i
8yXd3UdieUFX95FRltHFfRSUsTR1HxXKfpq4j4p1EtXdR+X6kmbuo5JxA14+
EwBUdx8ArTj8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"density_coef\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.3862943611198906`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["density_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.3862943611198906` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1TELgkAYxvGjGhpbG9uaa2ltquAmpQ+gdErLBRpF36hvWXfBKwVipz7e
vX94BR3kJ+rdIr1E2UgIUU7NIUru26JIHvHMnBx1ec61Oh30VeWq2KRjc3Fu
ZmlmYiZTz5cdgUmC7lNFPpAT7rMBjYP4KIBzUB/Vw+nFZ+to9OajWjq9+yhH
ZzCfzcEY1Ec1OFn4qBonKx9Fvv3uhtwrKYkYa1uv4o/RDui+6CR4P0dXPTNT
5887YWis/WYYORu/aQbOv/9cYKPzmhDI2XrN8uzsvKZ6cvZa8z0YIXsSd993
b4jF/F4=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_prob\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_prob", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAUBeCgDo6ujm7Ourg6qZCpxQdoMS0uEdqi+Ea+pSbFK0WxtM3J
z4Hb0g6Xj5DmdpFeomzEGCun6hIlt21RJPd4ph6OsjznUpwOshK5KDbpWL2c
q1qqmjB4OKpRJh5PVK9GjH3aRYUAfWWwr+kKzefARenlc+iidPJ5cFFafR5d
lL++AGw6P75AXJSPLzAXhQfqqtdrv7vasHHT0i5d61Vc3xE9GXhWvtcL9n9g
kpY95tXXYe9783X8Lp37ep4XznwDzzHrPsPz1ZoP9P9qxQecSXAfeB5Z8QHb
BTE/WgL3vQAWOfns
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perpixel\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["perpixel", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[0.5 #& , {4, 3}], "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total_Loss\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"checker_b\"", 
                    Offset[{0, -7}, {-11., 6.735557395310443*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_1\"", 
                    Offset[{0, -15}, {-10., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_2\"", 
                    Offset[{0, -15}, {-9., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"checker_w\"", 
                    Offset[{0, -7}, {-11., 1.0000000000000007`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-11., 2.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"Total_los..\"", "\"Total_loss_jac\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Total_loss_jac", "Tooltip"]& ], 
                    Offset[{0, -13}, {-8., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Z_out\"", 
                    Offset[{0, -7}, {-8., 4.898587196589413*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"square\"", 
                    Offset[{0, -13}, {-8., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_z\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_z", "Tooltip"]& ], 
                    Offset[{0, -13}, {-7., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_half\"", 
                    Offset[{0, -13}, {-6., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"gaussian_..\"", "\"gaussian_coef\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "gaussian_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"plus\"", 
                    Offset[{0, -13}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_jacobian\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_jacobian", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"density_c..\"", "\"density_coef\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "density_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_prob\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"perpixel\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Total_Loss\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-4.919349550499537, 
                    2.459674775249769}, {-10.417705098312485`, 
                    1.1645898033750317`}], {0., -0.17}, Automatic, {
                    0.447213595499958, 0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-2.989963099218088, 
                    4.616288624567811}, {-9.883693638516403, 
                    0.14840512691569577`}], {0., -0.17}, Automatic, {
                    0.8393252044668746, 0.5436296544032887}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-10.4, 
                    1.6000000000000005`}], {0., -0.17}, Automatic, {
                    0.7071067811865476, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-9.777777777777779, 
                    1.0000000000000007`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-10.4, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {
                    1., -4.440892098500626*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-8.777777777777779, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-8.4, 
                    0.40000000000000047`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-8.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-8.4, 
                    1.6000000000000003`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-6.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-5.4, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-4.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-6.355555555555556, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-4.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}, {-9., 1.0000000000000004`}, {-11., 
                    1.0000000000000007`}, {-11., 2.000000000000001}, {-8., 
                    2.0000000000000004`}, {-8., 4.898587196589413*^-16}, {-8.,
                     1.0000000000000004`}, {-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}, {-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-5., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 8, 8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{35.49999999999998, 38.49999999999999}, {
                    28., 18.}}, ImageSize -> {679., 156.00000000000003`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_1"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_2"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total_loss_jac"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"], 
                    NeuralNetworks`NetPath["Nodes", "square"], 
                    NeuralNetworks`NetPath["Nodes", "summation_z"], 
                    NeuralNetworks`NetPath["Nodes", "minus_half"], 
                    NeuralNetworks`NetPath["Nodes", "gaussian_coef"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Nodes", "summation_jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "density_coef"], 
                    NeuralNetworks`NetPath["Nodes", "minus_prob"], 
                    NeuralNetworks`NetPath["Nodes", "perpixel"], 
                    NeuralNetworks`NetPath["Outputs", "Total_Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Total_Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "Z_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation_z" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "minus_half" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "gaussian_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "Total_loss_jac" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation_jacobian" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "plus" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "density_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "minus_prob" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "perpixel" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Total_Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Z_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {394., {152.5, 158.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771544981248519*^9, {3.77154505445596*^9, 3.7715450829234514`*^9}, 
   3.771545228125179*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"e4e26e27-987d-4f6e-8aad-6e749cf11a28"]
}, Open  ]],

Cell["Extract the trained net", "Text",
 CellChangeTimes->{{3.771430950386219*^9, 
  3.771430956077353*^9}},ExpressionUUID->"8eb64868-d6bc-4616-b77b-\
18041b0e7f98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingresult", "[", "\"\<TrainedNet\>\"", "]"}]], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"855264ec-008d-46f3-9db5-7001ed9a52ce"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 2}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEiBziLb+5fz7/N5snEqTurzgkfyOM1N118aMV+
Z9+N0z5MET7AsX5N8K3Du/bLGgVPTwwWPlCwZ6bo2clH9+c7VO8+yyl8QObT
9Akex87tt67QZDbdIXTAvSbj7PqaK/ubbsbmTY8TOnA/XUmqU+zWfqcUib9f
/ggeeHvXRjxC4sH+GonI9b6TBQ9I2Zi3Tkp9vN/gm3zrQkXBA5V+DNc/f3q2
f4ZS5+ST9wUOhE4OFbW/+WJ/xWIX/9+zBA6cawn1CWl7tf9MRdAOs2CBAw+U
GGqMf73eP3XRpnPVHAIHenJDl9wxebt/heMplaml/AeupIQe9Td7t1/g+WU2
tyt8B7ZzMNzv+fduf4ppkzOXLt8Bk8jQj5N73+9fonP11sN63gPeYaF/Uh6/
328MBtwH/v0Hgff7L6rXXlKv5TrwB8ovkjleKHOcEy4vLAgCnAf+Q/kbWKOB
iAMuH/Brif+vJexw/vt3IMAG5/c9tgAiBF/vRpPujSZWOP8MGLDA+WlvHn09
L80Cd8+vxIlGH0qY4fItuiADmODuYfHf/qzdFcGvOqYX938PI1z9q8l2Lyfb
Ifhg5acY4Pw1BupWIgkMcP3QBATnAwBZVmlq
                    "]], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.499276806867127, \
-0.9982540573304033}, {-0.25, 0}, 
                    Offset[8], {
                    0.37633139151203343`, -0.0034918853391926463`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.5999999999999999}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.9999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.4000000000000001, -1.}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6., 3.6739403974420594`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 3.061616997868383*^-16}], 
                    Offset[{12, 12}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-5., 3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox["\"CP\"", 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MinusIdentity\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantPlusLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["MinusIdentity", Bold], 
                    Style[
                    HoldForm[
                    ConstantPlusLayer[{2, 2}, "Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., -0.9999999999999999}], 
                    Offset[{10, 10}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, BaseStyle -> 
                    GrayLevel[0.4], ImageMargins -> 0., ImagePadding -> 0, 
                    ImageSize -> 16, PlotRange -> All, PlotRangePadding -> 
                    1], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LogDet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["LogDet", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/G9tvjvz////IPWUAh8qmIECQO6D4Z6eNx0UGkd194FA
Y+Ot+cjuPHb4vwuZRtHEfSAAjF+l3Jytd2FuLCs9sp+MOKeZ+2Bg+ZL/CZkZ
a9/D3Nnb/aaTBO00dx8MgNIicpzPmvW/gAhtdHMfDIDiGebGkqIDJ4BxroBH
Od3dBwLocY6nPBoQ98HAxP7PDchxvmjR/zQ0JQPqPhiorjq3HtmdO7b+D4BK
DQr3gQC2fK6mFhQ+0O5CB6A4hrnRw73sPygNUNkKH2pgH++648ZGwWA3grCX
e30NFcylKrCyyk3JzdlyHxaelRUnt1Gp3UEtAPYzetqkQZyTC1DihMw6iJYA
I82A6hvkOqiwYM95AnUQLQHONE1CHURLQDDPoddBdI5zossEPHUQLQFJZRa2
OojGcU5WmQqKY+SwpGF5RFGZX1dzaRWyO6nlKCRAcZ308sl/A1gdRA0HoQGq
1ZmgtAmiAQJrTNs=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"total\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TotalLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["total", Bold], 
                    Style[
                    HoldForm[
                    TotalLayer["Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-6., 3.6739403974420594`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"Jacobian\"", 
                    Offset[{0, -15}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"MinusIden..\"", "\"MinusIdentity\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MinusIdentity", "Tooltip"]& ], 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"norm\"", 
                    Offset[{0, -13}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"LogDet\"", 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"minus\"", 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"total\"", 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
                    3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736762*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0.0510309347208523, 
                    5.4997632534229615`}, {-3.499276806867127, \
-0.9982540573304033}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.009278351767427691}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}, {-2., -0.9999999999999999}, \
{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 20, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {386., 101.00000000000003`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "MinusIdentity"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "LogDet"], 
                    NeuralNetworks`NetPath["Nodes", "minus"], 
                    NeuralNetworks`NetPath["Nodes", "total"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, "$ArrayDimensions" -> 
                    {2, 2}], "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 10000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], 
                    "MinusIdentity" -> 
                    Association[
                    "Type" -> "ConstantPlus", "Arrays" -> 
                    Association[
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "LogDet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]]],
                     "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Dot", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{2, 
                    2}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "norm" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "total" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {386., {88.5, 94.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771429831834114*^9, 3.771430017595457*^9, 
  3.771436868265766*^9, 3.7729836623013077`*^9, 3.772989392635778*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"5688d2a9-6c60-4cd0-bae0-7f7b4cae1a8a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainednet", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"trainingresult", "[", "\"\<TrainedNet\>\"", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Function\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771429768405982*^9, 3.7714298490043173`*^9}, 
   3.771429902591749*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"268acc48-7cd7-4976-90c5-46f4a585f5d8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771429849377016*^9, 3.771430019600152*^9, 
  3.771432304450892*^9, 3.771435239348475*^9, 3.771436288593025*^9, 
  3.7714363367663403`*^9, 3.771436869571622*^9, 3.772983668203*^9, 
  3.772989418491008*^9, 3.7741947604972053`*^9, 3.774194861512021*^9, 
  3.7741973047053337`*^9, 3.774197399202789*^9, 3.7741977261662416`*^9, 
  3.7741982271345696`*^9, 3.7742072014779263`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"cf63be3e-bd9b-478f-bdfb-dd17472a8001"]
}, Open  ]],

Cell["\<\
This is a shit to be fixed by Jerome (because of shared arrays)\
\>", "Text",
 CellChangeTimes->{{3.771431030030855*^9, 
  3.7714310443655252`*^9}},ExpressionUUID->"3007f3f6-8942-4229-8d5f-\
b7cb0d2fce72"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "z", "]"}]], "Input",
 CellChangeTimes->{{3.772990131214882*^9, 3.772990133684518*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"8f525826-e871-4594-9ae9-4931f5f5c58b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["generation test 1", "Subsection",
 CellChangeTimes->{{3.7729903564872017`*^9, 
  3.7729903618336544`*^9}},ExpressionUUID->"d343e1cb-0956-44e0-b9c5-\
e82bcb89f4e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"0", ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"10000", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7742078324775925`*^9, 
  3.7742078450050907`*^9}},ExpressionUUID->"873f634b-4c05-40ef-b094-\
e40efc3b9f54"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwUmHc4Fu4XxmVFVkVGUQotW4UyjqRSoTIyUr4ViVBUKklGISOFjBSRlSIz
qzqvvffer/3a77Dnz++v57/nOdd1zrnvz/3sv/1A14Kejo5u+yE6uv+f36+q
/glqH0W+7PYVkf4sNBqf+5EmR0ONvvzqmOwR1IzaFfz9QR+cS4qKfH6wFYt8
d7ydfTqHyi+Ey55/H4GsavkKs+55VAlOzGm6sgzjIsutXT4DeLdx+0gJ6wRI
sD8MOTm2DH/+myHlKq9Bbahd/tHQHtjC0viwQI0M2089hamwDrSZtif3AwV0
Pw8dOzgzDVnue3N/+rbD8Od9D0zsauHMRr3rrfElvNf87GnyPjK+3/N3UE9k
CtmJdg1cS23wisVBmeckGUMPGtFWVNohsz3Sl6BKw5C7B8+tGY2hr2VmuksY
Ae3ekruDJheAj7Z/b8alMQhLtpSzcVjCqPCcsjL6ZvhhbZkvq5uE9Wyftkw/
SId4DzePCsICcg4r0dlpLWOC84rvh+M1mBYrJPzXaBgEaEqdRUstIGSu0688
NIvc3y5tSTWahb0srfR7HCdxtEOfW/a6G5S7nVnJMZ0FrcwTXK+oyyh55d7O
Fg4ihIx91uJw6ANmioIg41lt+BvbfthRrhcS3x2/9c5lEOIP7V37dnIC7JWO
Tty93g2dyiYXk9YI0PSft8n6zkYAslMq860OcF0W/yVyuQk2JF4b8t2NhZ1D
SyymSfXoS9lhW/5vBoQvcvM9yCzGs1fjjT4HEwGdhVL5SEQQoK8rHbs/Ctlj
FE46FhqIC9XP+FSSkPP8rW6x7TQU7FHbGRPzFxKadrlru2fg+3E/15Pbh+Gc
tteaqNsg+onOKPa+I4Hyf+FnSvioUM0edyGScQVlxgpf1V9NxsitGHqkbRoY
uTNXD58dxS86aRprS924L8/bpnt1CEqWgNfKk4bO2ZQzAvWPwDwylNVjyzTe
mlU6lrQ5V1+jfEMe95GxZL2KW5txGrcdfWI1HUWGa1/SPj42m0E55UE7YeF5
7L5fFOYrtoDHto5I3WpFaOjV+q81sAuvHI/tbDcdxUPXm4OWTadRx1S0fn81
CWzC6DxXKsYxKPfREv/3VRANH6U4b02A39rvJka3tmGsyT7b5+YUeP185sQR
4wFk7lVRLJ+fgHR+ZYUCr3acesomdexjBfyuP9k6/pFDbfdzlWQtt2F8lbH1
2FZCC9S8uvPtpmEliIlMfvzybw65cg5IL200AfWzIX/7kwY07fwlfKWOgAcK
9UmHZ4ZBdGa6sOgCCVN6Z/UX9lWDx9PUeJXfYyB8j7NTNqoCC1XW9/hGLmCp
tbHjGD0N/c4Eave6l4J/T9e1+0/aQEdGmBapQkTpAOs26f3jcIZ9Sof7WCl2
NkkZR7i0AFnu0fffwjW4i2e98YRwJ5xj0xkcChlGT+4jhyMZqfDv/jFi7Usy
YpStDPdOMnK95bQ+YD4PUSfLV1i8VpCfWfGgcfQz6Ij3zmMPjEHN4s4kLdHf
cM7RbU7vYBMeauV/G105hPZpJTNuGb3w7Teb/anKbjxu96w2hL8fEnMWuhXf
DSD795tkoY1FyI3kP/dRjATMjW9sfNuL4W52sF3a9Xp0nJY4I7M+DL8OSvg7
xq1hTE+kaf6TFjzypy5m94EBkNwlf8/FYhI8VvLumVSW4RWX1/cYZgawlU6x
flKMhMHy/7Ez3GnAilH/kZnsKnhstIOnMqwEmf9dMOba3YKvSanBcdRqCFxg
Ec7YXgbjzc3eq9VUZFE/yhDmNQjLCUWvNWy7od9T6r2B7jI85RD8KWdeCUZd
0qMv5Gbgo8i1EeORDLA4aO91Un8A4Ugrr/zVaUz9rnRcP70ddA0Uh/95zeGX
O5yzuXmr8KJJ5+M2+w1Ehp/ORulManaxWuxNrLVw66pmlbDoKLDXdUqLuVBB
+eqtFyYsbRguuXNxu/EWtXTh/Bjj252Q2PaDMSJiGsNBQVl/vQVlqg7pbykh
oXT399p+Owa1S1xyBpEeS2jqUupOW6lFucTzGrYPU2H6pqpQ5qZOFg9KDOxV
7kbRv+/zb7fT8EZ59QBtdA77HjncMxOtxzBFm3bP4mY85ku/dpN5CAWfUwI0
imJAbXStJpJ9DioDx6Qc42nwZfYjp3XlHFTb7VJ7kUgGeTrOCBc+Kqo3/7J9
XvcbJ7rsh0QtokGL0pFz0oWCU+nrfK6PJ7CDpE1OvTsGabxbBAeDx+Gk9Doh
7mw9cBwRs+e1ysILUanxPdZTcPdhnE1L3BAMLC3oVw0Pwxu54jONxH6QE6cG
V553x9h7VU7t94n4QFY+vYK6gPIeZ7UEspaQS29azJuVAjI1V/S/dtHg1tuA
Dkp0KwjK7REb9aTCmOMh4T0sFHzQZJGLrnNoSBrr0A0dx/NB/wndCN2iJn/Y
hjvwEx0hK0g3LpNCxY0UgczBsXrUKlzW6SbkQ2mXz9cJPiLk2buabxwho/nP
P8E2ZmTo15GJGGFsRMX9CubaR0bg6fkLwV95iiDZU258Tq8DxFXR1mu6Gva9
botrvzAGB18M+fVVrcOsuuNu+U5GwoVH7FN7ZOrhvsO1XY6M0xBw+ZpX4p1y
fHvAv1ZMkYg7vT50lhA3cOVSnhBd0xRI+BVTOkuHsMWe15LFZA1fyD/l4ySF
wLaVAw1TNzb18N9kk8r+RVzUNBS+XluOf0MfbexM2nRU9qP05ixbCPYXpnm9
9JaBmirLq8C5DtEmEX2TQwXgoMhut7OHCJ9PbFWPa6vCOr2rp6/2NiMjPdP5
lK0UOGVQfHYkdgzLx985Zh4uAKb4bckcwVOYpCn+LekEBWV7NyB+dzO2Z4cr
M53vxDt5T4JOF/8GvoNxWWn2s3A97anxk2P1+PLeoyTxtzNwbl5B11+oGlRt
X3La/FgHST26vP37WdSEnB7UMGpUQWsUK9NV+mxg9YqOO/43AJRsMp9NPMwG
uZT2WAWpBHDyJz2pdS1EuX9U9dXnVCgQbB66eISEKlICT+n9KvDb4QM6/zS3
qJ2QeOm7rX0I71caOQVxrYPxfg/pOyHNUDd3zEdhdR7f9fheFv9Iwa19ahu/
/ZdhVlj84rm9M1h187+FI8zVUKEyIV1xYQXrdYu2XdjXgezBT2tJCgtQ6M1q
0K4whl6PPjdTryzC03JDtxzxBbwYGuib3diDSjQ6v7dfRrBXs4lthzYF57ea
OFFsN/XvdpWXB+McMDBcTWx4VYoDFVEBP35PQLlX7b1UrjVw7KsZdv84iVsP
rab59lZiY0YWi983KhINJv21vxBw16ddX84foOGbYrH9czUjm/omsM1iPw3m
X9L9i0wpwKzzMjmrDlRMJHceVY8Zx3mj3KiL2+fh9/5nHw7qL8GNT4V+LNQl
7OQ9HslBmwGhOseeZWsi7q8Pcmj/rwwWJDw95+pWYOKds1JYdgcKMs+mc0UO
Yr525tDn3hUM7txjPlowCVdu68Yk+w9hZrpq46vQOuQPcXNm4Z5Az/KX5H32
DXDd4KxIfSQFillLP0uRxnCYnv/Df0mrWM+tcU3XZxnkDmkmXuMfQhZ2zzdh
tzf91XSjz6QMQVxlZdnpczo+PB/RuEDfhbtnbPXbz3Zj3uPI4qb+cfDaybgv
cnEDRJ7ExLWxMRLu02V7AdsKkv2zVRfZxjC+2u/vdroGEP3M91YwZbOejUnu
6lMN4BXyenx1YxnY97xhOf1mCCw/7NjxV60DerU1+sWIJDhBbzP5PmcURiqp
k672vcjy+VXbTX0yJlgI2zVODoPihbu5p7MJMHf42qUShVlgcjywhxRQD9Hv
S66FfWuCpo5plUnH1E0OrI/+t3MUdvVVOAh79EP2y+PxLMpBQGcYOl4BVDwp
v9P67OkRfJDnrMrnSwT18aWYqMZekKtZ+PXz4ygejdIIe29LhjFdtzi2wArU
iF/yt4yqgcO6/wV52JPQYY49xIFnFfw6UvNYO9oxnj5/5sOuUSxLnRMLEuyH
I2vblRN/kyF5+xX3y+OdqK33bWbiYjEuWjkYa0eGwTXp21n7t1GgOoCOHqsp
GBEWcsomggLeRsGagSUjUBF9VJJjU6eXHt6vja0k415pJd2UmBk4zHLlQQFl
FQ60K476bdbdcdsvzEevEg0OlzXvoFuEf9xBiZaVZEgoex5lcWoQz0nFU4cJ
Taj2ocbHwrwHUCpLdkqMBsePDabFJaxhuLi6YScLo1rMpQaFlX1UuJn+fn5W
rAF+1XaOyoksgndlU1ZJ5y/YmHlx5oriPHrt3i7RercLfliKtGZvJQLT6RWj
g++GQeZCrU2TdwHwHJZMco/qhym/2t977erBeM+JSps7f2B/35TDe1EyFF/w
PqFa/AfzGi2dUjs51CT/pTDUiMxjn9LS5Bfpabi8VCqYs3cKE1mzJdcdaFj5
db79onkj1Fk5Wpaqt6POtshG7UurkJ+j7xg/3Ii2p3oSap8NQg2/XImidD/W
amD9r645bNALNVw9Saf252zryYfW/eC2jW9BI2cETrroyOdmpsOvCO7XziIU
pLcqz7VypACFE3r+HaYn/P4vc4IpowPqJKQpOYsTECf9/tYNpna48uKdRUr7
AkRf7dJjKUfUlH/2Q2p4HkmP0vhl5DMgnDO7wF82DAjJ/jKBzSWY9jzyztxS
L/rG9243TR/CuNRcnY6uJtAnlppotMeCynWrOOPCIkxcShQJlZhDB18NgZ1q
/yBNiFOeRu0Hl4uNYfbpzchgNPVM48oMbPMYr7rvREEzmx0ez12a4Jn71jdH
1uaQqdBAsePn4CZX30kUSR0Gtf0TeOXSFKyTbvWwl9PwVz5ZIuPWIgpcI/Ap
dBXAqKDfRnNOBwTkuZt78JVD7dEQwWntfuSwTwkLz2iGWrM4+SyzIWT3V8qu
Tdvk0YPPQ8KuklHf9Jm7TXgE/Lvn/f5FVS9Ufa009yXO4avDIsbq7j2w5Mtn
l3j6D5adFnHjNsjAes9Liu2udShe9+I6Ubgai9Vqdpu6zeNqyGRYwo4eNPO1
MzJ+SUVf1jf8IRLuwKv6Pi//Zhd+QP83uU+egdwyr/SCBQnjb0ub6t/rx05i
2cGZc0Ww/dP7cE7dfOQ+LyL88FMRLJhcOXm4Zwzv2r0evLG9EROraQLWF6hw
x8spinuTExhFKwrrEjc5l3VmbTi4APd5eM0xSKeCYulJaRPaEKxEW66qvciD
0jYan+jGCAQq7QhTrJ6Hj9qhj9XkWsDbVscpq20aXYVLleVCp7GtzeJH9HNG
NdOZ2odnlubAqSD863PrLnx3/XOp1j46NUJB29LEZk5aWTlwv2p8Gbpe8NGS
NUlY9bu0zm3fIDjtYnJ5+3xznlsuRcvbkcF7nvHb/dYqXH2sRuI2XkDynPrD
dboxEOTXuKq4jQoH2G58NqYRQTNJhjffawGkn6ka8l+gYNRuk/xs2jyUflkc
s80YR8ZDyxHcw4t4bXmm5gdLL5xRLRg68qUBHrmHDA29bEY2jjv67ncHIbSr
zeyd6ioq5Yr+3K0/C1KjfAxEjgK0Svh7UZ+ZgmGMvhbSdCH4z+q0nFriAvyX
cnv7UvU8zprMx/kuj4PGM8kTDGJ0ah4yDrJu7yfghr1KUuWmn910zmbiPtOA
7Awp5Tt/pkLUQbfkn86dKCo+LNNdwUw41v5y1Vx6Fhz9Xn4KLhnEwLeq2oPr
U3Aq0lu+/PYijtwcOEyqGoGun5glMTIJQl2GacMag5DvMZbb9IOE9h95uvSq
qJCWntC3mjKPU2GeJuI1/fA9NM5kJYOGW5Ua2tTj+mEXX0vlbWGE1B22Sn4X
J+DWlsE/R6+2Azd5glx4Zwjsxcqe6JaOIW3fA+UTH5Yxb2Xv/I+8Znw7yStU
wzOFbD7xE8c8VvC8TCmJKa0fe0N/nd6QaIFhep2DbU1foCrNookSNwwvfS6K
CRs1oZm5o9mOK37I4nOjOY17A2rHRpfSTq7DJFcB18cbZRgvZB1w6jRiaohU
rkbWNJIdFqv+VI6hdUazzZRfIw5Pfq7fjz2wwr3jXjZ5BYUYr8zlTW/An25m
+ZubvPgwooCzTWwZtrvEHMjo39xH/9+maX+bkfXbDs0bm/Mx3ra/dMqJnvAw
Zv4wv1A1tqZzJJ3JbUQzv1d3vnISMMJXbPu+fRUQyEs6Q/xSj6e+CGkz0iaA
g+tJ+SmBZOTqdM4g35uDh3vFvzqytgKvpdYeY5U2vOt8VjoiaA31Xd7WERyq
wCXJt6/odSGG9p1ksOVdBeeK/wxHpvvQxnpX4Yp7Ouw+0Thmu7MdD3EtSveM
uIK/Xm/U1B8SNIgbvr47vwiTLZVY2BYH1xxKB4hMIyhvpMSfq9YDW2J9uE1f
T+Ouly1WRyLnYTwvQuDNFwraR5ZPn86fwfdvHJKWYjsxcZfKL7p9TGouBmcd
i26GAuvjB+kGNgRgDTZXnYjsxdNj0yct1WdwMO+08xORBQwxkKWuvmzBzI3s
35dSaJDr9Jfk/6IJi6XaKqOwGhSertc4CI5giEDzj7Obc8HQ0bnWFriGakyN
Tn7RIyDzPFHLaGEZvmdaCdwzHwHLdY+OtpIp+NB41PLcgUn4m8ybdD9sEOVF
eiQGesnw5GR+3/DnUUx+c8pOZ9Ovv1us/bizRsH1gwyOPpkLeN9B3HKufhBv
vtkSZfqWDKF9rxLFqzrhXt9Fq5jELWrbitM8iKQGXAysUbz6aA5e+KfeHfm5
maeoH5+RtwzABSWmT+vjBRCw68Rgi9o0Ph04Gs/x3wK2v0y5M7hUC40vLwVB
1Tw+NU7MzVseBK25Pb+XM+Pw5LiSEap2Y1fJP5bPV8bhrvXho6I+CVibIhNk
oh6H02xS36QkSGgx75g/ttQAZXvy5/bvnYZrGcNXo5RacUCy0sldex17lV2u
VNeMYp0sQd27YQyk7zp8oHdqBt6LY7GvzrdhyAfNy1VrY2jJ4kq38xyz2n7e
SafXbGPgf5357urreqDT/KK+51U/lJ4c7p18SgT5LN2HskIL4MGNJ5y4Z5H5
l8aWVh56NZquTnHV6AL0XKuPupo/BcRuzt3PhnqxRThmy3LxErDPplY62/TD
A6Uf6h1FNGjb+Jp8y/IvgIi048xJIvYVONyogUGkSDsKOP2lorLu9qoTYwhX
TxYJaz6tgX8TTYRndll4q8VNn23vIPo1ztXdbBXBo4/PLN6im8AAg7pYHdFZ
FE95+vID8xRIJ4+3D1RQQWewpVpHl44g9bytq+pSMwS8zg8cpyuHisf0DmNS
/bhLyMPguE8nOP2pSTvKMoYlfjlvkv1XYaJ96qp70AC0KOztCJMkwpjK3iCR
kEnoE01mkbWfxkrC9PmrHgsombfF+/EvIqw0U0RcDs2i+4uu0WiXNHDpT7jr
yDqD9v5j90Rbh/HnaWm3STcynnkY8k/ZtR+nc6NkuNspmB+bmnRgrgGT7xtV
FFNn4aOeCt1KIAmy7py9EqVOQvcr11Xah2kI0fXi3ywpmPZxOdE4rR5xhibg
/iwBdnToaV3X6ofHg68fXHFiIOww6+Y441GKYft/qWSarGMOz4TPtHIC/scv
7xBG34OjpgGXNfy7wOZX2+9zNhFgp8iVXPqpCwYXNnNM8RbClX8LKsTAJTw1
33ySjWkc6PfpduPeEnxPZfjGY0PCgv++7/YRLsa+rF3v093XocPQ2T+euQfM
3ly5yNxXBW2PZavJSkXIKCLlaSQ1Cel5i7Eqzm34n0C/UZw7FTO7Ch6axZCA
Z4jZN3LfAIbkdJ1OTqtDrzjeqVV3ImitbzDybr6b163rrFu8DHuncrc9+74O
0ieeDtm6DGCaY2V1inQnMhfopr9IGN7kcV6bDLoRMP46HhzbuY5yqT/QTrMe
8w30/u6ZJeEX7bQzNOVCNIo3FPL8R4T53oDRUk8SBkSuRf6OmQbBRNd+ye9U
sHjN0S7wfghc3mue5E+qhsw3dSX2diN4f69Bt6/hCnDafWaYaSoH+sShj/Kn
p/AOM6dskcgMTB+sVAz2HMK8AJ1R7r4cLH4ebmX/IhQmJC3jW5b7cKTL1Jbb
ho6gQ8vurVXpxp8c0nJx9TQYF2yXvLKjBdRPco1vZFDhUPEe+WeUTrj5xBwC
itfQK1k/bOhrFbyQrWpIFBhG18QhiSf3CuCsaaASWXMCowVzv+h9mwCzZXmH
v9Ud8OeAQp9KxjwWK5zgaPq4hcDLev2jTnQphpi8edC0rRme0hY/uxgTkRQB
KvK7m8BbOb//OkMP5lJ9ij7u7sKUtVRL5ucT8CLp9zOnXjpC4m2XT66yI7CN
zGZl1zELfZzaFuJti2DgIkfuOk2GSl7dDhY7Ekzw/HhyvXMa5uQWSxkCluG5
ctzl9+6DyNCYpniwcDvBgKhqlf2yFoS4dwSEsUyBkEaIwx72RbgWFVnU8asP
Ukf5qUKy5RBjrfJUKnsDqQkpgVOenXBn9MOO5c8ryCzO1nn08BT09NvW2Ef2
gv242RUtvkZMXrVW3Vo8iDfsjm0sNI/gsKjYVqOVOqyatTzW83MGS4Xe79k3
1QeGJgod0wcqsVavYGJwIxSW/g5dmcJ+HPvzaXXFYgU5SLe2TDr1YQ5bUWmh
WCXEOir8d6lrBaRS3BXUN6bxhr7y5x1mf5DtJSfjoFcq6sg6vb0/3oTuncHb
87sbUPyDWK00fxcYWPGrZq/m4IIA5vUKDUIb+9qfAMFlZL0sqcTmyEg4pfVk
WiOShLcN0mLqRKlwQ+ffM4/HI2jw1eHhmFMNKs1kfDqmOI2Qw2NuFDqHZdOv
ORu2lEHM9+FbMg9JEP3fogefBAOhJIpRRWpzP4OOaoW9ZB6AnPqcbN7BaKzQ
MfJWHu2BDw6G94vPzKN/EMPt/O/LqMB6LUn1XDFU1Q084346Audzct/m16eA
+ts5+UfXc7H9kXfmTHov+tmrYfNwF75yF3kTe32TuzhsiWeahtDL64czq/U8
GD1e2vkphwyMl0ROf1hZxMAxs4nhKyQgmsm2ri3Ug9QlUiDXoU54dfRz3O8x
IoqYJzFEyA3DgdbQjKaeHgzmzdh2n0LAiTGv03dOzkH3/oA1z/l17Fk41hSk
0I+6wq8eabyqwoqHGxnb+rvQtJ6eobR8Bo703Xj5KLMJfMvfVz06VgV5N1VD
jK+OwqmzR/fE0VpgiHbBtN5sEM3oauRcDvpgnuPFRqvSGmzOyzge0UVPKNG9
x1DNREXyIPGy6sxmvrTu39VoVIE87364Z0pS4IGyxrLE1hm0IhZ8Y19uBHeC
cfMMdww0u4vbfdlfhlGFP0Xd9rRjgQU5qSWmBx2abQ6UtZXhPMXxmIdhFTQ5
f66RH/gHeTwftu/eUQkvJ83fHpPKRLaVPTSetFEgyNDPtFweAoe2x1kLc6Ow
XYo9KfvAEOytV+sWfNyDTa9CI11m6NTE+qOFWfO7cM1TtvzEsVwc1xA8/SFj
DvvEuy2l3/Yj8yciuitkYOXNn4y7LAYgxPLnTP61QnxQZLL1EjMRiFnNXi+6
p0Hx6MOaWB8axH+abHsW1IqX5p6s3b5dC4J0issme0Zg7iyTjDDfAP5VkycE
N65hn8fVMv3RcpALPbF94zgRhwPEr2sL96O17EVjns5e5K5fPyXGPQBHbemH
m15PYU7wUo6PcQ62d2oT54oLoXjRV5WtshEzL0kVR3yfxdBF0/OvanphYEIz
9l1xOabkFj6lO09EK/XiUGm9eai8y3GR7uwApjg/PJ3BRIATnT/2+stVAZFN
xVFphoxZ0Rp/JLuJkD9L2VpLJePap+it9UYd6HlzJM4ifBxIfyOTSySK0cv8
Wt6+swlYmWAWVjNVi5fLb01UhpOA1F87LWjQizFDsgaqr2rA6rOmmvfNzzDK
0nzra9gkGNob9m5CFrbGRbjSFfXjBi370W+9Sgzk9HOg/evAJ5ZuEkoO60A5
s8s07/kc/PGQPOqM03iBR7WNRXYNE20bTMMyZuDzIbosC2obDqcJufFEMKqd
N9DSP3O8AwzSvU5sExwG9Tm1nDWtRqBrYQzh2T8P6TcVeax7KWDeXmuRabKK
24cq959/1I+HGrZfFO3Nx7BSmSMvBRrxTVwR/8iBWWxp/JNbwV2Lx980EZz+
kUBP74nksO8snjCOivym2QDa/QINf8coaLDV2tziFQ14GIqqggo2kJOTzXWI
uQLfBh5eGUiwR5n7DlHRUT7IzE/6zVK6ArKB1r0vAvrw5XcWwfyVAvBM2tus
KdmPk3M+j+I7xrG/ZdZQlWMcpHSYJ853UfD1DpFrRMMZiCXa6JID0uBLuHP4
8MMS2NmcnHisYwp+5EvPHEpqg8l97nOKs9NgpxWWQBVDnPB/EqP0ZBRFHhpP
iZrQsFV0LKmMdwa37Qg+sFt1BJqSv8fMH5jHtLsBXztV61D18of1rJMdOLSV
xXRSaQbvP4pOODH1F/mMW8YcazdAa2BYrfxdIg4yBD8Vfv0H6Q5m6FF7iyFB
xOEa/8kW4FFciTvzpB/eh6YFv++eQ8W1ALwQMY/7CB5/XQvXQKP4SLbn8xls
vRN6/3YAFfiCXD2meNLh7C8llbGIaEimCg719tbAJTXWQDpmOgLPoae8VKEJ
rDkrsqqfkwIHZ1Vl7LoXkDrO/lHg+SI6mhz+cmihEf2Gpoviz5JA1eMH+aNt
Fqhabn+9foyG+gxTY28VqKBZWPX199FhnLF4uaJaNABTh9tUM75RYKk6SuNt
RyFIy3/Kd2n+DnxbrgVv9R0Cbtl5WZvzuXAmj/cpD+MwKiY/dkcREnCPdNs2
7mmAq9kK11GAgtuiDQWogR2bfH+s+eJ9Ih7c2OvGfbkL/I3MVlK2DwHjrPqF
/t/NoDf06W4x6yTWyJsHu2/m7NgBf/ZLhksQqGnP+U9zAuQWt315WDgN/qER
w2JTU0AyndaNqFyAE/S3Wae+DuBqjjeba2IPhtJ2QnL5B2z8Zmi2L3AGb+Tr
/XznSMQZ0X7ZGaFRtNByCaqRCwB73h+5P6Tp1C4XGJqv+o3iJWbf6yoZoyj3
JEM7M24OMs0L/fe0jmLO2XbLc8uLsHHpaoyLYBMk/b4eKu9Hw60+X63Fz6Xg
dSdZAwoOwG9JHi6PZyOQOzRNms/sQMS53e8KxpFz54cn7qrjIPAljZ/AOwCH
gktr5k06QXl+9NHJ7kaU7FnIYg5ogVf2vyZk7NpALrXwy6hJMfT9rhSwukjD
JqaG5yPq9IRYxSj21wVTyKLUfNsqtRS/BV/yp56lQcf2v6tyE7EwJdjfuUu3
G5SkfkZ3XKJB2uexkueJ7bB7bcttrqwN1JL8dicjgoyHj8cxiE9S0K5lpPfX
vTVUmJdpqqBHrPVY+nTQbRGT/w5/qBCYgjWvp6Os8WSYdZxYOjjVjfv3qfot
eC7hwGPraZF9yzj3cnDtkMhmXut5Es/INoYuKm70fjpzWBrWsDfdrxwqsww6
VBdn4QSlx21UOxtIHw92vblDhf9+sHLasrdhvQM5TddvCN2TKtpEv9WD8eec
0xPVvfDG5OTGlt8DcFdnoSKpdRHbC0JXxM3WUGIrXdsv/wYss+vwaYyiobOg
fpV4FxU4NCQvHVZuRFalWOnTkkxqteoXD54b2/Tld6JRe2zboOsqLVFrvQEP
nFHa+YyVguedH533URhFx16mvKt3KLDmmUbt6ifhr5NWJf08DGrSGW8Huk5v
3t8dUs5yqRmPTC3/2ntuDJ/C9/9udi5C1pEV43udddhW2f78enshLBjrT5xv
r4VnWvoXDBLmYG8Vn6JtUzeQDR42mc+VoF5j/xu9KQo4dyUa5bNT0UrcZeHM
/j7ERx+SbqvOApfR6/VMjQEg9Eb/HW6gwEbv1V7bdjK2vNY9vXJ4HM0u6N0W
WJwG3a09zzU+t0Bpx2vFPxeboeFvYGbRo22ERdo/pS9npuDp9TMWAlen4Im5
7RrxTwOKBWutJFY1guGecTJBtwdkbGvC6jfns/21cvY1XjKcTvDZcJVdQNpn
2vE6F01oGvdvcP27AJrH/+zjqFtCAwvmYz46E/Bx19dpfmgDSuConMFLeoJt
rVXUHpNhmCM5fttFHYTgaaJY0gEi1on/CNremAvH+ikt8ZeIoHRvh1ab7SRw
JUr5Zet3wKHf717XLIyAvDKVXDQ1jwGLBx5s0OdBBKGSmvegHnq+CVc8miaC
dABXjvZYO0bPM+XbupIgX27wq+hWGqg6J969cy4H7qY6D1kWzMFC1bblW65T
qLRx4lBTbiUm65R5/3JagGP/KfQ6cS3D6UMXt/1TrEc6G0/3R8o96I6sQaJl
K3jXi79NOX8FWQ6Pe/MlLWPS7gm7xTEiTOp4NfKGz2ET8ATvT1zAr5RHn2LW
qqDxo6ni0PsKNN7PykpwnwbTo+l0u6MaIJSrjm+P8BZCVqbH18erC8BXFcF3
IKoTf+/x0/dSmIPvF4QndHi7gOVW/gTdUCkYPxv9kU8rxyr7WB3pnnJwmb1C
4KuaxCN/B5qvHenDJuWnYQI2XaASkfmwzbIXlY7b/rhJrccq3G9/cnkVhnaO
2wx5UkCEzL54eiQfBbse7JgboUFl+A7fpLgN8NCZiZKym8AXJ8U13eyJYKXy
bCpRnwqWwuY+XsMj4DLktfqaVID1kaJFcuKLMHTPYq/CtmmQP8Uh8W6zf5p3
KE9bf9Qj12QAlo2twaGgtV9Cz9uhfjbjo4xTAziJc10Om+uDq86WdwSC5iF8
72QC67MhWBPvCT58ikEtdyHwePqvdLD9by5gtwudGr/f6suuUwyEasbbf7bR
yoHpXkqjLtc4Bu1QpTtwqh8tTEZ2DbaMwWv1uwmlc1P4HpoUzg9MwNLLmb0l
h2ng4H0rayfvPHQ12o//o9ZDW1ua+JOt1cD0W/R4Yh0VpyI+T/Un92FmEInM
25wKnE7/ak33TcKq/M1Cdtt6LNp9+pTM9jHsSw+/EjdZA8q0t0/vhK/g9/d9
qTfFKKBkVGTAkTqMH/P1ZIWKi0DAVLXOzaoDVXN06ncGzcGppH1vs2YpGC+y
5wSjXQ4wXA2oOz07ABd3Jvh/JExi4xc2h/LWaaiT+bqQZ04C3wKZ9CKeCcj6
d+SgVE87iidVtlQ8z4A71mLHbgQ2IGNViYSYejl0hfnejZJphHj7QQ35QAK0
mvno5yfNYXhCcnxWZDOmTsln3LZeA8dODQbOtFwo/PNwxl5oCPfHDDV/HFqA
kHW/QXWOItRjseZ6xkWBMzmU00cPN2PgW7HpP5aLoFYfbWcsOIWnDvcU8vxq
QbFRhXyT9VaQ89Ae3GZbiiNXnpoV9y7C7sncD4e1KFA9+lipofwb8Hm/irq7
YxITdb3YBHz6ISIt/ORVSIFnGXaRB307gFmi9vyBIDpC+G8nPQkuMlqahNSo
+gxAuA3HtyL3WWT0Gx9PLmyEwDvH2+M8BoA2thhxamUexGVe6QtHdcNX68cJ
ojNZ8Py89fB0ah8843CqyOEmQ/a2OruzF7eq/Ykp864SXcU3ocxb2+LXQVWA
wPdGiQbRCZln7XZOYkLB4Ak1rXrsCV749WDbBIzze8I5qRpYPWJ4ws6djMPB
D167XIuD8Ra/cu83NHh4Q23fua11QL+3PfC74ioc0/+cd9yyHrRD4GTevhVI
9hsd1VqtgjhTnU9N8jmwrl+4K31uEAMubKwHspSDY7r3VG9NK/z8sg0sTLOh
peTPSoYICcsdXsqGty7Ag8I8goswgkGHLkXAlZlQXmUs121LRtW2cOpDOTK6
slF6za7n440PN6MdHw2A8OeRkLenBpFww8PkfkoPRFpeTz7EQMUHe37q8rTT
AHKC95K+EEA96K2S+cgAVl5R5sibLcLppAfua3v7UJzux2LPznxUOfjnUEN8
EVZIkc89+jIOs99H024GD+BuXWLg93EC7psqzBJ73QNBNxO7x+u68OmZQ+89
vrdCOVNcl3fKLOoyPYriXGRRy+atObvetAShWZE3NfIXwTlzKpaBPAcSy0dZ
n12fhfq3n869k2kH6Bev/RH3Fd8/MXU+7twKR82+xQodr0Mjy1u8i5ME/Mhp
Ehstu4p8Z4BWKEnBvXGGpKXbjAS3u278d84zqB0qWg88GJuKi/GEHNpsC9ge
vXJJPJoGcjFvlUe656G7NtouvDweBKWuGnOEbfruaYJK/kALJrhKlct0TcKd
1Fv+o/unYXHXfderxhTsb91jLsQ6i9tjT4mLR9RAkTqdZC6hHl/fadeWFKZg
qy3N+B2FinKhWa9yu8nI/HP7f97kQWwUV38ZQmUiyOw2qT3yaQZUfwt02SmM
Y6Vslkbaz3loF7jLZVw1g8/qy0WPBJdDw5R/lMPlj7jvD8mpMbEdsWI+8MxT
V3AkKV00tpyB2/O5WXEnx6B/Qyg4Zb4X+wYePMy/MwtZqd+zrF8OAaitJn7Q
msdcZrkE+doR4N5R+5/QrkbwjIjzvE/sR6FFkZnti2RI6XGfspWgJ2zzTb6x
rY5RLZ7lq/927jnQz9jNdneuCrRHXnOXp1DweovkNP/iAvQsnPswNziLgv4+
W2enEiFgi3alvN4SBGglJw08+gPnrQhHfpDoCHZJlFs+v4nIUOlUab4wh1Ef
ZW8KUX6BXulq75lXlVj8X9eoZH4xHl1xWV9wacCb9/usbXxmQcSIoXq6vQo1
lfc8vfW9Gn5y2rozpTXDiQ1D2z17SSg3rfF469g8nigLzrxvw6TGo2C0VbAi
TDWv4YB3XG03HJGqVvdWI2/q7x1Ro9PJmM97l/J2LxWCAuWEf0sQob32VGNU
3V9guh8uvUQigoREeON/W0igxCOjVj05AI8b7jjRRIbgyDVaq/V2IoZFieYL
M/TgiMNhBpX93Xid32pwf+w8RsY4BWsw5eL1G3Gvxnsn4Owl8wNfd81BuPpC
g4lrBR7JzCh8kbkO3xXd08xfzWO7/Kxj/Wsq/F6cP8NkUY99hjUzxjNDGBvY
3/SlMhFNYy4e0NszDWbX5ghD4f34K5KRqSicCoZtKQOyT8fg1MPy7/zDZDiT
EZScp0FHSFbz6SVrtkLH+lr5TT8K0J361qvBWI+5TfrHGGEC1I2ltALUiRAn
Gz3E1r8A1ZkubuycZPhoXHTlxdIIcESkHhonZMFWH466oToamF+N+HqWSMOn
zn5x20OYCI5Myxy7XWtAe3sv/YWyTij4z/bxbXYiprxXKyq0IYJepdmsqVM/
GL60Fc39MgiVmTIppy6ugH7CC7G5+AXcZaAaeb2FAhb8GMDCOoRLHA++D9YM
Q3a7x/iN3X0gGfjofUrwJOyvT/5KcaFgOP2JjjeXSTjrw7Gb/dFmvyfYhzIU
+uG5qlR6/q4hfHT8dAn6UVHhoEnA3suDELNLV8Xs9SpoKMQXmbgNwmF9wbt1
cqNwGPyDd7FSMf3n2Mfg5CqwXhzbwda8hKJPCOK32cl48ogxeaa8B/u8k3vd
jHthx4ehQO9vZDRYG5kuEqJhjbtaytcz8xjzU3xI6hEZjpa/y3FzWMCtxskv
t9T3oVH69qKc9jaUygtsmgsqwSvq5wQHblfDpNe7uue7WqAhxiLobCsRbzPc
f2DHQke4E1ys+KykDeoqSSkJdzpw4GrIUnRFAfqMPI48GzqC7ib/qoEyjZpd
r7WkqrtxweriWoPSLFgWicc98WUkvCtM2GJMiwaV5fcXxeqWcRt5J9OB26vQ
SPvX+SKlD++nqoa93KzLfovIdx+/ClT4QMqqlujH4ZkL8k07F/C/B+lHWG8N
o8Odxz8PjCYjve1pdJ6agxmFPPpHWl247dLG0m7pLuzJ+uPkqL2MnzzrMx13
b/rdsRCWkYV2uP15q/iPum64O6NfbXO6F6b+fNk9fn4eGJwdy8c4afBp//ng
Uf4G0BDTz5JYX4KpZ9MF/vpNmPvwhNff8g08/eq9UKfgOPxSdHeu7p+GyoUw
JcW/FDhVT5bhlByD0vpfKmzHu0Ei59hsSx4Z1/lz+2K4xkDtleKOgnJ6wj6u
+8d9vahoPRX5Sv/fODxt+lV9iLsWVrIdXLLjZtHRtoKDa2wS/3KdrmLcmYdJ
xRpf41znIPXN0ViyVjSQtbU/uUoNQIqAl35/xDjOEkYHHQZqgCnnE8+lzGn4
8NZuzuR2L9Idcsz6QKnB4zcX/6mMdsE+1W8c3+5RIa3HVE+9cRRGBZOV/T5X
Y8FZbUN1jW4MyQmdqAqhYMjJ4ScR8QPYaSr+i5kQhmzfN/S2OnbDpDgz1zzr
PFa7xB9nbO/CQo6oEbHpTBCRf2nyRGYWlcbUL4pFFsCbu2YXWxymYMEvkUUn
nwKUFstZkYtEeGXgIKxR0gE55gksUw1/0UhP55eFDgn0mWkOn5lmYL7B85Mm
hU7NvuyL5mGedhyhDRGTGIogd6rK8IZ0D8rlm7xquL5FTdjVJJnMusk5wjz/
1Le3w4O4oH98QoUgQLOd4t3kxPz6YIbg61Tk0HKWftNBA6tO+32HGCvwkPee
Q4Niw+hW9XiX8s0pvL9UaD+d0ITvhb6s7aogQKX9q/LeB2nIcT2cXP9nBnc4
/P5TyDKOsWwfz1oxN6ICmfNXgfEE8A6zjUUfHEB9Fm231U/dYM75/pkdVxaU
Z6r+3HgwBMalhNVUFx9Ubeh+4kyaANoFKp99EiNB79mn5bV+Mhot+0lyxS9B
dnl4fNfvWngwOPTkvlclhs70dX87NYnvlVIOqT5sgmOxBprrfxux69HAtqCZ
OpSydrMdZRyCrlWWWEHJEsgImXWWd1gCKwfawYW0RSj8NWf6tmsFk4X+Lf2o
qwTCjNw31Vt9oMej7nHBtR1m7jrk7CiJAZ6v8QdufppBS/2F2LINAm4ttF8P
tanHjJsXVL/EzWFQC2GdOb8Bk0L77l5qnsWwgmNtDqX9KP6d4VE3Zy9871Kc
PWs/i591hpxpTzpQ8IqT76O1Lki26s/YoJvGiz/OHrkW2AVRDtWCpa098L1d
UDDPIHcz78wXMXD/g7g3Diai9COY7CmGg9FjGHiL0evam1m0eNkcm9ry/38S
8wgugQo4r7rd5fTqCHwJjPY6d38YPPd1fnhzfBI+1c7UDzXT4Goh2/qKFx3B
//47U/6DfuDYbJSz+i4T70cptfj6VAON/z9qjcMKFidpNJhfIEGQkbX48K6/
GF+qHvT+8QhkPwx5cWaBhLtd6QfQYRgPW0gl8B9qQvlUk+PvhmagbmHZt6qZ
iKL/slk5Lm7mOaPZ/rBxKvh/deANPz8GxyRzrsWnj0IkaXDj+ps+tDhUqRjk
XA5vMq453ts2D/dZNSSme0aQrlvzh862Xtw+wXt+WisXZGy33N1CbcFScJN9
8bMNzhnpvFmJoqLDzXDrnMpC1HSr4ve73IzfeOXcTJ50w7lnCx33A+bhhUL+
A++6HnDMC13zUO6CK+o0n0PhY7g+cJZpybcOylO6NN+Tc0GYZGUznTIPHvZn
xaeUm+Ayp4wR7fk0ks1K6Uxv0Kut1H9hdXjfC0oxnsr+bZ1Y+d/7Z5etaVi3
j+eEQOU88oo6kcPposCZEN708vMsfPyhosNyMR8te9Qj6XW3qLGLByQtWfdj
0ZHrBVv8Z9C53k9hn0MLVDgfUudZ/Q3eRTUTi5ODmC9Lpmhz/ITC7tGymRIi
Lsjdj36gNgmgGIsP+kjYrT/G/dOkA1ygYOuKVw0050Topn36ATzt/b5ltivY
Rb3LKBc1iRxcwSZOSAY3NsXOc++IoM9XvDvk0wacyXfO7dveCYXrgXtJzv0w
ErqrNbx6COL8o3fbGE+CG7tJw1RgB1oq/E2UCKEj3Hgy8Oa9dj1Ekn/Olf+d
xFanPK0b7VR8e1HxTZ3sKgQn/ot8cmsBCrfkxi8HUEGrTO/AOS8CqvBTXdcN
idBMV3dYpHsODQO8D7w/Ow53n32wOPRoHiboS9IDBCcg8THPp5P2c1jUzeEs
vGUAJH0rReJ6+iHdLMJg32cS2p9tyuKfjEcVHpaMG79K4Lh+z8ETt3LhJtOi
s/1AITq+vPxEK28C83qYsw8IjsG595/KOt8sA8+zxPIwrX6kv2hY1ARk9Dvz
3zs2jn7UbKwq7Xpdj0tG3DHcr7ORs5RpG4dPO0yfFBme6W6FZaWRHENGGjzf
fiDULqAeVz2/POMJGYOxEAebdyZlULlTIVtfaBysH3iYxKUScdsU9yBL/DR2
3RFMWX9xCtNESq8/o81CgouFSZXhKHT+JLH5OlOhnLb1rWV4N5gVx3TO7KyG
lClNwewPq3jF4l5ryvwEHr8nxpHET4QLdmrzQ1uXQL2GEvRPcQg/7bKYbF1t
gMZADp0fq+l4gfCWIPunBW1cWa57khbA+8Hl93rTc0gq0+HUoTYin8h3zlS3
OQxTmWOe5FuEej6GucyaEeATkiAbvc4Cvwo3ToeFQTjo56Z3ipeB8EA4pifp
wTh6duQJvC1thJQR1Wgz7kqYTW+/vnHhL5oLa+lUGizB/IQCfWniIrA+5TOJ
ocwgJ/Qez4nvx96wo7EjLydBiNMbbtSMw9Xzy/9czdrw/MbWm3t2LuP+F6k4
l9IJO/nOEnO20hHepk3ueiI5Agpfu/2K1Tf9+EmpNGvdNArmHo8tgmLgn/Fh
khPegIr2vUHXJnrxyDHK5BPZLqyuOVFiFM2kdtPr21MmVyJ4MvC6/fz6ET8f
57Glk5+EP3h8/t69SWR59CPrTGEOnI7+so+PtR5DbpuVXufOA/zmqSdxvhF6
9FyDj3Y0wYdGWqHH5UUw7ok6rkZsxVwRgngJ1zj6myxfV9ugwIsXbpUt3DXI
wl/Kf5JrEl86bWm8rTOA/mWl1Bef++HKyCFJ9bhETOdozVzVWkOtfvGPDdF9
kLMu1VJUS4Xj9s7bYs2IuNe/Yyd36ApYvfVMM95PwzeuofNWB6fBuOJh5ivt
XtjHs7hwVZmOoHGkqDaHn4IrrJ+5a7Ytojfx7qMU5zWQsJqyyGCPxRReMRXe
B91gpRpvatE3DPXqPIIPPw6CxBk7dS7GeRjBnZTnnnQEnyrBC7/9SUg+aXvi
YN4YvOgr9/gxUwlS3vt2K15OB73c/XstKnoh0vtbWcTPEmTmpGew3qynzDRq
YJf8PMrKxxh8Fdu891LU0aRdFGgfWg2I+zIJzqv3AsrvTmK9+oOyxyo0jD/R
bnTpwwwK0V3+5BCwjrtY/nh/PTwLWjGSB6xTK1CwX/K6mG8Wtg7Xlt7emEXp
oRI5qy95kBCio59eMwkvJKmXT3TMQmpR9aVflwtwXiJ+9KXTKP6er9WkMk/i
E272gu3TdIQBTQFBqYvjqDywYPuqdg7vTlVobqgMgdmFUHKUMhGC7xrslXQY
hK/CufzKLDR8frA16s59P8ihvf1r/IUAt2q21j18NYL5zGkNLxQ29dHtQCRx
qBvnL/z49K2jGnceiDb/vp9erfFUaODeI3SEeYmmnDdj6ThgTDjzKnoCV0bp
1PnFU9F2I45o5dUGnerWbhIuRHBK1dDx2swDNrqeKk7yE9C8k2yqSd8L8uOy
u+3uUVG9Axik3hTCJa4XMGg1A3JeSbPyZwuQ/2+8qaT3IC677hJPeTKJt6Jk
lg/IrICxwh3Owl4q3ORMuO38dgjH4yQ++Fu24WOFHyVGjLOgbSMQx+o8gUoz
OfKVTEPY0mD4omVkDmRz6Eoqt0zjjf1XXBnDloBzRMqUsZsGW7Lln9T2DaFh
KEFly4t5tL3/J89kYAV07P6+NXboRLcCcpAK4wLemHCqe11RDsuUzqZPvuMY
oO2jdNEyDQ48P/+i/Fw/dgf/GioXbN3Ua1bGZi0azBoe8pKh7wdaT3nneaMu
YE35eTA1FTF+5tFOjd1LyOC27LtCX4W5R/mZzW37UPSGrOK6bT3KdYczx/1O
h7TOssLF1c38jUw7zFo6MEyvP2+vUCkypm13YTubgTte6fyxEmdTYx9P/uIS
UInnNJs17Y6socrpYgZzeRreDxW4/dF+DjIiglpYl7cQrhoFZVkUMKt5fC8Z
kw1uQ8sCy0wGFRLO11/U0pVkUjtUxkspi93UV9PP7CVrFPRfzg3d21eAj5k2
XnXQ1UPPobHXazeq8U7sA5u12Xnc9703vKCxGSqTbdT4b7VC1r6E0883+nHC
gE000nIQzEWtIZB1ATIFNUkPWPuhaUKX5BwyCp/s+HksxhPgV8S91dkXkxiw
yiEoZUTBCT3R0JfXajEgXMS360IJ0udbPsznI0PmfcGbDVxUsOl98PWCcBI4
KiZ9lNi/DLOeRXFZ9Cm4489D+aTpYRh8TKc5uZnfril/fPOjbAgyDQu4hb2p
+Ems8MYBvVrcL5p6+nprMfr9V0tau82s1muL0maXJ7EzSCbR4AoZXvwcP/Y+
rAKpnz/2nKGbAVaifqiPPBlZLn6tq1caAKny2Z9t6tMg0JotcYPkBd/feOpb
RNGg3Wthz8vzsziSapb3Z2IQzutLBa4VblE7acQ4wbrZ56v+Dw1bvHNQ7Ivc
SndtLwq9Y8udb0mDVqUr+795OoLOn4OtRpv++HKVe63t3ijaFk4eux1LBQP9
6RP0/l2YMzWVVNDVjzsD+38ff0yC24JNs7Nl/RBnffTICw96wnVvS54dvz5j
F+Fz85e0dBCS2a2UQqwH/TfBOfG3miBp8uFXl8QMWJLmWhWtIkIEv+3JW9lt
uPPGtdfRmIhX2Rxa7ohNosclWQbP9C1qlF1q30PYKSBgxegrqXIf/gq+K7Q+
RcGAgVEnm4xYfNigohs0OI/2xWTJw3OTqK6ky/OhuhwKramG4RuNKOvy6suJ
ijq8q/BRUtFoCB/duOmruDEGZSZiaW67W7GTOJE2fvYP5oW1X7AKWIezd7N+
sPcmAdEm3+OcfBckMEZp1QtlQKlupBXfISaC4x3Om1JnO6CujT5T+0ojZNrO
ZrbhKijXnGHjHqaBbs3xa4mKK3h1ruqVd+Ao6O6W6hUeHAAlaaE7j9m7wfN2
ija7dxuIa6cdj7k0AKs3K1gbNnmVdWTo2/O1Mkx+7CZl8roP/gvNnRXNDcZ7
32uCsuSHMfZSqWi3ExG9D9eM2h0ZgV2XNVYWl7eoMXMcI7z/NA0Hi0s8nmk1
4idNdTfxE/3AONkdsPsvGbx3qz10DaVBZrTHyelNXWKpe5wneXkOKRWzRgVr
C7j3Ecf1If12mH3FyPVYvR/NRNpCEt4tY8o9aZ3l9WqUfqdyqs5/EFVb5zID
NvfQ5pq/a9+Bv9AUQnveGuePjCSly5cDZ+Ev39fdsSNTKN7QOxjVMAYKxfW9
T6/O47cMTY0XlvOY7ZEtu6G8gCwdt9bc5MYx8lTVoEFEE+4QsxQyj6tHQWNB
Vpl7RKy5tueXsX8J3t+f6vsq/H8UnYdXjv8bx9uDEC2RtPsmpEGyrofQ1lYq
lUI0ZCYtFRJNoaFISVNaGqiup7219967nqfnaa9fvz/gvs91zuf6vN+v1zn3
Ofc6fNGQH5ej9ENdQ/OEb0gHMubGOLnlDWPI85/VOTZB6JucJrn3xRQQdncZ
/gsfACVzvypnYgHwmm+qX+YcwocjVmZE734c3tG/b38+Fa04q+4/7/8FFtpD
CsdbquD6tjPtTosbEF3uCVnHKVBf2vviDNcK6Ny9MSPoNIgXTFKjz9eswtjU
+/LOq1Ng9daQYfUWI9Hdn75YNIUIOcZpLA/Pt4OSN4EaIDME/+YG3T9vPUfS
IvO9CyzAPz/Ytjk/nQfH+jNLZw1H0cS96pBHbQumsk7MBOxeRr12YQ6mqGHY
l7A8f85tDkLCz0Twi5JR3EhEUiGdnvhx5/wBBnMyxP49H5MAFVjgEaPTeWMO
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
LNqQfOMO6VmctPH6fVC0dyfrg7t98OSW34EzHkyEIj/De0ESnVj0mVmf5cx2
QrJ9sizN4jqGW/CLPSlZg4fy5mkBFv2Y9d6/smOdAmdqcs/rDK9C5sjSgqVP
P5441P2SY4uPv5+Lsmp+NAmvISL2nu8I8NRyKHtwFGPsdjbXz2/JoBQh2tmh
OQKGcDnRb6oADlxf/htTSgaHVPteI6U+rLqWEe9UQMQ/vNHQMDoAYYmx9FZD
HfB+sNxXTY6MZ7tPu2lH/oKeAjsxi71N8H5N9tAcpuCjU+y3vgTTEHb2G4+W
Jv8BUKlVUC8ogv9EORU8ZYfx4Oy+6YOXMmCcW/C4F4WJwKMlLpAgMIuVU0dP
XpLrQfbfrYpHBD3R5fCAgZhhDxhw7B3qd56DhgMMKUaBveih+mDQN6wOXVNe
KI6HvMUpLz5hX7FR6OCz3h62vIIv+9Qk1vlzMJnLRNnwGwUPVo7w26V0gttB
y8KOcyvIGXXplzd/GTAe0H1m1dGDBz70Uu4+SoNfzvq5kk8nUDkIZzxbO8GC
LTWjceseVM0kHXlhX4QzXv85MFLIyFdjaTXiOw0mFy982FAvRgMRtcHTkqvw
m9xzsiWNCkpHnxZ056xBcv1zabfwUdT+75lBkd06Jqeu1g1TKhEy2mhz+abR
JTmEtyy+CQ5374w5ZUtH/GWtKFy+dV+dJrUVRjjpCQ853vj4U7b2NamXpLTe
ipK2dcnz/P0ow7gzmH3L9wQcE+35ZSzwGOmF+WnWJRiJUzxlfJEM+7lSruod
GoSZ22ZlGQFVWNIlKaGyvQcefZReNVUcwWaHPsuo5BU45T1qyHcgExlc7/3o
SUqATHkyA+vpcXSlbGhtMs9AifanJ0d3dWDHs6n62do+iCdefvauuwr0Y1dv
MZ4rwiqlKwo6Txqxk7lA21qwEoz86s8wsE4COaJCef9NKnDELEwrlvcB67bE
/2Tl5yCDUfS35o45DC46e/5hFuLIy4tPTIVHUaHUqWFdsQpGzNJ9daT6YIPf
7Z+zERNBvyDZKEVhAyQPfd2/2NcILPLZtjRDI2ibdl4reSEV/2lHaVqLz+Hr
tPjn5dllUFB+7spDbjrCeqRUQJsACTims/l9tjfjJ8arfTK5I9g1+qIi5Hoh
Rh/gU4jva0W7R1lC+jm0xIaB4Sd8lmR8WBJ5RPTzAoR73rCJO0sBlfaRA7cE
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
o/A/dYoSRg==
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-4.189598928311628, 3.8629167966059716`}, {-4.614478141853381, 
   3.8404801885382405`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7742078279616933`*^9, 3.774207838555338*^9}},
 CellLabel->"Out[35]=",ExpressionUUID->"9c11eba4-4228-4c39-bf8e-771b2a2d1a93"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"zdata", "=", 
   RowBox[{"trainednet", "[", 
    RowBox[{"RandomVariate", "[", 
     RowBox[{
      RowBox[{"NormalDistribution", "[", 
       RowBox[{"0", ",", "1"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"zdata", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7729901151570296`*^9, 3.7729901297405963`*^9}, {
  3.774207371990966*^9, 3.774207394321254*^9}, {3.774207770037593*^9, 
  3.7742077769949884`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"84ceca92-b5bd-4d01-b106-275b79c20f02"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwsnXVcFV8TxldRLH4qFrYrBgbYgYUr2GKiYsIKYqDYnSsWdgfmiljY2L12
ByaYi63Y3b6v8738cz+Xu3H2nDkzzzwTWzikb6uw1IqiZPVQlH+f//8ztm9t
r/3/09ITQv99KvtSdf/3aQ7vFSjfc+Yt9u/T6BAwVj7rFpHv2u9mkfJ7SGof
+f/em93k/9kf95Tze4+tIp/Tvsr1Fd++veT7/Jx15Lj733rLfdPX6yefXtvk
ftaz+YP/fdorajb996m6H2otxz/fKuerFSd4y++rmxvyvceDSvL5evgIuU+u
TT3k99fn0ln/rhehyDj08mU4PmGWjFOf3TpExl20sDyvXqRFDRnf7O8D5Xua
yVXl+Ogpcl0t3do/R/593t7HfdrEZ/93fdUrSMZvLskYINcr4Bsh9x9zQ5fz
67ST+xqvdr//d7618tQQec5jmbL+O9++l2u4XD/bVPmuvr4s3827WTzkPpmb
VJDz9Z2D5PuCPx1lfOfmdZbrF+rMetW62UR+X97IT45/t3GkfK+XlvGV+N5F
7tPiV385v1fPzP/upzXzk/9b1R4NkM8Vah85ft93Z5m/cXNlPuyam13+fVfa
jWsm962RQ9bZjonrK+f9l4d5bX9V/m8cbSLXVS+9k/spRQPf/Ht+tXveinL8
rEXj5PPwavlutJ8r9zeOGV5y3UJLuW/JDPL82rCG8vzW1uxD5TOPm8yvFdBU
nlNtHuYq48tQkfm8XSjLv+9Go9A28jzFCw2T669aKXKneNYOkuM+LJD500JX
N5TPVavkOLOgr1zP2Jevsvxf+yz31Qs9GiPfH2XI+e933W+ArKex3XT69908
m1bmQ69zU+6r/mkbLp+J52V+jCwV5b5GnnVyX2N52fFyvVyzc8n5X4JlfOrW
TyEyTvd4kR9txxm5n5XOlnkxg4aJXBubfzNuaynzP8dLxqeuqybyab5rI/Nv
Kk8ay3HX78vv1uc/OWT8B736Mb4jIldWmyPyu3H9NvP5+qd8tzsfeFP73/Hr
78nz6DMKdJXjrvrIutkVEmSfKgNvyT7Qy85rK9d77y77X/2pyzisMgHN5fuk
EXK+UsTJXf5/zVfW0ZrRA/nwLCvraD2+i1wvbiDnqz7Jo+U5zvplk/W5clLm
W3npIve3TiaLHjND4vjsPVHWz96fgJ6p/Cm3nN/YjXnKslf2s+r5N4PM71Iv
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
D/Y+7Dh+2tG64g/o+525Xx1X8qQf52F/vxuJP9WVfCJ1tB987mw3+INtCcjr
oyXEfyeOA7fGD8D/cM2BHzi0O3LSZyjPU2c0+a2TvrFve6+DB9n5H/bgYVH4
Ye9R+H8Hib8pnVbJddWai4n37BxJntd5/EXjbhvwXJZA7E3lm7yHI8Moqd9U
+7xm3F8eIX/Vz5yXeoHTmeC/7n+mX9MXlbq81+/pF7T6GHlhVb3JW4i/jX7I
1ThJ4uOd/wieMtcHOeqQgqhH+evYhxOop9PqfqG+MeNN9v2746KvlB3NyDfb
vof7eWQnj/G9K/JxZh12/XXGQMe4wQ2L9sIbVR6Dvck9HD551EfyiwffBY9/
KkeeTUf6mepHzhMn6n4Z+UjISh+7FWXApc+eSHxP2Yb9NLoHI69l/OlL3P0/
9stNcKyWdi74ZlblezIf9VLjX+7dDU7p15T6g685yCfs7Oj/fXUL+nd0Fclb
Mor3gEecRV2LEk5+o3Egnnz9LiPhw2YfYL/vq0odY9wI/McfefAHln8n/3Z/
BuLyRULB653Ow79/1fEPjlw/KDxXQmPqmC6fg79rWo88690NkN/jifT9vkA+
n3mjLX2RbpPHYf4sHiLjXvqb+Em9MPDM74rkQzVIxXtYstRn///pQ51W+HH8
kKDqxHH25MbPn8n7KYxwR75s4FtwvBIk97HWlcY+pnRDH5ydSV6QFku+6SHy
+tQlr+iH2wB/XYuNRw4DhovdUm455f73u3nGA/3ydhnrUZ5+Ncbj5+i/eyH4
feMno6f2kq+unl1JX4MOy7E/J/vg7xfbA99hZ6NfRPuj4HKPq9//zbe5pif+
4oXW+Mfj7uEXn07jqIPeQB+NJ27IkXc8+TSH/eU4rfda8t6GgRu0033xz4ZO
ob/k4qnwAE0vY+/P/UCuta/kk6VaTH5lRYX9engb+mlhYeRuLjyWEmEyH5em
kZ/0iL7o+pTe6P3RV8CpkV/BF+3/k74AShdX/OWqvOdUb0mdrNr3BHrRAl8o
wSeob37N+x/VzcS91Nis8Fa3mzKei73hb2tEYE929KUf0b4O+ANrSzjqPhqx
3wze+2eOukc9w6o1Dn/osfjjSgh9c5WZFZD3HA+pV31dk3w0/6zMe0Akcv4x
FXHtDu2oX2vFe1uNmvXJ51n/EnkPIO5pV/Bi3NPW02fgbzvks/8E/OMpp/Hj
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
Bfo/9KdfvVoJ+2EY86YTP18He9D+FPzvUuYDKssmEScfbk//mSVvwVNpxC+G
zET6vm24K/gepSd1drKbo5f4uR3jqQ9vVEi9b5lwof/Vtn/Db0TOh5+Yso/z
nU9+V/k4mf4G2czrMQ78BJ4+VYN9PTZSxIOGEtHwPR16ET9VO4a9tKhDX6dp
I4jH256E/4+gH45y9Cp8wNtu8BQ3K/A51+j7qLaJ0edVuOcJfftcE7rqywPR
mR29Q7w1eDh82D7qBNQpq/EzJauInzMehG9SfbfaiT+X9uc5K0YGib+P64r/
uJ5OfGMoJ9bN9BhdrTTdX/ycXB6dvNq+x/f/2W/NxUv8uybvpx9F1lVdB3xS
5C3UQSbu3+Q8gTcNeQMFn6eurQ6OjDoGb3x1JTzhghjO5Y0L1NsWzaB+ZPBW
8MiuCuiJFHCpNOcg/iX/B3y6oz244u939tOmP/fzIvoxU2Y6c/yWeYPnftN/
TD5DPyLTsiJ639hM8q0tTpOHO+OMPcv3437+15y+yi7Vhd2T96Mr1SZaiHjF
+Hocfn98aXiuOeAnZUoQ+/tvO3UkDffgD5zvw9tMZV67cvUW/YFc6Q8iF19H
PNAU+yt9++nFfhQDDwQkkHdcM4l+P4vnYAeHjmS/5loTpzcpIF7dZ2L+69LV
7JfPdfDxmRnivBiWMK9GTr2PPfssw2vOMYdvrjdMnFctK55zqNbjuZ+Yo9e+
w/wRZc0XcNHY4+hlfU8TD5ZpJPQUcsxPwQcou+bCxwzbCl/4K4717taNdfw+
/anAC0oBftgKnY5qS58V6V0nznvD+fifnm2xT7fpHyF1PE89+sn+4MPlG0S/
FcOIW+CRkgPRu7RxJ9+1sRF50jL3waN/q9Mv5NJS8f+m+8yBk9/N4RzXz+G8
7qD/tLFtBu/zJI/+MEk92O9jefBDt3ZyDgYcJw/xezD8Vud+nIN3tbAvOfg3
w5KF9LP7rwx/nzlU9N9W6i8jDk4qSf+exD6sb2IV9G8Op7iXH87iN7zSsR+R
qeT/+tNPS23/FvuRtxs9W8Qw1n1SrOiHYVI3ooty3klc8foeeD7hGn2VVlN3
p61ogI7PbT6fl9SW+zm4R4bAh7fL8v1fvsP7JT7knCaSh5JvrCLuq4jOSSq+
Fr2+VUP4w9rx5El+HEJ3G6j3v//hJfSm0vjqnPdjjuiYLW9ST2RQsduv9pN/
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
CrIHv7hlC/4WehB+aZFc6qBZFehXWrqY+5k6F/ykaFURd0gjM8T1yCOjsYv6
DGHX9G3mvJ8N5C+yG3O0FZ/T8EmPhOH/6knEEacd4CfN/0u+sGIDdjv1A/5k
4B/whSZ58KeH+qAT8SwCHuyJ55y/N23oA9xVG/uwcS/2YEZz4qd+N7ADy3oQ
R14syveV/03c2OSpiOeMnVeJ70sz50wbthD8bR19c5b96PAbb75xXn1moWtz
CJ0IpZI3/I8eHajfPdiHf9pSk+srtIy8OqAez/3sEM7FpjL468K3TR3TF+Q7
M4aavKfdnO9CnsRNl5uCH8QTxxrHisJbqDELfsrIFcQ9n0/Tb7kJ/ozc/Si4
gkddzm+LCuCTRwZzXn2+mXNNR78U+e3l8uCg82aDx4b3YL0aTRTxuTLmLueh
8WjqQIWS4D8UrsXcy6W/0Nl/n0ye1MrUa6xBfUpXAqivHfhBfjI83uT5p4r5
z8p2c15aj92s876h4IZvt4v9qNRfYOL/e8Ft1Fzi8aLMbza+F6P+GrEVe3Kk
nciHZfUxugpxzAs3rr+mPvK9Pn7gThLnTx7M+b9szTyult6c80yDvNKPub+W
X+DrkjXzsSxWB5k/1bwn8dDw+vjzkjfAJU/Y+ovPbb9BxI/y1kJcT4em8K1/
DWN//a1G/nm2AboWBcGl1ENN6QPuXwz/tWg59fGAvti7Ph3op+92FRxlog/2
U6P+a3y7h/1rEEFf0++19J2YvGUppT/r9+kP8WXPJuyDldXYvxOCwa0/kWdb
fhekvrdiPvjHFh9P8fdbIdjTxSfpcwhPFPZfbxYFT/dLC+bDLVjAfk78zPnP
39PcZxuJh65p2K+ojyXF3/OAC0lbOoKnFqtD/0il2fhpt2NifdW5dvjXgTxH
bd4r9v+swvD/fRLANZv5gT8sc+YcbPx7QdTjj69kHlUfb/DxSDdwsFPLOa9R
e6hrH7lNXekp/EL9ND8tyzZiD/PN4/qL9HMUnxf/Gdyy5B3qMVvNuQI73lEf
9jD7Qz65Ya82RqNP0CGF1+1BB1BJwb9LZYjjjJ2z0dVp9JlzdI/+dqVRGWE/
5UVXsYdbTXsVDn/YiP0g4gJLijlf1+0N8eaBZ+gnupEHy0O6EpfEO9P3NySD
uLHaevJZJ/oMJcdI4p/d4A1GKfJZrWc48fhBU4dnfi3OdwB5nuJsxr8HfsGP
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
2vHz2KFK27DXC6hfakvugD8c3kof5uU46vj2C+jfDKJ/QR85iee45xB8jZyR
5FkT6lv/73d5mzk/Jd9T6ig2damn2d9i/11x45zZbxHXqYbnBafIZ0+9uHF9
6oCzIvD/X7cKPVCpBfVLufZg4v1l9GfJKw6Jeqll6VjOScMZxBtDmCdsGRrM
OrRKot71/iI49KuW9EE/2YAeYYUD7JPip0S8oPdJBpfpST+QXqK3wKG1lcfY
P6X2UX+Yd1E8V6VoEvfRiP4MtXY58LJPh9m3JZtQ35v0VXy+krxdvE9b/kTo
Wen/tcMuDqX/UM72Zr5Uoc3Yo6FDBQ4jdfEQ+1Fv6IWfeuTD/vs3/5ngz02s
Iq5T3WzOV1hBfUJ5ix680doPvOjrBuKlN+XRX/B4Sj9TuV0mv/QH+Z9DM/gg
SyYRj5c/xzpIlYj7lswgvn7eGL+9P5X37/WGT622EfvcEmWwnmHUU4zEydbi
+7sxp0mbURE73E2FD+3MPG91SWHs4/HJ1Bf29iZ/sEN/XU1gDqu+vIxYT8m+
N7jWomT6dzqewz9GXwYfm+5HXJtRlDg6vSu4zveF6HU4VMa+1PcCp65i6kM/
jkDf4PVy0V+mXl/NevZK5P5rlaY+VRA8WH9SBHt4YBF5u3sv+lBk5oFIXQLI
bxPb4s/mVSbPaVYO+57WgzpX3yOCv2o5fwJe1JmW2AOXB/if38OJa6rST66N
QO/QWIQ+pV7kBny2Ya7440+VidecZhFv+Zj9zrYLiC/TzfkyYcyNkMLeEwf5
hJC3jz+JXXJg/SX3HPi302rBA3Z/RB708yDnOMFHrIeal/kLcuebIo6wdF5B
HLJ/JfWvqg/hd9e+QF/Rb3jQStch4HCXd+P/xjzFbtvuEnGpZPsUXHHfa+K6
aJV8dscp9otLI2H3pJ/38G8j5rPPT4J3KMX/sJ9mTBbrIYf60P9h7UP/9MpX
xDPBb1nv/fXEflZD/hCHHusFXhs3Gpy2+jjyjHh0qZWtM+FbejH3R/1txj8n
Ku8T/nrLevqAm48jzn2SQz69rjx9s5U/oo/11Aq/3vc2+aglmXrwSfRftVbM
B5USW//ffFj8VXAbofukLnMqJ+7vlS375CB6R4rXEXBXy0LwhXU3eZ7Lw8Bh
Og+n/+nvOfhtD7rwPEpOIB44Pp/zOuI5fMv03+htP2VOtPQe3Tqt+lJwvVI7
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
Z4DPBKPPaHQy+3Xr7Qd3HRXBc0wEH1R8k8GjC4CDSPmK8/x3BpnzzevSB3Kq
LXbjajvRfyN1swcHjhlL/1jTFdjRGlGCd662ygFvumHD/t5+E3zxsR/x1ZX5
7PNZ0+CPHj6DH9p3jDzLo52neN/aaPKrzqXgS938gK5L8Dg+t/pgcIEhldEz
uB4P/pI+GZ2EbqYe1rLp4EMP/8DTXcH+VLZnc78u67A/P06T77pTdzQ+rybe
DbNgpyeF8L2DP8JXf1MNfbuLo7B/U/aj5z/tGet1uBZ/3zmaeMduLPyrp83g
40kTwUWOjCTPfPCbeqh8CH/suMGc18qcO313WfCY/eiYKdb7eb7PnjAf8mcF
9PqWefN8vv8WdSqlVjr9HJ8OgbMO2UjcmtaOelNlV9GPZHE0+6rG/YWXUikf
dSOJuTVSg8XEc9Nd0MH7QL+3Ug++sXpPAh/xbYqfPPIdXvg8U692ii/nM6it
iD+U3BXoqLTOJW7KTADX/T2WPGTUdPpRTr+i7nnUxBON26zb9Db0V03rRXyT
QTyin/wLzt6Nur7kZniK/689Qv5TDv8syRupWzWETymrn9CV6E7fuNr0LHY6
P/Uldd4O6u//asMTDd5v8jWLM79mA/Mr9V1B5txVO/ZZgTz3ideXYlezyO/V
behfW7r2JH4stRl77z4Ue2UNH03aUhP8e8I++oM7mPhKjeHc55Y+rNsCeA5S
iavgQV/difu/9MJ/bfxA/D8xEHxbikSP382WfGM28ZL+5wr+ZXMf4rCK75nr
crgx+VqVAcybmdAfnkAk80iki5vIK/4YPPdrxZhfWEWnnnKqA/5WHYF/cumA
/w/3RH/rqw39bY/eoCO97D7rW/EQ8X7YGvDPTXXBNeKWgu9WjiPuu1yCffEy
gjq11UfygfPHWM8mG7E/BxsTR85pDm53Yi3Xk/qE/b1jAnW98SafttZK9ILH
MvdWKt2euV07d9AP9xk+mbThttkfOxv8I+cMePs+K/RRp7nir22PU5+fdh17
tZ14T5vSBfxpUR3iuXtm34zbcX/xujmp6DZ9aIduxcCy6Bu16Sv+r827auqV
NsXeHYzA/+7sS/1sWza48eA63O/hBmIOpHapMuvk9FLwfZX/PpvzruhfVmaE
s379W/D5yTmmbuxnzvuIdyIfNcoeRFch4yb92ceoU6q6BN77nDmWcsG74not
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
Ban3NgTvtbxKAMdzKkg877qQvoO76P1YfjKPWusVi1/NLAQe7OBNXJUMT0nz
TYO3kDic6y9UGZ3SLjOw15fd8XdXp5r25yA8ttkriK9TmLcppdMfqp7fxjnK
CiEueU79XRlt6j0bzZiXOL0DOMQaJ9FPZrmMHre23JXnPaCxmec/RD/k0Ep4
Zqd34Tee2DFn9Woj8I99+7nuXRby6DLvTD2fIPZDr23grv36YN++7GXfdOtM
faEP+lFK5h/2v8Nb7OXOWPCUTReIk/to4JNW/8hnq2fhL3vOJF5OXA3vbcw4
4qqsGfz/SjfhJy0uNvAwdvwn8HNj7VZwql/wEDUVXUHjeRvwy2H+IeJzfsMf
UR9chE8x8A/42PHX4C+T2pG/1dzP/vlm9u8PPEQ8G1sQ/zPEF/yhXE/e77WX
9Q4viN2+MhY91WjmcMsPpvC5r8ej4/Md3EGf/I3635hHwt9KS06DmwaHs/7x
6GcZL7/Rx1syorj4nA0LyVc22/M8MidQ735TiP6G2xbxeXL3ueSd93rwnCaH
EuffU8CHMpinLlmvpp4Wkw7fq9FAkW9q25fbiL+n/yVuTV5NfO/0k/pm6z/g
pMsiqRc1L0q94qLJG65I/7leezD8oeGl0TFNzhZz6IwM9FnkVZeoz157St3g
wwiepxV1VqlsGHpWlw+K563eQodM/lII3NjwIe50YZ3k9PX4QaeW5LErP4j9
J40Ab9J/XIKv4GT2AwcHgPfcdIfnP+e7qe/qRX4V9Rj8t9lrcNoa9Mkpnb4Q
524x6011C1OfmNKVOGCK2X/VuRyvnw2eqo0ugR3f0Qo7vNyca1lPxz+tak/+
P3Y61/ekDvvtR23sR49C9Jn5VoVvsKg0+lUWO/gXsQHsm7AdxPs9z/qL33sS
hyiH4ukfO3GSePRjdVEvUj2aUP+ZHUI+vak7/MgaMvai3Qjw8t3f+Jxi9cGB
knKx5z+rgk8mP+R6V7UVdUPJu3CIeJ9Mfmj0OgyfP+co9d6Xw6jflC9GnaWN
hfMS1Y/1yQVnVV7nwoeUb7Ce6RHwIy5thX9QIJb+Gq08+j6/sslr/nUU16N3
PSjwffVRYTG/U/al30Q6WlnUVdTs0cSxJZN4DpKF+nCRXfjr1+jkWzauAEfZ
+Zz+6iptqJ+/qGbmEQvE+VNvBMBfszBn3PjaVuwfqcZr1uFTGbEuSnBzzqtc
gX3gCL5g8TwIbnrG5N2tSQQvjEPPXhqznOcw1MWe668GPuvHvCEtcxb7ZVsM
/PUiv4gbFsPLtXwtxvnddwo+0+2j5D+jUkU8ZvGtg99zOw2/rEUt4oeGlXgu
OvUY/b+L7KNhc8GD1y9AX1s5ynzxuW/RFZv8knO1Nwt+ywD6rQ3nU4KfZcm3
kX6WAnbW4v3T63Gd7W6D/9ag3iIfb0O96tpJeIJrwuFzKBbqAVW2rxb40ybm
HkkdN6J3+cLU3x0bRfze6KXQE1C9Jwh7Z/F0hm93jjjB4viKeoe/C/3UWT/I
v+uCp8mra4FzD57IeR3zlz64gZOwF4Fb8fv1z8Nnuv2Zc/kAvMNQ8pD3PIhi
fzyvhv9cdAH/2MmVeNfDmvN4dH2I+P/tluL5aA1tOK/vnOnv9uoj6s9qTBZ+
pV9r4p2/4MvalXrELyuoZ0oX9pHHhs8GR39n9jXu+oW/L7KWOkoAcy5VpTL6
v4uIs5UM8ivlTV8Rn2puywV/0NLoBDhseiJ6veod+KxF3oM/jS5AvLSqBfhe
9yn+4vXnTT05R3Tl1fQU+sV638PvfM9n5nl7wCNd6B9SBtQU9t1Sqi5+59tR
dL9PMl9Q+3cfe1S/L/tn7kPizQ/1xXoanW6L86ctm0Dd90pj9kkg81+M/zpa
/+//ypBOxIfdXMFl44lXjJXPxPVLB5gPom+fR/0n8QP5p7UDfNd6X6gf3qOe
Y+lN/73y+zI6KM13E8/NCsC/XnuB/1OdWKfXtcEBfjw0/Qn96cad6ui0nOoA
38C6NOv3E30vOXQE63bjP9Zndhnw4Ee9mTO3G91Ly+jHxCv3anM+e9dBf2u9
yj47d418atIb1nfmYPbBoOXEZ89M/ZRXjuCLjS9wXlJGiPniRnRF4tyORcS6
K9alxbpZuh1DXzJnDfjF5t7Uu9N6UDf8zffqodW5/i+bySPLR2EfZ90Et0/+
yfOt88RTfM+W5nbi507mwOlVK2MfxnWGbzA9l3x83HVxbuQ179GzmlsC3PPB
DvQrUs7gt9Oc0d3pUY3v92hFvPqE+fV62G/6C/5uIg+5avZtZpXNEfVMuSH5
WG4U8fIGH/LGumHgQ6u98LPPh9MH8CwAfu0RWeSPltyV3H90ObFu+lv8mzTC
hf6jc6uoZ5yPBDd9KMPHuTgHe7F4ocAb1YhQdKtq09+rt00kDv87lni9wx/8
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
U6crHgD+Xqgk88dsN8KDiCxNnuaB3otxxwp+3Och+LkLLcBLencVcY38/BR6
JDGp2OPMmoLXqc51FudJnYAOpUX/LnSWjGT0L7QVktiHlsOxxOc/Fpn9Y7ep
h22Yir9bCg4rLfgG/+hwW/y95TP79HB9gafqv5/yPDfk4TrtpuDfZz2C3/Dp
GnjreZM/7e7N81laiOv5HQ0fzzOOODb3Lv2Pm1cTny0+zXOoH00/bOh9Ye+N
zUPIR3z9hH3WbfJid66/Ry92Y17yq9NPzb7XQTy/6ZngtV9HCXtg6eg4l+fX
CPzDaTj3Xe0b56yiK+f6yFby3V1/iItimqG3MzCEuPKut6kbMR7+1Kh4+Lyn
mQtlGF04D1euw+8aNAx9I/9V3Ncu6kh6EvmmFsKcENXlODiqN3PF1BLzPMXn
fJ3CvmvmhN78977Yk53DORdN3KnXnjbn70Tu5LxOt6JeUxE+gTw0Erx2alF4
1sXXCj0lxacZ+9emA3pGlzzBkXaavGuvKaLuaCwPxs/mQV9SWnnMWnz+G/jN
+gV08OUy5TiPazqQt2dmEhfX70neUX4un1sshv3WPj92uOod+qlm3cQfdnlM
fr5mIXhHnjbw2Ur8g4+Tv7f4XMs6DZ7M3wzql83Ow/NLimb+SpwveUtMEvU5
71v0dfWA167tWSSev5xYi+v5fZn9O2Mp+eH4nf7i83QH8qm36AepbZLIH4pH
oG+RA19GnnCY5/C0APFqyF7sc5sj4LeOZ8BryjPXTF3RC97DwFbYk4KXwVme
FmBfJJ9ivmDndtRFktE/1ivF0W+6ezZ6Ej3QL9LeZaPf+ygUPzJ5mtlv/YL6
iA36RNp/C8Cneg2Gz11jrrhP47G90CHQTZ1AI/ij8AtaOYV89xp6zkp4JvG2
pTnrNeAa+YSlh8mnq8H1ahbytJSR4E29OG/S/nDqHHvbgOd+XEJ/hpU1+Oyi
ccTbw2awPwo/ph9tYD76cj+o5DGH0aeVFt1lHuKFcdSTpwShRx8FvquW685z
HBrI80j1MPsTyoHv3fkODlryGzh8oB/2YNQvnmfd8uyHwyfY3/f3kbd4vwK3
yrzAOcxn5pG1nsDf+Hkf+395uqmjlc46+r3P/R9er86vTVwy8Rd6C7cqE09c
uyjiVyXfYbO/ubuz+JwLT4ibWtqL+1HydSOuWG8PPnh2IH4mXwZ4azNv/Mbn
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
vmxizpfmS98oaWVT9NohWSJOlKMVcf/S/Z3En7Wvcf/HDoi43mCtglvS58L/
h9bivnPnoHNZaYZ/D1HB/0P+ww6aj0BfMlgC16yshn0KNiP+XLOQOObKAvo5
RjDvSQvQ983EFD/xbwl78GvWOfK6berr81X0eCXoFHmNZGfq1JudEfGUkjWM
fZSp58PGfyG/5fyT/MCp5eL7paPO5Hc7rSY/3X8teccke+r8f9SBp+npxlyU
Nrqut8YR8HHebvy3zRJRz6f98S0ifraM55zFn0IvEpkB3zHXGVx8knllWsNH
3N/cbTofks75W5FF/O2zWKyrmtGR+Ll9ILrfmG7wbTvIL0uvk9ATrPAU962F
DCCe8lwPPlNGCT2HyZp5oyarGPBXG31O938p5C/ntUa/ftwfe+P1g/u7moM+
uVE8vJCzXlfT9Qi62GK7wM9+xDlS8SHEncn28Oot5oBLN34mj1oFnaxy6gbn
9nIr/M005tXJT0+gYziKTlENRR8o9yeeUHr3IO7sTJ2iVJrnl1uQhzOdcISn
vTpLrJ+h7BHhDxRz+pGZRrTh/Pf9Cn+XTb9HaVdL+NyvC1iXc8/Nxb9PnnLe
E+j/LSf+ZP8fuo/f7OUHHyZTp2N4QJxrWFgX3dV/64mLrrfyE+t1shL+u30q
zzfkLfrHa/XZn+f1/oERzCGWC2PIRwSOIH4MrcNz/7RCx7C7O5//+AK+81kr
cMy2VeJ66krquE2nj6EryTsQLn42Mk9evbGYet6pO/Cnd/YSJ70O5z01vEH/
777M7TAUH028mYXdVaanMT86w5d9fewd+sEBfdhvFYPfCf9b8wh4wJL+5ibv
RPz81Qm8r4dZ+M8f5BllBVxp+O+FiFPUY9HY47o1wKPp+wR/YLQIRTdXUfcX
ykPwSQsb5kx0nUu+b4wBfrBzN/zZMeazKy//kZ/54ESerLQr1/9egviigUpc
MhA+WPGhf5SWtYC4I3YVerzKsfiNWwXw2cfoly316U5dmDN9A6SF79F7tf/F
+n976i6ud28AfrGCXrcQFAWPEE3/MNUuj3z3zqPwag1dOf8LOoo4VHIZiN/r
RF9QVTqD3a+/gv5mr+FP1MK+4CctDjyV21DwVWrnsdgXt1/giB4ryWu9qIKe
3oV+nQZX6j/UCTfAp93p12888JP7igkEf2VJvN+v+Tz/6c7kw+/FEmeM0/tL
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
tSWTrQ==
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{397., Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3.4540414810180664`, 709.1338500976562}, {-6.779836177825928, 
   772.9162830114365}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7742074421014824`*^9, 3.774207778551791*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"56e8c93a-ca16-4b93-a8d8-bf9f52d77d10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"xgen", "=", 
   RowBox[{"inverse", "[", "zdata", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"xgen", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.772990158282954*^9, 3.772990180979749*^9}, {
  3.7742074527220826`*^9, 3.774207453057189*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"0a2c37dd-9fbe-4196-9c76-5a5ce28499ca"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJw0nXVcFd/zxlfFFkzsWFs/YnevGGAiYGMsGNiJieJid3eujQl2oaxit6Ig
5tqK2CJi/r7O+/78574u3rv37DlzZp555jmzRQOG+PROrShKttKK8u/1f/80
o3zsqf+92g32P5PX0XXC5bXHieP/XrWcdz//e1XKnlBO/+/FulTs27/35vHt
af69tyc/iP/33njz/aV8rlHLJf9eVbcuEfK5u9sey/VmFE7896qvjLLlc3VP
vZO/pzEGaf+uW35op3+vyttbE+T789KvkNezn+X7Zm5/+b4yYduXf69Wn5Gp
/v2++Tbsg3xuQpFfcv0/qxfK/1/Ud8nfD07g883byufVH8E35Xovssp19Q+X
F8k41rXYI9f3ubRWvpcx1RH5u9p1o3y/97IT8vfaOu//rJH3Svl5Q/+N21x1
yfffq50QGi2fS99OfsfKPnmr/M7u4qflve+09fK9S32Oyvw+arNB3o97LvNt
vusm1zdar5Trm9XHvZZxVDyZJK+5H1yX639q9UC+X/BEoPx+/Q6t5ff/Lv4o
v3N2xG/53JfiZ+T3k55x36cLr5Tfi6h/QP7e2EPWTSt6iXk63nSp/P138b0y
jpqNV8vvrkk+KH9vtEd+V0037o28rlx5S/6+faqsq1W/5iV5NZrHyfdfNZHf
0wd2ld9TizWU+7BCH6f+tx6aU8wLGdejAPl97VqBV8zDtK/ymvBF3hsvmsn3
1AstR4q95But/3vVhl+Q+VK+Njkp183YS+bTXJ4uUn53bLTYjfZ4Tor8PU8+
mWe9SI4L8vfPSTJ/Ws/iLeS66/6Ycr+le8rnjLvTsFunjvJ9NaHUFnlfMvMp
+d0pVVhP9+KynkbOzGLPeqNlHWQ9gqNlHuzHBbjPo8n35H3wV7kvtV3pHfL9
+znOyt/HuF+V+9jzW/aVcuWW2I+V0FPsR9WWiH1ao+8cluv1WyGfs/tHyjpa
k/Zulvezd1ny/x+nDhP7UHq3kvssXkLGb7zOIOM34lONlc9tqzFN3gfmlv+3
4n7L9423w/j8Ug/5vJ03ray3YqWS9TZuDR4u91llYXt5nZLrvFwvyLgt83TS
/zm/k1/8iOqfJP5Gv9xL/m6HtRV71Yv/kv1rV3N+L69n9v6Qvzesx+dmpXyS
768z5P6MUlNlfFr5rLL/lIQr7eT3a2XGn11egj/LvUVetaYj5Pv2fzllHHZD
F/FnxonB7OeeB2S/WdmO8v4/N7En1S4p82c1ztBGrj98lqynUuONjEsrkVP8
lJWlz37s/tty9lsbeW/m12Tdje42fnRPgvgr5VVn7veG61P5nVXZPjLPg9fJ
dfyniv/RfRIvYt/p5HdNH6fF8jp4C/7qV5Zx2HHx6fL5DRnFftXOd8Ue7VPP
b8jnG6R5JO+7fJfxKicLy360Cy8vKa81y1eV769PN+rffaoPLok/tuKvy/63
PvY9JNdZmIy9Zzwt1zezzMVe3zXErv+0F/9gry8n/sEoO4t1y1f2r3wu5Lv4
A7voO/l9a9Mz/O0gV7lfJZO7jF/Xqh6T+zqS8QH+4ZX4Qav40AXyuYUTZN9o
3p2Z1wWtZD31rDnlelrXQbI/9CVrnsj3bzZn3telsJ5TNvnJfSaOFX+lRk5h
nzbNuEbeV10u92sMrYh/8W+DP56yc5Vc33+C+EOzVbTYl1JgntynVuyxxD+7
3U2Jf2qaTeKP7JwD8UcZN1yT77lWv8/6KYHyPueQIHm9/0l+31jtw/i3NGS8
PX6Jf9fbNV2H/fc6gv/wl/HZ59Zhvz8LzZLrds3MPo4+JvNpXU2S+dTnXmO8
+VfIeK2TWbfJ+/RLxb/YkV74vw7Nj7HfU8t6GctLyXopA4vGsy4+4m+MTM6y
/6y0e7z/vZqbcsn9GpumEc/e1JDrGb5F5XrGzEzyXrsej7/8M1b8iL6oqeAB
a31Lea9V/iJ+1/6+9Jz8PXO22+yjH2K/ejdVxqPtPyb71HjS8rL8/flG4k3p
MOLNjIziP9WWi2U/Go2r95F5PDOm2b9XQ+8MHjEzy++rrVME3+gefZ0E3xTI
z/3WbiX3q++azP4e+Xkf+2sv+7fI6o+suyb3pxiVuN8H79k/CaFiT/Y2V8EH
2oMvsi+tDo0l3hpZi0m81X6NkfGY5xvLePRBSWJv1vsjYm9q0ht5rxwMl/f2
jN/n2DcDmZ+mA7CPQ5OOsA4n3sr1mm/+LtcrU4d9mqeVxB9l/jXG9yxQxqd7
PUqQ19cPk7GPrSHYdZ3Z8vtjnMW+zYAy2PfbtPJ5M6JQMvu/DP5TaQJeOu68
TP5e/Kzcn50vgvXet4X725oIPjo9Bnz0/LDgAD1lMngt8R72Y5YVe7Ie/JH4
YA6a8VNeyx0VP6NMiZd1MwaWAg8u2in/r+0cC55SzrF/J5wQ+9Sjlsl+VLbW
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
kPgHfaL7WPqfT96PXuxRALysv4a8r6s1+ruortjvcBfyHlccOS+pYei1zWfR
NzRlN/H16jCF9w1Gz7dxKvnnYUq8PYd4WwoxQC8cPZr4ZHZf5h1uDodfqt4Z
u3HlK3WkfvSr1pr9I37vt45+SobbqDO4TJ9hzZAg9H/B1KtKqdSrSq/cyC+N
m0s/4JWbqc+QtMRPl3vj12cyf0B7KHvi/14n3R/HPKGGl0Q/EO2wMnF/VS4m
9C3JP49eteNccEvMUvB25j3wWJIFdQ1hH+gHNXMz/WS8rxKf2PZAz/74B/pI
6z3Up+7xEXoK6YclfRb7h9L3Zs0w4lnfluCNClvAG0sekM9umiTsr/rJHOZu
N2+JTuZACfz0iyH0Xy9aQX69TTN0Qs8LsDdHK2A/YseHi5/fvqDvzGn6d+rq
Mh9F328P/QY6xIL/yycSP2++I/ZP531MPIcqbh7n708aeEffnLjvJ/M8VJVH
Eje4quFDukfQPyDnGbijYxL5r49K/XMC9c+a8weIb+ocZR0aw4+rCxV+XP9H
3Gfp2Sr4ktQt5OVfPmQeSZ1f6HfuTIH3+ZpHvHyKeQjyNxvyZQN7UP9TWBk+
uRt8sjyihbj3qqNx6Bu+xYrnl+obinyLdlp97Iv5XPC+gYmoZ5OMqq3GPvWF
/zbMIr5rS/86VWgk8eXdtuRP1WfJnw6hT7ds2py46iz1U5o46qc0SRHYu/Vb
sXeG9viHLm74B3v4BfmUGfF6bS8Rz8ubCjmPr5xEPyONtlT07ZLbfKCuw9qJ
+YxXTpBv+VgPvVzXTZzL4SHkbYbgNyWzxtTzS87422sV4COS98KfprrTD8t0
Gv7Bhb7D+jM7yb+uG0z+dXQC/d5imsDvfS1Dd+WB7kPXMhX7uSERnLlzIfxV
aSr2PGk4ers6dsQDx//Qb2dWBPnKyxPg6Y/k4QePH+b8t9qCv637Dfz83Z34
sKob+chzxeSn/CqjN4upRv5vZxL58FuD8Bu2ZjHsn8R56jKUfKVXJvqE8czH
Vm9lPrZevZ+8/y1z9Es3ytF3fbkKLt6wH//wIwN9pVkK/tHlCjz6gBTO7/fP
xGPm88hndh1HvB9xH7z86zz1Nf8qkU9d0I1zvDsbXfCfPdTrnBgo7Jx65ErR
j0+77Am6zz6fyVc2i4avPzobHHp4J/PK3OvAQ12nPlL9jfpIdcEe5n56u3Lv
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
NOf7tj7PectQ+qzU3YFf8SjmvKXK6O67Wwr+WrYdD//ij/1T307E3yS9B28m
3MEeF5xGn/d1EPHC+CH0Ty6fQn3D6lyhf9UkMm9M8mLemMYDPbT0yZx6jLMH
4d96MrddnnOG75U/E7+09zPfd8F54gNjU/h1PfUJmucF5AOPVgB/uhkRf4d8
Q09/7o7Sb8kMvsP5Nv3UIvbh51qfFuddavQJ3UE8/IgmUOFH3tcn3zSlB/rZ
x3HwAScWsN6xVsQLrq3hx3z7UCdYabbAz6oDg8Vz69KT8R+vlPppBwP48Nv0
g9dsox+8rlOqiNul2jHgSvsU5jidyqQPzVT4O+1N+Du5bgZ+/tlm+gKs9yc/
cG0Rz/tgkeg3pp/ah/gpcAQ6ky9fsVOBvtixxj34ewl+TdWcfkFyJ/SHqoj/
pz/cKvZJ1WQAuo+H0eJcqxbUB+9XoZ+5frclupNHRugkT1Vkvyo3he9I/ocf
HBaAHbs2H37knIr69mUF6CU8BuI/WhfS5+1vAHrL703hL+vOgc95/J58Ra8Q
4gaXjjxfHZn9eVOReDKePtPaSeU834gazM9dPxB8F/gf8eoc6ns1nedTzzV8
Hfn/6dM5V/Pa4i/C7qMTHd6CPNeOPPRfM2eCnzLvohNK9aY/RagT/n7OIV5X
aZRYP33jx/BBTrb076h0EH5goDL3eRz5V821bPLJQ6Yo88/vEk/G+fL9b7YR
9ZyaFifxIw3M4Tv6/cA/LX6MHm7PAfTrpQfBgzky6+3VlblynafCK56Pgl+3
2Y8/uZcBjhj0FntexZW/f2eBXtSjEXrElmuw021OU2/TKAR9lXUdofvQjeyE
TuXIeXj67cbMSzRvtFCcU81L6mXc1hFvD99LvOKL3kzzW0N95OU48MafpfCR
sb/pR7yoBvUH4+4zz8XzPnogv7HY7TVunL/niv5vhR88WPIK8N3TjeA7HX0K
pLEnyLOPshX8hi6kO3q5Nf/wd/s7odfs/x91HLvGUg831pp6kaX9uH9JltiD
LT7Y6b1l9CcYyVxS3atM8Mq/PujLJzVC92LURdgxtUcL/HjgPOaMds6CD91W
H3vapCn21yOW+ola9rzPuerYpZ01qfccsgg+cOsU9BYLj4J3ZFvO1+UM8hQ9
XVj/uCl8bt2x4tzqav2kf8CSZpxPj9fEjUYFAg+ogzzpP3Z8But3or2I79Sp
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
j+D/YvqB2j9J5KNsW/aVXWaeRelVBny0Ngoc4tmMePoaf2Op3Tj6H/X3ogct
9RDnS3eiAfPlyaHwIXMy0Is8Py/qAWl7MH5tocy762cw765pEYe/+9Yl4Ps3
LbhPKWGCX5V/GuPPFNoG/npCY+aEPczxq721B7+FkAIx36PfoeCvM7oLfFyT
yuC38k/Ad7NOcY5nLEFvV7MJdWiV+vDxa5uCrx49hX953lacR61HP/Dca1/w
6GR/3n/QFO7D0Krg14Yy9UD2E/D7bPYs65qpez3ORNHffnoaP5M/QfDf+88y
zz5tLvMAHzLQocY9hLf414/5uJ38Pt1//D5pB/FSV60euq2r6/AzHNUWP+tX
P+i33P0Cni0tEnhIn5UNXj4/hue7I5h8/W8M8wdl48lffv3Buy238r6/V8Pf
6pCWz1dclvrENIV6f2sjof+QLPaKuCltCKReSgwlrq1PJ76uCieOhWcwJzLt
G3hs3TXw2aeG3JfLXfC/D9uk+sRe5Hn338X81t183neOH/2jyjuZ4+3ZBZ1s
3YKl4nMN8ccH92e8iL+GzvHwcRUmUq+87YF/3tFHvA/NBL6P5M383Ntq5NEI
9mZKjgfQT5Zhr4H+Mj4qsp0L/eUVZ7k/hfDJcrbKJ0/ZDv8/5QJ67UsXiB8O
a9nf54feWk5Ab63MKiHv6yrCs92eiT/p7PncA3vnOeKfvUvDiB8PwPeB39jL
c3IZ+WNjNz73uFPo46J3ic+vn1OTeDp7C/cw7R1+nY8biu+jm1mW+9h4JvG+
cSZ/n/iTPLeyL/zdN1nl7/AbN9TB70MJuCf6g/rQTvjqxL8HP/nOh29NOAHP
0taTvoOhN/4QGdXYNzPrcGPxT0e3DuLvCxvyfAfv5vludWYeI7GUe73xG/Po
+7ZyT8v8FvozybGuwJtKf3w2ddq93Pe+/eHPDm2Ad/OgntelrcOH9YQ9/n73
/8O3w9Kf+dawMZzbbw9E/1frbMHzvvWPflX+eXD/88/waKkJ6CIf9uEc/5rI
fezHfiT56Qj6h83gr3WlJ9E//30H37wgH78Mt37oJW5f5H6bfYef+/KWfGkw
Aw92tKWfbRzEualyD14115I4rl+P/qi3E/rZww9EHJevPxX8otK+N/4o+1wE
Xtd1UkS80szPZJ59RSI/ZxL9B00s/QfD8Jb0tW+7cI+HX8DvoONv+iW9l4i4
YDBtCJ46OlycZ0OHYZznHWn0aX6GiHrBYKLhfOVfQS9s+QJ/x3351GPnfInP
aYHw9cUjwWtDjOmHd9tFHRj5nPgy99kjnusF6tATHTkvISXkpXh3dPrG64k/
nY6h01v/H7h8Z3fqWduL1DWP7sPXVO8Lf7+tEbq9713Av8U2gi9R+iXRd9j+
D/33kdHc75n4x2pKH8A/y0nwNkeusK/pXwn+ftmq79ez7ui5k03BGzZxIg/q
L7WEVzuzhL77u7r4Y3r4ieerqzUdPPKjGec/rAHn3wF9hqGOqs84tYDzNHkF
/YtXtYkX3hb0m+Of8N/XuwY+vhHEfT87EXxddzfP+/4r8fx0vovJD2encZ4P
q/q07vTrFes/xNu8zeDxRv7UE7V+ws+dGkG/Or8HeuG+fagPzw8nn8xivkyJ
VefLwt8IXxDtYgtwd3IjeBu/euhjWvej7jgUDL6b+hz92Y/e9M+9/6Drs6jJ
/TmdJfzdNQ22ir6Fcoq9jnqrMvBRgycTZ6zmUn9d+gSf60b9oeuWIuZ5NBmN
8Fc4NgH8WDgLfi33EPzOyEHUdQ+70b//fB/8UKMF+q9hIeo+uVT0OyvKMc/y
mn0R8qb24MlnGeTHDzHk13cRxMvwf8wf2+6C53cczrk12Yc/65YxnAujBur8
ah75L7kPuKSlMTzCBT/2sTb6TTxopSPPe9tynwtUX8KVifggzD2KHurdMfDT
7ibo9palE3/eBvL/tZuAfm9Xe9F/VBqn038cTB6R8mTqvUrjRD4xeF5kzudr
C3iO02HwZy/qO4t/VjnXV/zcoaXwnSNbMEf2sDbz9eVnoz+dMo3+QWBZ/Bhu
b6b/65ACv5Tkh7/w4Gh8ECe/EPhKazOb/S71xhCvG9pzvgey50l7y4/zVnsB
z3XONPCCEf5i2o4W6L29s+gPzzcR51FbxdtdfK7q4cPE33v9AN//80YPXVf1
gzjWE/z/3Uj09wxpKfgxPB9J3u1fhXnV7w/Abzsqgz+uVud+Dh4H/zbvn+rH
upX75/Mf8bD/AOaNzrrz+xzt+H0/X/M594wUem3tw2jmO6b1gNd1TKVf8uMV
8f5iLHxQk13Uy9W18DVjo+BrLs5n/vDNMOKf/Tb085ndmc+bxz4v3TD2ecld
8D3W3B/LPoxhFuI8am71EfdLt/AR/iuba4DHUmowlzD2LvNDPsXwVSve8vN+
3xL8j376AVFv6frhFyo9wy9U+yUZvX+DQHiTQcPRMzVpT//LpiX43OQg+KUS
/nbS5G70Q/Jj+Bxh7LWWxt1i7tpxM7x4owtifkTKDQgV/+ykAS/vs6YecngO
XnKdBZ/gyjyMkt8WPXN9U95f2arc010J6BHebAHPBowCJ1XxhE8e/x/z5TOm
ie8jX58Jn5Y4lnMzdC39l+NX6ScGu7BP5ck5+oLfK4EXb67j/B+aTF9/1ktx
f6S2Nugjk2rCNwxtBN7tPxQ+9FJXnkfxGXSH/Y/Cr0a+hr+YuB49lvSPn9/h
N3VrtaXMT/aoRv513QxOiNdx7tOimMdLYw5QvymJvQq/LxGf22YRn6tKfJ/o
3cTbtleZl+39H3xZ3ir+++UbiO+BxsTxiw700/17ivNi+Dpc9IP0J9h3KPdl
36EyrbCu+P8uXWoqfk8+OmL5lRmfd8oGnoeSga7rXRJ11KGuvN+N99H5lw8H
T2c6UlfbT0EvtBS9nLILvZz0cg34fI8H9ef+k+hBvH+wRy24FX92nY//weXz
6J8arka3+V31O3LZxlzu/HrM20+6Rv1dwYg847Sbc1LRBjzm8pN62vET8/+v
H8EfVb3NfV+RR/z0Xo6eqsQYff/i3+CBdCvy99k0Ee/1URbneR9/8O0cPpX6
NjaLOLToKvky0YE+auIpcR4Mh/APN9zDP1yu0w788yRKvC+lHP0O/a1iPseq
ueC0JDf0DZnPmNdyzGVeIN8cv+X0LeTx08fon1qEwhfsK088r2hCP2/HAnDd
UPxfpU+bxPnUHKhOv+PrI7FnSXukOb5FXoXMHwxdA09qXF7kJ9kzhHrjUhp6
x69W9ImfH6bef7YcfVAROjGp5Rz6P5nLwPtGa9FLzT3D+Qi2px4uj+5OH3BP
4AbdA1dRD2m7f3MT7y1upsjfcksL8q2PJXh0z236RvXmw1NnR8J3nLtBn/vZ
YfQOrxyov53GMj9/sC7znZt6EF9HnOJ8FsWCRwLxK9WMU/1KF30nfqZN5Hlt
8hf9NG0jM55XnXh87PxUHmvnIBE3dQGLeM6Nrcg/+Q/QV4+xwi88OZK5+SX0
r3U6+tfaOouYS01qD06PmUF9PTJO/Dxt8S3mLbIL6I+WvYk+f2h3+rt1bJmf
2QmfqjtewH//4A//vYMO/GXcEXxsAV6UIjQ8v5TdfI/KvsyLb4sQn1PKc4C/
bhzFObMzQX+yajn6uIJd9MdHVOIetjMFR+2ahp+d3IB+UqUb4LzHB0W81+el
s5+0fSXwuNdt8N2UEvJDywbo+Tasor4IxAdJ7vmN75O0W8RjfSVz9GXBA3ke
b3Pony7X8P8fmgmOXDoPvvLfF+JdV3fy4OkjAqdItTPA47IefDSzPfhwtSf1
m2c1nms9LfPne++JeQnJO1bww7rVc9Dfzp4Pf37zo+CzNKfxMVJS6qB3yj2F
rro0GJ6rTiY+FDbJ9MsNXbnfRaeop2Mkvt8QR+bKHjyA75n6kH5f2HX6Xfb4
PSoO+D3KfaPhk+8Xcf6PfOP+hUWDp3L7gi+m/hF+BQbfccyD6+05Fy0ceU4e
NZg/nGxO/tpfibo87y3fd/Uj+Kp8LXze4FDul+kj8OH1ZuDOl+hvNPap4Pc1
f+HjT59DX3LhAnzUnWz+f+dd6H+dd6PvqYqe1NAJPamcQB2vP5kEv/91NvxI
dQd1Tv8J87onTqNbb/Ien6DfPuL86haRDwzPyAfysgHMg8QU4ktWNBW8dfU1
fJ2RyvOdS4LvndUUvz2vA+Trjf7wC2vmq3p5+g/a6XPhR5fbEtdvDSon+lfG
TcGlv5j/UCLjmUsZN4X9HAsj1X4Numrdrh30J11Xiv28msouQl+mbFsh9GW6
vWXAB+/qUB+OaiHiqebuQubF7fBXktPwV5Lq07/S9qV/pSuCN5Cnx/C+V5sR
3y/Nof6+GYC+8u4R9KLnG5FPX7rz/Fq1Ah++6U7+NF/M3FrYOfzInZqL3yMr
qo9g/Hf47wfDuXcuf+C70hqIOk0/BF5Zyi3PvF9wP5VfNlCf/G7BvPY/a/oD
l0Ph3RfWoC8kt8Z/oKo58y91gsCnCRJ40cqD+uRMEe/Boy96koF/6D+XoFeS
lqJXUuIGM1fU6Ar8fcMt3IN9i+gfWp0l/vzoyHt8yPyU7rgP+dN5GOd/XjPm
axo05d8/M6K/sqcfc/ODulNX3vCH7yk5THzMsaI+dhtPvzv/O/Hoeiv4mC9f
6GPl3IUPMV6H/u3UCvY3TI6nv7u/H3X+aQfuT+R25lP9Stg7GlSRuNnPE57w
xymBVww9X4t8rCsbBH/V0gL9ld4IPdQSF87FvafifSm7B9NvCCmDnrAFeUDK
Yt5cN6cR+CCnC/j31WH4Sa8wcK1pV3jJ3e2I+7O64k949yH4xFpLH31TLfZx
GMGra7TV6e/NDkdHvCmAc+gFP6u7mYI/W9sEdAUXz/D8ao0hXs3VojdfKQvf
Z02TToK30fkeoz6roFCvvjRCj2p/kfdX4Tc4O0zh94f5wcf+Y8+GXIdzrxzA
P1P3YLvg3/SbrMizm5pTL63rrfb/FsHnZCfCB9l2Ro/kcJp4egl/Zb0T+zqk
ny/R65ReB4cuqcjcYxZ+G7r6S8DP9gGch+brqG8mXQN/9/ai3qiC/5XytTV8
uvd88tOdM+iRbDagh4/ezXsq0NLP9FmFHsDLBX33wXB4nOl/eQ8n2fdusGXf
u3w6gfnscy7U0+Hb0A0c94Kf+d2a82VWR/X/uaH6r9HflFt0Yj+FtepfqJ/O
e/R6K/SPmi0T+H7pydRv0kbm6kP9qKeueMG3vNyGfiK1Ev1fdxmc0PA8OG30
LO5l79ti36/Gsgd6jR1RQl+mfCkr+B6lymp8OoY15Pv2yqUeKVbnu2+sJz6f
iKd+m7Gc/DusKn4LBW+C//dPw8EEMe+kt01DZ1bsw/xsLQP4t2wQ8Wt2J/iI
pe/oP7+pjb919/Lcxxh8bfVh9dS9SFr0R2lexI1K9ZlHMu4IDlv7EX12efYX
aXv+x3m/nsp5t44gvsTOhp+9OE7le53g9wrs4Wfre4GXZo5GP/O5FH5o3nN+
38Jn9J1r5Ih4ojnBHKH0tyP+aJde4B/vOhY8WKYLevmj+Ldrzc7TH+7mCd75
ep19Ba0PoA/J2Ez9E7eF/ubptuTvVyu5H23RDxmeX1B1OtnwUXb4axg+2oBH
boeyf6V3W6G/0WwzJ/4cOMK8zpiX8D8vC1W9xQ/y5/BM+J8p5Ti/w3+AX74s
Efv5pM/2QqciW6p7ypbnwrcf+IJu9VcG/i0Ddop8Ji/qwnzJzXnE0aqt0NXf
SKVebk49Jl0IQW/bth79l3aqf0OrP+TX3eyfkHwWiPsvXYpEt1K1kHwcYU/9
Ue0zvhizwvn5u37iR7rsEfmywhT8hPrp4Acm1AGf/MUPTjOZ+Ubd7xqct5Aq
5LGdBvpJ0fvpJx35S/7vNZ7z8aA7f7+1DfGlVIJ/LJ6Jj9cbLXoy6Tf36FC8
yL/ynDDyb5nx8Efru8IHmlYl/lyNI96P8gGfBU8Fl+XnwI9W+8D57UN/VEqm
Pyq5uTOHas0ctj4jCX257Wz0uzUr0C/eMZfPX7E8fz4VwPPexB5qw8Ca6FlO
LgDfO9QkT+VexC/s8eWx//unVLUb/VrfqfBIaYX0g+PwC9DfX0o9N8mHc+A1
iLpC2QJOnEe/Rqdh35+2bijnVVcdPiJiJbrqry70yaJ6gjNyX+AXk7JH/F79
tAbggcuhzD9mX8bv7yj9aEXjij4rpgZzNS8+wWcttKUPeamAfueFAu77LwM6
nNM1+XmxTeADByxEj5K9jr1Bl7qjF7jTHn1Pk5XksYplwevuT+nTNjem3+jc
ZKn45+v71PGe0eLnSBkbuQ+p+ep8X0vez0z8diRL/Ha0IxKJB34jqAtS1P3m
O/LIrxEb6BsFBxEfJA/xfZVRDdEddmvL/dhyFL7T8IU6fcQE+IIsa+LTiWTi
U+FR7udsT/xJD10ifoy7xn3p3xo9z1wL6uk//0QdaijbCT3sCCfyWdXl6MLW
HhR6Vs1xW/iwq43hg7KC6E/5sxdXto6Gd9oYQb1jvZH+7vun9LOCz3JOv5pz
/8qZ0c/s+x/9i0f9+Pupp9lf0mcT8/JV29E/jv/APEjJbOJARm/m80Yzt6Pb
b8XvX9kfvHU9FJ7eORA83MGbftvM9egMJlZCb3a9M/iq4xfqIWM38rUj79eg
rYAeJLk6eOnMXfrR0dncl1bbwb/OO+jX90/kHleN4b2avGIfj58Z52l3LvNo
SS8FjtENhP9S8lT+K6aY9+aSg16uown16h70P7r1n8irdZuhH6ryHvwc81Dk
U4P3fM5jfDS81+ZA6pEtNpwPz4vk60NduI+bZsGvPF+MvqtOKXjPfCTzF2sk
+o1nOsPHP5yGXnSQnajn9e1uMB/6dS1+owtl5jKPedF3v3eAPOxVkfh6PIH3
WL0vOPkS/Vw5lH6unLZI9eeaQX5d5Yh+zv8ReffpU/jGBcnwSE0q8fwtD4rz
qR09Hr4idgbPL3kr3zfUku/7YBO8/KQH8CuGGOqcE02YNzeOFfHT8Ko58bPp
TPSDlt3pm/Zshh5WXkw+fYwvuG5dJe59Pfeh4s9uRePE/z/sL3rihcxVaW48
UPkTF/Bggi18oY8b9f7+jTz/z2b0Y8Mz0e0M7UA9WOEc/YfDjdAbbCiLX8rD
VfCim/F31IXg76h03QnvZNaZfNoGvl/pBd+vH3gf/BCyHT7y2yn+/uY69HTX
8NPVRRQRjx1rEj+S3vH3Zeuh1+mfRHzqGCD0E/LlVPS8PnvRt0xTfXoOWMFv
ZHfnPC/aLOaeDL+S6btEjYWnqH0ePuPAHlWPZInfeHxP6nPv2/hrPme/qWT6
DD6g1h5+XwRxWBtygvtRvAg9QOw4eIirF+Hrwo/yPmuUcN7LqfPbk5jf1t0f
w1y6+y/qwa8BxJOIIZzXJ9PF99WNzsbP5FsE8wcHVPyfjB5AP6QIf/Iq/civ
3z6zJ/XfGqGb1/YvIu64vgbPVLgKnultDd6vqFDXrvaFr7edjo43sTPxyKsv
85gV3jJfPM0WvzqPbOLXBzfOj3ETzoelgXmmQzfJ08ePUOd2vQd+2DqROnnk
O/DQ73lqnRun7k88Qfyp/p085nkPPrPvd57XoTD6YX268b4f+PC+nw3h9+n7
8PtehzIP1OaRqE/0K6/QH2r5ijprRBI+0tcdBM+p21yTubd+5vC/U7kfcivu
h1xxAvHksAtx3nOxqH81r0vhawbVhT9ehA5IOzFffD/NrSncf88E8FmfGvAr
s7yJP3++4pdzHH2N1Bx9jbzDi3h1qhd6sm7+Yt+2LvUYfR0L+ruaEfR3tRp8
v3TehfCp04s4T5EVqJ8LXuBXvHqs8B/QtJ3I+7+pQYezeRz4obcJ/Z7AJviR
bEoV50aOHibev2GQEfNr757DByxYw+dvWt5V/LlTtpf4efU81H7cPPqTK9qh
z9l1jPqvYwXqpV7nqJekhfBh2rHk73XH8Cdz15Pv7vswz7LZHj8By93wHV4P
wBt31jEfE/te9Pnkvfh/aP/i/6H83k0/5I4tdal8iXnAM8zP64dcZL9cuDXP
88tX4u+rMPrPx9h3K7V9zPm1UHzF30dvEXOPUrO99LXvjYYf8VjJ/o15juwr
sKnLvMI7C/DLjePwc37h+Cr4n2Ov3bDVIo8pnYfweXfmEW96HQW/2l8gPoSj
09EMNCXf975Mn6PbPs7f/ZHk99C5xP89nen/djyCHjF/AXMGEwfyPH2zOU9y
HPxh2HzqiJVT6Hcs60g9WvMuuqQTduDiSPxCNB9kzo8p+/GUsTpxvqTqtTlf
sV2ZX3x/Br5+7xXi75BexN+lIdwHrQX96/MW6n61W8STjZ7gaZ8b7M/M9WZ+
5+c0/AMz2e+tnTuSOrTdYhG/dMYRxLOanvQHjjTkXDbMRY9t6IUeyG86+Nf6
rerbc537POMQdUY1fEN0V7zoy3/D/0Mu14z5k3LonqWPv5mXNXoLPrfLAyfY
jQA/hXnj12G2gfwxrRt8RdeHxE+PWfDxGkfwzworeNveqcT7i6/Rlww4iW7q
1kn20y3rTn23UaIvNDuf9+F2UuBHzUz2C8ir2C8gbeuCD9apk/SbJsHX6uPg
a6Ve1/EryGxF//hvI/JL9D6e1/YQ7qfrFOLtQ+637tUxdf8HPhy6Ty/hs2xr
837z0cnqi77wfC/exW9t8gPwiLuW/urwnfQh39WlP/IrAtx0Zhj85PWmYr5L
V+TD/MEvO/DxKYn9gw2eg4+aXwb/Tw+l7m5Nv1XxvsS961Io+hlSvyXEy7kB
xPfAyejzy6D70RrvJ4+Wfav6R/qhq9ztik6w3WDwqO1x8EXlXuCZel3gY08k
018tmw0/d+cD/aHGL9Fbej5iXinRlf12V98QX+Ni0RfXqAVv8r4lfgTlW5NP
Bh8kv6TsxF94yz/0YHo/vn+7IubtrMeB034PAqc6XZsiPs/MN4IHNPQ7Qh4s
SBB1uS5uBf0LZ2f4uz5NOc8d56t5WDv+f59T8+WW0Gvojg1GB9Auj/eU94W8
aHWC/v1/btwfw0Hqu0grkV+0//ToJKz7wL8ZjWVe6UQl+Kzit7zPjQ2ov9Mc
qL+PbhX1t97osngPujv5zFutNeV5OkXB3/uPow5z34Nep/Z6fHJ2rGV/12Yt
eoulpcxnBzXh+ef34nvsU/m0kvWc89RAUU9LoTb0+7f/IJ92/gBemBnO+a0/
iXo0Eb94afM19uSsTxd4Rr80VuR7Q2Y78n2Gnnpzgj885kZ06crSYOJrZgD4
Zowvn+MdeNTQ3YX8NEH131mE/47UNZo/2xnTb/SepfIudvTnl/QV8cVwT9Wf
hf4m3x1aRh18+C68ZslJeKovH+h3xBYzr3oqgPPW6jn9lPffVd3uKfzOXCPg
69MCqV9dhhBXen6iH6aNQT+wZBJ6CFMf9Fitf4J7wr7TD+sTLs6R7oU1/d86
7eFzHl2hz5MoEVeu3+d5O+/meRsHE/+uNVHxTCz9ivQq9CuOVwAffLHlOV+Z
w/uzPU09vh59vs4Hfb6unAvxPisGvHC/H+dtVSz5psoafr6xGbr5g/iJKiWq
L9vVX+TLMp7Uq4U/xfnTdM6k3plxX+QzxfsF8+tLLtGvMhmJT92uEuqlT+bU
+ZmveZ891+G37ISvsyFFUvfHV0NXUVxM/6g7+8cM/uwfk19PRsc0SCb/d0+j
nzo7XfV1s+S+/WjIfbsB3yJ1h2/RdPsKfjQsJr9H1RL9Be2GEUL/Iu0+zl6k
oFOcl8rbwR82FehnpPaGPz3qCH7LCKN+7fmD+lJ3j/zRva/QQyoTBoAXDGH4
uVu0gmd8jD5Qk62DF91uIP7uWEi98nw480B5r9EtNCqiX9AQ/kXvCv8ip45D
f/NkCHkuPIa68R/4Q2tfQr9xkSv69XmP0QuceEL+924j4qn+Ul/8QAOP8fNj
mqFX8I/n8/X7wecrRx0glSshHp3sCb7bXpH+akEQedEMfa5+8Ul89tZPpY9x
rR54o+xO/FbOO3De551T9a9tif/LVxD/hwRzj5Z4wJtNm6Dj+U7FVy3mI/zA
u8PgirH++IuMYi+AZqURfhaldszz3h0JfrB9SFztZsF98Y2gfn4LTjHYzxP5
36AEDhA/p/nHUeJzxd5EFzMVHa/BJAt8p+kGXzo8VvWznk292/AketGNS9CL
rv9P3A/lrgP3wyiWcziAvr22n4Ru6bgXOOKTGfqnR/vwSd5xET1rmzLgvi5b
8Jcpd5o/Jz0grpyfzPma+ZT3tigK/5xnGdSzK/sRt3OqEZ/KWeMHHF+d853z
kvzi+wa8Z5Yr8J5yM0bo3+Ue/jxv2334wRc8wi+g5BD8Ta9M9AmT98MTV9ah
R8zqynvM34rOuoe6V8e5IrzMgTf8/76v6X/ZLeX+1H9IfLvnw/fVLeMeBRng
ayqkgLerhoLfg6pTn+8t5l7UsuD3rbgBXn06iXruoAYebV8pfOFt9hXq09lX
qPEsw75X9z5iXkhzmP1G2u5L6Udm9IOf+O3C/Eg79gNqJrAfUIk34XzOXs/v
W19CfOq6jPp8DjyxpGvP803qHSqL5zWO8+pUBXwSuhFe2fsa+n+3UvrHJqb0
Fxpf5d60cea5VDvH+z83F7x6x4969E175mJnNhf3SPm8Dt3R2mPoSXutpv6q
9x/x4d9t8tvDcfB5pcfJ48FH6P8HT4Mvr5UOT/jvCO/3VxD1xnaFesCE/dT6
p8PgXf/eY74q8ojK83wk//enP64LV/vjfqOjeA/O6Eoaqv7SC/GXll3GocP5
40gceRYk7qH2bh8z0S+tUEx+LF7M816nhddPMHD+T6GvUS6ir9GWmSjwrPbe
XuYZbr5E//SrFs/j7S7OcxN/5g0nthN6TkPMBXyEWiwW+MEQME3gB90Uf/77
d7XJ53tjxb3RHkgQ9Y9S7TP76VJWCL5WN09GD/qyFP2Lg+qPH90JfcCSrsQv
z9M8h7X98BcYtJD78Yw90tqvvcCfy/KpDz5ouGep5cA38m5+32p13qi62r8K
c0f/EeGMXmmUGXxglB/8q916/L7qzyL/b/F2FP/dw4lu4s9X2zCPNcWDfnSd
xfj3PrEjPxaht9FGobcx9B+N7tgiAP3R4sbsN9d+Fvo+w7WW8CVm5uTbi2c4
r75P6WdUw2dau5t9f7orrfm+T1+jd1vSn3x/+S06hlk70Q/ZRzPHqR3L+324
h+93oxLnZW1N8vWxW+zrWnIMPUzrgSJ+a9LwNzIcXAceO72FOqoDehZpB3oW
/ZIX3Nv4VOJopzj0049a0h//Ve6r8r9/75NiJH7esmB0Irov4O5uJeipF1wS
8UbTKpr59fkjwPt7qjLPoZ/KfMV7E97bZnTNuhbqXF1QPfqFE6zxV9jQjXql
3HH6f37sgdA4w29rtrEvTjFHVyvl/ILPCY4j3k6bDj9+vgzx4W8K+fAX+2uk
TiremVeT+dQqxeI9y0PGUJ8ae1Gf3skBn7qWU/nvWOqDIS2IN47u1A+9nDnP
xlXZD7XuOnMVmyPgD0ctpx9T6zLx9UIP7vv9PswLZz8UPJb82J/64vFr4pAV
8/36fsz3GwJbCz5QLxULPlCpuRRessoo9rrujWUf/a859L/NenA+nTuo+4zu
MJdw8pipqBcyI7gPT6Opb5dJ8P6RfwQ/KpVbQ75q34j7vLoDekETfN6V2ePA
ryufMa/0KJ39HqM2i/xgSGqL3rWyHfXv/krMI/Vjjlhe10T4rRus9nJ+7g4C
X969JvSMUoue9KVe7IZfnFwDvN3Ujecx7wJ1wcrZ8CZhMvejYArxxj8Lfj8/
gfqlNIf+k9sHdPs7CkR81s7ajq9l/DbmQ53wR9QsOS36QrqpScTRghfkw17Z
6Jsaq7pSv6/4l9ltE/5GmvIG9sEuS8IPwicE/U1gmrqvYLTAO7rLr+A3X6+l
Pjv2ELzjN4569+F08EAz9i/prg9gfsge/xfDt37Ey1VW3Mt7qp9lNz/q9UHq
HqeARuTPtH3kBb9Q5sS6bhT1hb52LZ5/jaPMOcW0ZA6711Xm0b7noa+2Atfp
b6zk/B9sw7xgiqmPeF9ZsdyH8WHwe9cy4IdCMqlXHq7A/2DePfHf6/fdJ968
mkQcGrkDfBd0g/Pa7j33JSuMvsKiY+hRdvjR36l6Gh7QtT368674m2jr42+i
G/sd/vKzNX6ct/H10vrlcs6r5YJ/98ZxHsNOoic6p6P/tHe6wFfywVTqnS2j
wGuxVcXn0CWFob/8WYc68XwhepJlL6h/zQ6hhwnqze87r+KdXPCO3oT7o71c
wP2x3CPqI/loEfluOfy6YRr8un6kDJ8/uTV6mRN/wH9FPcADNt/pk63YBl/u
G48//EgT5snPd1ssvu+kMyJOyRUWc19SbuD3fHun6LNrzgUIHCs/DYZv274S
/cVW+luSt9rf0tQi3h4py+e958R8wrdp1AfGn/E36LuYeufcbPJ3s/E8xw83
0Cv4D0Cv8Gst+rn5lUS9J/vXYL6kk57zv+wdvu22cfh5HdkCv37Pn9//EB9p
veyJ/rJVHOd4ujv3y3Ez/MEAH+Y7pvfhfaxx4n10XAHeMGJeTRfgBz5c6US/
fLk9eqYu3swLVY8mDr0xYx+MV9VZ4u/z+uOz5nMcHq39KfiN2iOIM1/Jn4Y8
+HEpDH5csX3MfcnPRw+4+yr11sfX9DcfMQesafNN1H/6I57gyoRn6LHbhXHe
2rDnXefzB/wmbwFPWYwX/K52Q1PhZyyfsaHv8qEUvOMzQ8Rr5ZcPvhmdWwj+
Re6cTh//xQnml6LXMS9S/Rr5Jd2cvuKgEyL+y7IBvuXjAOayTSvCe1Vczufr
RZ6RgtX9k4PZPynP8WWes2Md9Mg3h7AH6lIuvn+BMcxXf5pJPO/UAv53yiie
4w74bl0SfLe+Uyj5M247/Mxg1f/KFf8rg8Nk/HO2ruU9LrjG50gNgR/+do15
zJqhIl4b6l1mvq9oGPxAWuXJ4vNkjha+anLfLzyPPBv0DU7z6Xff0pGnzwVw
/mrXZT5qnbp/3XwLcwomTswP3alJXr03kZ+3Zib45/UE+gFmBfQDtrC/QRvw
fy2dd1xO//vHT3Zkr+zbiMqqhBDdVqJQIiPltj9FRkMoHHuGjGTfQlkZ2USn
CJURSbYTmQnZFH6/7/t5/vLw+ajuznm/r+t1va7X9bpkbV75DPsfDk6AV3xm
ynPZvJ56q8RM+JF7fcX90FV7Bh50t6G/5DcPHt2kWMNT8dTzZ/Lp0z8/zfm8
cp54HjSeOf4Lnfm8QTnMx141wj9W2QI+D3dFhzXLCn6xKrpnOeCFwKtGj+nw
DbMP0Y+8PIN+S0Ke6G8ZWz4U8666tanEW+M66ozHv7i/LR+Rb6Su4NH6dsS7
J6nEz6jO5F1pGM/r9iTy48AaxLs+hZx3F/R/UpMP6P+ahaLfmXEe3uXfD+ZH
urxHD9NNm19rxPyadO8jOPrcE/pP5U5QX6frwO/De1B/LtqPDq9STXhEr3Fi
HkKtkUp9H1gGvWCNGfS1POYzDzfAS+hF5b6VqTv7zIY/u/+QvkLaGvShzfEt
1R3xJz4MqEq8e75efG7lhhn98tRngj807HOknvWE55S+FOEf4TUBPwYlAD8G
1xD8/jNdNN/BevhTPKlOn+tXWe5Ho3j2Fd24Q1+j32juy+nu+KG7X6Bfml+S
/ONUDjweF8R5t2eeVClsLOKpks+cnXQpiXz06A/6pyln8TFZ2Za+zk32pOss
t7Ov48Ne9HS/j1Ef7+lHPbZvOPOIyRXR3+bcFD6dhgo64ns9Z/idso/wZfjH
PJWc2hy/kRpx+F1Nn0qdcNcOvqGUC5/vuSP9qX8vuRf66/jN1Y9m/2vVQPQe
I7z5/4XZPLeFK7k/m8aSzxr4cw+fd0M/vM5bvA/d8JG8jyqDeL+73mp+GOBY
uTTzqIZyHWKJEy/RD18rS/0zqxJ82s/96Ac3PoM/nulPv0IqQ/6wLBL4Qmdb
X/hVSavvUZ+WfMdetUx86pRyRvwRYs+iR/CwoJ/X6rH4ffWXNuHPEsF+Kt03
9lMZH7BXSXrrj99f7ixwh9su7m1IWX5+QSXxvKVrw/Ejs2oLn1vVgnzaaBf8
6Pnb6Ll2jx4r/v/mieT1F83E+9HHF+OffeWiNj/wiDzgsBt9YsEX+PSXbuD/
F+/hq+fU1PbF4Heiv4TfiTTHxiC+39sUsVdPPfGOfoK3GedlWDT7Z9Myh/L7
m6MHGmiLHvGRE/mwuarNf7SE79kwE74nLkDTMUTRTz0zAb+C1KPoHfd20fxu
C6kvBtdkX9bGbHQ/m7zRl74oyb6GsWldxc9vWDRU/D1gqzYfZYue/Jw7eqoL
4Tz/9cHky6JKmj6LPqcubwv+NH1mojf5V5fvX+of/SJT/G/k8JbU1x8qifOq
Lh7B93XkuUu13oJPx10V8dpY7Sn56xVzwvIGP3gNP0t4p9rXwSvv6PPrI4Kp
rwPC8CU8uov5kcSezL8cAhdJbVMFDyiv3EU/qMxm6rPDmp/1a/ysdc+KhB+Y
dHwEe0LKx6NvKJzJ86z0dKL4e2A7ke+NqWn4Q4bCUxrDX7CXoL8D+XKQC/Wh
WuI37zOOuR2lEX4Uhhbg4IwEcGvlHcK/WTdpCvVG0mvqrSPDyF8RFYX+zBhZ
WzsHs/h9NzSFv2rqx88rq2MeoWdj8PnvivDPia70b8dqejZL/GelOfjPKtkj
RP2iNPSjrzZsNzzkmenkNXtr9jXo3oDzr1/nvifZ0w+d7c+8j0NjfA42HRA4
XsqNJa5//SnwkpLUBpx/8QP4P2EBeCnRg7hs9pf9D72txP0z9JvBPIsJ51Cq
WoDf55H36Plqb2eesdR3wacYbxSKPqDRd4TI9+rpAHBoiBV6M9dc6sld7JuW
Ctg3rfc4gv5txVnyxfex8D+rDpO/Z1lxHqqXguezXIkfveNI9N/JjuJ5GTbV
oo68jY+L9P26+P7yFyd86qYX4SvysDn6gWEN0Q/EetCvW3QbvUrtRtxfXRZ6
lYBo9A1nd/L7VGhNvzL2HXHi9ET4yxHDyUvXd+N/2i4UXdInzT/jMv4ZauPd
fP5l09FHOfgQL4Or0R87+pXz9Gcr+fzDGO7Vyefo/GfdxF/Ech3zDyd/gZ8C
zemn1qH/pdh4wP89/StwjLLTHd3Tns6xPPe34uvlMK0fPc0W/qYEPjbSY1Pq
ONOzoj7RtzPCJ5XYTr6bOIa8v3Eyerya+8X8lzyhPPxudhrnp0o/+h/9ZlHv
/jX3/d+/Uy536/G/P41PhuODb9afe/nmI/6QH2szrzOvt8CX+m8egr+QzqYI
fx/9g2bMIfzpAK599lXjU0tznmbZoBcrXaDpYV/At3eaQL+xWx76JskEnuLd
ZeZTxw4SfRBdu38iLumbsk9dd4d96gbvm+SzoM3E/2ra/Fx7bX7uxnHxeXX1
M/Brjj+NzvPvDsH/SS7s85G88WlQV0RSP816T3+ovTxF/Nx668W8ozRzN3jN
xxR9mcsy6uPtw9k3VKYzeqmVdfGb2YgfpWSGH6WUUIrnP8+U+fNPY3hO/i/w
K+kg0W9p5ct9c9gBf9XqKfrv4hLEw9kR2vzzf9TrqTXhS7+navtrTIizPz05
jzcsmBdrV0eb/ygkP22eTH/iqA96/3IbyWNb52v6+a0iHhvv/RB6FF0zC553
3arE05rv8JuLaQv/4tSX+YEVNeAXRzQjHyxeDS/zzoPz/XEx5/thPfjIMRki
/kmxu+jvl97HPOzta8T5zH88j3nu1JvfooR/vT5xhtDjyl0U9tXOjQKXebjg
r2CykvoyYSZ59Fkueq7Hqdz/+7s0ffgN8OqqsuzPM5HRRx+qDD7sPhY9RswL
/G4H4Wene7sS/wGPJujd7vsRr0ZWZu+J1SD2Q25LRZfc2o76erM2V+gRKT6/
7tFWgY8Mr0uS/+teIZ9evcGfd/Lxn6wzWJw3w9q29Os+G6nnomKp58LqEQ/N
HjEfcp/5e8M15u9101PJ9yXWku+1el8+QL2vrEiiX76xHXjWeyrzMSZL4P9V
d+Zhz3ShvySV4/37v6S/nPQd/c2/s8QbX/Tq+i/0D+Wf29n3HTZSPF/ZivOn
OB4FjxfXEOfBOFjhPDyrwfltoFBfxsK3KDurgWtaBDKnnj1H8xPqCt72McOf
OKmAPFSaeRNjvhn1w6En7BEu/A6/PHUZfEL6N/SCZVbDP9+gnyevoZ+nxo8S
fXBDWW0PYH9tX1rgPc7PefyBddH4AxuzFwqeSn9+SFVR39YL1fYf4eet62xD
n3RmOPujgiLpU2ffAV/6aPt4N2p+/fOfc14ftKf/ZLAUv6/B5j397l8D0RM/
vQ1u8Wc/uf6FNfetTUnwZyzxQwq3oJ8c1o95zRq/4CsPo4v8//qDfS5V1/L7
O/nRz8pMoL555MfnmRQEPzNjAj+vchz55aYJegGlNfF6RSb42vkDcczvInks
9Td9qpr3qWN/LIR/KveN+Nr1GHqy1s+oZ+upnMfxbvQ36jsQzy4pnDfPX8y7
dOzI/GAN/F4N5/7DD/8N+wAMh1TwlzQZ/vWCUaujB6GHGXqc/n4Ta/673RXy
xdXh5IvN53h+MSnwoZWYW5daPWLeJ6k3faP0TuidfQaC3xuxJ0bKfSbOo36f
reh/KQ9rgrOnuxC/K7yjPhzyhvrQwgReIKgOPqeFWj05oAn7YK0rw2f1yoUf
bFGa+HszkM/vUQ/+bWIk/KtDefj09BLo49v48PPsJ+Hf1HoF89OLx1Avjo4G
J6bvFHpR/bnX4MBnJZg/r6LNSTx5Tz+i9WHy0fD3+DV0hIdTx41l3vAF+zQM
fuzT0DvR75e96PfL09h3LCWy71gO/cT9H+bG+R/Xgvor6wH9C9dt4Of5C/AZ
atWX/rLpa/jAK5PgC6pUR++yFX9BKXs6+KzeUuar7WdyP9P/0+aJ86gvWj9F
bxXVDr20pwE/n3bm9AOmhfP7nK5CHL1XgvooOZf64vgp+r0Ld6J/fP4cvPnu
H/uSu7ZDR75qDP2qD0M039rt6BybdmFezLo/Ov2sl+hybAKZpxiDXl3XCr26
cV198lGt2+CT4XH00+/nUT9/24H/m+lybe4HnYjhM/7XhvjF6Nd+BFE3HTfB
DzEyA73DWPaD6NaxH0Rn5YufRp9a9PO3DSWOBLYhDv87SP/7vx30j36Xob42
xlP/X/DHPybxJfNZi3hv+lqv6AeM3wH/cD4ZfUHPVZw/4zH+npbFv/O2FvHU
uPeepnc5il77/m/6wjPAGcqH1vQnbczha0dfI04ZSwreX7coWLuvLnx+KQd9
yq2+nMtzifB/s3cTtwfWRIf84wz3pGRL8oNFJfKD0o38bPhNfhhWj+c6eTt7
oFb9x/kZU4Ae6tsB6mLzUPqrQ1azH6N/OPjEIo04KnelPzasNvg1ogX48u58
nkuLv+xD9J2k8Ych9Bf/mdL/e/YFP7XZ1TjXOafRo+Wwx9WwYgw+FE0D4Q/D
ZnHPQnKYp/Pqyv1pVg88ktoZvPvpPuftFvvVlbLe7N+8Xh68epj+prJugaZn
jEa/YgjhfM3oA699Ix/dUN4TcIpnCn4uffCbVwra8N5OPuW8BcWCbzY9ws8v
HB5R9dhCHnhTnX5620DwYhVLeP2LBdQPpeZTP6z/RL378QTnTH9Q89FGH627
Mpl+9EhbgTd0xXV4bw0vUO/2juLvi1uiO3jVDzx44oyIS/rrVeG5HLXnHR3G
eXWozHntST9cf3A0/oEB+G8Zl+G/pRrKwZ8u7UGdPfQF9a/1VZ5bpyzuf+9x
zGfkmpFnnyagB3l+XvS/dT0uCL2Bvm0h9WL6Qt57Shp+W/nW8KOWnjxP10Lm
Ld5aET+qNCZ+HPrG3mu3xsypjflDPm5pzfv5tC9U+d/3D780/39/Ghbp8V+Y
W4Z6Ic6N8xhpBb7t9hD9y0pL+N20AfjvfpR4P7oE6s7VF9BzLXKln77gHXW+
Qxj82rLfgj81dh+Cbt+3EvrmiSHCd1a/VR7K573PvNc+X/CAxTdxXvRRzK8b
hmt4bxF4TwqxYb9ftBn3saYVvrbL0uELhh1mPianBv2F+Y3o7+18SpxvPx6c
N9hE3E9DKPWkmkI9KVU+JvgB+bwLevjUzewL2oFOS0o+St9mNz7t6uR88b51
10LpL/TAf0GtPp18P+0Cupypi0R9qrz/Td/NaE2fwqU738c/lz0LQ0Zz/q7t
AD86N0VPPCgHfNwCfwTdL/rzijKGvOZSnzhbPAEcv8iEnz9iDTrwyALi5/Hd
6Cv2ryEfVMjlXhQGMCc2kt9LtsR/XrfRmn2R7jL47txtzV/GAD51XcZ5fB1M
vr3ix3xhYqqoT+SyltRXtq94/s/Y5yJ3jcPntU4A9UtNV/LByZfsD24SLH4P
pbsj8S14CP3G4Az0J4ZX4vwpNd3Q7/zzph46c128P6X0KPwanU3QOwVPxE9N
MqCbtOhEv+/fB3GejM3qCr5CDQ8F74xZznlzeUr8Lt8Wvr/sUPwIetykn7YE
fwOdHbpVac9wznvPauhF6tiPF5/jYLbQmao+meTbXR3pz08qxIfl2Qfmtsej
tzd0Rm8vP57L93f3AI+NGQBOCc6kH2/TgHgTDd7QpWj7L26x/0J+Uw++v6NC
HLdszOerrWo8P/WWzpF6yxBWCTzqZkFeb+ZDPCjwRW+YvEX0xfSVtD5OxdLo
T/LrU+/Wo76ULKgvdd5F3Ifpv/k8Be+Ib3t7U99/LU+eGPGO/FLHVeAA/fIb
9P+HVRDnXXqzgfqpbzj7WBJ8wdutz4rzrZ6uRp6ovhS9Vql4nlP7RvA7zUPh
izcUcK97ZBI3Ay9yv8behq+xsIFvnliAD9PCbdTfB2ZSfwczp2Lofpl6KeQR
5//KRXCj4x/qJc+f5N9dDYhf0T+1eW/0mMp+9JiyvTfnoFuSyPf6IV+JBzNk
+h91jPx9d3v+vu2p6OcoLzPhj17WJd4fDeJ+RjQifly1p7538BL3QbfiH/ye
oQl+XB06wTeNQH+tPFvC50nP4rysHsv99/0Cvmm0ArywZc+s/90T3eRxzH+G
neT8xFrD748A7yuGavCNO/5Sz26fBN6Sa4l4qpS8Tx7dFMv+ucw19P2rH2ef
2V5z+mHjhxNXTHfRDzf7w/09ehq+b+8gdFAP7uDrGeiP3iC9K3zM5qf09y79
fsXPrcQ+J+9skT90h/CvM8Ro/nWewzjvbYeCH4PqcJ/GrUavsPWKiH9yiBf3
ZaMJfM6UVHjF3vDj6gP4cePnbfDiBxcyb1Z/PHyY6VDqtoGD4av3Z5Ffj+bQ
D7TowP3I2MI9PP9D9G/kC/bon80s0GO1wl9G3tsSfmbNUREP9ENdwB938RdX
7PAXV769I57N7ol+JmsTesfa3/DbsbwFj+Z4Ev4jIEo8b+XfOPq5KQ/QU+xv
y31zqg6eWnIGv728scSFhvidSWXN0GMcm8j5HL9a2yc1Hj7zhzP+VqGLBZ+i
H76TfvHZEuiVL/uxf9ELvCd/cgAXbmMu1eBcFnx2yRp8VtCY87YhjnmHD0t4
Xs4TiRdl8MdWKuOPbczZp/mFnmCee2wE8znbu1MffanOvGOtoeCMirvQ942/
D74IXApOH+oI71kynH0Cm3+QH98+pD+wpWrf//2pPM3h/HXZJ/KN1Ib9c9JP
9s/JPXJ53q676G9sb0G+L3UY/nllAfHv21ni0RuV+tClHfm+nRM8gKG20Pvr
jjSDp8tcTb1y5AS+II3mk/8W/qReLj4PDxKXxXl614Dz5KIT+j3FPBadcdoe
4mZ0JHV4Yi/i9OEGPKcN9pxrfTrzP6/i0SPt3k+8kcqBJ19dhd+4a0nd0CZc
8PH6a+Gav8JP7nNhDv3tWb+Z5/3RmvmBkCPg055nBR+q5iSwnzfhDnrM92fI
NzuiOO+rz6Mn/GnO/bC7iV+BaTf43aQG8F0VNHxXAhykO3WB8zznI8/NvBj9
Spgnf4+hb2mogm5LbpNI//PmCvDML73w09ObVEf/Vmu6wAHGuNGiz2KIxQ9T
eoUfpqHdSX6/scv5/OO2o2OcOpnnNIt9d/oU9t2pLoHoFTPzqe9qVYSf2Yne
2XCA+W7JzU/z88TfUenWlH3Xd2KJu5kvqVMSplP3ltki+v/6rlXA+4fPCDym
WlrRd7wcDm6s46DtB2uLH1+tWPD8jor0V5/15H03+4kfwQnwlrS0nOhfGGd9
g8cJ/wyf9S5D9GmNn52Yv3vF7ys1fQ5/H1GW8y5lwz9Kw+Enai+CvzuLD7pk
1xR9094HnJ9Of8jvdVqABxbMIR45rOF5OvUEH6WYC35XHRTCPpJB++CjfGqD
Hyp15H5ENAYfZubjP9v3HXzuJvpuuoxwdFFjCrnvC97hp2h/c4n4+t4GeO83
bujTzX7yvj5E0n+JyuLzdV8BfoiJ4+eFdeBc3snh89qspt/W4C5+HhtNuZfN
M/DFH5TM+6q9Eh1WOn5g+gv4gUnlLfGvdK4h6lE1BT5JvQWfpPOtJPQthron
0KUXW2n+JE70W8vfZ36/9XbR1zQ4nBJ9WjV8Af3d0HzqwQXZPuLP/gXwXP7H
wbNSJr6k48vTb5mTAS+ZMULU70pLlff61YP50Zsv0Oe9ThJ+ddKAeJ5PA5V8
/Skevj/tFP4aJfrBq/48Qv70RJ+lzkGfpaTthn8MiGW+49o59Ebx6BrV3w/J
H9JB+NrT7PfTrWS/n8FtGHm9WtXy4vs7f4HPmLWYfH63CXxSq7/MM/beKPrw
shEdma52HHVY5aH4Asw9gZ7lz0r8l/Lqg9MTBoj7qO6YyLzizJLwZOec0CMv
bU7/Z94p8HljFxGv5R+21EtlPnJ/p94U+Fpt1wNf0ZLe4LIaNtz7O8zvSdX1
8IwFcfg3f6/IfY1tSf+nPb7X+mVf0YdeGsx5rWnG/S4qif6opg+4qMQD/DLP
gcf1keBxqdRU+kGv66I/OJcOj3x6Bv6t/c+h97euxXzGqF7omXYMRs/UroB+
4IWZ9ANrliYPJ5rA8+XXAr+5rwDvmN5H/5B4nt9v/Afuw+2BfJ7u7PuRMtn3
ozwOFffTuA+9kfosh7mPokR45DOtmI9bZtD0+hPYP+SbRl9i10V0H74DBc7V
+elEXDB0vIwuveVqzu+neOajHFrAl0ftIb+NCwX/z64KXtk6jn//3R89Ym/6
lMZMb/Q9LSKph/dHCn2TPugD9XvThuCbLTPFeTdkG4iHYwbiI/DFl/7Ci1vs
Xy2XyvO96o4+0TcAPim6DrjoG/uujIlp1EPGEdRnLYahl1veCr3c3yfEuUMT
wXNVTXnPz9ehA8k1hd/dsh4e0XKR6H8bjCHifRvMPTnnU62JF2Xhx6Vx8OPq
3T7wizHp1Cu1FhDPN3RkjtXuo1ZHnaRfEz+V+itwEPFhY0fy9fdG4JHfEfjJ
F6zBT37vRIEPFA8n6utSL+jfp06lHoqsC34rZ0PeyVX+8v49Koif138nOrfG
U+AZ9yZR519pIvCDkvsE/Hokh/52o0rgzI0J8AcfcsCTTn2pa9bbsH/j10l8
nt/kkA9TtT1eR1fzuYf4Mw/vkII/7swc3sfi+vTTX3SBT+k6Hrz7tQHPa2KI
4EvkbU2EnkmuVCz0sIYJXwQOVG/Dd+lrz6S+uH6c89y0Dzrdi51v8O++o5Pf
Uo17/M1S89/sDW+/cQ083Gg7nv/VeuhJxk4W71WaQB2l26AyTzzoEnmiwiLi
TaPf4J2+cdRTdyLRhWZeRT+54wfztMsvwgfmNsavsv1g5oECVgv8rf/rIvK9
8a4CHt/0A/7ZGjxsDNXmlT21eeWhbUUclw+HsX965Qpwu+tb5jFcujcSz6NU
SkvxZ/pu9Ci5+5gvnDwPnbfxt4gHaodo8Tzl8/aaXnIo+Cx5NXqYg/jf6Bpe
Q8+beoP+w7bu+Ok8mekj/t2H1v7ivw9Cp6SWV6njPazgYxb1gg+IkNCTG+3h
8QY+o292Y6DmD9uKeBkaTz1xlTla2cdO+EpIZufwcTXfxTyf9Vn4tp4DBa8i
nawMHzSmOXzQ/IvMp3d/Sh1TAx2+4RD+40rSWuKxXzjn4lQCeDHIg37UpRDe
T8FYgcfUZeyT0/Vjn5x8Fz8g4wr8gAzOYfAxXn7wBj2dyBdB7sSzfqOYrzho
zjzcscpir5Teu/lS8eeCTPjZ3s/oG1X9iD9mzQV8ngxL+m4HMvDTSWqHTuxP
IfyftAd90Obe8PkbmXeUzzPvqNa5je/W91Oc1+fL6avXv849qmRKP+aBCfWd
eSL7kxYMIA5u+0Y+/fNa6Cskkyf4kFyYhD/D00LqnW0DeH8x/sTVYU7UCyHo
wZRKecyD3H5OX+5tLs9zygj4yc33idOJXugotwymDz7NOZRzcYj9ck386Ntv
H8H85oA21KdPGoFfVlN/ycHUX/p7j5hr7r+UPucE9j2pF9j3JDmbMmcVUpr8
3dSAH6PxEnFK7w2f3TcJfVNlC/ovzRpSd9rc45zV7ovfzh1T9KK7N2n+tyvB
P+Zlyc+u5dEn3LIAzzpNoZ8beoT+y+XDQeL/PwibL/60W06/db4jz210OM/b
ORJ+tI8Fv5dXQ+ZVx4SDb+ItOD+pn8nn1edRz7f8C/5YOpL6IqYx72fDVvBK
AfvRpRz2o8vz0CdLvdAnS52P0k+X3vP1DRdxH9IjyEcp8M3SJ/hmJekq+PXr
X/RBn5nvMz5nvs/42kiekvFHk0u15/ufXQZPOXoO+CqaOG0odRo+rsc8+hth
Y+hzn0zlPdc+j99UGRn/g969qDOr5XFunjRET994E/z6oMnwX7ufiXgoGWrA
P15qQjxsTP9Tqkn/U/clA/y7cBP54/kLsT9aPftC4E99wFOe3wX8cvUP0OHo
jb7oIbqZg+dSquEH0ZV9WkYb6kjjAk13Hm/D/TL9B7+7YRk+gMcPij6GqoSi
sxlTl/jcM4b3+zISfBrTAj7qVQS4Xy3H+S3CH8O4fw98ecHiSeL7pQSKvSo6
HX6Jcmn8Eo2Z2h6mjCrE/4A+4JmNVeFHNv0CF/WwZL7Tpg94tmdJ4u357eDF
T7VEvtIV+oIH/KaDP/Z9Rw+47Au8o/MD/v+vLPJX184Cj+tKN2dfQKYN+hyf
XPTC6jbwzIDd9KPNr1NvB5cgznWzgd9xPUG/yW+10BfK5pno28v4st+7xV74
xQVv0QvZzKYfFIP/rfoG/1ud+XTix5zNzNPVbsl9Ckogfu3XwU9Ou4xfVcZf
fN6Sl+OjU+APDjLBF0BfabK2L+It72tKDvXO9Rz8hlZqfPBK+GC5Yp6on5U9
A6mPkvKE7l/Kqs+c4WkZvx2PCviX/gkHl8QOFHlYX/s2fOjBreBP3534HP5c
im57ckXyaIvZzFvNCOU9ek1Ej76oP+fxoj/17Mme5LnGL9Env8pHDz+XPUiK
J342kg9+Nvq2+A3rz3Xj3vqkaTq7DH6u51HhV2os+Z69oz9/kJ+8UzQ/H3tw
2pdP8O037YgH52pwXg126EW/xsKnfGqB3iJ6traPdCL4xHs/93vhbHHu9WZn
qVsXyuC9Pj+In9vi+Hwe8cw7B40U9YJ6YYjo/+kXD9H48EHwfW0Gwk/sqc55
dfYU51dxri302nr7l/irDKzMOQjEX87YFX85tUcX9OYr6sHHWvnCpxQ85F43
TsH/JixL/Hzl0U3iyNDHghdQndh3rXiz71pdMxs8GYbOw/jYHn60vgv6OGv6
TeoY+k3qsTbguNeZxMvb5Yi788PhFWaFo1e8hX5Y/ZcOX7f/JfP5SyfC19um
kz97lAOPrmmJH8nQ0bznhMvwl3cz6R+FDmKe9Us+/tZZR7X+rRX1YJkB1JMR
0eDT/T3IF7cPUC9NCyEePLMV9YD+0wfiYwctXufjT6ruQ29nVNHbyYZE+Dyf
x/TvLi6Cn5kQTL1mXE1+X2zKfbCG/9ZXtyN/PIpGP+pQlX5UshPnPrIt5+Ha
B/Lbo0fgXq+yxIlhkfi2zowjHt+qTN3ueRz/0dKH2ad2Zj76miVXyId/4HEM
5W3AgaW20M9IfjJc/FmjrqindAFryBf92dMnz/2k7duVOectp+DvaRdNfe2/
CDzVaBn8fPNhxDmZeUHdTOYFdWZt0esOeEf/bnhdft8BX9DzPLjNPopXG9A3
NLgPH6rApxunG6if8gZxbld1xo+ksy341PkuPJjdPPCOw3dwbvW3+ENNPYVu
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
M3fN4Xl1ToZfiEhgv0sFS3QRFbLxC8vZgX7792D2mc2LYY/IlULi/9jT6FV/
afVxvKbXdDgLXxHBXh611nT2d4ZZ4vM7cjt8/fW94n0b6y+mf265lvdRyoP8
ZfKB99/Cif09S92Jt4P+Yy7O7TD8ln1b9CiR75kDyAzEZyXTAR5g4Fjw0LP/
qGebXUT/t+civGc38rdhGflbf8yf+YmwIO7V3OPMtamnBZ41LmzNvKG8iDkB
t/30Z46hL5c79I8V/97lJ/MYPb+B2+Rt4v3qCw4yx5fSjf6YRS/yoWUD9Euz
M8E381LR56/15P4GM7epN2i+ro5T0E+2qgn/6rQN/qPmCcGPKl/HCn5UNxT9
nrJV0+/91DMHseIy83Enq/D8feyol5aMJV4ZU+D/Okjs/73tAd/5+DS64JF9
yfcNfEVdoLubTB9ydCp6sWQvfq9lM9BDPX6NnmhvOPfb2xa8EtMZ/q53M+F/
I7e6RLzzLkmdmjKF+ZzrnuCX7c/Ql/aIgy/4uU30v+TnW4lDtvg7SEH4OyjL
3lFfLTvN19+4Dl4POEL/zIb90HLIGPJnhJ58t7YD80rFk5kvDGxKPt70Fn+C
eW/g95I2E4/t/Oh73T+g+aUyz2qsnQfOvb8ffmzSReLX0JLwYTE+xNdXZsTX
LauErtN4xk6cI4NTb/rx5zsT13alMo9Z5IVuvGp/wRvrnuejm7vqksZ9DIGf
G1WVuDl/EPjl32XwVckg8pPOGT3Ot1/U/3/05P/VzL2pvpfICx+ucp+KijQ+
mf1Dxlh8Og05W/n+dX7DX7SJgW9a+wafhg46gS8MTl3wiXxSHdxhmM39eb4a
P6P5iwWfL/8ez74NNQs9wIzOxK+pvbR5N/QFyiQr+LOiaSKeqBP94O9C3tCf
H3YVv4uAVfgZ2GcQ/2OuEW9+tCCv78sl3hleoyNrfpj7e0nb99mOfZ9y0B1R
L8sZNQ3i5zX5xvy26QvqkbMd6R+c9+bejwlDv2/5BX3KRol6NTeA/tVIV+re
1k3w1dCPAj+YFmt+sfiT6DZ24Hwe8Cbuzr2HDtH6BHzP8EXwEY9mcl8+esPv
jvgg6kNj/2j01ENtBb7Su/RmPuB6loYvmQczFKeAD5x434qrC+elWynOy5U3
PH+7GfQTUj7gd/HpHP1i+2r44WR8gmePDqfuse2Hn3yGBfc0sTT8Y6eD/D3l
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

      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{201.49311140639202`, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-7.429615024*^9, 461.3143615722656}, {-1.2978720912*^10, 
   145.95814514160156`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7742074561798363`*^9, 3.7742076362752485`*^9, 
  3.774207707969533*^9, 3.7742077952102456`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"add145a4-7f8f-480f-b7e9-c0d621db7f88"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["generation test 2", "Subsection",
 CellChangeTimes->{{3.7729903656913548`*^9, 
  3.7729903684672003`*^9}},ExpressionUUID->"f59e74bc-1803-4969-8af1-\
cec2a8961c96"],

Cell[BoxData[
 RowBox[{
  RowBox[{"zdata", "=", 
   RowBox[{"trainednet", "[", "data", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7729903402204213`*^9, 3.7729903887244616`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"4f206157-ab9a-4196-8bce-1a3d0ae46836"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"zdata", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7729903940240498`*^9, 3.772990402903993*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"eb49e01e-c65d-4a2f-9398-f2322f3a67f5"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJxUnXf8z9X7/09klezs8RRCZGZGjp1VhGye9ojMrIwjK0lI9npaEULKLg5J
ZM+Q8YzKTGVE5u/7c3/44+Of9+0451znOtd4XNc5r/M8J2eb7m+1T2CMiQsZ
8////t8/V2HUdPv//2vTmo7//29Uu8bjshnb53HZ/9r6cdkfGve4HO/rRPs6
kx+XTZnuj8tRoVm0rzricTls9M3jctDoY+qLbKL++jj6//vt47Id4hjv3grq
G5Wlf+MOjDez9+NycH3+47J7usHjsk0xlHL4Ef3Hb2C8C+9Dv9xS6LdqBf9t
xlI/tvLjsvu8B+Wz1LujHzN+66GUC34J/RJ94T/p59DbBT8+F/yY5+dRrnaA
9q0t/D3sCr0z1eE/Qp5BpibUvziS9oUpR3lG0T5GXr7rd4/L4aW5zKfCftrf
aqr5jaF+YFf4HTedcufhlMOv0WdRynGu1dQn7Yy82qE/G0qfX6jctyb8bujH
eHuQl9+BvOKdHShvpH0YdoP/ETOoX0R/8yf9fU70E/2xnvLCIfDXbDn8/foe
8hi1gP51ptM/4y7a/9MGfh5NQN5z5lP/yyHG/2sW5U/3UN8T+sHX2JPp/Cnj
fbaV+f3Wg/EyRvRfjPzdZvQRZKVs3hvN/L9ZQv2+4/DzL/YQvLwQfreNpDwB
eQcNoB9cnUP/6wuRb6sjlHur/uJs+Bs3GXne3U658gDqq33BeAMo23+wP7Om
H/yMYXy3D3s387H3YMhA+ndeQvuvkH+wR/7xKvp3s+S/8/tQv24e9QeZr+nF
fM1+6ePzXfIX/NfcxH/jS5TD9Jtp/yz+4WojX/f7u7RvCD7YVGMo315HfQLs
O/hpH/aQjfm6B5pvF+wrfpf+cZnx9O/pkc8a7NHtn0R5kexhyF7G2zAT+WXH
Pvwy5OFfBI/cR9RHXXdTH9E/fEB7Z5lPuAX5xIe70P9p7N1/g/9FZSgHydGH
yyR9pMJe7EeL4OfH0cw3E/O37bAf8xX4G/Rwor+K+b+GfOw15GPWgU++zErK
LZFXeAl9eyu8Kwteu+hzxssofe5kvq6k5lf3HcqLZ8ieeiHvMeBbWHES40/6
nvl/C174/lPgt/80xs+xk/rR+Fu8Xe2/Q16u7nTZv+ifRp5R06/hr9dvlEcj
r/gW9h2epuwOIj83EfuM7Enob15O+Y3TzH/DOvp/dJH6jJ/B7zX8y6/E/vwk
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
+v1+PPoJxskeQvzHdMJ//Ef4W3hY+5dtoO/fEv6M0/qom/Choc4/jOT3TnOP
+OMO4N8mjfbPjitfHKbzHhF4FD6v9cKv+j3/kfZv2rOedUmV37QUPvYLhdda
X19S/Lmo/a9i4I+/foLxEzB/t5D5u++0vq+n33uKKl6WE16/AX74MVqPF9T+
1VfYfzxT8eYB9mU/w/7cANnfPK0/ypH/BKPBT3frGPqopvXCZeKZawU+hynB
Oz+MfCKcoPzvqOLPUvrHzwrvSqMvu0z7qdpvc3/S3/ys/neJn+HtffR/QecV
TpC/RROm0z7tOfrHOj+wX7/XbOD3BPs3+VJ0X/v1pcEv/19D2TP6Mh20PhwK
3ge70V90S/u1e5/kk9p/WaHfz/IqXxjN+PF/jG8XEc+C76Hn9uF/fqTys1Ts
nwQ5Fb+Okl/Ek5lvtEznI7Yq/+yu/bWz0I/HMb7Pt1b0le98rPV/McYLU+Bf
rjP2508rv78PHtsHZ+G3EfzGM1hPx42VP86X/t/WfuFi7R+WIR7H44nHvpzy
1yd4XfvJeRTwy2/HXsyPWl/n1XrsKu3DVcjfHkZe8a/4VxgRD+Jz2t8sJfke
wD/9bfnnUPL36O4cxX/tN7QXfiZTfjWeeGPK4S/Rm1r/DVE+/a7wu6Tytfra
vy4E/eDsLM2nnuKNzvss/EzyV3xbp/VzCtYD8Uvo29RX/v2L9iv/lv0fYT1m
HfmfT4P/hQV+pv5l8NgUxR6jWsTLuLnm2wh8ClsrPr4r/DjK+jhYRn4eLAdv
3Db93lqP8cJ5xEuv9XLQRnhu9XvWVP1eu0vnSS5hb9EE5R9ntN/7vOwxK/y4
kfATXiB+mC3I05bFPtx84nVwSvEgG/jiN+r3k1b6fSzQfkktredXCW9vC2+r
CL8XCw/nIx/XQ/KZLX0PRN/By8SDoLXyowvE62C18iflO+Hbip/vKl7c1O/d
i+E3SC9/7qD9ukH0t3OFL3W1f/iW8pFZio+50XewVr+XDsH+zQXiqf0T/u1c
+I/Ly17y4N+uofKT/7S+eJH1lr/F7zGuFPKL+qOv8Ib2J5MxH1dE+8czftD4
rP9dU63/5oBnprHyv0/Rly9J/9jLXq9pP+gl1gt2FfEuTqff1/oLHxuznjFf
yh9ul/gfecbT9fv5lTHCJ9l3MeUPM3QeYxD5g30N+w2z4M/2+SfnS7S++1v5
Yl75a1XyUxOw3+LX1pB/ko/Hl9kvDgPWm8Fa7V8l1nmVB1ov3xa+PQIP3Hjs
0YzS72Ufob94GfLwB9Vf+6f2MP2jPvLXM9rf7iF+/hPeDB0te2B9aDvy+5Vr
xX6teUnxJbf2k3eCL1Ed8MX30X5Zd/Y/TErywaCufi8+N1z2rngzQOfFSqE/
V0D53jXwwlfR/Dbr96gV+L/pr/2sPTrvk1Tx9XP4cevFT4z9mDPkP3699hMs
9hEP1/nctMrHCouf8jqPtVv7xamXS7/C03Vafx0ln4l/Z31j1ur3gV+hb47J
/jPDbzCU8zo2Hb/HB321vtyi/KYi+0VmI/y4P3R+5hj+HVZXfv6cfv/prP2Q
NsofTyBfc035y7vgTTxY/tVK+eizWu/2UP7Ti/WHLwN+uH7CjzP4gy8t/Cuu
9eJy2seftFF8UX64ELyOimg/sq/WVxPAkyi9fu9srvVbX63nCuo8x3Hin3M6
D3Fbv7deYH/HJmP8eAX5ZrhW53F26nzcA+1XJII/90jrqyvgnXtP/NSUf0/X
/G/gH74ieGkzYU+ugeLffq2n3wJfgj/Rb9iCeBw21vpxJ/qLnc5H+rHMpzX5
THgHe3VTlJ/0kz+sZz0XV9b5px7ERzNH+62rdX7kEeu14DTxOWqtfCXU+bAk
Wr8k1P7Jcv3e20u/RybBn6L3tZ85H/3FXbBPW0TnJxpq/r21v5RZ+N1Hv/c/
ze81oQFvzFadd5nF7wXBCdlrOvwh/BZ5RVUUn/+eLvlDL5qEfnw58MM0wp/i
h1rPb5N+K0tfhv0m95zyvdbKP5vpfOMa7Xe1JT4HixWvN+l7mlQ6T/Ur9GyM
vQSpFX/e03o+D/YQ9FP+N0r6Gyf99cIe/Brlk59r/3KY9pfW6DxqGsWj24pn
nbR+Hqr9yWfB/6gS9P0O5dupGN/8hf/FI/T7fxWtj/W9gbkHngf3dX63Kb9v
R29of3Ej+vIvgnd+OvgS19L3G6N0frI56w97+kn+qfOBPZQPNdP5+bnsr8ZF
hG/t9ftvKcW/ysp/0hM/gzX6vTMP9mGeUr7TQ7+nO61PPwUfg8Q6z6LvM6In
5wln6TxaS+2H79Xv5QfJh9xuzfdP+Xs5ybca8SrynM8Jf9V+/FLiX7iD+caX
tF5uwnzMbZ3XeIH1oyur8wMT9PvdSuVPG7Vf3Fq/1xaUPyzR79mjGD/orfNh
vdCXra7zUZm1n71O++9XlT/P1Xq6lvYvMyrf+16/Z81U/jxY68+jwrdWyg9S
grfxKZ2fPC68nQG/4TtaX45gvWZran3XC3wNPtZ5/3na3xnF/N1F9B/sBJ/i
r3W+vKj267LqvEZd7VfUJ57YktrP1HlKs0D7J9mRfxBov/d15QsTdN5wsPZv
Fui8az3swyo/DkqjD3Na501W63xSRf1+I/0HF3V+ravKU7W+ekH7i211XmuB
ft8dTX4XvqzzMb/rPEhfnQ95Sr8XL9B5nPT8XhfdR57hS8onp0gfJeQvp5Cn
vwreBIWw//gd/V76g9Znkc7XHdf5mtk6r9lM+UkfnZ9upt9rCiMf107nS1Jp
v2eL9oengr/mS+HvAOVrrYW3Dck3jJN9rRH/CfX7qr4fDr/UesTr+6dD4Kl5
8vv2XfAi7Kv90YH6vSCHfq8drnw+A+fR3Bl9f6zfa+Ma2k8ro+9x7iiezkZ+
wRf6vfGEzpfM0Hm4AHm5FIrHibEnk132O1ffw+ZSPltVeJCd88nRbq3fk8v/
E+g8zQOdx1rM/kHUGHyJV/C9Rrif8+2uvn4v38T5KL9a5xtrar9uCvtD8SGd
J/pa9tBV521K8P1NWKqD4q/OS2h9El7Q99m3dT7iB/j/P0XC7x7lI+WId/ZI
PvjX99U2p85DJtB+4pP5Dtb+dA3tr3XS9xWDwV/bH3sIimh/dqT2D2cznknM
eOFk5W9/67xwS+3H9tLvwZuV31xjfeA26veEWdp/eR5+7V7OCwVV9HvpJOW3
V/lezlbh+5H4X+HPKZ0nLUz+Gp6QvcY6j71Hv9en1PmhKlulX+KT1++H7jT+
ETXVefGUyD+opfOraXTebyD0bGqtjw7o/HVCneeZoe/XRmr/+XnJa6m+J+it
35+n8j2Db4A/uUXKb3tulj8p/6stf8yt9d1I/T49Sd9XJpA9D9R5m5M6//Uo
nfyf7zfNUb4XdjoPHKSR/i9ofy6Lvr8J9b33Pn0P9Z2+D+wovMyn3+NWcD42
KqvvNw8rv9mL/wSdmV9QmfkFrxJfwmd0Hv0M44fdaB8Z8g0zEPm4rMQ7o+/t
/DLZexPJ60viWzCU80FxNX0fNVDnowspvl/SfnEfxQt97+Pe0/lwAz64Pvr9
rLXkN4HvTU1N/Ds4yfdaJhPfe0R59X38WPnz89CPMoDH4Uf6Pqqozq+1YD7h
3/r+pr7O1/bVeeRM4F+QQucb6glfr+v7iQPoz58jv4tTyP/2kG8FxxjPJsEf
TEn4c/31fVNr7af11+8tS9h/8Gu0njmn+v+0f5AJ+40i5dPZdH73qvbDZ+t7
t9Hy1+XKx5U/xRd0/vcA9mN+f/J9puL1f/p+t7K+P+qg+wXqQs/XZr5hEX2f
84HOn17V/sBX8o9DwqclOm87TP7yss5bPtR5gOm6fyWHvtd5TvcF1NF51vPE
SzdM8b6s7G0P8re/67zYZ9pva6zzTj9pfVBb+Nha+VxS7X901nnvb4gH9hPw
1XxDvPa5dF63GPhl+oBfvpLW92WVP63X9+mz8V//ur6vr6rvEarq94Yzkv+T
7+mGSP5dkbffru+1bjBefAf+zX3l/xtYf5uF5J++A/lIeEPnn3br/Mpa/b6e
Uv7zkeT/nvD4AvK2z+h7h73IK56u9VUxvh+LtnK+Pmip/Y5/8Q83Ut+7z1K+
0Y/44Gbr+91J+r0rP/HMb9F6oqvWs4HOU9zU70ufaT84rc7rvFxA8Q35x8dZ
fwXddF6/7ZP7T8hPgqHE+2AR8wma6vvFT/X7xF/6HnsE98/E14iH0bvkW6HR
/v5w2ddZvjcPB3IeProhfMnK9zt2luYfYb/RCu2vlOf3Y3ua+0bsBe4P8fpe
PLLwa1OAR2Fx8Cnezfffth3fk/uSyl/yC8/+VXxZqvMPF/R9+lT5yyjp50vw
OF6p308Lan//WZ1fkv27LxVftgnf7+j81rv6PjkV9F0y4rmfC14FrcDPqJR+
Dxui84kfKR9/Fn36L/S92xSdR8rD95nubeHLq/p+6rjy87SazwH0Z/55VePr
99/Giv+faH0yku99w7X6Humgzus103pxueJtMX0fkFD66q7zcfflr7rPxczi
PiE/iu+H43v6vnEe9hxmk/+lxf/sCa0PC2g/7DTxyN3ie1Z/EnvzA7G3oLK+
962s9c8IxZPMOv92E/3H//C9tX1R+83dae82Kb+fLnkeZb1v1yhevs732cF2
3cczuajwR/l5Ed3PkJB4GRXX/REN5T+Hsa/wtM6jfKnfGzPo/FQqff9+B/s3
efGH+Af52x19bzZR5xu+0P1T83S/15/y57Q635mB/t53Fr7zfaZPp3iVG/1E
07SenI79REv1PUdp/V4wXPdnFNH6v7PieVnuf3QluY8sfkXxsQTxIl7N/U1R
Rt3f2QQ8Cbfo++H9+FNcVfctlCQ/iO6T/8RjiUfRZJ33TaH7K+bpvqie6RVv
dZ9OXvLPUPvZtp7ugyrBfRDmiPztbfAmHEY+Gn2h/LdBGuj9qfsv6ip+/EO8
iTaTb/jn9D1NCfDMZtJ6conOn/yl/do3sfdwl+4Dmc73+kEp4eN6fR9dT9+P
b+d+hHCH7kt4H3zyuk8syApeur9lH+u578Ksg35QQPlOP8XzDrpvKT35adyC
+UU7db/ch/r+96zWUz/yPXScS/neGq2fU0r+aZWvV9J9RDm0f/Eh/h/VQd7R
MO7jsH/rvqE5uk9Mv4+FTbSfXOfJ/TG6n6Cx7kOoLvtcSbyOu3AfgO3JfS+2
OHgffk1+6PIov1mr+7jScf+B+Yb5m3b6fv607vPw2m+5pN9beoHH4X2dX/8F
eu6B7pc5y3jRCb6P9yWJ1/GzrIfMffRtCilfW6391RrYW5AJ+bsxiZB/Hfiz
C6FnW4MnYXvuw/Ox7r/rib2EZ7n/wWXQ+e13dB55uO4XTcn9MCYLeOASUvaX
dH/R1+SXwWCt37zuZ/lQ97f9y/f+4eT88l/tn6ZQ/m71PUlC7p+wO/AP9y3y
Mhd03qOE7vuUv7v95I/B5UGKt4rXSTWe7vdxE8F/txx8cvu0H1IrmeSDfZvJ
ar9e+dwt8DxILzxfCH/RLvnvIt2nuQl7DH7iPhbTQN+nvw5e20rEE/Ot7hs6
K34+0P2dNcFXN1Hf1+h7+7CI7sPYIX/5kvnHxeS/jXU/VVt9b5uQ+xnDX7kP
Le6u+zP/rcP4fekflpP+SmA/fpe+j/mLcvibvm+urfsZRmo/br/u67um+zPO
4F9xWX2/6eSf13Sf1WR9j6v1VFAJfPBvkx/Z4uRTYRWthzewnvaHlT/l474y
9zz3L4W1kZfZyfyDhOTnwRjdd9MGerYo9Gwj5Tt/aL3yIvlwmFvyvMn9mvFT
ur83r+6LG4W/+FTa//sJvHNJH+r+NvQV/iz/GYv9+/G6f+Nf3bcxU/48k/sH
otd1/9Tx7uqPfwRdsdcgn+rfEj71k3yWMZ+gqtbLY3V/32z8Pbiq+3pL4w/R
I/nLYOJjeO114bHwdzf94yTowyzQ/VTXdR59ifYXd+u+qP6ylxcYz20Dr1xb
0a+q+r1P8i/uZ/OFWE8EX+m+vX+4zy0YRbz0Z7Q+XcD9TL479xG7/tyPGezQ
/doZdf95Q91v2YT76aK88o9v5V8x9z/GM3Wf63Tdf/wO97H5adJfXeUzkeRX
TveRnOM+TLOc++Oi73Uf4/u6f++W9kuHCB/3677DSbrfri3370ZTdZ+h7sOL
2ik/M8g/cMovK+k+n3b6fnUL9WE53e/znvKJaeQT8Szu5zPz8OegptZLycnv
Ta0n978WUHwG38JY9+lUU3yfq3idQOupCuC/vaD7VUvrfr0b0s8MyvYv5On/
033CS7lfNyrN/b9xT90Xe1z+v1n5SA/dB6r7QeOD5Bu2qPKRBdz/5H9i/i6X
1kvFuA82fI/7V+PSvGcQVuM+Spdc99e21v2StdCvXQs+RDsv6L493R/4it5D
eIX7Wl1V8Cp8Fn7DUtwPHGcTvR91v/9k3S9fVPa5jfkGBZMrnxQella+MY58
w+q+RluS+bnuuo8x9ZuKX7pfb6buJ+qGvFxL6Ll3Jc+uym9XaD37jO4724X+
3F30Zx5yv7ZPxv2vrp/um26t+8pvKz/rpvvyUgsP6mn/4E+9b9JT92+vUH5b
XPJpKv28LPv9SffTvCn/W6f7I4syv3As9/XZy+BFkFrva6zNrP5632A8/uJX
S5+TdB/yXu6Ptu9w31/8gPvNw55pKO/UfdVTud/dfYP/2U90X2UK3d9egXw4
TCx+0svfk+k+9tv4i0kKngUrFI//IF+KLoBXUXPus7X1sZ8wmd4vqf6C4j/z
t5t1H1se3fd7gft7w5bc/xh303y2Mn9bifVN2E/+mFv7dRl1P3kO8Cj0eo/p
gt7D+PqM7gfWfcoVmJ9JoPu9MnLftr/H+zV2Jf5gkuEPdir6DX7Wfawzsfew
me4rv8B9+2Ys9ze7itz3H73IfdMmi+7TTKv7w//QewFVtV9yU3gxQPfhZ9H9
+jn0Xo2Fn6iW7psdxPsd0RD060ZyX737W/ddF8B/o591n3FS2f/6hopP3Fcf
z9D7TRu5L9tsZj7uW95TiNKmoPwq+go6o68oJ/cvB2mJL/4A+va3hDdVuM/a
vMF93z4l+ghn4S/RQOQVNkFe/ivG8+kYz/TRewdvoT9/ifHil7mvLsjJ/IN2
3I8fRejXVsE+bTPsxSUh34zKgo/BEvDRttP9+/flfyd0v3Mb5h+3UXwTvgXd
9N7IBb3/sR17DjdwP7k9p/dmcmFf4Sq9p1KB+ZtZzMed4r5xOwp7tT/rPt31
up+wuu4jfYb1vMmu+P807aOcer9gmu6/bqj3JlLyPlzUlvdbTH/h0feKLwH5
STQYvLe3eK8rbIP8guO8vxENZz7moN57SZhceIe+gg66j36h7is/IfsuqvcG
KpFfmTncD21eAF/9p5TjRCpXVv8ByCce+OQ9A+lnKv4TlNf983WFR7t0v3EH
3id58j6f26j3TPbx3oqdofv2ne6vrcl7Vq605HMfPPPJpc9szN/V13s5DRTf
Gup+3Ba8pxR3BB/8PfQdndb6oQTvV9i3sd/gY90/PwX9eKf3vtZyv36cSPeh
/6l4FV+CfhfdN/rBBskHfuMZwu9Rur97+Q2t7yi7V/Bnf533RaKh1Efpdd/5
SOYfnuP9HDOT94n8e8QXM4P8LByg/YLf9D7c7LTC97W0b8d7RsFHlN0S3rNx
Ncg3w1bgdTRB60+PvcVX8B8zCPwKG/PeSaz4Zp9TPC2qeJoRezY/Sl+jeG8y
7Kf3QYbq/dJuer/tuvxvH/pwv+r9l2rEO79S/L4Jv6YL5fjoU9If97NH67AH
3x/8NAY8Nml5byBaDR6Ft3bJXvV+1RDhW3bu43cb0Lf5A30HG3j/y+XX+0MX
hW/duc/fDVP+tUzx5nu9Xzhe7301A7/MHN1H/aLi3SHFy6WKF924Pz66xPoh
zKP7mdMiD7cL/HS3tP7s+brivd7vrKX3z0qSH4cV9b5FW/zLduY9FHcSf40H
w49pTr1/SvZvwRe7hfeMjNbbwSDdd56J9zLDdrwPFbbBv8Lj8B+vlz46kT/4
1Lw/4zcnlD+QT9s74E/cGf2bYty/H6bhfS23U/ayUe9bXFP+3RV9mGV6X+eO
3tt8wPta8VbeZ/IN7un9O71P/KveFwzwd78cvIkbKp5V0ntYi/Se1DXs2Z0l
Pvt/yC/NVN6bs/eUL9xg/uYf8NAN5f0oN4L3LHwivQc2hvGCy8g7+FrvRY3X
+2mv896Rr8b7bW7VPb0vyHuhwQt6n/B7vZ/xkd7XeUXvWy66Rvtdem+yjt4H
+h17t12w/+Ag+Wl4iPzE9KVsV+HP7o7es2oL3ttxvL9p3tH7wFbvFcZ67/I5
3huNzuj90fvI27/Ie2p+lvAo5r2B+BTvKccD0Icvovd7d/M+ka+B/YTf6r2J
4XqfpDTrY1+E997t13pfMr3ep9zO+3T2G/TpF+J/8U2933njEvSTEx9sQ723
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
9X3AJezXLtL3HDOVrx0g3wyM7LGD8rWz5D/RGvDLrtf3orsVf3ILv2cSX6IG
2j9aQ7zwRpCvBK11Xl1W34N21vw3OK8Mrmo/IoX2o1NAb5BWePNQ+zXNdN6o
/QN7hPgSzWN++6f2ozbq+6PW4F/4G/lfcCUT5ZXsRxqf9YZdLLxYCF77OYgn
VvlYUIv8L3iNfwaPwC83W99H99f3NnPBHy++8oGh2l/boP3ZV9hP0JV4GP2j
/KyE8tVZ2s89I//9hPjtPdR6pyz27idiPDta+eEqnfftyiD5IH9zgf0E7yOt
v2JoPXIqM+1jkQ96j7B/l5J4FA4lH/Yf6Ty6kvZLbug8qj7rvegR+g7HEf9t
PPKtoA/7V3a5/GMP8nYvWN94u7Q/MU/5VE6dl/TW/vpDnc/2Qn5BBq0nCxLP
o02Sj9avXmfs3f88peKb8CuJ4vkh9uPDO+yfm758L2DWKZ9oqfO1d5RP/nde
WwV5ei90fvEV/uQ+135rR61/Tys/i8N+YnhB+N5F67F1Oq9brXjWT+uJbcTL
IJv4PaTzgPrsJ/l9dR4wHLy1afV910LwItT5c7QUf4iysV/uFhMvgp36/qyR
zl8bKB/IqPOi2sjXi4c9mRtav3aSPU7VencP+Yj/l/Lj9drPXKV8dIby6VnM
b1Jrv++QzofvYS9BDOHdVuFHE+1fNNd+ckt9D1tY+zPr9X3qw/++F9L5zTbw
z+5G/qGn9V1i7ddt1/lZCdlTSn0P9Vh4cV3fg/yufLYB/h+m1nl/Be23niLe
mjngscsg//1R+0VD9D1wIn0/NE3yW/ff9y+0dzeYz9f3jOEJxa/nkl987Vcc
0f9XkqFvM1n6363yCH3/0pj4Fk0T3j3X93w5WM/6XXReoO9/vWtaDx5DXv4j
7NXo/N481f56au0vt1e86JVaeKb9v9h8LxL9ru+pbsk+5sg+RrIeDlMRL7xq
rIfDgeSXUSx9H/mU/U4/uc7Llss+J7AfGu3Q+Vsu9le98aKvoPL3XdofG6bz
Qn3vEPZRfrQE/Xt1kypeEe+9n5Xf7Vd+vRr+/MfKl7OiD3+d8rUPiG9BF+Fv
Fn3vPUPxKj/14QLFz9j6f0YC7Y/OEl5uw/7DnToPqqfz/QXKrztqfdFH6+lq
JRTfwCvr6/xtvNZHOp8OX+t87CflN7OIP34C7QclJz8LD+SGvvSaL738cSD2
E+2Xfc5X/rlK+3/f6Py1I98T+avBQ1sT+3PvI2/3Uuen1eE/OK98cTDr3bC1
zhPbKr86InvX9wC2gs5bMitffES+F7zH97FhOc7L7acZpH/49a5qvyy59oPO
if58Ok/JqO9N9H2Op3IwgfbuiejLLHm11X5FcfDEV/z1/9Z+zTCdB0/XeqiN
9kenaX+lGuuJYDTnI2E6rf+Xar24WPlXPn1Pt1X1jxR/Kuv/PKdZ34Q3iN9+
ba3XB2r/czP+aevKH44rfnTR92X3iKfua74/DX/ke7Ewh/4flZHvicwT8huv
VSHGK6Xz6VXKj9poP+6Kzg/a63vADeQ/4Ur8y1XFv+wK1su2Cf7q39D3rhOh
z4Y6/1mmeJNR+LlW56cvFN8z6HzgJfOFMXQekkHr5z+ET+8iP5tU57PtsW87
V/tTk/T9b0fWI14X9ie8D/T97V7lk7G1fhip75e/1vfz7cA3b6vWq7EUf2Lq
/zyrtF+eSOddyfQ9wSDk4Y8j/vtz5V8FwW+/os63tpN/BHHw5+AS+ZYZrfxV
38f42dF/aHR+9Ify/enKH0ZCf1hM32PM1Hn3Lp0nFNX+Rn6d92eUfe3X/zU+
J34EOt8Kv5X8Ygm/r+q8exP/N/Dj6P90qRk/TKf9snb6HvuA9u8f8P1Y9Jn+
r/SL8uVtwtP4fD/qfa//7/ZSfByq/Sqr71Viaj3ymfbbJ+h7n8LYfxhbeLJB
642+Ot8er/VG707CP633M+Gf0VLpo4by1+36/1oG+HN5aG9fyT9S6v+jSfge
xa7R97cPwK/wFvYR3ME+bEHtTzclXwruKj94qO+P52t9eot8zezB/t3btLf9
dF7tqf0fzO+yML/Lp/VpPZ23dcYf/F/1fWFZfU9RkP0cNxE8CE7Bn3X6f8U1
fV+6mXze/Cx6UmJv5mN9T5SH+Bxk1vd6vfV92Gr8KZwv/6ut86BLOr+bJXr6
s94L9f+LqIn2l8sKP3/S/mVs5fsVqLe/Cz9f6v8MlZQPt9L3xa3Be6+t8GWI
9pOWaj8h0P8FHuj77wPgW1hS+dD3Oj/foP+31kd/boe+d/tL30N8h33bq9qP
i5BPVEn7pSO0HxbJf/uRj3qHlT8t0vntYfnvLfJbf6fyqZvK339gfy7qK3vZ
rP35ijp/bKfv9RLr/8W19H+R8vq/3Qq+xzYtsZ/goOzjPfTvPyOfCEYKf2cI
T0vo/xpD9H+4RFq/NNX3BoV0vtlY+WMjySs560VTlfjlf6LzlHn8X8/X90Pm
P//YjnwDX/tJM/S90lX5U3V9b7VK369mJD4EnRRv4woP3iHem306zzsrPO2A
vu25/85TtZ/3s/DsmfZP8un/72u03679P9cbe4pm6Xz4gf6PoPMAU0Hlq6JP
61kvjr5v6aj1Ww7ah+dYz5gl/P/J26L/V5TTfvGfiu+f6Tw4rvA0i/ZXFitf
mU7+6VLq/3fnwTubDf+1gf6f9UL6KA9+Bv99/1ZQ/3dKBH3RHPnTDOkjAfm2
K6/v874AP+1Y4oe3U9/H6ntwN0D+/BP+bNrp+6hV7J+73di3GSH73id/f6b1
3iidR9RU/Dz93/cJ+p5rE/HKLNL/nfLq/wx70JeZD/1uq+jfgv1ES8CrKLP+
L/pK68fPdN/HKL7/i9YTL6O8kt9B/Md0xX+CZdqf13mA11Trl2fwE1rRP0Z4
d0/f513Q98TLFY/aK/4/4ftf/4XyseXkgy6h4vcu7Vd7yp//hD5vPvsX/mXZ
5wDFm+7k5+a48PyA7L0m9hMdJ57YU4onG/R9yg59r9RD/79+qf/7ndb9RNtX
0f4I9hRU0/79QtaHYT3Zc3F9jxzq/ws1dT55TPj0SOM/1f8RftD3obPwdz+v
8lOr/5N10Hw9FT+3S1/6/1a0UP/fSKnv3zegf6+j6Bug8lidty7R+jKpzk9r
8f8m7wH/x4qEf0FcxS+r/eX2ynfH6TyxpPYDPlL9JH0/of2/6Kn+39tT8h+g
fHUA9hek0/f0VfX/0J78PzD6RvHplvaXqwifE4G/0S7Fszhar74jeY/VeUZq
2edr9ufCl9JPGtbHkf6vGbQl3/NjDJb9LKQ8Wech3XUef0Tfw78le0/J/8+j
I2o/SfoLVX9P/v7Hf/8f0n0hNxV/FksfFRQPTmk/ei70uQ7KBzsif9MDeXlF
kZd3GLwxmXWe9JG+n1shfd3R/9fu4e9eXvDI1dN+SUz9v7CC7Ku46Bmv/0s3
4/+1rjT/d/E+0//rr+n7943Et+AH5GeGab/sgM5nHum8o6r8syf4FCxWfpJO
67Vq0sdi9r/MOX3vWVbnYw3p703S/yFq6rz0K/DefK79kEn6f/kF9juin/T/
gqPar0yp//ce5/8F/hb+32+y6//CyRVfYghfu+j7unayn/n/5dfKv+/L3qpi
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
3Ic+foT2UMYHvbFftXxGe6rD9N8YjfZt59BvU2Lo5Mj3pkYPo/1V1A8vC/p7
Raahn5N6cg19XGn0Mb8uIf95CvDJIf4/Sv8gI/Fm77JeMA/XM/4w9ut28DcD
hP9V8tHbIe2bx0s9IV799eRb0OQr7aX3w39DhDD5buUYqb+nab8wG/3yUX+C
ysj3/3or9XYu40syf6mSEt+fqX/eG9EngtTjuYzX39EvWLkPeYWQr0cR77bi
PZnP0D9oRL3ysh6T/IwNXg2JnyA/8ePP3YW8Yfjf3IPWOaDVYeLHtKPeBDEu
ML59UuJrOPmkQrHXG079CZJ/gV66Gv4jyQf3i3ZT9avEG/U82Cz14f4E8R/5
4Y2W9VAE8l8V/5v2IeGR35z66Bd6wvjLV2mfmIb4LkK7d4B67T8g3lVkhf+m
CZ71IoXRdix46kysf7xWMt/FAt+g6WjGfyNfdbg94PtJ8IpOvHvjBZ8mO6Br
fgffDeS3H4r+ajnxbUR/c+4h8kfkwL9DyZegX0zxN/EbRLuKvTVOw69MIvR/
8gJ9ohYg3ypJvZhAfNlngn/3/9D3KPnq7SKfdV7a1f/i/YyM/wb+OgL1zWYk
ns2mNRJf0Pa1xO8U4kWFSj16TD3Q0cHLqy3258Z+byj+MeFk/qn+Bn7piUdz
5SftN5/Q/05u7Ov3D/rUigP/FUvp3xE8lSf5V4j6rS+xvgsSMl8Ff5yh/UhC
8uM89cyvQrz6h6i/eucLxrcg/n0vOf0LyHr1E/arjsfRP1Nc9HtD/XC7wNN/
Rnz6+9Jif13Jt7SSf7MvMn5rSuJn4T6ZT6JQL6P8i7xvqYjfxdux//YP8Ioi
/jwZA/kpL8N/R2rw2b0O+dmpJ265rG97PkL/SayP3RuZD9dQ701e6oceex/+
CYlPd/oN/LcUhd6LvvZgZPR9cBI6keB7/yzy/iY/7LMTtE+Ih71X7yKva3bo
j1fgn4d89nrLerEP+gYhB+i/l/nObpX5oQr2uryvaP9ZCH61yU+1Svw3RvRt
hb5eCPror/hPfUQfVzQb9oxmvOuK/u6V5MtI1k+q0iPwPZiL/vnvYO/pEPjX
uom8zhnh/wP+fk7J92zw86oTLy4a8W3OgI86+1TqT37omQ8Y/wN59jDrFbWO
/DY/JB47xCcenv0n+VSO8Xef0f6UemF6oZ/anJn+Da+h/7UM0OVlvXgnHPr+
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
ukv92sbzmz5J/TZHJJ7OMV/o9C/leYDnEdOQfNWJZT0bm3rple8Ivz7kj37a
Gnke/jLjWc95yWQ+WEC9DEICWV8yvwUT5HljAf7USTKAf6OByK9HfgTh8Zef
g/kkqCv1IiLx4g3sj7zKrJ/dCdafqqLgEVHm7+bp0ac6/HUd/KsfdKX/R+H/
mnps10p9zch6zowin3w7lP5TsqJfffJNr0Ket1zWu5lkffFS1h97WV/4K6hP
QfPcyO8/FnnvmL91Jubj/62v9BtZn+6An5crD+OTUB9sAuLVhpP5thX4OPNB
1lPUW3OD9UIQi/WI79DH24I+3izqg/eYfPNHSHtf0fd/65O9Ev9tma/USJ5X
9DX85Z8h/v1/ZP0Rkfzx+1OP3Uj4e5mo16qWzC91yWd7g/gya1LKelfmg5jo
Z5dK/YpDf5UK/uoo8Wm64k93UZ6fOvE87GWQeMzTEv7Zk0LXob935gbxs17m
r+bg6z9mvjCZZD7e3U3qIfmjV8l8mIr8MVel3qWLzPibMv9tJ17dd+LP/1fW
HxFEf8t4fxnxYx7mx77Yk+H/EryD6cS3/4F4dpUGo09reT8k7x/UaOqZHS31
rCj1XheV95MRZP22T9YPGxnvl5L1+w7Jr+nMH2oneLnWzPcqKe/zzDv0seeo
/+Yn70P1cJ5vVTipD9MzSnyRP8Fo5gf/u+DVS/J3ksz3v+R9YVOpR9upL14o
+plH5KM9b9Hnp6xfwheV+Yb1o9ezL/Q28FYJxd9Tef73osr6KCP6qX2S31up
58E94lGdJl79lsRfkC4VeHQnPk10eX5ILe83Qqgv/m3mU/sN/e0p/GOzk592
BflupjM/uK/Y536QP1ri2W8j7zO6MF43zgn/SONo7ybvHz6Tr+4a+PnRqGdu
LfHr/4P/bAbJtyvw1y9Zz6iLxGewWt7nFeZ52oQQf15yeT8zT+aDvV3/j336
N3m/EEH4t5X5tZ2sByPIfDCZ54/gHetV1x177HfqoavN85Q/mOctY+T54zbv
i1yIzLcXmP/9Rtjv75PnqfP4Rx/F/7YS7ztdD+pVMJ/1va5CfNrVtNur0n5a
fm94J79X5Ge+cgeov2Y2/b1d9FfF8Lf6DX/rPKwXvAPUY91Hnre3QftVktM/
U2/a4/O+OKjKfGw6kD/+O+Y/fVmLPQPA87ccjL/N+snIetrll/cNWeX94Hvy
x2+PvOA88lxv1g+uLONdZ94H2u0VBX/iJxhP/PhbqCcuMXiZfbI+vifPu/+I
PHnfE4SEIG/aKKnP8Ddd5fm6stSP7Ojnosnz0Wr4q6isr7w65LM6SD645RK/
cZFvkiDftAWfIAv1yj1HvqnMekq9Ff7XpB61JH78odTz4IM8L3yU+ndT3gdm
pj75JSSfq0i+f8Kf9g+pTynl+TsB6wWdW96/JJD42k88qlysV1ymJ1LPS0r9
ZP6xN2T9nA5/esNkPXc+kcyv2O+myPvulvL731bWY95i8sGsEv/Nkve7Ufg9
05aU9WMNeZ5+xHyo88v7iP1ify95n/GA9bTZLfj7PI/rGax/vP6yXl0v+TFM
3l/EYj3nkrI+snHwp5ko80Va9DFt5fmjH+sT9Yz51Csuz091iH+zRN7HhEi9
biTPs2fQ3x/Jes0mkOe1PfJ+96Wsr0PA368A/nYZ8eNVlPcDk+X3yVIyH7aQ
31MfU5+9QPJ5GHiqpbLeecH63s9+V9bL8v62A/XF2y76p6A+qnTy/G95/2FS
yfvxL/jP3ICfyin8q0GbNejrF5X3Hy3lfVtWnm9s34f/dz7eJb9v1aa+BhOZ
v4MXEr8e+eJNIF+8vfJ7Vyyxv6/8Hh/C+0DvJb/X+I2pf7pTfOJni8ynk2V+
bzsc/rWZf1V++Ad1Zf32QNZD1eT98gn4m37yfu0G60d7St4/VCIevTySH9Hl
fXg+2d+xSH4/6E68+GvkeS8f8eG2Sb776B9EZX3nmrC+CdbIeuSQzBdG9I0p
v1/Gl+eVDOK/TvI83lDi8YD8vvOe+qY8eV/XhPw051hvmRqsj/Rq4sMrJfwO
8nymtqWSeib+KMb8aNcRv95h5Lm98PduMJ+bH9RzNYx4d2NYT3vPpH7+LvNN
MfqrSvg/OCy/n8enHpjh8jz3E38GX8HPy0X82sPye8dx/G9DeJ9i2hCf9iTr
HztInm+3ZYLffyOhz7MfwE2X3+NHyPuLpuSjWinv2xbjv2Am/rTdqWdurzyP
FZP38wtYr5hH+M+ml/xoxXrBxcJ/piz+8xKAh/0g66HG1HMvBusD106eN3vL
euYK9uo/5Pen7uSH+kJ9MvJ7sz0qz5sdZP0zQ96HlGT9E/zNeiAoT3+dVZ4v
z/A+wq6W56NL4Bk0hjZa5teyUo93yfzZU96HL5fn88nUO5tD1ke7eZ52O+T3
+THij/WJJd6JF/u75MN4/Ol6oo/3C/m6B/OZd1fiLR3xF2SQ58Wm1Bv1S34/
30p98eLI+5sFrJe92fK+fJu8vygozwfVZD9iiPy+857fh4IL8ntaQdnfM4v5
wbvA763BWN4X61/yflcRnyo366VgqqzXu2OfHS3+myX+nC/x0IPfx/wRGvtj
yu/nZXk+1mWkvtVjvlM1ZL9sHXl/HY75yu1kfggeyvp+hzxfvgd/t1J+r/1P
fs+9xH4jb9FTef5AnqlEPTSdqWd+VvJZ3+d5Q/eS5/FVwm8/8e2nlf0izVmf
m9HyPj6e/L7fS54X9/D7j+rO+2OXX/K3CvkbzAIPF0/wqCb5/JbndXdZ3n/9
I+9T6jN/6Uny+1Fe7PP3Yp+9IOuBCoUlH+V9wRzG63iv/i9+vqzfB/P+yBXf
LfbIfqX9PE/rD22g27P/wu/B70UuD/OFeibv/1ZL/BtZn2aQ35NyMv94u4kv
dVb2+5SV36N3yf6J1sSjWsL8FEyW99cvqa/ak/cDS3ifaRfJ+9Uv1HMTg3wy
0aknpqXsl7zP7xPev4x3i4hXvYv3ge4J+WLvyPqsKPXQayP1s6vMv3Pl/cNW
yc9Q2X/1GjxMdvDVP+T33IHs9wu+8nu5l09+3z4s64PX8vvlEKmfz2R/Qiry
Xct+GNVA3k9Nkfdd52R8TMHnAvXZn0G+mVjku9nC+0zbUX6/Sk886Dmyvg2V
+h6HePcnCf+OzK8qqbzPiSPr8XiyPy0X9TQYL++n7vB7vQ0n84H8fqPby/wp
v/ea/9ifZ+/JfqXlsh5/Qn1X6+T9yH75PaqzvI8eRX579wUPeT/rt5X9hF+k
vpRg/44+y/6IYLfkb3t5fxFTfv89LL9nHJf9NQfk97bfhd8zye+28nt5etZH
6qU8H8eT920ViV/vX3kfV0ieT87I/oYu1GMzSp6n38vvXXvl958Ckp+7qUe2
p+x32s3+GvMMf5ju4BHkkt/nM8v7gDbsfwpSUB+9UbJeKy3Pb5+Yn/zp1GPT
cBvtXdmf4E1Dvl0r+2Nmyv6oxfK82Au8/Cgy367FP95b9LGD2C9oUrP/w82W
980RiQdzC3/r4uLvefJ+2Mr+gR6Xpf6Dt3vP/GRPij9eyO9VrYlHu1LirYLU
s/jnZX6hvy4m69FLsj56Jvv167Hfye/Efm63WPYjfaHeeN+pN+okz0deP/Jd
1ab+2kvyfFSE/bAmA/t3XTt5X7OihcyXsn9pDfOnuSz5mUDqeUu+h3AN2Q8U
lJb3O1fl96vc4OnFEP/Pk/19g+X3jgjirxf/+z2V+cVfLvuDXsnv03/I7+Ox
iSdTmfnedmI/kvlBfTfxZT9fPOYPvY56pX8nf/xYzC/mhsxfJ9g/aMqyP8J/
L/s/G8SR+Vnic7i8D58v9fen7BdtLM8za2V/20H5vmQv+510RdmfKvtHVTv2
p/oxZX/NCNkvu132oyRm/4beTvwZWS/57Vi/6/3sr3RLsNdFhZ/5Kt9PzBL+
CdhPFoTK9yCfRN/m7LfTC2R/Rkv2G6t07Jdz2+T3KCP5Mxd8/dTMNzZkp8xf
Ceg/XPavZpT8kv13ugL+M0XB028meOZnf7SaKN+PnKD+2Yz4V6WhfrkmPF+p
mpIPNeR9+jry1xspz6f9mQ+CUbKeOSb7I6OyX8DvKd+LnGd/pV3P/OdNlt+n
r8v3KAdkv39r8HMjZD3QU76HKcj+QzdZfs+sRz3yN5I/XgT5fiSW7Hc8I7+3
3ZTvBe4zX/qpqG8qP/uZvW+yP+4t6yXly/c21clvk0X2v02RfO0m+++6w88V
4PnaLpffM3vIfFRX4j+jrHfTgZ9t64s82X9/SPb3vhB8b8j3QiNk//o09LW1
0FfNJz7VNKkHRSReV0DrW3zP6L2IL/OTzF8tZf9X4Q3oU5J6pY4dlfmAeNRx
ZD/5esmX74xXe1OJP/GfP1n2d60lf1w/5Ksy8j1CCsl3+d5D7/4u35uJvxbj
L2+qzAeLqe9qgPw+PEneV04jv8002U+xQvaPNSS+vEXkk9eX9bZJiHx1XvZD
R5DvM0aw315Zqd+FpD7Xon6aKaJPFpnfmrPesY+kXq2T9xsyn9tBEn8Rwcd2
SSF4zpP4Z39pkFe+h+vDfnbXXdbv4eX9d0b5nme57O9fSP6Z5lKfQ48LvvRX
Odi/6velvnkp5furZvK9RAfZ//2M+qQqst/arxVN5lPZv3dO9ks1kXitTz02
OfCXKcX3D94s+R6pJN97uIbMZ24z+LjP6O8uwt/LL89r7Vi/+OH4vkDtEv/X
ZP+6d1v2u5eT72Fayf78ZfI9ejG+VwlekW9qCfvdvEnoo9vzva6XVurjbdmP
uIr49pqCjz8O/9rrsv96I/jYj0kl3mV/7XV5fvD5vsSfJfuXR7K+8faR7+qs
vE/6KvsjX+J/91W+jzjA92L+XPl+8TL13eRnvE4u329n4/sc75ngP5Z6bb/L
94mD0dcs5Xu+4Df2y/v95XubEuLv+rKfeSDrL10Z/3m18Z/LMIL++fne0EQl
P8w22e8c4A83SNYf4+V77f/FU2T5vnIU36/qc/L8kZ7xKoa8/3wr+58a0G43
SD7EEzxfyvcWOfCfu0s8+TvleXM/863XWM5buA1+KqXk80nZP7l6LfI3832B
a8b3sl4pvo9zLVlPBImpv+6C7G9eIvX5EvHlhkl89eG8Cm+6fI+Wn/VcUBY8
/XcDaH/F9022J/XVtJT6P5Tvi/1Avu/8wfe3fijzlWpDffYL5pT6iL5BHdF3
G9+DujLgb7MRz558z6F/8v1QkBN/mgTy/flSwbMR8alykB82/36p/7K/KQp4
m2Tyve2/4Oc9kfzIy/e/rgHfL7q0nAdgY8r3TyfJ72CFfB+RBnv1JOx1Y+R7
zX3yvV051l/usXx/lJR8NLFk/TEMfD3N+kXd4ntvs1++ty0i66en5JO/Up7f
n/C+yHPyfuOLzFfp5Hv18zI+yiiJD/m+9Sr42vRS3/dTj8wT5le7Sb4Pf0c+
qj/F/qXUa/+wfD/0SdZb7aR+HJH1XGrxT2fqmx8q3x/f5Ptiu0e+3z4n5zPE
lHx7Ld/rzUCed0Dmh574U8eQ+Ws8+rryfF9pSgyh/2f5fjOBxOdovhe1mcFb
H5HvOariX1P9NvVmKHipv4hndUrq104t9Zr64c6yPrF75fliPt+DuQ3iz8vw
D+4TTzoB86uthT72d/Rx3/me2tSX71OrSLyWl/XnUb5XVUPke9YOUt8C+T43
6Cv+wL+6DN+L6kH4y92gPuoeH+V7TPJH15D1o+K8BPUf52W4eJLvYyVfR5Ef
XgX5vus258sEaeR71KtyPsFK6rEqKv76LvnRXPLnBt8fB1vl/IKS8v3uZsHj
peDxrjHj4+yj/3jhN17wDmU+VPOgvXhSv/vzfZ7bLOe/5OF7VS+nnP9QT/AZ
IOd73Oa8CxtvIvqlfk372tlS3yXeNlLfXUXqoRrG+QR+Tup/kJrzifRiOX+g
vZyv8ob486LjD/tBzm9YK+cF7CO+g9jgrT8w//id5TycqXK+yWw5b2cVtFnM
99z6s9S7KvjPm8P5FEHfduJvOd8mtZyXtErOGzol5zNU4DwI/Y3zpvx5e6Hn
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
Oa//K/XC68v51/5b+JlA+Mn9Lbo19x/oXtz34nQN9Mv/TM6rl/PpN+OPID78
gotyn1Np9Amycx+TOcD9Fv5k8HIvyF/TFfyDzAWga3OfgjvLeftmLfcb+QH3
Sbis2KtTcz+FKkw+6c/UK72U+mLSoY9OQn315pOfdgn3x5jN3F/jvsDP2y33
XbSivgaJ5Tzv9NxPofpzPrz+flPu0+B8elOFePLWcf6xehvQvwr8dHTyx+/O
fRT2GuNVdu4PMPGxz2TCPj8P+WAqkQ82G3j425DvknGfk8qdgvGduc8kOIQ+
3oSvch8J8Wq7yX0nD2m3leQ+mv/Vv+gRsXeSnNf/HnxcFPzl9Tws/uJ+Dv1D
7p96y30Xugr3ZQUxue/Iq0s9UMmqSv2S+4U0/nD3yQfbXOI1Hvdl+KOlfpWT
++yi45+gyGnkDZL7VDaTH+qs1NNEcp/Z2eQyP3MflxcjPvRP7psykROhz2zu
W/Ly5pL5Q/LnannJlxPIO8V9SX6Ws9hXUeLvF/drBXnBx8xHX++l6HuE+/n8
puHov+O0zPeMV7muw3+83N/zivuc1Dzuw9FjJN6f0d8z3Hdm83CfSJBF7iNb
R73SMeDnt4Wf7sd8GSykXgfNd8h9K/hHVaA+BXto9zLI/WE3RL/03GejD3If
h/9yGfj1l/uP1lAfTBXuv3EDJD6OEx9eB6kPkeW+iwroHySX+5BKcf+UK8/9
L7Yr92v51bmPx26Ddoeh9VzuF/RLcx+QrbBe6qvcX/ZQ7tf6jfuUdF78G1RG
f1Nxvswv3Ffk6mCPWxie9jFX4B8O/FRWuW9vEfer6fDczxicio78B4vw903u
t1J95L6pY3J/yrgdEi/oawLuxwsayX1aFv3NJbn/LTP+81oUl/kXPO0auZ9m
uNwvl0bu82os8XGH+1lMR/RXO4tAF+I+QVOc+4vUVeqF2SL1IqPUn5dSvz5x
n6haJvcntuV+JnUXPNwI9AmSyv1V8xbQPoL7w8yeY5L/WdD/tNxfFV/uS7oh
9We43Fc0eCn0ePLDFpT7A09ST8xgsf8HtF9P/BOTeqhuop89JPmzXe4bbPgb
+kaQ+H3BfSpePu5j9NJwP6YbzH2irtxn6Ihr4X+C++L8fhJv0bmvST3i/jqz
UuwLL/dHJuT+Q1WWeqCmUg/cJOxzD8gXNX+YxLPcP5hR7rdMw3106g73WeoE
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
5/2AzQK+9SDqhbPyvmAAeDJ7xZ4CEu9xUm+eyO8/X2U9fAr/mYri70asN810
WX81pr9rRz3ya+IP8yf+CK6t+f/mJy/pLuxvS3xVXFmvThsr9Yz37S6TPD/c
k/y8xfOAN0vW/1OJj67JfOz1Id5BZ/FvGvCictFu79PuDcQfpgV4cWuoJ/ov
8KGfyO8htSWeiXk+CloK3reKP6rwPON3lPdbP6m3fk7qrVo/UuYz6rcaLr/3
fZX1wSzyVyWV+cHKeryrvK/+IPX0g6wvo4yV+t5Z5ueBUj/kfZa879Ln5Pfc
+ZdkfmT96N8Bj+YV871fhfk0uCW/Z8yX99M5qWdeVZ53XANZP5Ylvu6H1LNM
4MU/JM8zd1gf+6Vkfmwu651Z8jy0W54npsv7jWLML94a+X1Gfi92ZZm/TXPq
ga4k648M8v75saxX4snvjWHBn/dM3vd0kffXB1jfBG3lebaQ4OEE9UH1IT6u
EfVL56R+ufyyfm0l9egP/GHmE++gJHj05H3h/9Zr7qm8n+3M+2m/0/9+T+F5
zh0WfP8in+1dyecC8r6lkdSDU9R/90nqzwBpbwD+dOZz0CH83mNvyPu6a/J7
UnPwqBtKPY4s+2Fuy/uQ6pLvSyVfZ8p8OlfWU8NZb/mbZP2blPcZdvZl8b+8
P8kmv/+O5X2AncjzlEvL+yh/ruznCYO9rjb13kSnnhpf8HVd8iUn8TD15P3v
aXn/eOiwjAfPwQPst4V53xZ8kfVoXNYLQTj0NSUY7yeV+Xof632zW56/xsnv
H22Jtzojz3MreD9lR7OeDwL08SLDT3ehXtu88j75veCllqxPCsr7w8KyPpjG
++jgEu1+a+Y7f4+8r5b1qkrB+z1f4u+fkPdZnaX+TyDfbFqeJ/2MPH+oJtQT
c4Lnvf97IKI9G/XaFZf5q468zzDy/rYD/E1p7PF+s16x+2R/WGnwp7LK++Xa
+Ff/J78nxZbfZwttl/mB5wsXkd8bvbHyfLpD/JdC4tlR3id8kfczJckfu5Ln
CX2feqBC5Pf1cvK+4wvrSTdM3jf1I37+Hfn95Am/x/r9sdcLI/a2kt+P1qGv
J78HBcP+k3o5QfKV/uY5+WtfyfNOAvLPPJL3bSGC5zwyX7Yhnt7b9VIPZD0b
Ir9vr2a+tf/J84aHf80teZ7MAh7ddfLJxaIe2zHi7yvy/F1J1m9j5Hl2ibw/
GCjrY0f90A/wryorzyfLZP1XVd4f9uD9nEst8rLye6mXmHplB/K8qMPK+/V7
Mh+Xkvn6E/HyixMvs5D9sV5G+X3mOfmpe1GfdH15P95U6scm2d+3Wuafp9ij
3p2X+QV8mliC/9byPrYo8VKp5HmtgzzfJCff1UCpNyWIt/sh78fryHo+sfxe
NFx+L50n82lW+b1l/0WpD+DdjWT95A2gngYLZb10WX7veyzv88qwv8O9Ae+6
k8Szkvz+k132B43j/YOXW/rHB18mkP0CL+X3tTbEQ5eg3c8pvwcPlvp9T953
N5H3A/Nlfrgq+BzD/i21RX4fPSfz3wt5Xt/EetHO4HkuWLZL6hPr2WCb/H4z
Sd6PvAVPOj54CsKzP8r32W9rZuEfU0/qb3t5v9ZJ1tc50cclRB93RuTdk/cR
O+X34GI8r7vFsp93G3hUMWR/4Hfx90T2k7kt1H+dV9aD7Wg3yWR9EFH2nx0g
n01z8Wcp2U87j3pg+7MfzMvO/iL1Tn6fGkX9Vgllv31c2V+4i/0QtpvsV2wt
+p5kf4QrTH6Yaqy39SiJX1HJpxmXpF7cp/2t+Our1P/BxNfNl+ejo+DHnAJf
5gvPQ26AvA/+It/TbJf9fh94P2iKUB9ML9kvEgV9tcf+Xe8p+5G8NOwnCkrw
+6auIe9b2sr72ajy/PaA9VPQhvlJDQMfKpL4/6u8z0pC/bDx9gne5PeQXeSX
q8H+fa8pv6/6SWR9cop8d7cEz1aeT7PK/r2O7HcLorP/0I4XfXfL/ov/ZL9S
LdkfsR35errgr7zgr6/o21befyWV/cF50c/mlfksF/UjeCzrhwHye3Yi+f2m
lazXckl92Sj7MXew/yxYL78fx5Pf45/I++Xjsj80MfxtDNl/E0bms4Giz0Op
R5mpr/5Afg821+X38Am0e1Pk+WqK2HNA9p+PZr+lbib7Fb9Sf1xdqafl5flu
huDNyPurRezf8irI9wAPZP79T/JP0a7r0R7sQ9/gGfmhJ8h+gvaS/zVkv5u8
nzHRZX7/V95vP5f3XW1kf0VT8i94LPhqyv5sX7Of2n/G/mIX7oPks+yXyyX7
KY6znvKTMR/bENnvvAX77TnmQ9VG3ifElP1qe+R7hJPsV9Jd2B9rvst+ddlf
4lVjv5t/RvK3HvOdiSnzZ1b235r8jLdNwaOtLL9vxUP/4ADyTFupby1YH+re
8nv2UsmXFPjPX4L//Ajy+9pV2d/wSdZz3fGX/4n64mJTH10p5lf3jecDNU3W
z71k/ulEPfb7yO9J419Lvsr+wj+lfmX93/sc/Bn0lf33Q6inrqLUtyWyf7mx
7Ocz7C/3brA/1j8keBgu9lTh+wU/DvsT1Uv2u6qk7J/1ClKPzAiRX4zvkbwU
4NsdlN/PS8jvqVlk/8BJ8t9sEX7dqI/eJdZT/nHJ35l8/+E79q8H55kPTEv2
p+lL4s9Ssh8lCfE3a2R/WhfqaZBD6tEJ2a8+KBz706/LfDNU4jVX6lcx+rtr
Up8ughdvtfyef1D2Q22Q/XM9RV487AnOsZ/OjpD1wnJ53ilPvqj97Hf11sj3
HGHwp20m9WnVDZm/qC9ujew/zs58ESyXepRH9teWoz1Yxv5Pd0/2W9SS/fh/
yH7o2bIfsarMj12xx4svvy/47P/WfdiPaBPI92ndZf9uKuqD3iDxfM735Gas
fD+SWtZ7d3hecW3l+5UJfK/iygv+GpGPeqV8n5CC+PtFma/938yn/n2Zz9PI
7/nPBV+nZb4ZK9+DvZD93Tepr7qffA8zTuplQ/ZPB548vw6Q98Wp+V5V7RI8
Lxc8ZJP9LgXl+6OLfF+lG1I/9BzZ/9MMe4LI8v3HEdkPXlHiOZPvLe0q+b5k
O99DmjXyfWMk7Deyv95PI99Pz5fvkTfK9+d1+V7TzOd7Er+o2LuU76nUc/ZD
e535/thNl+8f9vK9mWuYiPyJRruJJN+HtOT7Vd1Avu+rSH3T2WS/9RvwEQyX
/RhViI+ZI3iuJuurhPL8fQP91J8vpJ6jv/vE95Yuv3wvF4f9+/YM/rQlqdd+
Vr6/VNH4fsHrz/ON7iDr0W/y/eBG4qEisB/c70S8TXfJ30d8v+JOiH/7y37/
T+SLHSjfL4UBT35a2Y9eFn72f99TpWb/vXdR6mk72s0G1tf+Z/Dvosr3SVvJ
72Ay9dmvLN9btsZeteK81Bf29+tM4v/G8n1YBvnetqp8z7ef8whUgTSMfyD7
5ReQn0EDeZ+SS/KtmOxn3yPPa6ukHo2V7ztKyve1Z+V7udR8/6qq8z2jV4rv
Fe1p5Ach+DMohT/VxK9SP6R+3pLvidtCu07yfXYg3xc1A39eDr6X9zvFhF6Y
BHl5+F7T/sH3tv5Ovh80JaU+RhF/npb1cyX5/lfyxaYBb66V1PdpnH+hE/L9
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
fDH4mV/E092FdrXAv1cpC+NHVm9j/h9ifEfr
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1359.780062357585, 152.52925703260635`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{333., Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{1359.780062357585, 1805.473876953125}, {152.52925703260635`, 
   212.4393310546875}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.772990403435445*^9, 3.7741948097997775`*^9, 
  3.7741975139816966`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"80075db7-6504-4d67-a70f-f02b3969854b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"xgen", "=", 
   RowBox[{"inverse", "[", "zdata", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.772990463227706*^9, 3.7729904735245547`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"e71f3f19-2c7f-4fca-9e85-afd8c6f93ce8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"xgen", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7729904747737827`*^9, 3.7729904837004137`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"b435fb13-ec03-4063-a08a-ee6b982efdb3"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJxUnXn8T8X7/gfZIkv2IscSsu97GnuUyhZlO9ZCsmSphEGWLNmzc4hU1mQn
DVJ22Zcsp5Q9W/b19/l5Xv74vv95P+Yxc2buue/rvu575pzXTI5Wneu1TWiM
iQsb8////+/PvTJ2sv3//8um6Ob/9z96veHjcnz3r67/v+z/7PS4bL7873E5
3tX9cdk+d/tx2ZTrTX3D+7SvPpryguSP+wsaTaL9lNSPy/7aZMpz0zwu274j
GG9mUuob1UCevocZb2o/+hv88HHZPRU+Lgctz1MOv3pc9i+mYrwzQ3j+i6fo
v0XHx+Xw96uP2wfD32T89icon6Q+OEC9bzmc9lmQx5UawPi5DP1tRR5/F3lM
hoWPy9H8bLRv+TrjdzhGfyfqM16fPxkvS1vqB/yL/EUo+yqUfYy+ojboKzw3
n+f3ZqX/G+1on+TS4/bhpx9rvLuU249iPi+g/6gYZf8W5TBZD/qvg/1siD39
F7co93yb+WY6hXw7pK9Z6Cve0o3+T91gvPATnk9wj/q5PG9L87zPgX3cC9jH
zxlG/zOTIN+f/dH3PPQb15lL/3ky0/7qhzw/GvyZGYsYr9kLzOfyt7Rf/Nzj
sulK/35GYsrtZ4CvOemw39+fMf4K8BrOkz1i9B9kpRyvu8j8ly2j/3E5keem
8DAsAfJuHMPzPfCfoAH9u6H0764toX3FAPt9RL03D5jPyFnMf1kG5K06iPYv
JWS8T1QumIj65QPpvxD1bhd493XAe9B3MOUVav8D+ret5R8VsH/4ofx3tqP+
wSPmv4f5xruZr9mNPcyn2CM4if8GY/Hf+BxlX56ySSF/PSx//edTxrsGPmya
CYzX+BnkTwi+3TPgO8rGfMOtzM90AF+uLfiOy01lvM2M55eDx7DnTfA2Fzz4
dODBrp7HfCZlof189BGe1fjDqHdzVR/xvC3P885qPmOYT7yvJ8+PQX9+Gf7n
OyJfkBJ7BMvRf5AGvPi84o/fxjFevZSU24Af3+Rp2neBD4My8I+pJP1UQj9m
JfwUrcd/THP0ZdsILxY+82ngMxct5fkl4M9skT5mMl/3Vi/md5T5uF19aX8I
fIaVZ4of8Z94HXwRzoYvgo/nMN7MTNQPwd9cErX/CX3ZVer/I/o3y+k/evdn
6ge9hP2HoC+3H32FxylHf1J2Y8Cnv5qD/tevon3hF5n/6k3UTylIfeaI+grp
qV8s/HXG/mES8VNS/MO27CN/kXzlhP+Wmt8R5I22IW+wjPhpxyt+pv6c8Z/D
Hrbpctpny4X+W38lPDK+SfMr5cqFkWcw8cScEd/Pxv5hI8r+lzXUd8zD8/d+
4PnW2Nfn/p72G56TPsbT/jPwFhWYJXtKHyexr9lBOWxL2T1P2ZbC38xv+Fv0
7zT6T/8s5Zc1/wvg1wyQf16ivftyK/2VL0p5K/Nzu4iXtrPsVQN7+S3yn1ZP
yV4LKH8j/Bf7BnlSZxaepY+t2N++iD7Mxew8P5H5+3fk77k2M37qQrSfjb7M
oedp3wn/tF3QV3BQ8hVBviCl5juL+UZnfqfcqpT4A3vbVNjbDadsQvFpRfIl
PxA+DOtLX6nSUl/lN+b7ADzY5HuQt6H6t8JHX/QXVaccVFG58Wra90Qfpq8T
HuF3s30K9R8xnp+JPuMz6NPlVTzpAH/FW9YyXqm84KM2eA3+kv6W/sh8t+OP
vhv+FpYknrnf91M/swzliszXHkqjeLIT/+hVnOe7oi//UPG2OO1dGsk7YjHl
osT/YKb8czz+6RYyP/uP+r+Ev/sfsH/cd7rwAX7jfODDFcHe8Wb4LOhHfz7h
RPo7wvP27jqe34I+gpHYP9xckvY54adoHvqw57fTfngx2s+Qf+4Q3j757v/G
m2ryV4s8/s+/qK9QGXv2Zv5+KvOP8u6jfYnSjPfhYez5Zzna7z1I/b9l6b+W
4kl1xo/TwJ/ha7mR7/OV9F+Rsv0Y+e085LcrTzC/pysh34A/aP9bBfCRW/6Z
HzxFSeWPK/BHl+w08iWqSvuPwYeZi/xBCeT7HwExXhfhfQ34Ns8dQJ6XmI+Z
/zf2uo5+3Fd7md/79Bf+6xkvaX7qPXxk/yhC/+3U3+Yy4g/py9N/FBA/4z/g
17g88wk2az4vb0F//fBX98MG9JG/AOPv4vnwHs/b/Yp3t/Mpnh1C3mTYy9p1
8i/4PXTHeX5/ReS58zXybcqI/jftor+H+I+rsF3+gr3cAfgjPCd8vvsv8mV7
lfqzO2g/j+dNEvzdvcL4wdX1PP8j8trE4MsfRN64Lf4evU+8CJrPkP/hX7at
+ONj+nNl9yk+iM++pD/XuDzz/eIi5ZE15d/woa2HfuP8O6QP5ucbyD9etsi/
4Tr2uvM65Zfo395BXvf0L4y/BvvYwfivvy/9PAOfRPnEJxuPMd4J9O/uUPYn
KZsZyON7I0/48CTj1a4kedC3LYK+gzb/US6BfL7iVcZbXJvnj4JPr3gZVQW/
pr7yo7uXqE9di/7y36b+3huMN1B8uwn8uzfET/mZX7QUe/qa2DMqSv+2Nf2b
Rf8gTxL80xc4Dx6fqSF+kb5fkL5vX8FeGSV/VeYblcd+8XXw6196mf76MF4w
n/HCfIo/R9C3yQW/BDHtbdafmN9Twt9++Mq2hZ9cRvgn7gL/RHXwRz9U8bNY
oimP5Rn0NuP9GNPfgFeQp5DwNp/5xW+eor++zC+4RtklhV98squK15pvL/zP
9y+BPP8meDyeW96Q9uYc8lasTv/L8X936Ik/4f/hcPgmeP8a7e/RfzARf7HJ
sWd0SfOrAX+5NPKnSdSb8+g3eiR7VjxC/Q3xS7nd9Jcaef1i/NPXwT/tqbvq
7y36n8f8THrahzngE/sNeLLHb1IuAP6CpbL/UexvN96jv351eX6w5J2j+YwS
//+m8lf4V1AI/wrz36f/LTwf18Tfomfhq2jan9Tvkz2ryf+G4n/hXvDvfkNe
V5P5BeOZX1zjAuPPqSH/x7/sQeT3645Svxp+svnAZ9gKfAYPwb/5HH+MemP/
YF8DxlvyEDyNr095tOLNK7J3Gvnvc2/Sfwwe/FHq7RjqfW7qw1cS0/+aRtQv
EJ8VJT+1m8X/a+EPnwZ/dhPBb1RA+cHIcoq/xBs7XeuJ3mdoP17+//4t2i/G
vuHWTI/H92XaMJ98wmMb/M2vFj4uCR8rkj5ub596h/F/S/W4bG41Q/91wKOZ
LjzOxn7hKOznCuPvfiX5tE+RjfGXvkf/6VLQ36Qm0m9qxvuqOfKOlL4PE999
Fvl7buxt2oJf370O5Qn4u/0W/7ffIb/JjPxxJvHlQ8Xv28SbYDt87p7HX6I5
4DPsDn7DL+rKfy8z3nzigS0l/wk0fjbsG/bAvtHGB+inQz3wclJ4GQEe4vrC
ZwD/mSVpmP9LLYRH8mu/TvHyAP7iR+Mv9k3aB0+rfTr6c5noz80lH7KR8sdG
yo9KCL8lKbuXhdd9T2GfL+Fb+9E2nv8Tvgry3OH5rsjvq9wU/9YRfp9F3+1D
ypPFtxXgQ3eA9VjcnvgddDkmfSgeZ+V525bnTTP4J76Ov9va4CM6BP5ch2TI
mw/7hp3gC/Os8oHe8JkpCB+Eu4WHo43p/wDyB9eQ3z/AXm6e7HWF+OSKI5+9
nRz5sr5L/Rj40K0nH4q/vq74BZ4CQ35rsuO/tp7i73TxXfU89LetE+0d9o6X
YW8zCXniksgT9UT/dpT4pBv+aKehj7AU+Iqu4e/RGsWvf6pRPxT/jIbjn3YP
/uSP4E/BbuGlIHiIM4IvVwp/tB2Six/Rd/BdVuyxox3lDuLjFPTnXoFv7Aet
Gb+2/OUA+rFH8H/7K/7vMz39uBy/h37jErkZ72xH6n9Nh72/Eb6Wvog9w06y
L/hw/cQfFeFD+xR8aBrA5y4zfB6uQf54N/LHbWkfZFD7xuQbbqT0NQh5gxPI
ZzMaxqtFvPArwZf7DHwFk5NQ7iy8Hc1O+Zn2jGce0f907OtrBsznyPuUX3gJ
PmnfmfZV4HPXHPv6d8UvaXneLFZ/15hffELxtKXy2T0J0V9IfhO9I35/T/JV
egb55jdlfumR13RBHreU+mAL9eZP2WOE/PUc+rL3Nd4J5DVfIq8rij3NRewZ
zQcv0a7qil+U/S3KQet89N/wQ9pnxr/cw9eQb3gu6j8TPjzx3RZR/pmBfMFk
hD/CFyT/88jvGihe5xX//aN8ZZ/ynQX4W9QIfzO1GN9MZfxwsORVPArOFGN+
z/RA/+2LoM+pH9H/ePF/PfQRV86I/vO2Qv4iskcG7OGSKd79iz5sJfDqc8jf
eorPXsQfXR/mb/aKr6qCd2vBh11PfhS+/ar4QeuR8/CjeacQ8l7rSn9l8F/X
C/81v2VGf1cp28wFqE/RhflUJV/3O5U/T0sPfk/JX7M8h7wZ2iJ/CfBtB2Bf
15b8y1bFn4IZeeGXW/h3/Cz+ZC8SX80q/N/e+ID+P6M/86v6+1D5wZP4nBK8
BLnBi72v+PK+8tMqT8sf8G9X52Xm99NnPH8+ncbXfDz+Z4spXvRVfvc68rkl
OZGnVAfwkkr5YE+t9y4R73wg/ymLvfzb4oM0xAf/7QfyP/IPVxP7xROZr08L
P7iHxFv7M/msXyD5lyO/Ly77FZY9V4FPc6IbePhR8+sieUYxH9dM+n4PvJoz
4NU8Ujx+Eb71Q8vwfOuPKZfX80l53p8gXrsT4NVfOot/bYZvg/KleH5rT+TZ
gr3DbvhDvFfxp4X4d9oryLOxD88vtehjXl+e7/gq4xX5HP0Xln8u6s74i+Cj
qJ/4ox7xLtyg+HE4B/J0lP3SIZ/bjHyuF3jxN+V/t6rQvqSj3KI84639FHn+
1vM9eiHvUfw33K940Ub+fICyv0H7+DjtowfgIV6GP5jX4HP3C/5iioi/h8Nv
cYLnkWeB/K019o0LYl93lHzcfEU+7t9R/++o/9n4r2nQEn0rH7Gj8RdfEfzY
4eDHjkWffi36NONq8PxvAxivg/L9ssT7IF8FxW/0437JofhDfHRHsFdQRfb6
shr1lftT/ov5mATIZ5K9SdkN5fn+4M+PJ581OaoibzaneEj//jD9m19ln8To
2xxLSX/Hkdd0qs3zLwxC/g0lkG85fB8k0vqoj/T/G/YJz2GfsOxbPJ/4C9qf
o314SPEoG/MJesk+WWqCz3Xoz/4n+05R/L0IX0e94Gs/mOddUfFTbvnjEc3n
LeKHm0z8iLZWRN6JvZHnuvjrAfqKDhREPx/Sf1hD/tYGfzMT8EfTFPzb2+QL
Nhn5QlQc/cU/oL9wIv7gBmBv/43iwWvg049HXn8LecM6wudG5DUd4VM/Bn+0
ryle7hPf+sL0vwM8mqOKf2WVP9dXPHsb/orvKX5cV/yo8y7lX0fJ38Cb3Q1e
7BvFkecUeHFPUY66CT9DsyBfG9bX/hb6CO7Jv15H3+HfzN/+DZ5cPvDkN8pf
X0YfZmR16juC9yB1aeFB+qkP31kD38X/lGP8Y5/QfxnahxfgK/ut5neO+Xkn
vi1Bf26Q9JsJ/fqWxCf3PetLv1T+WIv52ivwRbhC8akEePVnhddsskcd2SNZ
Cfm3/PlT4pM5JPw1VT55R+vZKm9QzjGE9h3r0z7vcPqfQ/9hGfU/FT7y/SnH
80Lwt3Ec9emVj/VQvMuIP0Zvwhfhkrd5fvsI+k9EfI1uKP/8Dv5wg4SHb8GP
WwXfBX0qId9W4m3YGv+IDim/HgPe7UbwEX1Gfmtnav1yBvy4T6kPi2M/lwT7
2Lng3R/S/sJ55QcFeD46CF7MEvHj1/BDkFv8cJb5uWdHUv6sLuV5X8hf4WNb
TvHqe+FlJHhx9eX/5fB/nxy+dUOxTzwevnC/kg+abOQL4Zfws5tTFHnnkA+7
j5rSvxtN+7MZqJ8kPr+Cv8Z5tX78An+zFZVf11V87tde8aEy5dz4Q3DqHcrP
In88GnuHd7G3SdEEeb+hPrhHvPIjwW+4VPM/qPnnFL99gz/Hd6ooPvbDPu/l
p34t+Vg4VP5wVf5QEDzazsLj2eaUi4+l/TH82X2B/C4R5fBj9O02sT60P8Ov
cQPma25TH78En/jE5Dux+rNn9Hxz+N+OgF/CFuDBbgPvbgP6Cvp+iT4/bkh9
n+HSr/ipsfh6qOLjZvIx80D8k1j89onyg3taTxj4P0wEP7nW4kun9cSr7zP+
gknUP2zH89cmUv6csmtN2baBn4Mb6N80ayy+QP74Q/w3boL/BgnIB0075SM7
O9G+wTT6y9UBf905mfYny9J+Nvmsq6n8YJP4tCD+4JvJ38WP/hr4jg35kLsI
n7qq4ssp8GW0SvGtjOLbffnLWvAfVtJ+QA7tB6yl/3A+/ZvtdYTvwfR3B/2Z
Hydp/uL3i5L3FvHHfSa+/Rd5TIQ8fh79mbX0Z/sovymIv7nE9YRP+CKMSyge
U+9/YD3oI/AfWfzBv6X9i13wkw3hJ7ejBfNJiD+4Zujff4r+3VbFx4/Ac9QA
/zUp8d/oL/QfdFA+0gh/jOuDh/AueIwj8BaUf49yDeGp5+s8b5ivSad4/wvP
u+uKN3mG8fzvxCNTEb4z/4Fn+0jx9nnhq7j4Q3gxL6L/sBj+aOpqvfLWe+J/
5InXiI9noF93+GPqp37NfPcTD4JHWn+ch39tI/ThM1GOv5N8fVjvmtcUz0dI
n6H0eY545T8Av66d+DGf+qtSi/Y/DKT+F+bjewlPFvu5v8fQ33Hx5S38z1RG
f+516a9LN+rPz6D+tOJHGY03BXxES4mv/ip85GeqvwmviH/Qn91G//Yj+jcD
2C9wB8FzeBt9RhXRp9mv+DZD642XGM/X1HptgfYTKyme36qteK7147+y5xDm
H6cXHrtI/t+EnyZO/C99zaO9T6/85yflP3PJf6KsvRU/iQ9RHvzBjxP/df+K
/tKhD7dV8btKD8o3I+pPyr9ekH8d0XrlKeT3nV7DvjtVrgoegx8UPzLBd26h
8sHpyt+UP7h38M9wifixaW/JOxd7nGN+4SPmF6zFX6JF8q924qda8FNUH/vY
69JfS43/Enwbj1P8O6v4tbcn5UOzqH+3I/2PQB7/C/7s3iGfjlcSz4NA+dBr
xPtoH3gKy+Bfvsds2vcUPg+AT/838rsLyB9kwL9ta/zb1/yU/uOvJR/48qvB
V1BxAP446zvmn1X62jaH8TLIHg/kjyc/Ybwfv5Y/tKU8CPsHreELkwi+CD4Q
X7dAPh9+Tn9/f894Y9GPTTMF+Sbp+Qfq72p75J2IPfwffZlP9nk8v0H4b4Z8
dn5n2s8lXrre5C9mEP7vu2p/JYH2O+d9KH+gvU8u/xgBv0aT5I+7xZ+h+LUn
83EpygkfwuPqwZSHLaD97ka0f17+sFTr61nKR9OiT99G/Fm7DeV8E6j/A/3b
zfKH98mnomOKJzu136D8wmdsTbnIePEXz0edZL+N8FGYET6yK7Reuqv9kfWK
b/eF/wro20bfgMfmX/B8ykW0L4n/R4uxl23+AeX/sGewWuvDe+LLeaxPfCrk
De5qP6SQ4sFR7Of+kT2e5POFxf9l5C+18Bd7jXzKJUa/0QHlGzmEt9XEI9tF
8eCM+Ksr+WxwVHgugP7D7Vp/HCCfjP4U/gpP+r94HaP4fwp+s2/Bb8EE5bsX
sE+YugHP/6H9lAqjFa+WIl8y9OcbSX/jsE+cAPu4hPTvH82kv1eaUb5Ovm/e
Vb5TRP1/wXhBP56Pnld8+RP92lXi56TKn7NqPfG74ksu8s2o6VSef2Ug9c/g
r2657PU9/bmvlR8sQ37XHP0Z6c9Ppt53Uj6cmPjrS4vfjqm+FPXesv6yv2o9
WEj5ywfwrdmu+J9M+2fpyBf9Sfwz7tGd8kvYwyaEz8wA+Mw1gQ/8h1rPde9F
/zXgazNZ+E8nvm6ieJVa+3HDtX5rpfXlReVnNbU/8jJ4DGZrfX5H+zEz4Jug
AXizn8LnZjH845ODd3ON9aYfrP2dzpSjYirv68fzmcR/2dXfX/QXDRDec2h/
uhr6i5dpv7sl8zXFmW/0neJJJeJJ2A68+D3YN5qOP0W5lW/fBR/BOfw7Sol8
rrDk24T+TI/JsrfWr8Owt93A82ai+L4VfOJPL2Q+x8XX87GPHab8sb3we1R8
v5l8L56B/u0fyn8WKF8qrfym3hDkvTaf8oUu1NebzvP/wrdxZfg23Mx8g88G
yd/Bmw+0Hk+KfFFH5HNHyOddUdbDYVXH8/tkn2eQP6wuPvqpJe3Hwj8+L/YI
zgivreCHsBT8EH2FPUwn7f/cwV9cB/wlOgM/GMfzZhT+77op39wu/fXQ+isJ
/OF2Yi87RP4444l9PqJ9ffjGjEQe0wZ5zFn561TleyvJL0xf5QOn1d8c+ove
1f7DI/nLuFb0v0n5Y0h89E3xl3AJ+vcx+rft4d+wGfxrzxJf3H7wE7bl+dDD
N0Fa7BO3FH7uEz/iM+SvJueX2G/UEsrJhiHP9+DPJkF+l0r6qIA+3Cb8I6pJ
Pha9jf8ELcG3ryg+3UH+585ij+gU/h0shk/DrENp/wL5QTCD9sFKxY9LI3h+
6mLKJcCv2Qh+TRPZxyGPbTqc9suJxy6/8rtJ4svPlA99xvgmicppKQcVNX6R
SPxIfhMvUX76T3/aXxaeryGPXYr87r74oqfy49fEL23Rjz+j+NYUvMQVVa5O
2c8lHgeXlZ8lxD5BcewTdRK/PRS/laDeDKE+LCf/uSf8nxxD+13yn/TEUz8L
+eIy5GuuEfma34P/22LjFY+Jp3aq/K1tE8U37Bu8BP58a/FbGfDvqip/O/4Z
8r1LvLGLkSd8pHiffRDynibfdkW0ft2u9dAE8UMS/CM8z3ztKuG1XVf630K8
iBMJT8fAR5AZ/w/T4f9xdvI/kxO+DGozvm9PPLddtT48Cj/EN5iP3at8KKHy
0dva/1g/jnKGZTzfn/7iFMrneytfKqf9naGKb6XBm22ofPU2fGnPkH+E3yi+
fkU8cGXxR39I8qTV+uUp7U+uBi/hRr2f2wzeo7pab65RvlRQ68sL2t8spP2A
vNoP2N8H+Q5jL5NvguLxcsqrGM80or2brP3ICL5xZ9l/jDNJ32Xh/7gr+XL8
sfgyC3g3AxXfSsFPQTH694kkzw32Y11N4WEp8gYF5R9ZxtO+Hfp388j3fWHl
+3tZv7rpyrfajaL+zR8YL9tIxv8NfnEZwKerDj6tFd/cwZ5x6cHif+V/Q7Cv
/UD9t1R+uVnxOY/2S97QevoU+ZJf9pn8f6jik/hvE+tPl/Zb5jeD9aF/VuO/
LX55pPi5TfZ7H33ECZWvZdN65TnWK34h6323QPZIK/7qov2r9Xpf8yr5iEun
fGQJ+ItPI5+3A8QHen6G9ouOiu+2iB+usv6wD+Fncwt+jh9GlC+toz4f+vET
9H42jfgqu+Lre/LXgvirTaT30420vptOfmtqgu+on/aHv4OPzEzyXT8bf4m7
kL/bVPBN9An5j2umfPPCZPD1+0raB8TT+DB49q+A7/B77fdVRr8uJ/oNziq/
LsV4wYtaX+wnnkdptf75UPuxt/U+4R/li6kVP/9Df+5t4pFtx/yCpF8hTzv8
0bbA/lF35e8JwZOZDf/FN/V9RTLwZvsRz00S9V9F6+O68FnUQfgaq/XMba3v
yqDPeCz6tpcVb1dPkD6RJzwNf7jL8Ee0EvlsE/FFXcW3PcgbN5f+6mk/KpfW
95fgJzNL9j6EveOC7OcEHn6M7ik+vqH4twX7hTuwX/QK/hpfk/9UIx75fOK3
J/OpwHzcO+TP/qT2T9MQb+OfiN82xD7mBPozNcCDyyx8aD3uq+v9xk9ar97W
/lQz8segJvxjPpf99+r9bjPxe12th74DT+E+yrY1eIquK7+ro/3W6cJXh86y
j/Yb3sLe8Teq/1X5ZQ6ej4uyfjJ3hd9Hev/2k9ZrjZXv/ox+g8Hgz/ZWPFgE
PswV8U0e+e9uza+f3u98K3mL87x/Ts8PgV/dNPBqJ42lvxXi37fAU7BR9kpE
vI/2KH8bMUD2EB8lwv5u7wrkSQG/uxvkg8Ea4rVb8SP9t1W82aH8ODX5ju+k
/ZePhf+K2u/YpfX8Fe0X9WB+Jgf6Cl5nvGgm45niWv/lID6EW/GvcJDiQ0P8
28zHv+1RrReOqr/F9Bevor8wGiR/VfxZxHrV3IC/wqxTqD8B/u1fwusbytdS
4i9uDfEuqjed8b5ZTf1X5PMuj9bD7RVf3kA/URnGNxmVrx3Rercn/btrDWR/
xYMjwtM84Wk06wv3BfHErMS+Zrz2V7vibyYz44fvKh4VhX/Cn7F/UFV8PUl8
8bPeDy7Fn4Nlel9xTPngTvDllg+XvrS+2aj1cxK9/ymifHa/8rWk2N91pRw6
8cUu8cXoabTPgP7C78k34rPa/8k5m/7PEu/MeuUPCbFf9IbWf0lZ/7p0+KNv
LT7MrnyruPhzoPKDd+fJ3xTvq4Iv8xL7z/4z8p/gofRXV/l5UvBq5+CP5rb8
fxzjhfvIj8zz+Lt//WvwvO0n9JEa/4nuKT4vJl/31ZSftaYcJ6YcR4rHzSYL
P8w/Ogh+/NOTkK82/hquRP/myfvEnYrfZ7TfX1P97RHfrO+q+et98Dbl13Ph
P/+c7L1YePuBeGU6kS8GHchfnuRrcVqtjzrL/7cpv82Pv4eXtb/wSOvfD7U/
n5/9EndQ+3+3KPvdrCfcBeU3FVjPxnvAXzxd7yv+0X7078qH5mn/bFQ/+bPw
EOI/voLysWHKJ5bI31rRv/9a+0cjtT56oPV2Q/Yfwur6PvYe8Seco/3TZ7X/
+5nWv/3xbzNU+5MZ4AO/Wvslj1if2YHCZzKtt+6L33phTzsYewXniD82k74H
Kg7/xMXxH5NQ+bLe37mfyB/9Re1PFUPeYKn2I96AP2x58i1TkPVZ9Dr5TDyV
eOP2aH02HvyFTfE/P4v+3E7x4xDxZ2/lDzXwB7tS64MWyp9Kwme+P/mE7ah8
7wDxx5wEz3EK7BXeUHybj7+6f8UP//J8uEHP3yV+mm7Ezzin9vvPsp8bjZ6L
PszPPB/DNzbU/sFq3ifEJ7FvdJ/1SdRC+8l3sJcZhr1MO+3XH0e/wXbsZ86A
J7sT/rSdtJ5epPX9O9rvGaL11U3wbucSz3xK4pnbhf/Fd8FrmIb9E3dU65ED
2v9/T/sb8/W+YpXyr87ypz/hs3gk40f/zFL/5DumMPiOiw9X/NR+THvwF1wR
P96Hj+O08JltpPjbXeuTxsr/Wyl/eFv+qO9HTTnlE+mIx76i1ldDtL/xOva1
52SPX5R//aj8Ky/t4zq0D5eg/zilxv9T+fI0ff/0l/Y3R0u/v2v/p6Tm34/8
3RbU90hZtd+wTnyUXOvX7NqPqKh4O1b+0lfvR8vrfUdpxYcqet9TWP2P1v7s
L+yX2gdaP8xhPefdWsVz5X8vCr/5tV/2N/aO/xAfpBS/79f7lJh45p/F/+w1
9O8K6f3cAO2/v0a89Hm039FI+UcnyfOh3sfsgT+C+foeKtb7kY2sp93frK/D
WcTLYDZ8EbRC31Eo/U3U+9pZ2i86J7xVJb6YE8rXKxGfXFZ9H/ci8oRn9H3i
r6z3bHn5fy69Dz4GXwefa39nDeuPeDj5SBDI/lmQJ1qC/4YJxLfV9P4mEh/O
Rj/Rx9LPdO3nnBa/FFK8rKn8+Yzi92nZX/mO0fsr/yHxwv/FfnE0T/HlIfKG
7bRf10PfV86UfFrf+XrKR3Ypv8mt9XdX7G37gv/oyf7tv8gfLtd+xsvCy3x9
/9MQPo42wMcmj/bLGuj7uzLozzRQPvefnt+s79OK4g/hhO80Puv/0Gq/Y4b4
zOp981h9P1FT+7Ue+aO35gnfet94S/vD6bX+nyd+bMx6xo2XP9xi/ydsr+9H
Jut72csDxU/CdwXtb03R9xg/a/+jEvg1HaW/DMqvO8pfr2g/cKD0X5381BZb
RXlFQ/Gd9n/Ps1/sTml/YYX2r97T/tID7d9m+VrxXvsFuxQ/Bmv98ZX4dz76
CF/QfpL2T11arSe6yz9a6v1/F62fS+j7sH7kl7ax1n/v8f4q6KT3+/nF1554
Zbcongxhf9F3137ZMa0HUysf3Kb8/S/F87Za/3yi75F6ab+jgN5318FffbVu
so/2axdpfd0OvMQ7tH9fUPvl3yBPbCVPDH7iJ/60St83NCS/igcqvg8jvpsi
yj/zKf/cjvxRLeXPV+g/HPokfpLP+B76XmWF4kNW7f8f1PuhaeKbfvo+cq2+
9+lJPAvP48+usr4/TafvrU7r+7j9+j6vptZH6/S+rb32q3IS38wR6bcm+o0/
hG9cfvTnWigfvYD+bBfhKxn86cspn2wq/J6QP/yi9WcJ5XvrtB74Ev3EM7Re
mwNfu+P63qen1leVtZ+cEX+PCsrfe+r9+EKtnw/rffWT7wdv6fu8b/U9TXLF
T61HwhXa//0LvjAPVL9J+/OPtJ7Lq/ftPTSf7zS/yczfLdP8K8OXkd6HugbC
Qzb5Uz34xa3X+riZ4nEOxb8t+l4xEfYzfiLzOUj+G97W92m99b6xl9Z7dWSv
qqwvo9fBr5mh/awv4Vf/iPWancb+TdSSfMUU0f5lUsXfxujLLFD5oOJnUr1f
z6L3bbOxn2us9WlR5Xsf40/uI62/S4v/u2s9NEH5k4Fvol/h32ia3hf01/vn
9PK3gdofrqb1zGfK3yfr+4Hjel9bEf4IHup9xUPl1/r+yFRVvv6d8q9nlO+9
o3jRRHzi9P1Za+3vrZV91vL9gU+g7xH+pL/obewfpNX3dg/0/uJFfU+2ADzY
weKb5LJfN/BgpwoP3+h7uo56v7Oc/Zygqfj9lvho2lfiW61nu8KnURX6j5dr
/ZSG8c2vjB9/ru+1Nsm++r2BGaD9vfv6/qs33xdHb2h/oRj28nnEdw/0veBr
yo9GaP3aVOvHnMr3Cms/9qZ+T9OE+OnKgO+4qPYLiun9SxnFv1TgMcyo+Npb
30e8qN9n1VW+0AX/NU2xXzBW3zN+pu899fsMO0/f/05jfWn2Kj/Zqf2so9pf
2i58XpX/V9T7tw3wS+T1+y39ntB+r3is37/F58Sv+n7e3CJf8X9ov628vq/Y
pu/1F6v/dtjPtNT+ZRN93/Ctvr8MyK+Cj/R92AfKR2vq+6hZej+1kv20J9+n
BTOZb/i58snM5HvRM3o/OVX5cy7h8QD8ZhbpfURqvV95Te8PDmv/7CvxbUft
zx1VPlabfCEuoPf/I9jvsXtl38H6fqKuvoffovcDKfX70WLiC32PYd7Seuoj
5celxVft9X3y1/o+ZD54CwLlvzv1/cto9OFnSx9fCx/d9Xsq5ccum76nOK79
mGbCb2Wth3dofX1W6+02Kk/U+uoP9BW2Rj+uq77XHKL9/Zp6v/CP4tsPym8T
PHnfoPwoo94Xh6z3wvyKfxe1v1NK/tJC+chF8c1Vra87Kv8dLf6N9H3dCK1f
p+P/QV/5f3e9v35B+0lF0E98U793SMN+jxuv9ddE+Dc+I/79RPlsOeXTDfX7
32Z6f7JceFqg/Xn9fthn0n6I1/cd2+BT8+T99mrlKz3Fz6nE39nxd7dE881U
XHjR7x/0vtY2gS98OeVDryo/my79FVf+c4TxXS2NH+h7onv6fU4S8BR20Pp9
Jvp68v7XVNf3esMUD7YjX/yH+D+hvn8+qP3Hefr+9I7yn0X6vcZG/V6lPvxm
zuv7oqXgx3TQ+4qvqqoMXu2Pyg/1vWpQSr9P36bf834k/K/Q92NntF+QVe/j
Nuv3KYX1e9UdzN9U1/vf/SWRfx3fL9ocyq/1+4FQ87UppZ9a+t5Ivz+I++j3
cb3QV1BU8bWNvr+bLn3n1Xp7gvjtGfgtbq71fBX9fmu98psryp/XKB99Vvl8
BuQNGiBvUE3x7bS+H7uo39fG/N4gvin+cfp9QxHyV79ffBODxzC/vvdNTf5u
t+p9VkJ9X/St3l8c1/eONfT+J7X4+Ljedz6r9xXd9fu1tOgnvqTvgRMp/qYR
Pw3S9yy7tX78Xv3p/Wk4UecN5Nb32nO1X/CK3j8WZH62rPglt9Z3d7U/O06/
z14k/vsU/ovOa/34SL9/+1fnFxzQ74Wv6PvPZ/U9W3/h/Xn9/uIg+je79Huo
THyPHbyn9edd8dki/T5xJb8XC/fJ379VPG/P/Ow9/CuooO/zzul92wnF/12M
Hxntv2TU+4ysindl9b3BfPBui+v3PAsV31oovtXQ9ymN9X64sPafJksf3RUv
dL6A64H/xRe0H9xd+6+plO+P1u9NN/N7suAov9cKCus8lrzy57Ty5wzqfwt8
FQ6Db+IJ2m9oxnzMJPFrffAWJNH7uSzaf2+p/de6T/hNvxf7XfZLr9/LpZK/
z1X+d1DjTREeSiNf0Eflltrf7a33Q9+y/+DT6nvbv/S9Y36t37Lo/UkxrR+y
kT9H+j1ONL2E4he/Xw0WaH9tnvLxM/o9bjHFo3/g87im+PwOv2e0V3R+RDu+
/7c/gyf/OvN1H4E/N0Dfn36h3x/8gH+4ccoPv9V+xUzxeyHiVXhM/Di5gPAn
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
J5Z90up+jPgG/e2Gb8wA3Zc4lfuW4ini7wXwoVmg8inl4yXx56AW961F/XSf
wDO6r2EQ83dFNf+p3E8Up9T9Y1OUn/2k+0D+xr/8CPHL6Y3o6z73AwbDKEcl
dd9iLd2/kUz55mjlw+vAW3xB9/V04D6NsLHuO1klfn5G95GN0X19mcGzf054
Hsx9k24L99H5ftzn5Afofrdr2MOUwx7uT61XHug89cXIG3+s+0A7ULYLc8p+
nM9ur8IP/mPx5z783aTTfXHr8N/wBvfbmFyU4766n6257n9brfuS8mCPYDX3
fwX7kDc4K367I/32F78/gq/tJt3/d1X+1gT+irMgX5hH5+PPUrz4XvHiAPlC
dE7nt5fV+iGd7kdYgD7cDcWzI8rnknC/nj3I/XZRad0H0lz3DbbGv1wS8O2O
4q92qu6LaEq936b7YSz8YvbCL0brbZtR7bNwX6Zdgv+GrfAv1wm+jFdhD6P7
F31a3Qe6VPaaQj4dNVI+3V7+KPuHz+o+vYrc1+jXKP/OrfYfYA83X/cJ3tZ9
eT/TPt7A/UxhZurj/NxPbG5zv2UY4O9xQt1321D37Vzkfko/F7zYM7p/9STx
OVwkfp3IfXOmMu3df8w/egt+cf10f9RW2vvEuu/sjO6/Pa/7xLqhbz9K96WV
g798De5vc/2R3yThvlBTRfeNbkI+s0d4Lqn7PYfqPuyt8LNfhjz2H/AeRrpP
aI/unzwC3kxP3Qd3Qvex3SafjhIrnx7J/Zv+L93/abmv0JR9Wv6v+0Zv6j76
+9L3St0/Ok18dED3ER6bp/ih+6iLcl+lz6L7dWsJPwt1X95ArfcaC89Fue/d
ZeU+5zij7v/Liz3sMuVz+ynH17kf0+/kfmWfkvgQPK340FH6OCo+mwd/mRPi
r8K633MK92tGGXWf6b/gzTXkvl1TUfc5jqS/8KD025L7Hq3uO/drdF/gTfAR
JeW+c/u3/Ndzn6LbxX32ri58G+US379MvHBe+d8s3Ze+NKPkl36moB+7l/uT
gwTc7x6f4D5i05777eNr3I8Zf6r75vfgb3EV/C3MKv+qrvuHMyh/+0r3l/2o
fCqX4u/3Wo91rSC8c/+Xr6j7XUfqPs9Q97srX41fh2/DXrp/2qEvV4H52r3y
n9X4h39Z/v+A+1+Drdy/6+9+Sf1q7u8N+wuPi3S/8ir8Nc6Jf4SVdZ91PvRj
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
8ON2YH/bH/6278gfNsq/Dr1Kea7wtgd/j9vi79G815D/kfB+qwzt226m/TNl
ZX/Kdp74pQb6CDIVZ77j0Yc/+xbts8E3YRP8O0yFf7vylWl/ZNv/iV9RHvQT
HC6FfLKHa1dWfMv47oCe77Od8aoUpj7Rz5R74K/+JfFxavjRjVX8L4z+fW/0
by5hT3PLU38nH+3LraX+P/w3mIz/Bovo32USH7SqRn+LwW80pYbqxafdy6OP
er+ij59U/oSybw9f+lzwpUnJfN1c5utNIfSx7Sf5J3jzLbGvr9aS+ivwc5yW
eGWGKV7lA4/my408nw172x3YO9xbkPGu0H9UDHy555DfpqH/qJf4v5f03XU9
9UWeRz/+B55/mEfxdTXtb6NvU1rx4FX0ba+jb7u9NeXy+KfviD/aN2X/v4pL
f+DL1uhK//OId/F08gP3hvKDWTxvRuj5btl4/tFS6tfDt34OfGtOZQKftRdT
Pof/GMXv+APZY4LwXxj9x+/h7zYn9o9/wx9sfeSxBSRPhXSUhy9AHx+8yPhf
rKL/Mvb/+IPNqXgxV/GiC/5rfscerjrziwLmF5cjHpklyBOnZ37hy8wvuCP7
/ol9/Tn81z2Rd2dd8eEB2j94jvm8jT2DXODPXf1J8mURnyxhfhPBQ9QWPMSz
FP/7Yu/ofmaed7T3h8knfHvw5J7JSfnXFfTfB3nt6XX0X13xdxbrD/OT+p9H
/8GMAjzflPb+FfDtm4NvM51ykBx/jwalpL/L8yg3lX3rYt9wEfq3B5VP9DTo
Y8xM5G3B/P37zCc8VQt9P4Jf4373Jz3u7+w05OmTkfEKgS87W3zbT/w/NiH9
F5xF+egLjL9uGeNdJj74o1ulP+Gvjfz/0iPGK4J8dnJe+k+xhvovxNcevrTr
JP8j5HfFkNduQ97gnaK0ry0+/AT92jnoNwzgL39Y+toJ/u1/8J9ZLn+ttEH8
+jLzHw4e/V3yk2Aw+Ul4HP35PYpPE55m/LXfiO9lr1vz5F/PoO9K30o/qbDf
x99hzzPCQwfw6mrS3qynvX+O/uLPZf/Vdx/P36+bKryk4Plh1Lsi2Xm+GvYw
A+E7kw8+sUnTM/41/Nt+if5dt9Xqj/FsMsYPz6Wh/sL3lKc+eDx+PHM6+JnG
fMwrzCdITb3ZRX00Hr6ywpPPT7w2yeAD/xH4iWsgb7zpNvb9eorkwf5mlvCb
9F/mP3Ms7cekpf4S8tkNyOPvSN/TwGM0AzyaYsjnXkW+sC36CnIxfvC98NJF
8W8ReLX95E8FsHeUQvY+V4TxP/9Z8agc+hoD3oKXMwgfC6m/mFnxW/zdAXlt
S/Tn+ufm+Xgl489A/3b697JvUuQrOof55oH/IvFbkOw52ZdylIT5u5c1/6l3
mP9q8GMPSb6miyhf+Bv73h8hvgQvJiHyu1mMb3PPFX6Eh53o00+7jP27j8c+
kxJg36UR/SW9Tn2aiZT/u0e5Mf4cv4o/u+PKj7rI38fRvz2t/pNPYL4/ST/1
0U+cOhnjfY1+XFRB/Psb9Z2vMf8xX9HfiJfQX3fyJ5f4KvOpSf/uWfnzXewd
LXsk/M0UnvOjn/eVf6VFP+ZF2Wcs8cKtJV64Gjd4PvEk2vdj/jad+HcQ/GuK
LdL4F5jv4TG0//k0z2/4kvY1kik+yR65czBe/eXUZwVPdgZ4ClbgL/649HX2
EuNnxF7uFO3NSdq7Sc9S3jyf9ieUn9yGT8Km6M+nZ/42LfL6IsjrB6v/4ur/
g+TId0/yFsB+8TnwH94OGK8h8gdvnsJexcFjPGQv/f3pKCdG3+6Lr9FPNdnn
3xmUx8GXpgb6NbXAd7iW/vx34MEeBA9uYWr44APxczr4JnhzHO27oX/zM/p3
38EHfjf4MHPlPzvpP1pIvLTdZokvzjGfmmMUnxkvepfxzMXEzP/hbPRTUnx/
D3+NlyRRPGO+QdZbyJNAfOkVz9cwX1cOvgmuwzdxN/zHn8Qedm5W+ouxZ5BF
/HhV/F0N/zU18V/77BnqX2f+wc/n6W/jaOrrYc8wMfgyx4XX8rSPEv6OvHX6
Ic/FQ+g//Jzna2LvuKv458VttK/fG3xkk30vYl/3n+JbI8n/yVbku/4p9jr3
H/1flL/3R/9mE/K6d7FPsJ35hXupj8ZRH6c8xnjNh1C/lvnbb0bR/3741N5A
/9E7R+j/xCD6b36S5/N9Qbno74rfzD/KqvjaTPGrv+K/8oX4Qow814cxXuZ1
jLesK/P9HX0EAXxkViKffxX5ot7S/1rxRd2/aJ9qOP3/DN/YBfCNn7wF+Uug
v+jgfsarNID+MzEfu4r52GXI53cgn0vH/FwK5menwqdmFnwaDvCUH3WnvFt4
fhe+NLXRZ7hGeL4gfe9mPqFTf6XV333wEaT+jPb3wbd9SvHhG/g2KALf+vGb
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
joOv9n3wyw6SPx4Qnq2mbdsR715++LG/yV8byl/3KV4nC992CZ8P45/2Pv7o
+mh/fhL7c15c1qNBA9UHBYif8JP6oi97rVL9kRL5zTTWW6Y6+cwMFf5rfW67
8HxUTP50h3rXy6n6qQb+FabV9xZX8JfwmvLfM+2XllG+DMCP8D2tB9uiP9tE
65W/Ev+P/t0P2N+vA167zBng95j8Y4fk66P9uNnkP5MGPDUJkkEvYwPa18h/
/jbtZzq9fxun7yt2KX47QD/SflCwQ/trffAv1x3/ig5Sb3j5qFdNXq0/f1S+
n54CeQ+Bty6W3tecx95BUeW3lKpX/hIe78Cfwoj6ylsof4mhemqO9tezqV5L
xXj75APmu/4V7QmqtxTf9on2B6fIHsWZLzrHfF4j8NfWwH+ia1rvaf3k3WX9
4hKDD7aN1q8zwJPoe+UnB/5FFZKj76HUC/4B5dfxsl8LfY8UV98TJqK+dhO0
311B9Vh26NtTyGdXI1/YGX8IfoCeM9ofW676LaXeVxzT+rwd6zuXgnwTDYP/
cCD+E0VaDybEH91/5G+TvIn0ITz5CbwyVxVv69CX15549xoq3sfyfJREz7/D
foOXiXxtc2eC/3vN6d8k+klVH+VJwPPffg79bNpfv6H94cnY02XEnuGb/aqs
4IEfk/WkLUY9Ya7L/9Kzv+L9Dj37Qvl1o+qD4eSzqLPwdpXwZi71hhlKfrc/
iJ7qTzdK7zMPav1/A37CSvDjZdR6tpby3T3qHXtf/I3HPkE87OMeEf+2NfFv
yjLeX0jbbm+jeNX3Ph3lvwW1HnHU+7aU8Kw3+vava329Tfnj+iD1a3//J70v
uCs8bqz3NTfxxyCm6tXkeh/6I/x63+eQv1Jfu9H4RxhpP3mS8KMV/dFf2i/5
U/st5bU/+1z11gD0YTqpPmqkeK8kvFit/BMb/rxP0Y89qPWy9lODT9RfPC3P
D5Q/V9X451o/ltf3HImpV/yTyj+5tP7LKH+Lq/3fEPwMdqsezKT9ueXy3/dE
/4jyWRHqGf9nrT8XKZ/Ukz9WYL1mA/DD7JE/TdN+bGvtj13VfkMl1j/RPo2v
oXrqQ/RtuuCv3mbVo5Wpx1xTvY9ohz+4jvhDsObNfonWr19rf3CU9kfLqX6J
VL80oX6wS7W/9aHkvaB6t5nqsafKt+31PYjWw9F9+d8fg5VPwXevLPJ5i8uJ
vurXcpXkX1ovrhX/gfZzK1I/eXeEJ1O1P/mu9svaU9+4fVovpVE8ltD+9jHs
Hf2i9d9WyVcT+aJmmm8H+vK1Hrez9D51P/nKX6r9pu+IP+996Plbyb92uOq5
UuxnBd9ofzoB62fzkvW5S07+9mKQP2zGUsovwofm8qfYep/XVuuPItr/+VZ4
9Z/w6qXqOb0f8t6VPv9T/dNU9cHb8BdEqm+vkG+Cvlqva/3mbUDf7hP0YZfp
/Xse1T/f63vDv/V+4Dz5K5jEetBu0/vK8dpP+gA8dHuwZ7AL/oLRWj98Kvwf
p/prmvLZcPKNV138PMH+0Tva3+pL/W3EX9BQ30fFyvY/+jKlhF8ntT+QFbyw
G8CLoH9q+jcFzF9Z66kaqi8+ov6xY6mnvbv6PnIo83t70a/XBf2G3wjfssJ/
9C31m9uJ/4Tx9T5tIvKGQ1XPdNd6fqLy20Dtly3T9w4r9L6oq/Yniyg/1FN+
nib8mUy94J7q+440qmcuyj8uy3/1fZ2bAv6aknp/aaT/QvAf/kj9Y05Rj9g1
2p/NJf3k1Phx+h6yNvtH7rL2jwarXkmi7zVLqR6/pPlvdBR+63vf97QfrfcH
QRqtb66BN1FDvb8QvthDqlfzaD32UPtRa1X/NikkebV/cuVj6KXW+wuf9Yaf
XPl8NnjtJZe8qsfsRPwv+E/4dVnx+a3qyfWqJ6eDP0FS6LkB2g+doO89/sV/
7El97/yn9iem6n3oVPA/GK73RW3J39HiMdKf4nGc5B+GvaOWer+9A38Pm6N/
c5H9hOgPrcdish7xaoGXLjb1oJeTeHAptX/fSPuPT/U++s37sRuKh6PCz6ey
93WtP97S/sED7R8sJj6ic8LHV6xvnKE+iGaQ3/wkqs+76HuKk8LLztpvSCD8
yUs+dyXQp9H61dTW/sYY4sf/T/vXScnnfibWZ+Fd9s/9Fvp+fjX1hPeX3o/E
0/uPzug/qKj19zrpc6Xq62rK3y1ZT0XJlV8TsJ9o9rI+sm1UT1xl/mA5eBbu
BV+jzcqXtSXvAfKtt0P1WTft1x1k/92m0fohHvEc6v2z/VPv7z7MLvzXfsF2
1X/n5D+1tT8xRftV1aVfvb83N7Qf3kf11Tf6fuMW+cR/hH6iafLPZeCJuaDv
J6cyf1QOfYUHtH7srXoiJvbyx2r9U1/xvUT7wV9pvZNY/rxG3zsv1v9t6fQ/
10bpYyf6d7G0X5dE+XKQ8mVR+VMh7cf/rXr0sd6f3VM9G1/4nEr7G2e0/3mK
fBvN1/uH9ML/E/q+tL/020jfe0xUvfSuvhc4pecV776+Z3Qj9D3PS+FxfOxn
Dqn+L4p8Zrzqs+NqD1a+uaR6eKK+pyuGf3nZmkt/yr/6/td9q3g7gr5se63n
9f7e7JV9UilfHFK+6Ey9GDjVm3H4XsQu0Peqt/W9cSXV10O037ARvPQq6XuV
V/o+Ora+j1yh/yVS6H3Z+/qeZDT7od5FfY+cQ98DvdJ+Vl7yh6lH/ggHKh+V
1fvmrqqPfhW/NcFz85v2L3+uJP1q/bcc+cwKfS+SVeurv/V+OYvWJzPkL5n1
vXek/+Xy6Pvr27J/nBrCT42fin5dQ+1/bAfvoj7gnT9L8V5Q77+7ip96qu8O
6XulTegrHKXnG2m/7z/FWxfVN1PJP95OfX+VgvrMm059FqTT+Kxaf/XR97Dj
9X3pTPJb8Ku+f9+i96/P+F7QX6566pnWg+9rPfKB6t3K+r5xi+Ktn9a7er9n
m6m+Kqx6R98DBFn0vjCT3hccYX0SvKv/Izrre87uwuOnqi+u6nv7+nqfdQ7+
3WfwbzLo+6ms+t5MbdtD6+Fn2o99V/pqpvfbs4gPv+2b74+0HzVQeJVM+yFN
9X3Qd6oHKmk9sU3vO9Kqvl+j9z/zFe9/6/uETfSHF0Svgurr46rvbuh9/ULV
x330PVsKyVtT8XBc7x/b6PuytVqvbOD7U9ML+4XZ9D17Kb7vNM+037RP9X5x
vZ8equ+Bmur9XAP8329BfWK+1v7MUuIraqN6aYm+nxhKvPo35A9t9X1BqPcP
O5TPM6DfQN8Du1favy2p+uYfvQ+coP299Hq/9ub7wfiqV39QvdoC/44ean06
Tt/nD9D6sw37E8Fdvc/arfywX/spQ3j/ao/qfUxzfd/cRv9vxNb3UbmmKf+9
2e/V+i25vic4jD78kdqP/U71U17h9zjw29+q+uOY4vEy9ZbbxPOBvo+xm8lH
odH+ej993zVJ+1kt9X1JYe1nvvnfbYf6V+j9cB7qu+C+1m97xN90zaf3W15l
va+JLfy+h7zeOv2vEFvfe6bS+0Z9v+eas142u/X98mO+H3Pz+N/Au656vZz2
L9/W/+v59P9gZ30v8Sd45Cz+b9ZovdRD++16/+MKyv8rKH+upd8rru+TR+n/
s/RaT6RTfK4mPqOFsscy7b9t/V/5XK5MwiPVkyn5vyMsrf+XV1RU/tH+xW3l
64Pa/82r/YTY+t7qvt5fx1O8zxSeNqM+Nrvwf7tR/t9T73/Pa//lN+Z3yfU/
cG7yi6f3oa611p/F9f9EKb3Pnq/3N2N7Sl59/+2E/92l7/X6vm6o9idTaj81
J/5mc+n/kJhar3UhnuwB/a8yU/E3RfXPZeYPD2g934v1nptJ/ozqq97aI/y8
oHp4uPJHWa1vj2j98o/8sSvz28aqTy9o/6uZ8OVTxcNC7b/qeybz+BPlH+2n
FtP7K30PEK5tI3zS97Pb9L1bdfDUO6zvQzqrfoqkn+XarxvM/seb//uCntSj
brK+V56j+L2j+L1NfeuF+p/llr5fja/vo7qpnlyo+ric3j/2135bEuF5R/0f
VEb/263mf03zlb73GajvFd7F/vYY9g+GKL8V1fq1qPLFIfpdYuHDfH3/X0Dr
6SR6X1wXfYVHVZ9+pvw1S/uJM/S/+wDoGcWHO6/v0X3tZyTV90VXtf5dhz2D
Zfp+9ZLqq1byB70/D+PpffIzfS/yo77P8xVf5+RPPbQ++VnvZ9rjP2Fu/NG7
qrb2/6L5+n5iKvkm6qX1k94HeEvVvqr/y/JKfwn0fUtC+POzqf52+j5ygf5/
OqvzIUrre8hLWl/1gN/QV/2YWfsro7XemET9GZ3Weui81ufnhXcB+SuYrPq5
DPhp06seygt/US19zz9N8TRP/6cl0vcPC7S+nwt+BqP1fn27/j/Jq++xe2v/
ppO+Z2yu/d5ZOk9gp/x7pPz7e71P/k3xPFTvI3IJn84Qv9EL5ZN12o94In/6
mP8Xgp8030zZc6r436jv4Zy+p8+E/4U55M899P3cQ/2PsUbfL67T/0r7hwvP
dT7CIs1/W//DNdD3m3GU/6z8rb387YG+137O94r+YuXzW3qf/Ez/g+zQ/4GL
9f3WRq1fduj9xEDVxw+bK3/pf6uf9L5iBfkh7EB9Hn7D99l2r/J9fX3/cZR8
EgxUPlmr730eKX466v/ryeCHd4b/d20a/e98SPXQL/rfaba+t9D/DKaI8L+Y
9v+qKv+2Qd7oqf5vS6f/kU+iT7sbffofKx811fria+bzukxXPtb/GdXRZzRb
+p2o9lp9n3gQ+3u9aUc5lZ8W6HuSsYqfavzf5N8gf0Zv8C+5vs+0+v9vg9ZD
I8HrsB7xGeSn31+j/jf7f4X0P3Qn9G9eKH57C/9Oqf7+TP+HrtR5AFuUr4vo
fWVF9OGe6//XHdrfbin8iid9t9T3namkz/FaL/yj73366vsZ/a/p/aHzM2Ly
v1Twsf6vH6/80EP7X4f0Pr6Q/D0l/5+bPPqfbZzm0/rEe6B4byl7PuN/i6Cu
/m+djz2CVMSrPaX9s4zCz6+1H3NH+yEd0Ve0Q//bHvxfvPHzCw+n6/+Yu9p/
uKH1/MeqL5YIH2L1Fj/6H6uI/GWG8KIh/9eGefX/ew/h1Qn9//6d9mOM6v2B
2i8rKnx6qvcdFbVf2kn/V50Dn21a7XeOkT3ma7/f6n/tUtLfdOlznN6njRa9
ldpvSaX9ynFa//UUvQuV/4efICX4ZXqDX/5G/u8PG/M/Z5RC+bCD/LMN8tkM
+Ec4U9/DZdH3Cr/rfW4b7X/UHSh76nyy1fPp36zzDdPrfU5Cxcsy4eUY1dPd
OM/BdN6ueND/4Sd0nkx1nvfuE99hEb0f3aDvFUvrvIEVej4p/w+HdXWe1nad
b1GS80bC/sS7y4V9g+76Hqy5vq/OwP+ufhaet1M478IOID97W5nP/KP/UdsJ
Hyqr/hql/YwC+h4pNedFROV1/s0Y7TeM0P5BWdXvicEf7z74HVmtfzYyvyvP
/CaO/u/+Bv35d/BnU4z9EHcO/Zs/dR5KfOXr3Pp+ZdAU6UPnq11lPWa/Fv5c
7Kz8p/2lf8g3QXatD3uB30EB8DtIoXiYrf+t/1O+zaV6abPqiXGKvwraP1qk
/8/v6vyclfijP0jfdzZRfBUFP0w+8MM7oe+hlX/sQc4vMKU4Lyq8L/sWlX3b
C//H6nyPbOgv6qx696Xq4wD6wXfKZ+8Ij/7Q+Z+xOV8omqX4dvpf4F3OH7Jd
dB5lM/nnK60Xsum8pBTCP31/aGcz3k7V+X+ndR6c9rdddtULZSRvK+Wvufo/
RPV01E/nVU3i/Bh3RfvjtRQvc4TfebU/flr+ekTfq/+k//1K6DyiefyvHKxR
/NSFflRc5xeNVD3xTHgxWv9L3VE8FtJ5aLO0n1QFfIrWqd4toPpkvuqdrjpf
Kb38dazidYjOQ1ut/dbYygd9OO/RtOf8KNdQ/x+m0vp/ss4DOaf8Oob/x+1T
ncf0VPYdDT+2BedJ2JD1UdBR5y001Pdfn+h/4p91Pkhhzut0Fn3YXeQLs13j
N2u/5bzqx2aqf4ro/5dr2DO6rPMA9ui80Xd1nuNynYe2W+dDtiHewlfoMzrG
/P5ena/zDP/2jxNfQZLv4HeczpdLz3owSCN8rot+zAPl0+TCj0raT+3MeHeR
8TaO/HmCznvoqP+xSon/77X/VV75c5XOM22t81PH63zUzDofPavOM1hIPjSb
8TcvDfaOCuk8p1ScPxjk0fl0e3UedaTzwEpzXpg/dJziS/7ZU/HSUOu38Zyv
5f5TfvlQ71/e/K+XVfKUUL3YVOerlVZ+TKDztdrq//dCOp/tU+wd5tJ+YlP8
3zyWv81lvJdN+J1M5zul1XlTb3FeqU3P+Yb2fZ1n/T144r05TzI9+ODuUn8H
FUWvIvnAf6H/X3fqf9Y94Lvtq/Nc2uj8vbd1HmC5BYofzoez/xL/4SPVE+/h
j+bvzfAfiV5cziezJcVfavjzm3H+ZdSc81GDQP6p8868epx3aEtwXqpXQPac
o/M8Z+q8seLKR1N1vsgErQ9Tc16lWazzbZdyHqB3WOd1/zRX/qfz+57qvILP
dH5TyPkqJpPO70qg827Sky/cLNk3rfLZZfAoOgEe+bF03lVt2e8v4VcXnW+0
UOfjfSR9tMB/TSP570z8M0xKPERXOO/OX6v7HXSepX1b559cIz5tL/KjX0Ln
Qeo8wHAa59+afZxH6vpqPp3nG8agfvH6EU/+H6rHDuu8x206rzS14jGvzu/7
Red71NT5ewVV/zTReYsxOF8zGK/zOkdhj6AT9MKhuk/gS53Xuwr+ohw6z6KS
zietr3x/RvXMezrPqqnON8qm81lXM5/Zgj2DRTqvLhHnk7rJ8O/tIX7cQ+LH
76nzQs5Lnhc636KQ6qtTwqMijA+uqr5fpf9v4+i81Di7FW+cTxvU0H0oqfAH
0wZ/MInxR+vwR7tC9ezn+KP/Svn5AvZ3ZzmfzCbWeYeLhJeVdT50Hc7PNZ9y
fnVYWefvNtZ5u3NU38XQ+Y45dF5cQuIlKKf8/a7ON36u9fIWnV9SmP6wHfNF
D/GX6BfwxSuPPe1DnQ9fh/OOXRHO83V3haf9FR8zhZfdZb93qXe9lsSXXYm/
hKH8ZQ7nQdrkwr/LnG9mWnKeXpCU/OPNUv46wvnxYVHOA48+0nndx3Se/DHm
M600X2P5T2qdR51T54t7Z5WPdH7UesVbQuQxl3R+ZGmdj94He/vtiC/XRefh
Voa/cIvOr2zE+drRkquKJ52v31TnV28Rf6WFN1d0/mdWnWc9nnwQ3Ucf5mPh
e0H51zs6D+0++nXxwRt3jfNazSHa9gz4423SedSrdJ7zZt0v8GSf/F/nnTaR
P3WAX3+O7n9Ip/sKcuo83ZTkgzfn0fvxOe/ZZGD+aLbO/02CPsyvOm96ke4P
6cr5icHnOp+/PvfNeHl1/8c96Hm1xP9e1QO/yD/vcl54GB/9Bnt20h9b9w8s
F17P0HqzhO5n+Vr39c3SecLTxc8x7qMwi3R/VCmdJ90A/IoO6Pz2h8SzX5Pz
yU0v3c92F3zwC+s8vzrY15WR/x1WPm8m/WTWerKuzu8tyvw2ne4bWKH7d9rp
PqU98BvV0nntzYVXlYTXVfAfd1b3gVTU+cdLhbcxsIftqvNlHwjvD7zBZ62P
Omt/w9P8CXV/ySDdl9P3F8YXBZ/MHp0/eEz3M4zGX4NN4udrxVs3+edWncfb
QfovjDzeQNl7iPx3Pnhm7+l88Sw6L7mrzltdTXwGq7Cv03nmdgX0gic6z/4f
9OMerVW+AL/sz7r/5kPuK3GLOc/br6n7G1YQ396POg+/K+cZu26c3+511Hnz
rcEPmxZ/C54J/3qCB9FK1TMvOT/c1/03fkf4M0/hz97FH8KZwttkxId7rPNH
h+p+kH+hZzpRr/jdqV9NoPxXVOff19B5v7F0HnIJ9OsSov/wQ51f3VPnJ3dW
PTAGfUdXiSdb4JTyl/B6u+6D+Bn89Y3uY3DER/RY96FMEZ7pvqqwhO5HqYw/
mqa6H6m/7sNZzPncge4bCGvKnkV1P8wc4icqgH/4HyKP/VP3lyw+p/yv+weW
Cf+GIq85zn0aUTXyp/eTzqcuiD1dWp0f2kZ4H1/3u+3SfUvbqc/sTeSP9us+
ot3XpS/WH9Eg4V0r7G9+kr2myf+fCM8Waz3WjvgLd1I/u2a6TyWP9Hdf91/c
EH50Vnz0kf9u1n1Ahbifz5TivirTVfZuwHzREOHjJN13MFT3s/2q+5AuCd9T
YK+okO6/qY99THfdf9BC8bGb+0aiC7of6jT44ppq/f2P5m+n+TPovP/EWj+m
1Hqjls5vHvmA/ofct2QO7Ebej+QfrbkPxhyEX3//JfkX99GYCtg3GIE/2krK
R/IP8w/+7T1UfVQJeU1S3T+xHH37TbUeGaT7h+LoPrOTup8pgfynjurLr3U+
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
/2VV4ad7Jvp/6Ey7cTzGz/kK/nMme932fm8BPydz0t+9J/SP5oa/xr0Zn5J+
N4x+80VKnh+KvC4x/NtM8O92Ib/9AfnNtvfQx65W0N9VhPl/suirWVaev9OV
9gbm9yYyv1+S+aPYmr8/8nv7kT94WAD9p2O+YE8x+vMNht6rwvD7gPns3vj0
pwxo5+V5e2QQ+u4AP95e+IlWpWX+4e2R74Kh/+Nh8JO2OO2NzBflzyz7d4Gf
pujfvyP91ynHfMVGMv9l6JmG0LOfJKLdqyn0n2bn+Xqydw3ksdWQx8WqiH3W
jYL/7e/Tzol9/LPYy6tJ29uf/nU7bN+R+f6tynzvj6f/RUPGL/mW+TMmpX0Q
/3PzU6Pvlu1o380AvUfQc1tr0K44AX7vloF+hxHMd6o89B4iv7ufBnnSol/b
3kdfz6DnxUF+s7o7/f0/QZ73+tJew/Ph3o7CH+k3tvT7t/zhHvYNZremPSlE
vhaS5/u29P9YAf4uo093uAXtxXOgf4P4MnWIr7Cf/LEg/hnMwD5eAfnbrpK0
cw7FHqsVv39hT78L/LuP4N9Phn7sGOlnB/HjRil+0majvwb68MbWgf8ik5j/
0694/vF0+m/UxB9TfQO9oBr6LTle+bEp49+eRfuDstCPgb3cXPqjkvQHt2nb
LbTdqS8Y/xx/canAN/Nc+kjUDvnXzMcfamOPoBTx4oo2gF8zFXu8X0L4QL+N
DR4Eq8BLrxXzm2zMH7YuxPi+Axl/jXj0Kw3h+XGdZM9FtDvKv68xX7QefzVn
8ddgIvEQrhmHPjow3vuP8cHTKtAfQX90ojb6+G6i9KP5rvO8TfIp/YXBJ/8/
/MtkHY38z5E3yCd+a/ekfWgZ7V61hefQN3fQl82Bvu2B8fRX3MbziRRfBv+J
4o1mvn2bmO+/rxmffS78Ju9Ge/wSxldvxfii83g+XUfGvyV5CqMvNwZ9mSeV
lQ/HYo/MlXj+EPJFeWvR/wn+Z99CPjd8Of1J2tIep3hciP2i7vKPHWPRx+Qt
8DcH/oL/4N+0/Qb7ZNgOvTlt6H8aKt4m0d64g/HDJ0C/APqKJtdn/plT6B+M
PcxFzd+sGf198Ddv3SjkebCR9iz0E3yDfvymxJtrK/y7Zplv5Fr085S2K0k7
+K4J/JdS/D1AP3aw9LOgi8Zjn3D8LMa326P8Noh2ie+k38Hwn462/8MM/Pnp
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
vwM87wcdlC/VkRc/QF78BP7+P/gHtdJo/Uj8o1Pkqy9EvvpuFZC37hf5j/kt
Pq38Tq73qc/yvik4Q7xtMeIdZNH7n+bUk3CR5v8Smv/X8/xmJup5Zg948h9S
v4M85GNUVuvfZqovrcFzlEb18hz54fvl0POe1q8h8QoPkm/hc5oPVqo+F2D+
i+oJH+P0vFGX9UaQtRj6HiL+tgn5YUer3hbW+5HKrFfM06oXjcm/sC7r52iK
5pvaep6/IH+0KYo+2VRfGhNfs07z49/iP1jPFytk/2M9H40gn9yVH+k/sRT0
Oz/Db6n8v3Wx6pnWF/mY36JtWq89Yb6N21RE/xvE293W83oV5P1vfWVK6/nk
a/jZBfCLs1If7Mv41yXS80tKPW9Z+Lk5ep/xu9YL3cnHyGu9I33C6dQHO1z1
c5j0PSx9tT7xvfT+oCPzlVmt92XHiZfrpXh9r/XHFvI96k89DidqvZ5fz7sX
qSf2LeXzXfLHLqcemaPkX5BK+nVU/UpLf3cReeZb8BmWFD5/ZT7ze1lPhXnB
ox+melUoL/w2KP/3XQA/h6l3QRvV3zw8T9j85LMrskP1UPW4gd4PvUD+hG3B
n82dnv75Vb82gNe4KHiNDiufNN8Yp+f3IRp/rgrtK36F/zX87QppPXsXPEdJ
wLNvr/dDk/R8PZJ6ZjuonpXX+n4j9cMlRv8gpfRfrefj8ujrvlY9fsz6xmzE
X9EE/GWy8T4vrK56+Av1P/oQfAZD9Xxbl/kvnPIq9vyIvvFIzQ/fqd70IX+D
F+arfur9anL42w3UF59S6+Xz5KM9qXx8rOflLHpffZX1oz/B+sSul7+r4u9w
kt4PLdR6JB/6+c7oZ9YFWs9p/vgZvPriet+Z+xX83Ubzbwrly/c8j5gC1Bdb
GH+5/6T/Y83/hchPX0/5OYX5IToMvv2j3FpfKH866H3GSL0falGe8aup/1EP
vU+eqOeh4/jPf6H3Bys03zWHn8tL/vhO5E9wTeuZnsQ7XpZa+a/njwLK94nk
k58lf9745v/YZz4V/hIrP3dpfujEfOSzsP6MJ+h9WCLp2xN7zA/Y49/U8+xL
PO9Yq+ePLnp/W4D4RN1Vb5pjvxlNPO1B4uPmEh9Xh/edwceaf2brfYieJ9wy
vQ/dqvafWc8GDtqW1PrjNPXBzqC/1fORqUC83SjN96/qfVUq1cd+/3veZn0f
1cuPvhfUPwPvi80h4b3Lc8Ib9So4yvOGWw6ew2fLQW/dR3+tp+NB1I/4Fb2/
TarvH52R539Enu/L+iF4nfnLd+V9oP91sfyv/Lsvfb+knkQtiZ/9Rs/zb+j5
93vk2ZOR5vvS6DflJ9Vn+MczND/WhX/cRt+vklNv43F6H5SM9dX/L4vQO8mH
6APy16VDfnxe80dH/GN2aP16BflxFuwzt8S/I/U8bAd+bGfW//Fd4b0EeHcn
NZ82wJ6osvK5B/lj7+n7wn3Vmxx6/u6k9VQx4f2w6ul28GjSSL/8et+fQevH
X5h/7HMzVF80HxQmnuFB8s32Id/8RN53++l6/7yO9Zj/h3prlyp+1fQ8mZTv
mTaZ3ge/rufBxnr/VVLvIwbhT9eH/Iv60243az5/Ts9HU1n/+KXU33gl+RHu
Vn6kZj0XHNHze1riGVchnu5F9Ak97wOiD1mfmPTMB2ElrR9Laf6dp/cxo7We
a673AZ3QLxqu9VoBva/dovq+X99DC+B/34P1hFsg/LbX8/EEfZ/8Uu/z2mr9
2Fj6xOSz60/9M/NZ75iBPE9EhagXvj/zn+ui+lJK+fI89dE1UH13vP8IN+v5
6gHxi4/o/WwR+PsK8LfL9f6vJ/oG7cCz+xr+7gPmv3CC1meb9H2rkr4/jWf+
NsOInw3JFz8DPIbbVH8uaD7/QN/jt+h7zLW/tP4Eb8H7OfHvui3yH/Onu8r6
xr7J/Gvm4+/4LT3/ltfzYwO9r36H95H2Q623zsuen7Teq0R9CV8lP3wnfW8v
oefxlvq+31PP25HqRwnwEczR80ik703fKV9asr4xM3ifHe8CHza59E3FesmW
0/9SeTW/XZI+zeTfNKqXd6hvroeed1ueUTz0vPW6vo+E+l/qtf/Nl1rPrtd6
IinywwpJVJ/0Pm838qK8wv/vzOfRC1o/DgHvcVK937ys79FnybeogtavbfV8
ulvfz7/T94Shep5bqOe1f/R+5azeh+3m+dM00/flArxPCXOSn+5HPU+8y/wb
rS8Ov3Ksp6KD/A8QZMIf0TC9v9io9eQSvW/bp+8z07ReP6TvnduU38upr24O
65Voq94v51E+H9X3u9TEL3hF/4dklD/66H1mCz3/1dN6vpPy+Ru9v/4Ne21Z
7A166nvwHdVTfW+27+j/pi56P5tL66Uqep4prvmlJv3NGX3/3cf7CN8Kf0dH
8KcZoHoXyJ6xq5TP4CsspOe3hfjD56LeucJaH63T+9WvWQ+5Gnp+X6n3S0m0
XquofPhT66ne6GPPIj/opfXpT8JbbuG9NfLDVvo+l0Hz8zo9T9XQ+nqO1stl
VwoPwk8/1Y8G4M/WAH/hHX3P0/8FprS+N+/ge0B4iO+t5hn9X/RE33uM3ocX
0/PGduV/T/2v8g32BdMlf5z+N+nF9zGzS/+fpdL38/e1Xqum+rZQ9fh1vh+7
1/k/yCdivor+0/PKOdX389QHe+cZzZ/43//L+2kzSf+3zNX/EKm1fqhDPYz1
vTd6Rd8nyxLfoI/y65H4bVd9qgC+bRvW59EMfc9IL7xZvX/You8/+/lfwZcE
b/GrxDuejj+ilPrfoAHyfEa9Lz+q919Gz9NN9f19q95HFdf36p8Y7w6xHgjq
ql6n1vNrJX2fTc98Gz4j/0X6n+Sk5utK36qd/2fC7TxPm7XkV9iZ/y98I75n
+1eZL1xavS9ZJvw31PvqvPq+WVjPe5v1Pmy48FRd36NfQ9+4vb5Xduf7dzyB
fIv0PikINf+W0Hw1F/nRAeTblORT3E/53I7/IWwX/f97WN8D3mJ8sIn3gUFJ
nofcKeqvzar5qwP1M0qi9dtMnt/NLa0P9+OPeCL+sIXwr2ml9etH/O/nfpY/
S+j933A9L9zAP3a84n1ZzwP5yPdA/8PYj/Q8MFHvu44pfqnkn934J5qq/wXa
6v/LLxNrPQOeTR7h4dFs6a/6/jz1PfpE/BvqfV42vc/pof8T0uv5bCHzaTxW
76c+1forkb4Pl9P3rc7Ur+Co3jf8y/95/oD+91uo9XhGfU//Qu9HGkl+V73f
1PfP8C/5Y7X80VHzRQXVl8r6f2cR8Y43k0/mf+8TU2n910rvY/aq3l3S9/GK
et/bSeuHjpqP/9P3sWt6Ph6u98m19b9YGepBUEbPm8/oe0w36nGQbqXqE+8b
zHR9Py6leDTBv663/h95me9p9jLxCJcq3kX1ff4d5XcH/n9y3cBfOELrtdr6
v+we85Mvov8Lm3n4d+T/0nCy3i9s1vP3ND1/5dV6uw/+8iv0/9EK4d9qvT6Q
/wXjR9RXP4P3zfFJPY/8QbzNZcV7FvbYhvM1H7Bei37U/HlH/8clZX3qr+p5
LCLebonwpvk8yKD5qYz+D66g9ctj5id3mfrqaup/qPf5nztapv9ZH6jenKPe
mB9PaX2r/wHe1PuEXcqXcvwPG2blf2LfSc+vG1dpvtT/G1b7D44qP3/WerUd
+yGCmPFxVfxvE+t9RjH9D5p6lPyl9f85/d+cWHjZQr75ovr/d6j8f5350b+t
9+lpwFP4l/6Pe3+35hP+p7IZ9L/KMeITfKF6VYZ6FaVmfgmva77+gf8Hw076
n/cO/2uaRh9oftb78q3gxc/W/+pX9T9/C9lzSf/z7eR/zXgh+zuC2nq+aIH/
TCf9n5qO/+XtMPzjB+t/1yz8v+E0X1itl9xr1JtgO/9XBt30v28y+EVtNB9M
F//zqhf7tR8kK/9v+zb8b+fe1vzcjv+NzVn9z7+e9W34t/4Pnblb8zHyXAHo
8Dn93zeU9YcrpXqn/+/MUfxry+v/16n4w5fcI/xq/8MPqn8l9b9lLupXkEL/
x75BPriyyocvlL+biIfrr/837gmP3/G90VbS80Fv/hcPymm/y0r9TzyJfHAn
+F896Kv9iu3xX1BR++d68/+4a8z/036C+FcR/9X6n7ya8ie1/r+aSr1xJ4mX
y4n/oheob+Y77d/7j//jTBb2E/z/iR/83Nf+gpf1vmCN8rWH9nf9ofiX0vP1
TOGll+ajHMJ/PvnvefznOmKvq679fbv0/9X7+v/1d+0XGqv2ydK3mP73mw0+
zSPlcznhdZr2r/zBfkafRvsJUjF/mYvab1J2M/JGa//ld9q/tFv6ptX/5C/q
/4uHmv82K397Ez+zSvVsBfkTJdf+i2rkuz0B3qP/7fe4xX4i1514+f3s5wkn
CU//+395APNfdID5N5pMfscHNd8s0v9jT6hf4VzyyX8uvGdCvumq/RKJtV9T
9cA4PS+MUbwbUT/jrdpv97Lmt53g350nn+L/5dP/5vMTet/1tPafDB8kf7K/
ww9i/2NcXPuR8mm/YE/qq4mU//nYz+Onsz85+oz8iw9Tr9x+7It/0f6Owvp/
NSv7McIc7F8Jy2u/fRftj3lCPTG1tb/kSA/Np8xP/g/iFbfUfpVmwnth4hWP
7aR6pv1IA7WfqNkpxUPz6X30j5vAPyyp57VX5J9E7C9wU9gf4t7g/3VbCnwH
NbQf6XftZ1yg/egB9sTXlW/zybfwE+mTRvvhX1R9TKd8XCp8zwTf0Rji64+C
N78a//hz2l+YVv+/rlb+ROwvMZfASzhc65vvmI/MAf1vsVD/418j/nElzUc7
tF9sFedfBEep73F94hFkZ3+b783+2vCy6kUB/O8eKj/aa7/tfO3nrqD9q/3Z
b2NWsF/KNNX/3hWxN6ir/WsLhLe8E2nfwX59m4z8CFNp/oiJRzCVePix2q/9
pfg/o/2Vydi/Gfyi/HpW+ZWS/A2qkr/2be1H2gR/k177/SYp/woTv+Ck7Nmo
/8NvU3/CFjpvoQT7UU0O1ZNe0nfZ18jPpv3qrbU/ue67mk9ZT/gk2u9xSOvf
4qrPR8BXVEH46sd5Fbaqzkcoqf2dxcmv6PZI2l/ReQW9qa/hPs2ng9lfbCqz
/9k9Yv+t/Yz9e6aD/gc9/b/6iL7+Zem7XvtBuyo/Cmo/SGfh5bH21zfviP4Z
Vc+WsN40zcGnywE+XUntxzgnPCbF39ED/G0Pf616pXpTnP2/wXydp/Ei5wHY
weSj+5H8dmOZf8Nc2Ov/1fkFo3QeQXPtF6+h9ddW7S/NRj7GvdlP6YfgX/+/
+ecP9nuHfdnPHpXT+mmq5psl1Cs3Ue9bvPZPqX4Hudmv7ldov39S7fc+rPMN
juFfXx3/htupR6H2+7k19LfbdL7AYuw3jvod7db6aSL+9p1UP1Zr/0pO4uM2
qf9+7T+uqf34W3ReQVf2S/tU2k83jfM2zFSdv9BO++V7E09/VfkyFn2Di9rf
XHks+h1hv7TJCD59ep0H8BL+dtW1X7s+8Y07Et9wMP5y2/CX+Yn6Ffyu+ToR
9SM6Ct7cNupn1Ev1cxX8w73wj/9SPo4ET64R+rj3dD7PQ/ZTh4OoJ2E97DOt
wWv8LftVTXLt9++i816+Vn7GOu/kA/QNqk3RfKTzGH7X+RjL4O8ua3/EV1pP
G53HMYHzcHx6nU/zO+cRuBHav67zLeyfnC9jMtRA3jGdT5BP69PywkdN5Ucb
5c8D/Buv0/kF3+m8l7X4w0ySP253RP40zkeJxyr+ncRvv9YPC7TfOL3q90Th
Z638sQt/hEV0/sNp+WcA52X4K5zP4dLPRP8jmo9WsJ86HN5W8yH1PXye+m6G
cD6Bn0X9jXNyPpFrqfO4OnO+insoPKVQPLLqfKMV4McVAj9xGvxt2qJ/1JXz
cExXzrsKZug8pQnQ9nPt516g84jqKX5LiF/8AedpuFHQUU6dl3S3ovDM+Qx+
suar/3Te1A7OTwo+HQj/d3R+RTPh53/zQW7OK4qWcR6R+VDnI9wnfkFKnecx
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
v/Xkv6T5kbczBF9lS8Pv/nu030NfO2uA7CFeUb6eqk+NaX+Mfr4V+WJ7UB/M
buJnbhO/oGhB4nn6XdrvZEF+pybg7wH+ih/gr+jHUqqPXZCXJyfyF7aA3wn8
5yfjv/gS9cUOpL7YHNjjfsCeeAi0zfc+8iuD37g3+HX5iadtBW0ygg/fmv7x
xwHtK1oKL9J/Kvqbwa9h7+DeyF9SCPm/Ya9rovz6lvwK8uGfaIDwnRF7wzzo
G9aDvzv+Fv4tQz75z5VPUUni/Qj/hKOpb6ah6tvP1D+bivjE6StK/+60zylG
/wodoZ/Gf7HBf24A/jA75Z9UJaC7kB9xU9rd98r/t9PR3r8R9I6n0XdDbfqv
xh/xHvxhn0+KvdXr4r93qS+2k+pLfuzzx5EXFs2Ev17CH/bQnVkJ7akrIa9r
Pfob8GqXNkS/O9jj86XEX2saKJ9rCt/kR3yIfLCj3oFuCF6DYopfrsTYN6sW
/H5LgbzR9dHv45doX8P48Nlnkf8j7a6+wd7CNRn/J/yCHfLPFmg3HNp+J7y1
BW9hwUTQnzA+nkX83ATi58ytBH9EcyrQ/zPsdfOxN2iRTfMT9cHVvjAL+0si
L82r6D8VflG3Kvh7aC/ic+452n99G/5/54bu15r2S8TfnnqD9l3o73eRr24j
+gYfSN+OmfHHTOLp3pB/HteA30v3iO/0yrT3zoU+15R/j/FvMEL2zb2S0N8M
KEP/c+cS6PhSCexrhj6mJ/pEs//DXzer0p4N/9ih+Cc6jT/CPZ3w90rqk1lF
fYqv3E8Y73pXUf24ir7Vy6JPnqLot5x89aXhb2rAP6j1kPFzkB+MJF6mdEP4
f/IM+eLqoN/oZNAf14NfuSeMn1Idf/+neFdhvPn4Z/wxLDf9u/9LvN99jf4L
0yJvieK1BPxFWWrLP+exZxT48Kv+gt/dV+l/B//7efg/TEv8XAfi55/BP/YM
8YvukK9BbvLVZDkFv+lFGV8MPEUBeLJ1zhK/qsVp3wm+TZWK8O91Hf3KlaO9
9j7o1/JAN7pJ/1TkQ5D4uwQ6zJ2T9otHoFO9QvzKo09cGH0CJ/xsFX4OHcLf
T72E/omOIi9kvM31D+2dwYNvjnybTPLlH1+zhvy3B/knX0D+PPI7/Jz8NoOw
1w9mvPvmGP07FKT9+3Xwr5Ye+W/+jr4TCkF3Jr9dCeIX/oE+/ofy0JPhbxNL
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
0H+M/tVUj5qS3/bDbfBPd4f+uYWfj9KpPsPfVoC/LUj9MLViom9G8sfGJH/C
rq/F/zPoL4in1zK91juxqMdHmX9sXvTzU8q+huArHC98eegT5GW896fyYx31
0rYmf2xq4X3AHuwt/+9bfuF95LmjzJ/B7l3o3w1/mHbkl3n8DvZeBj9RGupV
mFL4uwf+/AdHNd9hf1iK+uf+Il/sBfTzQ/Qzt+TPGcJzK+q97ZyJ/p2ZX7xJ
H8Hvc61vcxTC3uMPoVdS7+zzR/CP0Cesij7+OPTxK62BX6qzxPM19gZLsdfd
xB9hN9a/XjPJ/xL5XrrN0JXI58gX/rOAf/fdcexpExt9Zr6h/Y+i2Jeb/mYJ
/f2T+7E3wyvi0f2u5tPM+Ged8nO67JuNvuGkR/SfCz79+3eJ1/m/pM8V9Juq
/JgLfuwt2u1Y8Opnod6YSUkV3xXEK+kJ8FZjHvT0v6G30G7WHyefL1BfvBtp
tf6Q/L3wDxMy/5vbL/HPRK0HVmNvlOca/esy3n+1QvGAf3iK+SsaAB7cCvIz
rM98bo4uR/75Y/D/GXvCX7EnPHRd+ANfUcj4YBP5HSyj3tlV5Le/X/V6LHTQ
CXv8Z7KnGPNDdFjryXnyf8p/6N+KfIiOs36Jciieu4mn+4X64JYJH9mIb1g0
B/TmJdAnDqPPUeYvvzX5Ey4QvpK8o/pwhfb81HdTW/KfaP20R/z+O0T8ezM/
mKPkfzRReLzPfB3Fwj4zBfuC1vjL+xR/28rK547oYzLOpb3kTvy/kvrq/0Z+
BPlUr6+Dz/AH6nu0JxH2zJ0tPGzD3tjgI+jB+ilsuJL+DU/T3nI17dEZ6OvL
aJ+q+C9bhLy8B7F3Dfluml+AX9/FyLt5AP0ebaD/DfLFzNV67TDzT/AF/M3f
RzS/4e/oOusR7wjzY9gOvHkp9Xw2gfVW4GTPFewJSoW097kJPZX1qJdO642G
4NHsUz6fXQp/i33he/g3iq6jTwLqgZ1HPXB/nFB9YL0TTsP/4Zv79A+x39hD
8hfxCyvsQl4K5LuGyHedsSdayHrLb7kAfePupx68In5R/x3wX8J6291NhT1x
iFfYnXprH8n/T4hPsHoV/hlDe/Ac+eEvyI9mMj/4TfCnKQB/cx3+UWXWzzYp
+ePP/gP95lCvwue/MX7DZvByVvX6BHh3b/5EfjLw5JYr31Ndwx8d/kZeDM2/
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
l1nv3zrxPjWqzHzhjOaT0owPTut5aR/zjcmletOC+cDuCOh/hPxxQ8fRPkf6
HaL+GtWjKDb4DWYh3zsofyzX8+nnWi8P0vr9K+qvHax8Lar1n9XzxM2tjD/O
83A0RM9vrfU+pzXrYzdS699a1DuzT+05sd/F1/eUy7yv8nsrPyrp+b+Qnsc3
sL4xgeafenqePka+BCXxh0vC+x5/PesVU1j1ZSv+cSlYr/v3yZ8gJvka+uSr
Sa35ZxvzUdhf83VNnldMX/xp2uHPcOEQ5Sv+drm1nl0N/sJuel8wEP+4w1qv
lADv4RO9L8skfydQvZ28WfHqBX1qPP55yHzkfap8qYW9Lj/rqegJ/g0WE9+w
E/UlbKL1eRvlW7O19D+g9coLnh+j3Jrvv/pb872+D6zl+cW80vuzlrwfDNaS
T6Yw9cNU1vr3V9WD3sxHNgHzi02Lv01e+tsYrK+jZcyX7lP86+fFv1F77HFx
lC/fMd9HSfT+aTbyolzCYzl9r4iv9zOrWS9FDdHfb6b3XcX1fqIr/cMTrNds
Yz2/75V/qql+VGf9ER3XeiAD8635Xc/b7Zk/vA7Md35Mnndcc+LvFdL3lbbU
E1uOem9GjlY913x1Uu/L6+l9R17e77ikfD9154mXv0L1ILWeH06irz+Z/t6f
9LcNNV8sJx/8DeAliqP191zibcoRT6+C3g9+ofeVQ5i/oiLM/zYm9cUeof4F
i8dInt531KT+u96sP8LNWm/tBo9Rd60XM0pe1Bv9u7Le9u4RH7NW+Tue54Fo
/1H4+crv28rPtTwPRROIv+2lenRF/n6k+A3R+4Wv/xCN/aGn9WUGff8rx/wY
3Nb3693Kr3Os3703itc7K1QftP7bvRt/zKce+atUj+7q/dl9+ecR9phn2GPn
4z9TnvW5yaz1zWesb10yva+5sh7/3dT3qXF6X1pX67urzD9mE+sRfyjvT7wC
xCP8nfW2HUt9iw7oeWQ333/sXf3f0kPriTda/y3j+cXbhr6m33DVV94Huvaq
bzlYT5npvB8wK/V80Fvvk/8j3mFP8GS7UB+iT/W9p7rW+zf0PiWDnu/24T+T
jnwLG7DeDPvofcB3yudk9Hc19H6wlr5HnpI/5+l5Kd1O6KV6Pk3Ges7356ie
8b49mog/oktaz2cjfv4k1v+uCe8LvRoDlB+zGN8B//p9td7+hHazkPWw3wt/
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
fcj7Ar/kE9Uv7X/ZqvpRivwLcup/vk/0P9xK8VvIfkj/GOspW4r1WfAr+z/s
XPZHB4fvKr7s//KOyZ+fK//S6n/H88T//847qld56L9H/+/31n7K0+jjt1M9
mUr9slnYXxKd0v/WzfS/5AKed+xK/Y+7DDyG5bQfJLn+d86l/aa/KL/bMl+6
isqXzeSLv0j7OYbw/3zYWPXpeQbNX9SXaA/2RHk0X7zR/FYA+cFfyA/maH/D
Wtlbk//xo1PUi3Ay849Jy/Oa64Q9UWPWV77T/qHK2g+QUvGvTfy9jKqnqxTP
2+wnt++wP87LpP1vj/gfJ2ql/avntR+rovbrNCNe3jztTzgJnlwJrS/ia//F
ZewNd+l58zb48pKy3zcYQn1wrZWvZ6mv/n7tHxmqern9U/r7PO/487HXZWK/
qvPYL+T/oXy5Ax7MZ9rv/Sv48+pTP/zB2i/WGHuijNp/sEP/g09U/H9lv6Vp
ov3Va9gPGV7SfsK42o/WXvZnZv+06cp+ULNc+z+1X9tOZz+JfUA9tLO1n6ok
+6/9Dtp/XKou7RvZbxaVZL94kID2cCDtYTP2rwbn2S/rKlPfvMGsb4P74MNP
RzzNl4pPWu0/qSa6m/bTnEE/11F4O4T+3ivtny7Mfjmv7be0H9B+q1jkl8vF
/kvzC/u//R56vomr71svtB+sGPvxzTvan1hI+386k79mnfJ3D/51I8rR/6ny
9Zj2D8TQ/skGwnd58WsNHWbS/qrKsrc17e4X1nPuX/Dv7+D8gnAV+e23137h
quyXs+3Y/2rmkt8mJ89jXnb87/v4P8ym/Urb2S9sN3MegWnTh/FXWA+65NTr
oJ7WvxdYb0QleX5x7bSemK/96iWwPyyt/YsVy8M/E/tfw084T8Qvw37FcB90
sBN/Bke1/h4Jnm1R7Wc/p/3Eu6Cj9uxH9hv58G8s/L0Gf659OtpzsN/dL8B+
zfBWV9rXsX/QpdD+/Pj4Myqu/aZVtD85LvUzzAzegsLgzRvH+ReBzq9w6xNp
fzD+9ArovJNhnOdkYut8mdk/w+8p9SCcyX5qt1Xv81azHg6nsj/NbGP+CCdo
P1Zp1rthQeGpPPjwG2l/5q86H2C84ndO8206zV+J2C/l/mS+8vvib/9QIexJ
NBF6G/v5w8nUh1D7k/2xnN/i8rCfy60vIf7gx5XpLXvIL7+dzg+YSfxdXPAb
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
/LzPwFt0Edq1gvarfEq8i/b5Pvw/42KE4Q==
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1362.7800623575847`, -240.0034120347765},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{1362.7800623575847`, 
   1808.473876953125}, {-317.22900390625, -244.0679168701172}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7729904844021826`*^9, 3.7741975329825177`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"2678ec53-5af3-4a14-a467-692e20327769"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sampling with the training Net", "Section",
 CellChangeTimes->{{3.7712451383572793`*^9, 3.7712451391634197`*^9}, {
  3.7714262606440077`*^9, 3.771426262610865*^9}, {3.771429492091707*^9, 
  3.771429505384417*^9}},ExpressionUUID->"c5435377-85e9-4273-b242-\
9db3377b8aec"],

Cell["\<\
Here we invert the network to be able to sample the input, given an output \
generated from a multidimensional Normal distribution:\
\>", "Text",
 CellChangeTimes->{{3.77143105093583*^9, 
  3.7714310951866903`*^9}},ExpressionUUID->"a467321e-7eed-40ec-a6e5-\
b0d1b11c7c86"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"invertResidualNetwork", "[", 
    RowBox[{"net_", ",", " ", "iter_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"functions", ",", " ", "invcores"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"functions", " ", "=", " ", 
       RowBox[{"NetExtract", "[", 
        RowBox[{"net", ",", " ", 
         RowBox[{"{", 
          RowBox[{"All", ",", " ", "1"}], "}"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"Extract", " ", "residual", " ", "blocks"}], " ", "*)"}], "\n",
       "\t", 
      RowBox[{"invcores", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"NetGraph", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", " ", 
             RowBox[{"ThreadingLayer", "[", "Subtract", "]"}]}], "}"}], ",", 
           "\n", "\t\t", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<state\>\"", "]"}], " ", "\[Rule]", 
              " ", "1"}], ",", " ", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<y\>\"", "]"}], " ", "\[Rule]", " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "1"}], "]"}]}], ",", " ", 
             RowBox[{"1", " ", "\[Rule]", " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "2"}], "]"}]}]}], "}"}]}], "\n", "\t", 
          "]"}], " ", "&"}], " ", "/@", " ", "functions"}]}], ";", " ", 
      RowBox[{"(*", " ", "*)"}], "\n", "\t", 
      RowBox[{"invcores", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"NetFoldOperator", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<state\>\""}], 
            "}"}]}], "]"}], " ", "&"}], " ", "/@", " ", "invcores"}]}], ";", 
      "\n", "\t", 
      RowBox[{"invcores", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"NetChain", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ReplicateLayer", "[", "iter", "]"}], ",", " ", "#", ",", 
            " ", 
            RowBox[{"SequenceLastLayer", "[", "]"}]}], "}"}], "]"}], " ", 
         "&"}], " ", "/@", " ", "invcores"}]}], ";", "\n", "\t", 
      RowBox[{"NetJoin", " ", "@@", " ", 
       RowBox[{"Reverse", "[", "invcores", "]"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{3.771245142981569*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"0724b9b1-9dfb-411d-af88-cbc7c47e37bd"],

Cell["Test the function:", "Text",
 CellChangeTimes->{{3.771437124689724*^9, 
  3.77143712718913*^9}},ExpressionUUID->"58cfe75f-8ca9-4be0-9510-\
b968cf64ba5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"trainednet", ",", "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.774207329942407*^9, 3.7742073457122393`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"a2dd4f35-cd7b-443c-be64-746c7a4ebb7c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7742073558002844`*^9, 3.7742076517937784`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"89da065e-a689-440c-8245-50c2cc25c336"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"forward", ",", "5"}], "]"}]}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"62951ad7-2043-4497-b3b2-1706d23f5e37"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]]],
                    NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.77298965888603*^9, 3.7741947941736417`*^9, 
  3.7741974601371765`*^9, 3.774207308808916*^9, 3.774207629534275*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"33d69fba-c8cd-4662-aa4d-67673d84a76c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"inverse", "[", 
  RowBox[{"{", 
   RowBox[{"1.1973234415054321`", ",", 
    RowBox[{"-", "0.014927443116903305`"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.772989669028283*^9, 3.772989671798211*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"77888c2b-0256-4727-b002-90511f63ad50"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0000022649765015`", ",", 
   RowBox[{"-", "7.748603820800781`*^-7"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.772989672685344*^9, 3.7729896817644224`*^9}, 
   3.7729902904966316`*^9},
 CellLabel->
  "Out[140]=",ExpressionUUID->"4566b2e0-4b49-428f-93ef-1a5eaeaa4bd0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"forward", ",", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"out", "=", 
  RowBox[{"forward", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"inverse", "[", "out", "]"}]}], "Input",
 CellChangeTimes->{{3.771436996477579*^9, 3.771437070990171*^9}, {
  3.771437101113844*^9, 3.7714371149460707`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"07716a7a-5d62-4bc2-84ee-ee116573d77d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]]],
                    NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771437052138648*^9, {3.771437093017075*^9, 3.771437115633716*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"fa404b7c-c2a4-4e28-a8da-6b017300997f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.679888904094696`", ",", "0.6743523478507996`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771437052138648*^9, {3.771437093017075*^9, 3.7714371156452417`*^9}},
 CellLabel->"Out[62]=",ExpressionUUID->"9b0ff0e4-7411-4d4e-88d7-a206f948a823"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9735456705093384`", ",", "2.066356658935547`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771437052138648*^9, {3.771437093017075*^9, 3.7714371156468277`*^9}},
 CellLabel->"Out[63]=",ExpressionUUID->"a84b1d36-9f02-439f-b04c-baf36daf75f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainednet", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.772990596991912*^9, 3.7729905994269824`*^9}},
 CellLabel->
  "In[150]:=",ExpressionUUID->"df932ead-d961-4426-b807-6fa8fe6e4256"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.5177483558654785`", ",", "4.697541236877441`"}], "}"}]], "Output",
 CellChangeTimes->{3.7729903007019577`*^9, 3.7729906002292423`*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"f75e48d9-c381-4f16-a95e-abca966c7a81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"inverse", "[", 
  RowBox[{"{", 
   RowBox[{"1.1685711145401`", ",", "2.3557794094085693`"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7729903029228163`*^9, 3.772990310759115*^9}},
 CellLabel->
  "In[142]:=",ExpressionUUID->"8595629c-e665-4b1e-a5c2-a1e7a68098b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0000007152557373`", ",", "2.0000033378601074`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.772990311407054*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"30af112e-da51-401f-bf47-2276adbfc858"]
}, Open  ]],

Cell["\<\
Upsy. It seems that the inverse is not working on the trained net (lost \
property?)\
\>", "Text",
 CellChangeTimes->{{3.77143713062323*^9, 
  3.77143714393159*^9}},ExpressionUUID->"c0fc05a0-aa31-42bd-8803-\
0307b1ac3efa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"trainednet", ",", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"out", "=", 
  RowBox[{"trainednet", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"inverse", "[", "out", "]"}]}], "Input",
 CellChangeTimes->{3.771437108399467*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"4373a674-e022-4a54-a260-c029c08b2bf7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771437116974663*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"31aa2fd9-a862-4733-ba03-f175d2c01f91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.9873785972595215`", ",", "2.8497238159179688`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7714371169837227`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"b1e7c933-c550-41e5-8287-141bf52fa825"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.16837787628173828`"}], ",", "5.836698055267334`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7714371170190277`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"624053af-7a87-4caa-a980-6f8456cd86d4"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{
  3.77298982354722*^9},ExpressionUUID->"44d0bebb-f65a-429d-b6e8-196fca572d5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomVariate", "[", 
  RowBox[{
   RowBox[{"NormalDistribution", "[", 
    RowBox[{"0", ",", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772989827320119*^9, 3.772989852969626*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"5887103d-fb4c-41b9-8294-70f39c056018"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.8177733229771983`", ",", 
     RowBox[{"-", "0.8205407805634279`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.4742752524583121`"}], ",", "1.2723789933802614`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.6857069974207584`", ",", "0.09444534448287184`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.42152892383780044`"}], ",", "1.631613020078652`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7030232325649122`", ",", 
     RowBox[{"-", "2.068080074160352`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.9371876063736513`", ",", 
     RowBox[{"-", "0.9791735046313136`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.472744159790883`", ",", "0.709262834218122`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.8663091827355001`", ",", "0.018149752883568435`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.0639424485057265`"}], ",", "0.7075000895310818`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.9054962736070195`"}], ",", "1.5085727770449096`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.772989833083311*^9, 3.7729898533090935`*^9}},
 CellLabel->"Out[97]=",ExpressionUUID->"a97fc139-299f-41b4-a187-22be0885c74a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"trainednet", ",", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomoutput", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"0", ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randominput", "=", " ", 
   RowBox[{"inverse", "[", "randomoutput", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainednetgen", "=", 
   RowBox[{"trainednet", "[", "randominput", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "randomoutput"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "randominput"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "trainednetgen"}]}], "Input",
 CellChangeTimes->{{3.7714297278025417`*^9, 3.771429727943944*^9}, {
  3.771430066427925*^9, 3.77143008575733*^9}, {3.771430129222603*^9, 
  3.771430129532975*^9}, {3.771431064348339*^9, 3.7714310705937*^9}, {
  3.77143609822513*^9, 3.771436101229795*^9}, {3.7714363598510933`*^9, 
  3.771436375857225*^9}, {3.7714364744836683`*^9, 3.771436481765485*^9}, {
  3.771436988948409*^9, 3.771437012477241*^9}, {3.772989863720132*^9, 
  3.772989958030674*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"c0bb06c4-55c4-4618-b56d-e2b9eaae2380"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.7714371219307537`*^9, 3.772983638669194*^9, 
   3.772989492216322*^9, {3.7729897518394876`*^9, 3.7729897600257483`*^9}, {
   3.7729898647538195`*^9, 3.7729898938370075`*^9}, {3.7729899428797913`*^9, 
   3.7729899591225276`*^9}},
 CellLabel->
  "Out[120]=",ExpressionUUID->"39c9d5c6-a5df-4b3a-9c27-12b2a8672304"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
w/8B5n/9bQ==
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3.15465218507959, 3.3669764379136082`}, {-3.0005974948518683`,
    3.6407316664925156`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.7714371219307537`*^9, 3.772983638669194*^9, 
   3.772989492216322*^9, {3.7729897518394876`*^9, 3.7729897600257483`*^9}, {
   3.7729898647538195`*^9, 3.7729898938370075`*^9}, {3.7729899428797913`*^9, 
   3.772989959222805*^9}},
 CellLabel->
  "Out[124]=",ExpressionUUID->"1d8577ce-4523-4b6f-8cb2-d0b8842cad63"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwtW3lcD/kbnyg5QojchnKU1TqWlcRYN8m1ypUdV45FuZVrSC1ii0iujBwt
HY4SKhpKokNylmtIdEiOQiK/X++3/pnXTDOf4/k8z/t5P8e37Qy3cbOrCYKQ
X10Qqq7//5Ntugja/6/iiYNPEv5/VeOavOv//6s02qCw6l6wHY/ncr3Lr/D8
3dzXuFpsv1b1XOw/+mXVVWtr/wLvedfJqvq/eHIfvpOM/fLw3gWfu1XPBRe5
uOqq+wcn4brrcwjGc310veqq7A9YjfGiB1yvuupOZtlYR2V+TtX/tbLj5VX3
SkgJ1i3f23Eb49Q+G415D19PxT5m+53H/bCpGr7vEPkY63l4pqDqubo0VMP/
88tf4f1DphhXyPp0G/M/N3yPedxbYf1613nYp3rN5wP26VrjOd672ioF323R
ddxXvn2A93+9+BHr3bb/IcZZ8RLrlz+JxzCvVnEI67Ae8Qnrr3vpOd6fVZv7
mpN1BPIoeoHncs3ebzCvl89DyLH32wrI7dtJnJOa/iIH85fcvIrrnFWP8f9U
BXJXb43E+sTC/RxvQOQdjJfshvMQFo3Mxbp7mx+GnOZsE6SqawMDzjuh9keM
e6kU8lEC6udivW5jz2Pcul6n8d3fqysx7w4f6IeW0Bf7E1daPcM6rU+UYP79
FW/w3kPHt7jOMTKomk/o6Ap5CzYb0vH8zf5YXN0GYH2q0TDIXewhleF+wYe7
eP9Dp9e4OrljfGFBEfanNvwrH/LtPHYb1rH0ZBHWfdYpGePYtKa8lrW4BXnv
8c3EfotKXmCc/34Jw/8f3cB+VIc+ifj/0ac4T3Vtq/cYr58J7UPZEgI59Pj2
Ev/33QB9UQvfX4J8U7O/4L3oCzfwPGj6ZcrpwGm8v3sozk2Z6ncP8wyxxP40
+4sXIfeuBbAzdbE/1qeOavwB7ycHUF5dnCAnOfs1rmJJwH38P+b5PeznlGsy
5DGik47nDwOg//pGH8wrZrnl4/6z1TWMt6sP9Fu2qMD+xM3+O3Gf8gHnrPma
PML7/t48lwRz2kn4gKeYb1fDd7h/a4irYLQA4+o7X2EdUthh6JNkeuIK9MLO
pAD7XNYe69dqfszAONvNv2Le8DLayVUnynXjlk/4PisY+1EntYJeKYYWWVjX
mIgijOf1A/asx394Qjm8pvz8737B96GUqxT1O9YjpLzFOevOvxVinQG1eQ5l
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
IvfOzM8650Gf1c1t+LuIjfvTqI/RqQn/A1cIndQ=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.702772617340088, 2.80973744392395}, {-2.573354721069336, 
   3.0771219730377197`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.7714371219307537`*^9, 3.772983638669194*^9, 
   3.772989492216322*^9, {3.7729897518394876`*^9, 3.7729897600257483`*^9}, {
   3.7729898647538195`*^9, 3.7729898938370075`*^9}, {3.7729899428797913`*^9, 
   3.772989959323044*^9}},
 CellLabel->
  "Out[125]=",ExpressionUUID->"d9cf32dc-a7f5-4eab-a9b5-6fa1c4529bec"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
FOxAbRfE/1casY51hKBErvt96M3k/wOHcYAm
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3.1546549797058105`, 
   3.366985321044922}, {-3.0006003379821777`, 3.6407389640808105`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.7714371219307537`*^9, 3.772983638669194*^9, 
   3.772989492216322*^9, {3.7729897518394876`*^9, 3.7729897600257483`*^9}, {
   3.7729898647538195`*^9, 3.7729898938370075`*^9}, {3.7729899428797913`*^9, 
   3.7729899594232817`*^9}},
 CellLabel->
  "Out[126]=",ExpressionUUID->"7296832f-d4b3-4a5d-854f-4538dd1033f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"randomoutput", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomVariate", "[", 
     RowBox[{"NormalDistribution", "[", "]"}], "]"}], ",", "2"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"randominput", "=", " ", 
  RowBox[{
  "trainedsampler", "[", "randomoutput", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"trainednet", "[", "randominput", "]"}]}], "Input",
 CellChangeTimes->{{3.771436104664315*^9, 3.771436135946664*^9}, {
  3.7714361766716337`*^9, 3.771436243230813*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"a46355aa-901e-49cd-8888-60b52269d133"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.6102607893990936`", ",", "0.05062347980250522`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.771436136339469*^9, {3.771436178276185*^9, 3.771436243443613*^9}, {
   3.771436346417479*^9, 3.771436361692191*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"2ce8d821-4e50-466f-99d2-170fb6bd7d2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "35333.38671875`"}], ",", 
   RowBox[{"-", "0.47920942306518555`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.771436136339469*^9, {3.771436178276185*^9, 3.771436243443613*^9}, {
   3.771436346417479*^9, 3.7714363616945667`*^9}},
 CellLabel->"Out[16]=",ExpressionUUID->"933ce6fa-7722-4135-a558-54e87b12452e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.56605225`*^6", ",", "2.746656`*^6"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771436136339469*^9, {3.771436178276185*^9, 3.771436243443613*^9}, {
   3.771436346417479*^9, 3.771436361695958*^9}},
 CellLabel->"Out[17]=",ExpressionUUID->"0a69904d-1310-444c-93a3-14db5971f397"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.772989896581685*^9, 
  3.7729898979721203`*^9}},ExpressionUUID->"b8f3259c-873b-44de-af3b-\
7b156c41b026"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 988},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 212, 4, 67, "Section",ExpressionUUID->"2224c134-276d-45c7-94ea-4dd0ffa2d06b"],
Cell[795, 28, 285, 7, 34, "Text",ExpressionUUID->"5f016171-0170-4547-bb4e-08190d5bca0a"],
Cell[1083, 37, 15701, 328, 933, "Code",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],
Cell[CellGroupData[{
Cell[16809, 369, 481, 12, 28, "Input",ExpressionUUID->"1e6de7ad-254a-4c3c-b7ed-94684a4edc51"],
Cell[17293, 383, 219, 4, 32, "Output",ExpressionUUID->"28c390e9-7244-49fe-a09d-32072e4abd39"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17549, 392, 397, 9, 28, "Input",ExpressionUUID->"969c71a2-1489-4a2a-b824-02a14debfb28"],
Cell[17949, 403, 56697, 1120, 370, "Output",ExpressionUUID->"0a657c81-1754-4d08-9f3b-2b424ed9d930"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74683, 1528, 252, 5, 28, "Input",ExpressionUUID->"ba3de970-fe5b-4e10-9e53-662275b91808"],
Cell[74938, 1535, 49424, 981, 184, "Output",ExpressionUUID->"f13ba7f1-fddc-4be9-a758-fdda973e5f14"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124399, 2521, 404, 12, 28, "Input",ExpressionUUID->"5488646e-fe41-43ac-b774-50552bdd346f"],
Cell[124806, 2535, 664, 21, 62, "Output",ExpressionUUID->"ec2d9c06-dd53-4048-8226-bae14440f7b6"]
}, Open  ]],
Cell[125485, 2559, 395, 12, 28, "Input",ExpressionUUID->"fbda823d-a94d-4242-a5af-84131dbc3598"],
Cell[CellGroupData[{
Cell[125905, 2575, 899, 26, 44, "Input",ExpressionUUID->"e4113b3d-248b-4b3c-88e8-1ac9092771c6"],
Cell[126807, 2603, 247, 3, 32, "Output",ExpressionUUID->"2c117cfc-f977-441b-bce2-7121c9319c29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127091, 2611, 285, 9, 44, "Input",ExpressionUUID->"637aa149-3c29-4812-9898-d1ed67c18af7"],
Cell[127379, 2622, 171, 3, 32, "Output",ExpressionUUID->"a2409a9b-f8a0-470f-a72b-fc45c266ca98"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127587, 2630, 741, 18, 44, "Input",ExpressionUUID->"1a93ad55-46ff-40d3-9766-c3bf3a716e09"],
Cell[128331, 2650, 531, 12, 32, "Output",ExpressionUUID->"106b1944-b5d4-4b9f-bf5a-0448425776ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128899, 2667, 203, 3, 28, "Input",ExpressionUUID->"c117c3cf-5581-460c-825d-2185c918843f"],
Cell[129105, 2672, 181, 2, 32, "Output",ExpressionUUID->"50830322-53b6-4b23-a1d1-40c8f145c730"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129323, 2679, 847, 13, 28, "Input",ExpressionUUID->"dd330ed3-30c2-4003-bb6e-17da2349f726"],
Cell[130173, 2694, 783, 11, 32, "Output",ExpressionUUID->"c3bd4b0d-5efb-4fe2-8b2d-0f01e8bc829a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130993, 2710, 257, 5, 28, "Input",ExpressionUUID->"c8155642-08b5-42cb-b949-93af967b40a6"],
Cell[131253, 2717, 193, 3, 32, "Output",ExpressionUUID->"01d5f802-64ef-4fbe-a2dd-c8c3d7ede0a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131483, 2725, 259, 6, 28, "Input",ExpressionUUID->"109ae3f3-b3ad-45f9-a271-a6093f97fa87"],
Cell[131745, 2733, 519, 11, 23, "Message",ExpressionUUID->"057af982-3423-4fb4-8ce8-874268d333ed"],
Cell[132267, 2746, 517, 11, 23, "Message",ExpressionUUID->"9b9ebf56-612e-4a8a-896b-fbbcb0e66fb8"],
Cell[132787, 2759, 391, 9, 21, "Message",ExpressionUUID->"1e7f44bc-563d-4c3d-8cb1-b6584110dbff"],
Cell[133181, 2770, 159, 3, 32, "Output",ExpressionUUID->"0d3a1358-95a7-4653-9d10-c3597e489996"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133377, 2778, 1141, 18, 28, "Input",ExpressionUUID->"602ff970-bf97-4122-b240-20a2a49dc300"],
Cell[134521, 2798, 1159, 16, 32, "Output",ExpressionUUID->"d4a75e1c-d9a8-41f7-af80-d751eeac6120"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135717, 2819, 260, 5, 28, "Input",ExpressionUUID->"5ad9e61e-10d1-4537-ac3a-7366932982c1"],
Cell[135980, 2826, 237, 4, 32, "Output",ExpressionUUID->"8500b35b-d9f5-4570-9a3a-6a0fc4421478"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136254, 2835, 722, 21, 46, "Input",ExpressionUUID->"678a5b66-2f5d-4ea2-8a3f-44e6a08ed40f"],
Cell[136979, 2858, 287, 5, 32, "Output",ExpressionUUID->"b3f8ed35-36b6-4b2e-bd80-5e0dd6828a31"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137303, 2868, 362, 8, 28, "Input",ExpressionUUID->"bb873a91-5a8c-4efb-bedc-5f642af228fd"],
Cell[137668, 2878, 238, 4, 32, "Output",ExpressionUUID->"ab425a53-6137-4b5b-9264-25050773293c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137955, 2888, 162, 3, 67, "Chapter",ExpressionUUID->"3fe8ba72-de32-4b05-b8b2-e018a3b50e26"],
Cell[CellGroupData[{
Cell[138142, 2895, 904, 19, 28, "Input",ExpressionUUID->"f4f1d128-44cf-4919-b0e4-8bb4ea5347b6"],
Cell[139049, 2916, 366, 5, 32, "Output",ExpressionUUID->"1ac35751-8d4c-449c-97ea-6fe733af53c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139452, 2926, 626, 16, 28, "Input",ExpressionUUID->"4beb1873-01a1-47b3-ac18-9c7842874ee4"],
Cell[140081, 2944, 313, 5, 32, "Output",ExpressionUUID->"b35e2c0e-38cc-4a4c-a007-2466aec67130"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140431, 2954, 581, 17, 28, "Input",ExpressionUUID->"eb36c990-2ef7-42dd-a64a-fed1ee8642f4"],
Cell[141015, 2973, 264, 4, 32, "Output",ExpressionUUID->"d77669ff-b092-4929-919e-33d5063093b4"]
}, Open  ]],
Cell[141294, 2980, 164, 3, 34, "Text",ExpressionUUID->"465678c8-6857-459a-9ce0-27d9fde14f46"],
Cell[141461, 2985, 693, 17, 50, "Code",ExpressionUUID->"f819476e-d330-4fcb-a6ba-517319077e02"],
Cell[CellGroupData[{
Cell[142179, 3006, 767, 17, 44, "Input",ExpressionUUID->"2afa95b1-6ca8-417e-a0be-82a553516c50",
 InitializationCell->True],
Cell[142949, 3025, 44383, 856, 121, "Output",ExpressionUUID->"a18b17cf-ca44-49a5-95d0-de11fc5e5376"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187369, 3886, 330, 7, 28, "Input",ExpressionUUID->"3de59a66-f0e3-456a-a71e-6c457307fac7"],
Cell[187702, 3895, 177, 2, 32, "Output",ExpressionUUID->"0b63a532-2daf-4e9a-afed-c594936f5483"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187916, 3902, 569, 11, 28, "Input",ExpressionUUID->"4a79ba22-401e-4713-99ca-7015bde8fc37"],
Cell[188488, 3915, 38520, 797, 225, "Echo",ExpressionUUID->"85c128e3-7dd7-4656-b734-cfb883c0d6e7"],
Cell[227011, 4714, 52378, 1030, 370, "Output",ExpressionUUID->"782e43b8-7cc5-43b4-9f9e-da5cb44c2ee8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279426, 5749, 198, 4, 28, "Input",ExpressionUUID->"8fd1c732-00c9-4093-99a3-6b4f909569d2"],
Cell[279627, 5755, 88254, 1691, 202, "Output",ExpressionUUID->"4e05b8f7-e020-46c9-b2f3-77c6c49b1fbc"]
}, Open  ]],
Cell[367896, 7449, 165, 3, 34, "Text",ExpressionUUID->"1d34827a-9f75-40ee-b8a9-89112a67fb5e"],
Cell[CellGroupData[{
Cell[368086, 7456, 4948, 96, 249, "Code",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],
Cell[373037, 7554, 109789, 2015, 184, "Output",ExpressionUUID->"9df09716-c578-416c-8c1d-ddfeec3f87c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[482863, 9574, 188, 3, 28, "Input",ExpressionUUID->"b1a38df4-5e17-4a05-92d9-ca71b3b7044c"],
Cell[483054, 9579, 183, 3, 32, "Output",ExpressionUUID->"b30892b8-2e92-4433-815d-11edb03d4882"]
}, Open  ]],
Cell[CellGroupData[{
Cell[483274, 9587, 173, 3, 44, "Subsubsection",ExpressionUUID->"8a6ce404-e178-4d6d-9530-5fc4467849fd"],
Cell[483450, 9592, 658, 18, 28, "Input",ExpressionUUID->"50f31a85-4653-4363-8fb2-59de99da1373"],
Cell[484111, 9612, 284, 6, 28, "Input",ExpressionUUID->"427b5d98-8fa7-4a60-8853-1f24efbc5f82"],
Cell[CellGroupData[{
Cell[484420, 9622, 212, 4, 28, "Input",ExpressionUUID->"0275baca-da5b-44c8-b34d-582acff95349"],
Cell[484635, 9628, 22523, 386, 240, "Output",ExpressionUUID->"8b8543a6-116e-4426-9440-10985ea3f38d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[507195, 10019, 212, 3, 28, "Input",ExpressionUUID->"b00d21c9-f5ac-4028-bbcc-2836ba9122e6"],
Cell[507410, 10024, 100208, 1662, 240, "Output",ExpressionUUID->"73d27224-8d52-4fd6-8f29-0de3e791d7ce"]
}, Open  ]],
Cell[607633, 11689, 237, 6, 34, "Text",ExpressionUUID->"63d9e6f3-0a69-42aa-917b-bbb70c0ffbd9"],
Cell[CellGroupData[{
Cell[607895, 11699, 2492, 42, 48, "Input",ExpressionUUID->"7979b8cc-375e-4c61-b5b3-4937a8b061e9"],
Cell[610390, 11743, 22440, 461, 455, "Output",ExpressionUUID->"8da367a4-d6bd-4b21-bb4c-3190d3c75b71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[632867, 12209, 263, 5, 28, "Input",ExpressionUUID->"a09319a3-6986-450f-954d-2feeb1c8c24d"],
Cell[633133, 12216, 514, 11, 21, "Message",ExpressionUUID->"a88837d2-7114-4633-a4d0-651043130b10"],
Cell[633650, 12229, 181, 2, 32, "Output",ExpressionUUID->"451e299e-c8d7-41d3-825a-9c5106b02658"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633868, 12236, 348, 8, 28, "Input",ExpressionUUID->"a4820af0-53d6-44b7-a23f-1f2bad21c625"],
Cell[634219, 12246, 77238, 1374, 104, "Output",ExpressionUUID->"ea81b3db-03a7-4497-be68-dca30cd27ca3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[711494, 13625, 252, 6, 28, "Input",ExpressionUUID->"e8b63814-61ac-4f0f-9dd0-95770e98bdf0"],
Cell[711749, 13633, 3777, 78, 240, "Output",ExpressionUUID->"e0c696e6-0098-4ea9-b389-7de806c58496"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[715575, 13717, 152, 3, 67, "Section",ExpressionUUID->"7b035ac0-689c-4df8-acd4-8f627bfb233d"],
Cell[CellGroupData[{
Cell[715752, 13724, 320, 6, 31, "Item",ExpressionUUID->"cd1b41ab-eda9-42da-aac6-26a113e44c18"],
Cell[716075, 13732, 332, 5, 31, "Item",ExpressionUUID->"66105fd6-9462-4fd8-8e23-d81c09a0ee41"],
Cell[716410, 13739, 336, 5, 31, "Item",ExpressionUUID->"c6bc0779-c7f3-4c48-bfa3-f0cdeaaca3ef"],
Cell[716749, 13746, 354, 5, 31, "Item",ExpressionUUID->"2289084f-7c83-479a-af96-dedb881e9daa"],
Cell[717106, 13753, 474, 9, 51, "Item",ExpressionUUID->"f1456225-6cde-4d92-ab28-cf43d74d8155"],
Cell[717583, 13764, 334, 5, 31, "Item",ExpressionUUID->"61973021-92b7-48c7-bc9c-116e8dc39b31"],
Cell[717920, 13771, 531, 9, 51, "Item",ExpressionUUID->"e6e00c02-fbd2-4e45-8906-13379f34499e"],
Cell[718454, 13782, 423, 8, 31, "Item",ExpressionUUID->"42f2e06e-1af6-439c-b90c-5f07658053a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[718914, 13795, 168, 3, 44, "Subsubsection",ExpressionUUID->"583c0676-a2ca-4b8d-9b39-25a02a72f6f6"],
Cell[CellGroupData[{
Cell[719107, 13802, 206, 3, 31, "Item",ExpressionUUID->"d36d8751-1c1a-4663-b027-febafaded811"],
Cell[719316, 13807, 258, 6, 31, "Item",ExpressionUUID->"067b1bb1-60d3-4421-9567-5ce528287d14"],
Cell[719577, 13815, 244, 4, 31, "Item",ExpressionUUID->"b293b62a-5805-46e4-b778-7582c435649f"],
Cell[719824, 13821, 320, 5, 31, "Item",ExpressionUUID->"9341c339-8754-4bb2-87f0-07fa4f254039"],
Cell[720147, 13828, 326, 5, 31, "Item",ExpressionUUID->"0d3b85a2-0408-4ccd-846a-0bdcb78fef09"],
Cell[720476, 13835, 460, 9, 31, "Item",ExpressionUUID->"3a73fe75-5d24-48d1-8055-218ade225902"],
Cell[720939, 13846, 404, 6, 31, "Item",ExpressionUUID->"5a1d1919-c4ae-4f4c-8183-1c0d2fec176f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[721380, 13857, 280, 5, 28, "Input",ExpressionUUID->"24107cca-933b-4b22-a908-ef3700f170db"],
Cell[721663, 13864, 504760, 9196, 252, "Output",ExpressionUUID->"26e129fa-bd42-4c91-be96-36720b5f4b93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1226460, 23065, 389, 7, 28, "Input",ExpressionUUID->"5e28a254-006a-45d8-b4b6-1766d637525a"],
Cell[1226852, 23074, 251939, 4567, 557, "Output",ExpressionUUID->"e4e26e27-987d-4f6e-8aad-6e749cf11a28"]
}, Open  ]],
Cell[1478806, 27644, 165, 3, 34, "Text",ExpressionUUID->"8eb64868-d6bc-4616-b77b-18041b0e7f98"],
Cell[CellGroupData[{
Cell[1478996, 27651, 163, 2, 28, "Input",ExpressionUUID->"855264ec-008d-46f3-9db5-7001ed9a52ce"],
Cell[1479162, 27655, 104874, 1939, 332, "Output",ExpressionUUID->"5688d2a9-6c60-4cd0-bae0-7f7b4cae1a8a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1584073, 29599, 447, 10, 28, "Input",ExpressionUUID->"268acc48-7cd7-4976-90c5-46f4a585f5d8"],
Cell[1584523, 29611, 44909, 866, 88, "Output",ExpressionUUID->"cf63be3e-bd9b-478f-bdfb-dd17472a8001"]
}, Open  ]],
Cell[1629447, 30480, 215, 5, 34, "Text",ExpressionUUID->"3007f3f6-8942-4229-8d5f-b7cb0d2fce72"],
Cell[1629665, 30487, 210, 4, 28, "Input",ExpressionUUID->"8f525826-e871-4594-9ae9-4931f5f5c58b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1629912, 30496, 169, 3, 53, "Subsection",ExpressionUUID->"d343e1cb-0956-44e0-b9c5-e82bcb89f4e6"],
Cell[CellGroupData[{
Cell[1630106, 30503, 460, 12, 28, "Input",ExpressionUUID->"873f634b-4c05-40ef-b094-e40efc3b9f54"],
Cell[1630569, 30517, 210162, 3465, 240, "Output",ExpressionUUID->"9c11eba4-4228-4c39-bf8e-771b2a2d1a93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1840768, 33987, 704, 17, 48, "Input",ExpressionUUID->"84ceca92-b5bd-4d01-b106-275b79c20f02"],
Cell[1841475, 34006, 117954, 1954, 467, "Output",ExpressionUUID->"56e8c93a-ca16-4b93-a8d8-bf9f52d77d10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1959466, 35965, 443, 9, 48, "Input",ExpressionUUID->"0a2c37dd-9fbe-4196-9c76-5a5ce28499ca"],
Cell[1959912, 35976, 118618, 1965, 383, "Output",ExpressionUUID->"add145a4-7f8f-480f-b7e9-c0d621db7f88"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2078579, 37947, 169, 3, 53, "Subsection",ExpressionUUID->"f59e74bc-1803-4969-8af1-cec2a8961c96"],
Cell[2078751, 37952, 261, 5, 28, "Input",ExpressionUUID->"4f206157-ab9a-4196-8bce-1a3d0ae46836"],
Cell[CellGroupData[{
Cell[2079037, 37961, 283, 5, 28, "Input",ExpressionUUID->"eb49e01e-c65d-4a2f-9398-f2322f3a67f5"],
Cell[2079323, 37968, 116455, 1929, 80, "Output",ExpressionUUID->"80075db7-6504-4d67-a70f-f02b3969854b"]
}, Open  ]],
Cell[2195793, 39900, 256, 5, 28, "Input",ExpressionUUID->"e71f3f19-2c7f-4fca-9e85-afd8c6f93ce8"],
Cell[CellGroupData[{
Cell[2196074, 39909, 284, 5, 28, "Input",ExpressionUUID->"b435fb13-ec03-4063-a08a-ee6b982efdb3"],
Cell[2196361, 39916, 114874, 1902, 89, "Output",ExpressionUUID->"2678ec53-5af3-4a14-a467-692e20327769"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2311296, 41825, 276, 4, 67, "Section",ExpressionUUID->"c5435377-85e9-4273-b242-9db3377b8aec"],
Cell[2311575, 41831, 282, 6, 34, "Text",ExpressionUUID->"a467321e-7eed-40ec-a6e5-b0d1b11c7c86"],
Cell[2311860, 41839, 2606, 64, 231, "Code",ExpressionUUID->"0724b9b1-9dfb-411d-af88-cbc7c47e37bd"],
Cell[2314469, 41905, 159, 3, 34, "Text",ExpressionUUID->"58cfe75f-8ca9-4be0-9510-b968cf64ba5a"],
Cell[CellGroupData[{
Cell[2314653, 41912, 283, 5, 28, "Input",ExpressionUUID->"a2dd4f35-cd7b-443c-be64-746c7a4ebb7c"],
Cell[2314939, 41919, 60235, 1160, 88, "Output",ExpressionUUID->"89da065e-a689-440c-8245-50c2cc25c336"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2375211, 43084, 212, 4, 28, "Input",ExpressionUUID->"62951ad7-2043-4497-b3b2-1706d23f5e37"],
Cell[2375426, 43090, 59588, 1151, 88, "Output",ExpressionUUID->"33d69fba-c8cd-4662-aa4d-67673d84a76c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2435051, 44246, 314, 7, 28, "Input",ExpressionUUID->"77888c2b-0256-4727-b002-90511f63ad50"],
Cell[2435368, 44255, 310, 7, 36, "Output",ExpressionUUID->"4566b2e0-4b49-428f-93ef-1a5eaeaa4bd0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2435715, 44267, 529, 11, 67, "Input",ExpressionUUID->"07716a7a-5d62-4bc2-84ee-ee116573d77d"],
Cell[2436247, 44280, 60746, 1171, 88, "Output",ExpressionUUID->"fa404b7c-c2a4-4e28-a8da-6b017300997f"],
Cell[2496996, 45453, 280, 5, 32, "Output",ExpressionUUID->"9b0ff0e4-7411-4d4e-88d7-a206f948a823"],
Cell[2497279, 45460, 280, 5, 32, "Output",ExpressionUUID->"a84b1d36-9f02-439f-b04c-baf36daf75f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2497596, 45470, 261, 6, 28, "Input",ExpressionUUID->"df932ead-d961-4426-b807-6fa8fe6e4256"],
Cell[2497860, 45478, 259, 5, 32, "Output",ExpressionUUID->"f75e48d9-c381-4f16-a95e-abca966c7a81"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2498156, 45488, 294, 7, 28, "Input",ExpressionUUID->"8595629c-e665-4b1e-a5c2-a1e7a68098b9"],
Cell[2498453, 45497, 237, 6, 32, "Output",ExpressionUUID->"30af112e-da51-401f-bf47-2276adbfc858"]
}, Open  ]],
Cell[2498705, 45506, 232, 6, 34, "Text",ExpressionUUID->"c0fc05a0-aa31-42bd-8803-0307b1ac3efa"],
Cell[CellGroupData[{
Cell[2498962, 45516, 460, 10, 67, "Input",ExpressionUUID->"4373a674-e022-4a54-a260-c029c08b2bf7"],
Cell[2499425, 45528, 61454, 1182, 88, "Output",ExpressionUUID->"31aa2fd9-a862-4733-ba03-f175d2c01f91"],
Cell[2560882, 46712, 235, 5, 32, "Output",ExpressionUUID->"b1e7c933-c550-41e5-8287-141bf52fa825"],
Cell[2561120, 46719, 254, 6, 32, "Output",ExpressionUUID->"624053af-7a87-4caa-a980-6f8456cd86d4"]
}, Open  ]],
Cell[2561389, 46728, 115, 2, 34, "Text",ExpressionUUID->"44d0bebb-f65a-429d-b6e8-196fca572d5e"],
Cell[CellGroupData[{
Cell[2561529, 46734, 355, 8, 28, "Input",ExpressionUUID->"5887103d-fb4c-41b9-8294-70f39c056018"],
Cell[2561887, 46744, 1317, 35, 52, "Output",ExpressionUUID->"a97fc139-299f-41b4-a187-22be0885c74a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2563241, 46784, 1421, 32, 143, "Input",ExpressionUUID->"c0bb06c4-55c4-4618-b56d-e2b9eaae2380"],
Cell[2564665, 46818, 58714, 1136, 88, "Output",ExpressionUUID->"39c9d5c6-a5df-4b3a-9c27-12b2a8672304"],
Cell[2623382, 47956, 22933, 392, 246, "Output",ExpressionUUID->"1d8577ce-4523-4b6f-8cb2-d0b8842cad63"],
Cell[2646318, 48350, 14417, 252, 241, "Output",ExpressionUUID->"d9cf32dc-a7f5-4eab-a9b5-6fa1c4529bec"],
Cell[2660738, 48604, 14420, 252, 246, "Output",ExpressionUUID->"7296832f-d4b3-4a5d-854f-4538dd1033f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2675195, 48861, 597, 13, 67, "Input",ExpressionUUID->"a46355aa-901e-49cd-8888-60b52269d133"],
Cell[2675795, 48876, 333, 7, 32, "Output",ExpressionUUID->"2ce8d821-4e50-466f-99d2-170fb6bd7d2b"],
Cell[2676131, 48885, 366, 8, 32, "Output",ExpressionUUID->"933ce6fa-7722-4135-a558-54e87b12452e"],
Cell[2676500, 48895, 317, 6, 35, "Output",ExpressionUUID->"0a69904d-1310-444c-93a3-14db5971f397"]
}, Open  ]],
Cell[2676832, 48904, 154, 3, 28, "Input",ExpressionUUID->"b8f3259c-873b-44de-af3b-7b156c41b026"]
}, Open  ]]
}, Open  ]]
}
]
*)

