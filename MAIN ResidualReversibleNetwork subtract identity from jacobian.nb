(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1825165,      34272]
NotebookOptionsPosition[   1811022,      34040]
NotebookOutlinePosition[   1811394,      34056]
CellTagsIndexPosition[   1811351,      34053]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Training Net", "Section",
 CellChangeTimes->{{3.7712451283911304`*^9, 3.7712451316814165`*^9}, {
  3.771429487828245*^9, 
  3.7714294883105803`*^9}},ExpressionUUID->"2224c134-276d-45c7-94ea-\
4dd0ffa2d06b"],

Cell["\<\
Helpers to compute the Jacobian (of a function at a point) and LogDet (of a \
matrix):\
\>", "Text",
 CellChangeTimes->{{3.771430193599156*^9, 3.771430214330559*^9}, {
  3.771430871152418*^9, 
  3.771430891146223*^9}},ExpressionUUID->"5f016171-0170-4547-bb4e-\
08190d5bca0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Takes", " ", "input", " ", "of", " ", "and", " ", "outputs", " ", "a", 
    " ", "Jacobian", " ", "and", " ", "a", " ", "corresponding", " ", 
    "function"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"JacobianNet", "[", 
      RowBox[{"func_", ",", " ", 
       RowBox[{"epsilon_:", "1*^-4"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "lin", ",", " ", "net1", ",", "sharedFunc"}], 
        "}"}], ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"NetExtract", "[", 
          RowBox[{"func", ",", " ", "\"\<Input\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"net1", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", "n", "]"}], ",", " ", 
             RowBox[{"ConstantArrayLayer", "[", 
              RowBox[{"\"\<Array\>\"", " ", "\[Rule]", " ", 
               RowBox[{
                RowBox[{"N", "[", "epsilon", "]"}], "*", 
                RowBox[{"IdentityMatrix", "[", "n", "]"}]}]}], "]"}], ",", 
             " ", 
             RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}],
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
        RowBox[{"sharedFunc", " ", "=", " ", 
         RowBox[{"NetInsertSharedArrays", "[", "func", "]"}]}], ";", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"NetGraph", "[", 
         RowBox[{
          RowBox[{"<|", "\n", "\t\t", 
           RowBox[{
            RowBox[{"\"\<addEpsilon\>\"", "\[Rule]", " ", "net1"}], ",", "\n",
             "\t\t", 
            RowBox[{"\"\<MapFunction\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapOperator", "[", "sharedFunc", "]"}]}], ",", "\n", 
            "\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "sharedFunc"}], 
            ",", "\n", "\t\t", 
            RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetMapThreadOperator", "[", "\n", "\t\t\t", 
              RowBox[{
               RowBox[{"ThreadingLayer", "[", 
                RowBox[{"Subtract", ",", 
                 RowBox[{"\"\<Inputs\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
               RowBox[{"<|", 
                RowBox[{"\"\<1\>\"", "\[Rule]", "1"}], "|>"}]}], "]"}]}], ",",
             "\n", "\t\t\t", 
            RowBox[{"\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
             RowBox[{"ElementwiseLayer", "[", 
              RowBox[{
               RowBox[{"#", " ", "/", " ", "epsilon"}], " ", "&"}], "]"}]}], 
            ",", "\n", "\t\t\t", 
            RowBox[{"\"\<transpose\>\"", " ", "\[Rule]", " ", 
             RowBox[{"TransposeLayer", "[", "]"}]}]}], "\n", "\t\t", "|>"}], 
          ",", "\n", "\t\t", 
          RowBox[{"{", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{
            "\"\<addEpsilon\>\"", " ", "\[Rule]", " ", 
             "\"\<MapFunction\>\""}], ",", "\n", "\t\t\t", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<MapFunction\>\"", ",", "\"\<Function\>\""}], "}"}],
              "\[Rule]", 
             RowBox[{"\"\<subtract\>\"", " ", "\[Rule]", " ", 
              RowBox[{
              "\"\<divideByEps\>\"", " ", "\[Rule]", " ", 
               "\"\<transpose\>\""}]}]}], ",", "\n", "\t\t\t", 
            RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", 
             RowBox[{"NetPort", "[", "\"\<z\>\"", "]"}]}]}], "\n", "\t\t", 
           "}"}]}], "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "\n", 
    RowBox[{"Input", ":", "\n", "Jacobian", ":", " ", 
     RowBox[{"nxn", " ", "array", "\n", 
      RowBox[{"k", ":", " ", 
       RowBox[{
       "number", " ", "of", " ", "power", " ", "series", "\n", "Output"}], 
       ":"}]}]}], "\n", "\n", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"LogDet", "[", 
      RowBox[{"n_", ",", "  ", 
       RowBox[{"k_:", "3"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "powers", ",", " ", "parts", ",", " ", "elementwise", ",", " ", 
         "chains", ",", " ", "diagonalElements", ",", " ", "trace"}], "}"}], 
       ",", "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Extract", " ", "the", " ", "dimension", " ", "of", " ", "the", " ", 
         "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"(", "1", ")"}], " ", "Find", " ", "the", " ", "power", " ", 
         "series", " ", "expansion", " ", "of", " ", "log", " ", "of", " ", 
         "the", " ", "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Create", " ", "k", " ", "powers", " ", "of", " ", "the", " ", 
         "matrix"}], " ", "*)"}], "\n", "\t", 
       RowBox[{
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ReplicateLayer", "[", 
              RowBox[{"k", "-", "1"}], "]"}], ",", " ", 
             RowBox[{"NetFoldOperator", "[", 
              RowBox[{
               RowBox[{"DotLayer", "[", 
                RowBox[{"\"\<Inputs\>\"", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"n", ",", " ", "n"}], "}"}]}], "}"}]}], "]"}], 
               ",", " ", 
               RowBox[{"{", 
                RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<1\>\""}], 
                "}"}]}], "]"}], ",", 
             RowBox[{"PrependLayer", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", " ", "\[Rule]", " ", "2"}], ",", " ", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "\"\<1\>\""}], "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"2", ",", " ", 
                RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], "}"}], " ", 
              "\[Rule]", " ", "3"}]}], "}"}]}], "\t", "]"}]}], ";", "\n", 
        "\t", 
        RowBox[{"parts", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", "i", "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Combine", " ", "powers", " ", "of", " ", "Jacobian", " ", "with", 
          " ", "the", " ", "coefficients", " ", "of", " ", "power", " ", 
          "series", " ", "of", " ", "log"}], "*)"}], "\n", "\t", 
        RowBox[{"elementwise", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ElementwiseLayer", "[", 
            RowBox[{
             RowBox[{"#", "/", 
              RowBox[{"(", 
               RowBox[{"i", "*", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"i", "+", "1"}], ")"}]}]}], ")"}]}], " ", "&"}], 
            "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"chains", " ", "=", " ", 
         RowBox[{"NetChain", " ", "/@", " ", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"parts", ",", " ", "elementwise"}], "}"}], "]"}]}]}], ";",
         "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Sum", " ", "the", " ", "powers", " ", "and", " ", "combine", " ", 
          "with", " ", "the", " ", "corresponding", " ", "coefficients", " ", 
          "to", " ", "get", " ", "the", " ", "power", " ", "series", " ", 
          "expansion"}], " ", "*)"}], "\n", "\t", 
        RowBox[{"powers", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"chains", ",", " ", 
             RowBox[{"{", 
              RowBox[{"powers", ",", " ", 
               RowBox[{"TotalLayer", "[", "]"}]}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"k", " ", "+", " ", "1"}], " ", "\[Rule]", " ", 
              RowBox[{"Range", "[", "k", "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"Range", "[", "k", "]"}], " ", "\[Rule]", " ", 
              RowBox[{"k", "+", "2"}]}]}], "}"}]}], "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"(", "2", ")"}], " ", "Take", " ", "the", " ", "trace", " ",
           "of", " ", "the", " ", "power", " ", "series"}], "*)"}], "\n", 
        "\t", 
        RowBox[{"diagonalElements", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PartLayer", "[", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "i"}], "}"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}]}], 
        ";", "\n", "\t", 
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"NetGraph", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"diagonalElements", ",", " ", 
             RowBox[{"{", 
              RowBox[{"TotalLayer", "[", "]"}], "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Range", "[", "n", "]"}], " ", "\[Rule]", " ", 
             RowBox[{"n", "+", "1"}]}], "}"}], ",", " ", 
           RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "n"}], "}"}]}]}], "]"}]}], ";", "\n", 
        "\t", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{"powers", ",", "trace"}], "}"}], "]"}]}]}], "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{"NetGraph", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ConstantArrayLayer", "[", 
            RowBox[{"\"\<Array\>\"", " ", "\[Rule]", " ", 
             RowBox[{"IdentityMatrix", "[", "n", "]"}]}], "]"}], ",", " ", 
           "powers", ",", " ", 
           RowBox[{"DotLayer", "[", "]"}], ",", " ", 
           RowBox[{"SummationLayer", "[", "]"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}], 
           ",", " ", 
           RowBox[{"3", " ", "\[Rule]", " ", "4"}]}], "}"}]}]}], "*)"}], "\n",
       "\t", 
      RowBox[{"(*", 
       RowBox[{",", " ", 
        RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"n", ",", " ", "n"}], "}"}]}]}], "*)"}], "\n", "]"}]}], 
    ";"}]}]}]], "Code",
 CellChangeTimes->{{3.7712449742491846`*^9, 3.771245006366479*^9}, {
   3.7712451508831515`*^9, 3.7712451557841234`*^9}, {3.7712453144685216`*^9, 
   3.7712453285817113`*^9}, {3.7712457304715033`*^9, 
   3.7712457308931007`*^9}, {3.7712458259602227`*^9, 3.771245850404341*^9}, {
   3.7712459191204967`*^9, 3.7712459291404824`*^9}, {3.7712461153774204`*^9, 
   3.771246153338872*^9}, {3.7712462382690597`*^9, 3.7712462393199034`*^9}, {
   3.771246330313553*^9, 3.7712464063691993`*^9}, {3.7712464726031733`*^9, 
   3.7712464860937243`*^9}, {3.771246540718958*^9, 3.771246555169996*^9}, {
   3.7712466800239964`*^9, 3.7712466865206413`*^9}, {3.771252682820319*^9, 
   3.7712526886540747`*^9}, {3.771252902567024*^9, 3.771252978293189*^9}, {
   3.7712530384354324`*^9, 3.771253079399975*^9}, {3.771253116220532*^9, 
   3.771253123793268*^9}, {3.771253380719039*^9, 3.7712533889277287`*^9}, {
   3.7712534698197002`*^9, 3.771253554009178*^9}, 3.7712536853326907`*^9, {
   3.7712541530167217`*^9, 3.7712542144035273`*^9}, 3.771254424797951*^9, 
   3.771254598201507*^9, {3.7712546714725294`*^9, 3.7712547071027145`*^9}, 
   3.77125474946239*^9, {3.7712548842551365`*^9, 3.771254932131669*^9}, {
   3.7712558131951303`*^9, 3.7712558710050125`*^9}, {3.771255915368943*^9, 
   3.7712559808829327`*^9}, {3.771256068624137*^9, 3.771256118081049*^9}, {
   3.77125616620991*^9, 3.771256171259182*^9}, 3.7712564488714848`*^9, {
   3.7712565465180397`*^9, 3.771256552092588*^9}, {3.7712571653739414`*^9, 
   3.771257172429468*^9}, {3.7712573877926216`*^9, 3.7712574037348146`*^9}, {
   3.7713244660005426`*^9, 3.7713244910245776`*^9}, {3.7713245243790855`*^9, 
   3.771324531988117*^9}, {3.7713245908646317`*^9, 3.7713245959189453`*^9}, {
   3.7713249191158295`*^9, 3.771324946301439*^9}, 3.771325843479694*^9, {
   3.771335643376546*^9, 3.7713356487496405`*^9}, {3.7713356846427784`*^9, 
   3.7713357320037837`*^9}, {3.7713358479249325`*^9, 
   3.7713358505109787`*^9}, {3.7713359320692725`*^9, 3.771335959998743*^9}, {
   3.771336024185506*^9, 3.771336025487505*^9}, {3.771337124879886*^9, 
   3.7713371679068193`*^9}, {3.771337926772975*^9, 3.7713379470355263`*^9}, {
   3.7713380138964157`*^9, 3.7713380192122517`*^9}, {3.7713381625833273`*^9, 
   3.771338195343887*^9}, {3.771338382620248*^9, 3.7713383831857405`*^9}, {
   3.7713397317904825`*^9, 3.7713397656696844`*^9}, {3.7713397970856915`*^9, 
   3.7713397999350233`*^9}, {3.7713400425678825`*^9, 3.771340053186591*^9}, {
   3.7713401150641637`*^9, 3.7713402533748283`*^9}, {3.771340556522333*^9, 
   3.771340558227483*^9}, {3.771341022932105*^9, 3.7713410414968033`*^9}, {
   3.771341611078085*^9, 3.7713416137232957`*^9}, {3.7713417798994308`*^9, 
   3.771341837020052*^9}, {3.771341869097454*^9, 3.7713418781499043`*^9}, {
   3.771341928760856*^9, 3.771342024010883*^9}, {3.7713420669509897`*^9, 
   3.7713420734470963`*^9}, {3.771342137535701*^9, 3.771342226986998*^9}, 
   3.771342354281867*^9, {3.771342426565675*^9, 3.7713424279424815`*^9}, {
   3.771344621792909*^9, 3.771344631136168*^9}, {3.7713453428098526`*^9, 
   3.7713453451538863`*^9}, {3.7713463119730854`*^9, 
   3.7713463362949605`*^9}, {3.771348354959154*^9, 3.7713483590829926`*^9}, {
   3.771348749417597*^9, 3.7713487597311993`*^9}, {3.7713511952321477`*^9, 
   3.7713511997695894`*^9}, {3.771426249219207*^9, 3.771426252651078*^9}, 
   3.7714294811167603`*^9, {3.771429539535887*^9, 3.771429565927732*^9}, {
   3.771429713837861*^9, 3.771429715245688*^9}, {3.771429886985057*^9, 
   3.771429902583715*^9}, {3.771429956155987*^9, 3.771429962712124*^9}, {
   3.7715268930376472`*^9, 3.771526907093895*^9}, 3.77152714212579*^9, {
   3.771527318409111*^9, 3.771527319922534*^9}, {3.7715399434494057`*^9, 
   3.7715399443750134`*^9}, {3.7715404209072847`*^9, 3.771540423197483*^9}, {
   3.7715408380531435`*^9, 3.771540871034897*^9}, {3.7715415857666063`*^9, 
   3.77154158949069*^9}, {3.7715436241335382`*^9, 3.771543651514549*^9}, {
   3.77154368863717*^9, 3.7715436900327816`*^9}, 3.7715437406552467`*^9, 
   3.771543914348199*^9, {3.7715439448118973`*^9, 3.7715440275125427`*^9}, 
   3.772881423114967*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LogDet", "[", 
   RowBox[{"2", ",", "2"}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715433286197944`*^9, 3.771543329983551*^9}, {
   3.771544034300994*^9, 3.7715440597962437`*^9}, 3.772881423121975*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"1e6de7ad-254a-4c3c-b7ed-94684a4edc51"],

Cell[BoxData[
 RowBox[{"-", "9.5`"}]], "Output",
 CellChangeTimes->{{3.7715440377220387`*^9, 3.7715440602106*^9}, 
   3.772657799034724*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"28c390e9-7244-49fe-a09d-32072e4abd39"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"NetExtract", "[", 
    RowBox[{
     RowBox[{"JacobianNet", "[", "forward", "]"}], ",", "\"\<Output\>\""}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715409993351655`*^9, 3.7715410217000055`*^9}, 
   3.7728814231329412`*^9},
 CellLabel->"In[48]:=",ExpressionUUID->"969c71a2-1489-4a2a-b824-02a14debfb28"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {18., {0., 18.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 4}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox["\"CA\"", 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-3., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {{2, 2}, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-5., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, BaseStyle -> GrayLevel[0.4], 
                    ImageMargins -> 0., ImagePadding -> 0, ImageSize -> 15, 
                    PlotRange -> All, PlotRangePadding -> 0], {-4., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-2., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["4", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1b0OgjAQB/BGHRxdHd2cdXF1UpNOEB8AYiEumIDR+Ea+JZaBBLHQa/sv
ckn5KOXuR9OUVXwLkgljrJjLQxA993kevcKFvDlnxTXNxOWU3UUq8l08lZ1L
2dayzWRLxLtkuOCoRLWrOgONEF/TVF+DjM4+lWeMPmq/YTj5dAaA0dpHqQ1Y
i1Y+k7qORmOfTT0Ho5HPZS4s3yX7EPuaRQ6SD7nnGubS+sD/g6+chKFkH4Bl
k7fX58tmkL/T59vWrNFTR+nzsea6QlPrxzekjVCTE8d5j47aXPN80FAY+Fhs
dbQsfEy2OlS+f5vaUZmOh4cPG0e17SYskfnA38mq+UPn/ABbejsD
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Abs", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["5", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Abs, "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-5., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -15}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"4\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"5\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-4.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.0000000000000002`}, {-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{20, 20, 8, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {331., 101.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "4"], 
                    NeuralNetworks`NetPath["Nodes", "5"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "NetFold", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {480., {162., 170.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771541022787551*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"0a657c81-1754-4d08-9f3b-2b424ed9d930"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"2", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.771527193584897*^9, 3.771527199930225*^9}, 
   3.772881423153863*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"ba3de970-fe5b-4e10-9e53-662275b91808"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {18., {0., 18.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox["\"CA\"", 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {{2, 2}, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, BaseStyle -> GrayLevel[0.4], 
                    ImageMargins -> 0., ImagePadding -> 0, ImageSize -> 15, 
                    PlotRange -> All, PlotRangePadding -> 0], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[4], 
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["4", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -15}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"4\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}, {-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{20, 20, 8, 24, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {276., 101.}, PlotRangePadding -> 0], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "4"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "3" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[1], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "NetFold", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 1], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{1, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 2], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {366., {22.5, 30.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.771527194874174*^9, 3.771527200504779*^9}, 
   3.7715361326955276`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"f13ba7f1-fddc-4be9-a758-fdda973e5f14"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", 
      RowBox[{"-", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.7715295320714183`*^9, 3.7715295335380864`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"5488646e-fe41-43ac-b774-50552bdd346f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", 
      RowBox[{"-", "2"}]},
     {
      RowBox[{"-", "4"}], "6"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.771529534510659*^9},
 CellLabel->
  "Out[94]//MatrixForm=",ExpressionUUID->"ec2d9c06-dd53-4048-8226-\
bae14440f7b6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", "x1"}], ")"}], "2"], "+", 
  SuperscriptBox["x2", "2"], "+", 
  SuperscriptBox["x3", "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", "x4"}], ")"}], "2"]}]], "Input",
 CellChangeTimes->{{3.771529741947469*^9, 
  3.7715297962171407`*^9}},ExpressionUUID->"fbda823d-a94d-4242-a5af-\
84131dbc3598"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {"1", "0"},
       {"0", "1"}
      }], ")"}], "+", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"3", "4"},
        {
         RowBox[{"-", "4"}], "6"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.771529523049416*^9, 3.77152955955365*^9}, {
  3.771529645261484*^9, 3.771529652900774*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"e4113b3d-248b-4b3c-88e8-1ac9092771c6"],

Cell[BoxData["8.300735254367721`"], "Output",
 CellChangeTimes->{{3.7715295553554955`*^9, 3.7715295597375584`*^9}, {
  3.7715296457735476`*^9, 3.7715296532220836`*^9}},
 CellLabel->"Out[99]=",ExpressionUUID->"2c117cfc-f977-441b-bce2-7121c9319c29"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", 
  RowBox[{
   RowBox[{"IdentityMatrix", "[", "2", "]"}], "+", 
   RowBox[{"(", GridBox[{
      {"0.4", "0.2"},
      {"0.3", "0.5"}
     }], ")"}]}], "]"}]], "Input",
 CellLabel->
  "In[167]:=",ExpressionUUID->"637aa149-3c29-4812-9898-d1ed67c18af7"],

Cell[BoxData["2.0399999999999996`"], "Output",
 CellChangeTimes->{3.771531471364813*^9},
 CellLabel->
  "Out[167]=",ExpressionUUID->"a2409a9b-f8a0-470f-a72b-fc45c266ca98"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{
   RowBox[{"IdentityMatrix", "[", "2", "]"}], "+", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"-", "0.2"}], "0.1"},
       {"0.1", 
        RowBox[{"-", "0.3"}]}
      }], ")"}], "*", 
    SuperscriptBox["10", 
     RowBox[{"-", "2"}]]}]}]}]], "Input",
 CellChangeTimes->{{3.77154176990878*^9, 3.7715417755628147`*^9}, 
   3.771541876025696*^9, {3.771541967886256*^9, 3.771541999338742*^9}, {
   3.7715425209405394`*^9, 3.7715425353007336`*^9}, {3.7715425927822266`*^9, 
   3.771542596333469*^9}, {3.7715426498177004`*^9, 3.77154268718372*^9}, {
   3.7715427532525263`*^9, 3.771542754856821*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"1a93ad55-46ff-40d3-9766-c3bf3a716e09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.998`", ",", "0.001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.001`", ",", "0.997`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7715417767129498`*^9, 3.7715418779642*^9, {3.7715419702750573`*^9, 
   3.7715419997875123`*^9}, 3.771542535696248*^9, 3.771542613798957*^9, 
   3.771542688404403*^9, 3.7715427553026333`*^9, 3.772657986523081*^9, 
   3.77288085974047*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"106b1944-b5d4-4b9f-bf5a-0448425776ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "m", "]"}]], "Input",
 CellChangeTimes->{{3.7715427775023146`*^9, 3.771542788988152*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"c117c3cf-5581-460c-825d-2185c918843f"],

Cell[BoxData["0.995005`"], "Output",
 CellChangeTimes->{3.771542789271817*^9, 3.7728808667605267`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"50830322-53b6-4b23-a1d1-40c8f145c730"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  RowBox[{"Abs", "[", 
   RowBox[{"Det", "[", "m", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.77153023140029*^9, 3.7715302528152895`*^9}, {
   3.771530375255341*^9, 3.771530378180851*^9}, {3.7715304210888557`*^9, 
   3.7715304313440356`*^9}, {3.7715305372778983`*^9, 
   3.7715305385300207`*^9}, {3.771530577092393*^9, 3.7715306505241413`*^9}, {
   3.7715309052421856`*^9, 3.7715309084006557`*^9}, {3.771541552089636*^9, 
   3.7715415619127097`*^9}, {3.771541600741516*^9, 3.7715416319334087`*^9}, 
   3.7715417827356396`*^9, {3.771542023283225*^9, 3.77154202981846*^9}, {
   3.7715421306650867`*^9, 3.771542134596341*^9}, {3.7715425059650927`*^9, 
   3.7715425090782905`*^9}, {3.77154254303269*^9, 3.771542570240248*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"dd330ed3-30c2-4003-bb6e-17da2349f726"],

Cell[BoxData[
 RowBox[{"-", "0.005007516710542014`"}]], "Output",
 CellChangeTimes->{{3.771530248598607*^9, 3.771530253744954*^9}, 
   3.77153038031045*^9, {3.7715304215294247`*^9, 3.771530432475216*^9}, 
   3.7715305389215555`*^9, {3.7715305857965164`*^9, 3.7715305941224127`*^9}, 
   3.771530650904272*^9, 3.7715309121631074`*^9, 3.771541562894204*^9, {
   3.7715416070263433`*^9, 3.771541632553752*^9}, 3.7715417847220106`*^9, 
   3.771541884823737*^9, 3.7715419802848186`*^9, 3.771542030341674*^9, 
   3.7715421353790607`*^9, 3.7715424980223265`*^9, {3.771542538684457*^9, 
   3.7715425706269455`*^9}, 3.7715426966803474`*^9, 3.771542757708531*^9, 
   3.7726580976535187`*^9, 3.7728808810871696`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"c3bd4b0d-5efb-4fe2-8b2d-0f01e8bc829a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", "m", "]"}]], "Input",
 CellChangeTimes->{{3.771541935443328*^9, 3.771541948116143*^9}, {
  3.771542617402175*^9, 3.7715426199864397`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"c8155642-08b5-42cb-b949-93af967b40a6"],

Cell[BoxData["0.9986180339887502`"], "Output",
 CellChangeTimes->{3.771542620514015*^9, 3.771542781866054*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"01d5f802-64ef-4fbe-a2dd-c8c3d7ede0a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"2", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.771543797389802*^9, 3.771543800636811*^9}, 
   3.7728814231698203`*^9},
 CellLabel->
  "In[139]:=",ExpressionUUID->"109ae3f3-b3ad-45f9-a271-a6093f97fa87"],

Cell[BoxData[
 TemplateBox[{
  "PartLayer","invindata2",
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array of rank \[GreaterEqual] 1\\\\\\\"\\\"}]\
\\) (or a list of these).\"",2,139,89,23484937815697563828,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7715438011293745`*^9},
 CellLabel->
  "During evaluation of \
In[139]:=",ExpressionUUID->"057af982-3423-4fb4-8ce8-874268d333ed"],

Cell[BoxData[
 TemplateBox[{
  "PartLayer","invindata2",
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array of rank \[GreaterEqual] 1\\\\\\\"\\\"}]\
\\) (or a list of these).\"",2,139,90,23484937815697563828,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771543801188543*^9},
 CellLabel->
  "During evaluation of \
In[139]:=",ExpressionUUID->"9b9ebf56-612e-4a8a-896b-fbbcb0e66fb8"],

Cell[BoxData[
 TemplateBox[{
  "NetGraph","netinvnodes",
   "\"\\!\\(\\*RowBox[{\\\"$Failed\\\"}]\\) is not a layer, a net, or a valid \
specification for one.\"",2,139,91,23484937815697563828,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771543801249893*^9},
 CellLabel->
  "During evaluation of \
In[139]:=",ExpressionUUID->"1e7f44bc-563d-4c3d-8cb1-b6584110dbff"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.771543801313244*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"0d3a1358-95a7-4653-9d10-c3597e489996"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LogDet", "[", "2", "]"}], "[", 
  RowBox[{"m", "-", 
   RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7715302659447374`*^9, 3.771530345238954*^9}, {
   3.7715303869528055`*^9, 3.771530455602544*^9}, {3.7715306026199446`*^9, 
   3.771530606543962*^9}, {3.7715306600458407`*^9, 3.771530675615466*^9}, {
   3.771530917779987*^9, 3.771530958214696*^9}, {3.771541895648859*^9, 
   3.7715419234951696`*^9}, {3.7715419927845726`*^9, 3.771542016131011*^9}, {
   3.7715421233289804`*^9, 3.7715421539626927`*^9}, {3.7715424865046268`*^9, 
   3.771542488774886*^9}, {3.7715426404375153`*^9, 3.7715426406445055`*^9}, {
   3.7715427064872694`*^9, 3.771542712765584*^9}, {3.7715427652000093`*^9, 
   3.7715427666156416`*^9}, {3.771542804270658*^9, 3.771542808695859*^9}, {
   3.771543033087016*^9, 3.771543050179451*^9}, {3.7726582855033045`*^9, 
   3.7726582856708593`*^9}, {3.7728808976113777`*^9, 
   3.7728809145327597`*^9}, {3.772881021542714*^9, 3.7728810369233136`*^9}, 
   3.772881423180791*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"602ff970-bf97-4122-b240-20a2a49dc300"],

Cell[BoxData[
 RowBox[{"-", "0.005007516592741013`"}]], "Output",
 CellChangeTimes->{{3.7715302746324234`*^9, 3.771530345571364*^9}, {
   3.771530387506258*^9, 3.7715304563974514`*^9}, {3.7715306033850207`*^9, 
   3.7715306072381325`*^9}, {3.7715306623464565`*^9, 3.771530676775418*^9}, {
   3.7715309216719303`*^9, 3.7715309591527576`*^9}, 3.771541568803574*^9, {
   3.771541915074292*^9, 3.7715419243588862`*^9}, {3.771541976998995*^9, 
   3.7715420209487057`*^9}, {3.7715421239768777`*^9, 3.771542154825792*^9}, 
   3.7715424895074024`*^9, {3.7715425605352697`*^9, 3.7715425743855658`*^9}, {
   3.771542635080424*^9, 3.7715426417164507`*^9}, {3.771542702076743*^9, 
   3.7715427142503843`*^9}, {3.771542760728778*^9, 3.771542767401968*^9}, 
   3.7715428109046516`*^9, {3.7715430238733606`*^9, 3.77154305096803*^9}, {
   3.7715437600322247`*^9, 3.7715437780627985`*^9}, 3.7715440708008256`*^9, {
   3.7726581942233925`*^9, 3.7726582072812243`*^9}, 3.7726582863947287`*^9, {
   3.7728809040017214`*^9, 3.7728809151770077`*^9}, {3.772881024930708*^9, 
   3.7728810378525476`*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"d4a75e1c-d9a8-41f7-af80-d751eeac6120"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixLog", "[", "m", "]"}], "//", "Tr"}]], "Input",
 CellChangeTimes->{{3.771531164202422*^9, 3.7715311966330876`*^9}, 
   3.771542111853188*^9},
 CellLabel->"In[75]:=",ExpressionUUID->"5ad9e61e-10d1-4537-ac3a-7366932982c1"],

Cell[BoxData[
 RowBox[{"-", "1.9661128563728323`"}]], "Output",
 CellChangeTimes->{
  3.7715311973237295`*^9, {3.7715421065988803`*^9, 3.771542112768284*^9}},
 CellLabel->"Out[75]=",ExpressionUUID->"8500b35b-d9f5-4570-9a3a-6a0fc4421478"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], 
       RowBox[{"i", "+", "1"}]], 
      FractionBox[
       RowBox[{"MatrixPower", "[", 
        RowBox[{
         RowBox[{"m", "-", 
          RowBox[{"IdentityMatrix", "[", "2", "]"}]}], ",", "i"}], "]"}], 
       "i"]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "2"}], "}"}]}], "]"}], "]"}], "//", 
  "Tr"}]], "Input",
 CellChangeTimes->{{3.7715428903958254`*^9, 3.7715430042843237`*^9}, {
  3.7715430560362844`*^9, 3.7715430561858845`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"678a5b66-2f5d-4ea2-8a3f-44e6a08ed40f"],

Cell[BoxData[
 RowBox[{"-", "0.005007500000000004`"}]], "Output",
 CellChangeTimes->{
  3.7715429329815083`*^9, {3.7715429787686696`*^9, 3.7715430046699*^9}, 
   3.7715430565353765`*^9, 3.772658000663334*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"b3f8ed35-36b6-4b2e-bd80-5e0dd6828a31"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"createPowerNet", "[", 
    RowBox[{"2", ",", "2"}], "]"}], "[", 
   RowBox[{"m", "-", 
    RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}], "//", "Tr"}]], "Input",
 CellChangeTimes->{{3.7715433449695873`*^9, 3.7715433686747274`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"bb873a91-5a8c-4efb-bedc-5f642af228fd"],

Cell[BoxData[
 RowBox[{"-", "0.005007500061765313`"}]], "Output",
 CellChangeTimes->{{3.771543362195492*^9, 3.771543370824089*^9}, 
   3.7726580024527955`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"ab425a53-6137-4b5b-9264-25050773293c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PROBLEM TO SOLVE!", "Chapter",
 CellChangeTimes->{{3.771527062984722*^9, 
  3.771527067663816*^9}},ExpressionUUID->"3fe8ba72-de32-4b05-b8b2-\
e018a3b50e26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LogDet", "[", 
   RowBox[{"2", ",", "3"}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", 
      RowBox[{"-", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715248589978857`*^9, 3.7715248721307383`*^9}, {
   3.7715251795874557`*^9, 3.771525184495982*^9}, 3.771526728932768*^9, {
   3.771526917370605*^9, 3.771526926202158*^9}, {3.771527147634777*^9, 
   3.771527170403173*^9}, 3.7715272735031347`*^9, {3.7715273055699387`*^9, 
   3.771527306012393*^9}, {3.77152879694246*^9, 3.7715288185089836`*^9}, {
   3.7715289451500807`*^9, 3.7715289483760295`*^9}, {3.771534432016966*^9, 
   3.7715344412889423`*^9}, 3.7715344837910414`*^9, 3.7728814231867743`*^9},
 CellLabel->"In[69]:=",ExpressionUUID->"f4f1d128-44cf-4919-b0e4-8bb4ea5347b6"],

Cell[BoxData["10.499992370605469`"], "Output",
 CellChangeTimes->{
  3.771526926560123*^9, {3.771527148924992*^9, 3.771527171262877*^9}, 
   3.771527274661269*^9, 3.771527306973476*^9, {3.7715288011201167`*^9, 
   3.7715288189087615`*^9}, {3.771528946240471*^9, 3.7715289487569966`*^9}},
 CellLabel->"Out[69]=",ExpressionUUID->"1ac35751-8d4c-449c-97ea-6fe733af53c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"Log", "@", 
   RowBox[{"Abs", "@", 
    RowBox[{"Det", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", 
         RowBox[{"-", "2"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7715249343719893`*^9, 3.771524942673359*^9}, 
   3.7715251918625813`*^9, {3.7715267015337343`*^9, 3.7715267218572702`*^9}, {
   3.771527124077924*^9, 3.7715271304895697`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"4beb1873-01a1-47b3-ac18-9c7842874ee4"],

Cell[BoxData["2.302585092994046`"], "Output",
 CellChangeTimes->{
  3.7715249434062433`*^9, 3.77152519291066*^9, {3.771526711598728*^9, 
   3.771526721998951*^9}, {3.77152712701731*^9, 3.771527130857903*^9}, 
   3.771527277284959*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"b35e2c0e-38cc-4a4c-a007-2466aec67130"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MatrixLog", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", 
        RowBox[{"-", "2"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "4"}], ",", "6"}], "}"}]}], "}"}], "]"}], "//", "Tr"}], "//",
   "N"}]], "Input",
 CellChangeTimes->{{3.7715269498829813`*^9, 3.7715270105474567`*^9}, {
  3.7715289334268847`*^9, 3.771528934726767*^9}, {3.7715312218774195`*^9, 
  3.7715312241687503`*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"eb36c990-2ef7-42dd-a64a-fed1ee8642f4"],

Cell[BoxData["2.302585092994046`"], "Output",
 CellChangeTimes->{{3.77152696384823*^9, 3.77152701088067*^9}, 
   3.7715272859542437`*^9, 3.771528935560044*^9, 3.771531226081673*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"d77669ff-b092-4929-919e-33d5063093b4"]
}, Open  ]],

Cell["An example forward net", "Text",
 CellChangeTimes->{{3.771430896863076*^9, 
  3.771430901805201*^9}},ExpressionUUID->"465678c8-6857-459a-9ce0-\
27d9fde14f46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wrapInResidual", "[", "net_", "]"}], " ", ":=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"net", ",", 
      RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], "}"}], 
      "\[Rule]", "2"}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771429247283904*^9, 3.771429328300106*^9}, {
   3.771429386940288*^9, 3.771429450399485*^9}, 3.7714295812728033`*^9, {
   3.7714296941643667`*^9, 3.771429734848818*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"f819476e-d330-4fcb-a6ba-517319077e02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"forward", " ", "=", " ", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"wrapInResidual", "[", 
       RowBox[{"NetChain", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", 
          RowBox[{"ElementwiseLayer", "[", "\"\<ELU\>\"", "]"}]}], "}"}], 
        "]"}], "]"}], ",", " ", "3"}], "]"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7714362717703247`*^9, 3.771436274455502*^9}, {
   3.7714368488050213`*^9, 3.771436852522872*^9}, 3.771524541590192*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"2afa95b1-6ca8-417e-a0be-82a553516c50"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "3"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "3"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {301., {185., 193.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.771429412394435*^9, 3.771429451090416*^9}, 
   3.77142958205961*^9, {3.771429694732185*^9, 3.771429736730548*^9}, 
   3.7714299136099987`*^9, 3.771429973177631*^9, 3.771432291473444*^9, 
   3.7714351394383*^9, 3.771436274686062*^9, 3.771436327645947*^9, 
   3.771436858306513*^9, {3.771524536782494*^9, 3.771524542071521*^9}, 
   3.7715358664300423`*^9, 3.7715359874186974`*^9, 3.771536044541588*^9, 
   3.771536142335204*^9, 3.771539104817891*^9, 3.7715398026500907`*^9, 
   3.772660800878518*^9, 3.772880814562708*^9, 3.772980236710076*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"5a21c03c-fb0e-4144-8a28-a20b6c9c7ddf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"JacobianNet", "[", "forward", "]"}], ",", "\"\<Output\>\""}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771539309737015*^9, 3.7715393169217973`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3de59a66-f0e3-456a-a71e-6c457307fac7"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.7715393107560105`*^9, 3.7715393184175572`*^9}},
 CellLabel->"Out[21]=",ExpressionUUID->"0b63a532-2daf-4e9a-afed-c594936f5483"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogDet", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"NetExtract", "[", 
    RowBox[{
     RowBox[{"JacobianNet", "[", "forward", "]"}], ",", "\"\<Output\>\""}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771539108212788*^9, 3.7715391309026723`*^9}, {
   3.7715392637477984`*^9, 3.7715393251109424`*^9}, {3.771539591121971*^9, 
   3.7715396059803324`*^9}, 3.771539895370803*^9, {3.771540076977256*^9, 
   3.7715400774134436`*^9}, 3.772881423198744*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"4a79ba22-401e-4713-99ca-7015bde8fc37"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-4., 
                    2.4492935982947064`*^-16}, {-3., -0.9999999999999998}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQECB9hjRIzVlm20CT5/4+jr+fwHimomzNAo3Giz
0UOyYpcp/4FXMbs5pptttJHIOSiWc5DvQO7fKc2F3zbYtFpeXMjgzHfgd6ws
544NG2z+bABp4D0wpS5kZlbqBpu6S+q1l9R5D1jGW5l0imywYZuXd5a/m+fA
pf9zN6vXrLeZISzLZfCE+4DXQRUR0SPrbIzBgPvADSbOrlsM62wugrTXch0o
ZJnDxWOx1qZI5nihzHHOA9xs+t22+WtshAVBgPPAEvZD3PnLVttsYI0GIo4D
dpyhPQvurrIJ+LXE/9cS9gPXuF7wXBJZZfP+HQiwHSjgqe5l9llp0/fYAojY
DnDx8fGZNq+w0bvRpHujifXAYv6FfWm7ltucAQOWAzaCJvwzPi6zSXvz6Ot5
aZYDJ4MkWmP1ltn8Spxo9KGE+YCjyPynXmVLbVp0QQYwHVgcesIg4eQSGxb/
7c/aXZkOvBabkjZXfYlN1TG9uP97GA/IRTC1M01cbPNqst3LyXaMB6wkhSf1
sy62ASs/xXDAIepYu0vrIps1BupWIgkMB/SlZTIUBRbZQCMMGl8LbQAwqL5x

                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQECB9hjRIzVlm20OaGsXfx1Dv+BPbzmposPrbBv
n5Wk+1CT/4DB+jXBtw7vsrdKWaZ3eBnfgZY9M0XPTj5qf6/hW9lsYb4DBp+m
T/A4ds6+7EMQW1YB74GAmoyz62uu2LNs3n1Hby/PgZfpSlKdYrfsW04Y/Hr5
k/vAp7s24hESD+x/GmyKm63GfUDOxrx1Uupj+8Q39lzOzlwHav0Yrn/+9Mze
0FVIffJ+zgORk0NF7W++sH/v1jnvmynngYstoT4hba/sZ3xcUpC7jOPAUyWG
GuNfr+21XFPnfhfgODAhN3TJHZO39ssdT6lMLWU/cCMl9Ki/2Tt7geeX2dyu
sB3YxcFwv+ffO/sU0yZnLl22AxaRoR8n9763X6xz9dbDetYDAWGhf1Iev7c3
MQYB5gOM4HD6YH9FvfaSei0TnF8ocxyIGOF8IUEQQPA3sEYDEcMBBih//hdP
IPq/H8a/dxcE/sL5YOMK/8D50WADfsP5M8HgJ5x/7sbR1/PNf8D5nw8rpT54
+Q3OZwMb8HU/zD1s8/LO8nd/gct/7Ynd86/yM5x/Cey/T3D+XJDyKR/h/IhE
vxKNAx/g/P9g8B7OBwA1xfT/
                    "]], 
                    
                    LineBox[{{-3., -0.9999999999999998}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4, -0.5999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.7777777777777777`,
                     1.7008983321491017`*^-16}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777776, -1.088574932575424*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.499276806867128, 
                    0.9982540573304038}, {-0.25, 0}, 
                    Offset[8], {0.37633139151203165`, 
                    0.0034918853391927573`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4000000000000004`, \
-0.39999999999999986`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., -0.9999999999999998}], 
                    Offset[{10, 10}, {-3., -0.9999999999999998}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[VerticalEllipsis]\"", StripOnInput -> False, 
                    FontSize -> 10], 
                    Offset[{0, -1}, {-3., -0.9999999999999998}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ReplicateLayer", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ReplicateLayer[2, "Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox["\"F\"", 
                    Offset[{0, -1}, {-2., 1.2246467991473532`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetFoldOperator", "[", 
                    RowBox[{
                    RowBox[{"DotLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"Output\"", "\[Rule]", "\"1\""}], "}"}], ",", 
                    RowBox[{"{", "\"Output\"", "}"}], ",", 
                    RowBox[{"\"2\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetFoldOperator[
                    DotLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], {
                    "Output" -> "1"}, {"Output"}, "2" -> {2, 2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PrependLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Element\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    PrependLayer["Input" -> {2, 2, 2}, "Element" -> {2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-3., -0.9999999999999998}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-3.4, -0.5999999999999998}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 
                    5.5}, {-2.7777777777777777`, 1.7008983321491017`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-0.05103093472085416, 
                    5.499763253422961}, {-2.499276806867128, 
                    0.9982540573304038}], {0., -0.17}, Automatic, {
                    0.999956955167811, 0.00927835176742803}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-2.4000000000000004`, \
-0.39999999999999986`}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 
                    2.4492935982947064`*^-16}, {-3., -0.9999999999999998}, \
{-2., 1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{24., 26.5}, {27., 14.}}, 
                    ImageSize -> {270.5, 151.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]]],
                     "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> 
                    Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {415., {17.25, 25.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Echo",
 CellChangeTimes->{
  3.7715400835413313`*^9},ExpressionUUID->"85c128e3-7dd7-4656-b734-\
cfb883c0d6e7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 4}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox["\"CA\"", 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantArrayLayer", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    HoldForm[
                    ConstantArrayLayer[{2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {{2, 2}, {2, 2}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, BaseStyle -> GrayLevel[0.4], 
                    ImageMargins -> 0., ImagePadding -> 0, ImageSize -> 15, 
                    PlotRange -> All, PlotRangePadding -> 0], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[8]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["4", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"1\"", 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"3\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"2\"", 
                    Offset[{0, -15}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"4\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}, {-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{20, 20, 8, 24, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {276., 101.}, PlotRangePadding -> 0], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "4"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "NetFold", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Dot", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT], 
                    "Element" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[3]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {403., {133.5, 141.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.771539115731351*^9, 3.771539132020651*^9}, {
   3.7715392792613745`*^9, 3.771539325909423*^9}, {3.771539581565632*^9, 
   3.7715396069016714`*^9}, 3.7715398961807604`*^9, 3.7715400839150577`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"782e43b8-7cc5-43b4-9f9e-da5cb44c2ee8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"JacobianNet", "[", "forward", "]"}]], "Input",
 CellChangeTimes->{{3.771539812826972*^9, 
  3.7715398380571117`*^9}},ExpressionUUID->"8fd1c732-00c9-4093-99a3-\
6b4f909569d2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQESB7i65vlYVu6yeTJx6s6qc+IHzvGamy4+tMLe
xXfjtA9TxA9YrF8TfOvwLntZo+DpicHiB9r2zBQ9O/mofb5D9e6znOIHjD9N
n+Bx7Jy9TYUms+kOsQOBNRln19dcsW+6GZs3PU7swMt0JalOsVv2TikSf7/8
ET3w8a6NeITEA/taicj1vpNFD8jbmLdOSn1sb/BNvnWhouiBGj+G658/PbOf
qdQ5+eR9kQORk0NF7W++sC9f7OL/e5bIgYstoT4hba/sz1QE7TALFjnwWImh
xvjXa/tpizadq+YQOTAhN3TJHZO39lcUUied2iV84EZK6FF/s3f2HZ8zmZWz
hA/s4mC43/Pvnf0mqYOKrWLCBywiQz9O7n1vHzQt6+2H/UIHAsJC/6Q8fm+f
BgZCBxjB4fTB3qTs46/nvAj+3w0ekhW7BOH8Q2I5B8VyEPym5dGfDysh+HbJ
4uvr7wnA+V885wMRgr8CpDwVwQ+bISzLZYDgQ+ILwQcAeJy5Dw==
                    "]], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.812820711494877, 
                    0.9773027452952469}, {-0.25, 0}, 
                    Offset[8], {0.08165695756016156, 0.01745942669596423}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    0.40000000000000024`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6., 3.6739403974420594`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 3.061616997868383*^-16}], 
                    Offset[{12, 12}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-5., 3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"addEpsilon\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["addEpsilon", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-4., 1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Function\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Function", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox["\"M\"", 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MapFunction\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    RowBox[{
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["MapFunction", Bold], 
                    Style[
                    HoldForm[
                    NetMapOperator[
                    NetChain[
                    Skeleton[3]], "Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0.13, 0.8, 0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.8002666666666667, 0.44666666666666666`]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox["\"MT\"", 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"subtract\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapThreadOperator", "[", 
                    RowBox[{
                    RowBox[{"ThreadingLayer", "[", 
                    StyleBox[
                    "\"\[Ellipsis]\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], "]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"\"1\"", "\[Rule]", "1"}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\"1\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"2\"", "\[Rule]", "2"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["subtract", Bold], 
                    Style[
                    HoldForm[
                    NetMapThreadOperator[
                    ThreadingLayer[
                    Style["\[Ellipsis]", ShowStringCharacters -> False]], 
                    Association["1" -> 1], "1" -> {2, 2}, "2" -> 2]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"z\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["z", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1bEOgjAQBuBGHRxdHd2cdXF1UpNOEB8AYiEuNQGi8Y18S22JNWhUoL3r
9U8OAsPlSwN3s/QUZQPGWDlWlyi5rIsiucYT9bCX5TGX4rCTlchFsUqH6uVU
1VzViIGHuzbIxO1uCgL0EScfsk3Hytd0Idp0evk8ukw6+whsOq0+IpfJXx+h
y+Srj/jMmnnzBeQyefkCtOnwQF31eW03ZwwXdy3t0rVcxPUdoicD3uXPM3Pu
CZUf3xi5r+X7J/N1/C9JfD1mhlefxSzz5rOcseg+x/mP5gPaSyg+wH0J7gPe
5Sg+wHbgvgdl3fd6
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"divideByEps\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"10000", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["divideByEps", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[10000 #& , {4, 3}], "Input" -> {2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox["\"T\"", 
                    Offset[{0, -1}, {-1., 6.123233995736766*^-17}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-6., 3.6739403974420594`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"addEpsilon\"", 
                    Offset[{0, -15}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Function\"", 
                    Offset[{0, -15}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"MapFuncti..\"", "\"MapFunction\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MapFunction", "Tooltip"]& ], 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"subtract\"", 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"z\"", 
                    Offset[{0, -7}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"divideByE..\"", "\"divideByEps\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "divideByEps", "Tooltip"]& ], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"transpose\"", 
                    Offset[{0, -13}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}]}, 
                    StripOnInput -> False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
                    3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736762*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-1.1499858073915776`, 
                    5.378432173300872}, {-4.812820711494877, 
                    0.9773027452952469}], {0., -0.17}, Automatic, {
                    0.9778967587819768, 0.20908832861665047`}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.40000000000000024`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, StripOnInput -> False, 
                    FontSize -> 8, FontWeight -> "Thin", FontColor -> 
                    GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}, {-4., 1.0000000000000002`}, {-4.,
                     2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28.999999999999982`, 18.}}, 
                    ImageSize -> {386., 102.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "addEpsilon"], 
                    NeuralNetworks`NetPath["Nodes", "Function"], 
                    NeuralNetworks`NetPath["Nodes", "MapFunction"], 
                    NeuralNetworks`NetPath["Nodes", "subtract"], 
                    NeuralNetworks`NetPath["Outputs", "z"], 
                    NeuralNetworks`NetPath["Nodes", "divideByEps"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> N\
euralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 10000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"z\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {381., {27.75, 35.75}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7715397807631025`*^9, 3.7715398155022135`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"4e05b8f7-e020-46c9-b2f3-77c6c49b1fbc"]
}, Open  ]],

Cell["The loss function is:", "Text",
 CellChangeTimes->{{3.7714309253998327`*^9, 
  3.771430929786023*^9}},ExpressionUUID->"1d34827a-9f75-40ee-b8a9-\
89112a67fb5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingnet", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<Jacobian\>\"", " ", "\[Rule]", " ", 
       RowBox[{"JacobianNet", "[", "forward", "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<LogDet\>\"", " ", "\[Rule]", " ", 
       RowBox[{"LogDet", "[", 
        RowBox[{"Length", "[", 
         RowBox[{"NetExtract", "[", 
          RowBox[{
           RowBox[{"JacobianNet", "[", "forward", "]"}], ",", 
           "\"\<Output\>\""}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"TODO", ":", " ", 
        RowBox[{"REPLACE", " ", "ME", " ", "BY", " ", "THE", " ", "STUFF"}]}],
        " ", "*)"}], "\n", "\t", 
      RowBox[{"\"\<norm\>\"", " ", "\[Rule]", " ", 
       RowBox[{"DotLayer", "[", "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<total\>\"", " ", "\[Rule]", " ", 
       RowBox[{"TotalLayer", "[", "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<minus\>\"", " ", "\[Rule]", "  ", 
       RowBox[{"ElementwiseLayer", "[", 
        RowBox[{
         RowBox[{"-", "#"}], "&"}], "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<MinusIdentity\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ConstantPlusLayer", "[", 
        RowBox[{"\"\<Biases\>\"", " ", "\[Rule]", " ", 
         RowBox[{"-", 
          RowBox[{"IdentityMatrix", "[", 
           RowBox[{"Length", "[", 
            RowBox[{"NetExtract", "[", 
             RowBox[{
              RowBox[{"JacobianNet", "[", "forward", "]"}], ",", 
              "\"\<Output\>\""}], "]"}], "]"}], "]"}]}]}], "]"}]}]}], "\n", 
     "|>"}], ",", "\n", "\t", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Output\>\""}], "}"}], 
        "]"}], " ", "\[Rule]", 
       RowBox[{"\"\<MinusIdentity\>\"", " ", "\[Rule]", " ", 
        RowBox[{"\"\<LogDet\>\"", " ", "\[Rule]", " ", "\"\<minus\>\""}]}]}], 
      ",", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], "]"}], 
         ",", " ", 
         RowBox[{"NetPort", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<z\>\""}], "}"}], 
          "]"}]}], "}"}], " ", "\[Rule]", " ", "\"\<norm\>\""}], ",", "\n", 
      "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<minus\>\"", ",", " ", "\"\<norm\>\""}], "}"}], " ", 
       "\[Rule]", " ", 
       RowBox[{"\"\<total\>\"", " ", "\[Rule]", " ", 
        RowBox[{"NetPort", "[", "\"\<Loss\>\"", "]"}]}]}]}], "}"}]}], "\n", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.7712461733785934`*^9, 3.7712462797517805`*^9}, {
   3.7712467282968006`*^9, 3.771246971234892*^9}, {3.771247012593236*^9, 
   3.771247062931487*^9}, {3.7713355124382553`*^9, 3.771335514947486*^9}, {
   3.7713424860170774`*^9, 3.771342490632975*^9}, 3.771342643255226*^9, {
   3.771342720801722*^9, 3.7713427421698256`*^9}, {3.771342801133519*^9, 
   3.771342816975562*^9}, {3.7713443832768326`*^9, 3.7713443923025727`*^9}, {
   3.771346168774109*^9, 3.7713462368048964`*^9}, 3.7713463000914755`*^9, {
   3.7713482181981363`*^9, 3.771348242679274*^9}, {3.7713482945794554`*^9, 
   3.7713482997207875`*^9}, 3.7714292407229433`*^9, {3.771429902587538*^9, 
   3.7714299025891314`*^9}, {3.771429983803138*^9, 3.771429991742524*^9}, {
   3.7714351480099382`*^9, 3.771435149900608*^9}, {3.771436277291979*^9, 
   3.771436277422518*^9}, {3.7715245505834303`*^9, 3.771524557743154*^9}, {
   3.771524602084203*^9, 3.771524638035481*^9}, {3.7715246845227213`*^9, 
   3.771524695107903*^9}, {3.7715248127492228`*^9, 3.771524816425106*^9}, {
   3.7715359964987326`*^9, 3.7715360027931323`*^9}, {3.771536212303712*^9, 
   3.771536219846096*^9}, {3.771536307109409*^9, 3.771536319602399*^9}, 
   3.7715402363173018`*^9, {3.7726603773808994`*^9, 3.7726604141110134`*^9}, {
   3.7726605470423756`*^9, 3.7726605477045527`*^9}, {3.772660653609005*^9, 
   3.77266068264157*^9}, {3.77266073243651*^9, 3.772660776353501*^9}, {
   3.7726608525124454`*^9, 3.772660938848506*^9}, {3.7726610100581665`*^9, 
   3.772661079510709*^9}, {3.7726612610250435`*^9, 3.772661261544655*^9}, {
   3.7726613028474483`*^9, 3.7726613115890985`*^9}, {3.7726613570646467`*^9, 
   3.772661358987563*^9}, {3.7726614035043325`*^9, 3.7726614261171007`*^9}, 
   3.7726616848702292`*^9, {3.7728812875393124`*^9, 3.772881472843192*^9}, {
   3.7729802699003105`*^9, 3.7729802800262637`*^9}, {3.7729803334982634`*^9, 
   3.7729803350411654`*^9}, {3.7729803758679733`*^9, 3.772980415652627*^9}, {
   3.7729805358123164`*^9, 3.772980563818876*^9}, {3.772981168706562*^9, 
   3.772981174352434*^9}, {3.7729812350551567`*^9, 3.772981258276066*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEiBziLb+5fz7/N5snEqTurzgkfyOM1N118aMV+
Z9+N0z5MET7AsX5N8K3Du/bLGgVPTwwWPlCwZ6bo2clH9+c7VO8+yyl8QObT
9Akex87tt67QZDbdIXTAvSbj7PqaK/ubbsbmTY8TOnA/XUmqU+zWfqcUib9f
/ggeeHvXRjxC4sH+GonI9b6TBQ9I2Zi3Tkp9vN/gm3zrQkXBA5V+DNc/f3q2
f4ZS5+ST9wUOhE4OFbW/+WJ/xWIX/9+zBA6cawn1CWl7tf9MRdAOs2CBAw+U
GGqMf73eP3XRpnPVHAIHenJDl9wxebt/heMplaml/AeupIQe9Td7t1/g+WU2
tyt8B7ZzMNzv+fduf4ppkzOXLt8Bk8jQj5N73+9fonP11sN63gPeYaF/Uh6/
328MBtwH/v0Hgff7L6rXXlKv5TrwB8ovkjleKHOcEy4vLAgCnAf+Q/kbWKOB
iAMuH/Brif+vJexw/vt3IMAG5/c9tgAiBF/vRpPujSZWOP8MGLDA+WlvHn09
L80Cd8+vxIlGH0qY4fItuiADmODuYfHf/qzdFcGvOqYX938PI1z9q8l2Lyfb
Ifhg5acY4Pw1BupWIgkMcP3QBATnAwBZVmlq
                    "]], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.499276806867127, \
-0.9982540573304033}, {-0.25, 0}, 
                    Offset[8], {
                    0.37633139151203343`, -0.0034918853391926463`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.5999999999999999}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.9999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.4000000000000001, -1.}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6., 3.6739403974420594`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 3.061616997868383*^-16}], 
                    Offset[{12, 12}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-5., 3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox["\"CP\"", 
                    Offset[{0, -1}, {-4., 2.4492935982947064`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MinusIdentity\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConstantPlusLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["MinusIdentity", Bold], 
                    Style[
                    HoldForm[
                    ConstantPlusLayer[{2, 2}, "Input" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., -0.9999999999999999}], 
                    Offset[{10, 10}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, BaseStyle -> 
                    GrayLevel[0.4], ImageMargins -> 0., ImagePadding -> 0, 
                    ImageSize -> 16, PlotRange -> All, PlotRangePadding -> 
                    1], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LogDet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["LogDet", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/G9tvjvz////IPWUAh8qmIECQO6D4Z6eNx0UGkd194FA
Y+Ot+cjuPHb4vwuZRtHEfSAAjF+l3Jytd2FuLCs9sp+MOKeZ+2Bg+ZL/CZkZ
a9/D3Nnb/aaTBO00dx8MgNIicpzPmvW/gAhtdHMfDIDiGebGkqIDJ4BxroBH
Od3dBwLocY6nPBoQ98HAxP7PDchxvmjR/zQ0JQPqPhiorjq3HtmdO7b+D4BK
DQr3gQC2fK6mFhQ+0O5CB6A4hrnRw73sPygNUNkKH2pgH++648ZGwWA3grCX
e30NFcylKrCyyk3JzdlyHxaelRUnt1Gp3UEtAPYzetqkQZyTC1DihMw6iJYA
I82A6hvkOqiwYM95AnUQLQHONE1CHURLQDDPoddBdI5zossEPHUQLQFJZRa2
OojGcU5WmQqKY+SwpGF5RFGZX1dzaRWyO6nlKCRAcZ308sl/A1gdRA0HoQGq
1ZmgtAmiAQJrTNs=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"total\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TotalLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["total", Bold], 
                    Style[
                    HoldForm[
                    TotalLayer["Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-6., 3.6739403974420594`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"Jacobian\"", 
                    Offset[{0, -15}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"MinusIden..\"", "\"MinusIdentity\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MinusIdentity", "Tooltip"]& ], 
                    Offset[{0, -13}, {-4., 2.4492935982947064`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"norm\"", 
                    Offset[{0, -13}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"LogDet\"", 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"minus\"", 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"total\"", 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
                    3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736762*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0.0510309347208523, 
                    5.4997632534229615`}, {-3.499276806867127, \
-0.9982540573304033}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.009278351767427691}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}, {-2., -0.9999999999999999}, \
{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 20, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {386., 101.00000000000003`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "MinusIdentity"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "LogDet"], 
                    NeuralNetworks`NetPath["Nodes", "minus"], 
                    NeuralNetworks`NetPath["Nodes", "total"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, "$ArrayDimensions" -> 
                    {2, 2}], "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 10000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], 
                    "MinusIdentity" -> 
                    Association[
                    "Type" -> "ConstantPlus", "Arrays" -> 
                    Association[
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "LogDet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]]],
                     "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Dot", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1, 1}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{2, 
                    2}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "norm" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "total" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {287., {17.25, 25.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771534692596359*^9, {3.771535869434557*^9, 3.7715358902497005`*^9}, 
   3.7715360470324335`*^9, {3.771536145421508*^9, 3.7715361490463257`*^9}, {
   3.7715362162372313`*^9, 3.771536220989065*^9}, 3.7715363207374463`*^9, {
   3.7715404116517725`*^9, 3.771540428701798*^9}, {3.7726607855466695`*^9, 
   3.7726608057668734`*^9}, 3.7726608558925085`*^9, 3.772660925920901*^9, {
   3.7726610326211095`*^9, 3.7726610440359735`*^9}, {3.7726613060454454`*^9, 
   3.7726613125402536`*^9}, 3.7726613606410203`*^9, {3.7726615607837176`*^9, 
   3.772661565598684*^9}, 3.772880815415902*^9, 3.77288133917912*^9, 
   3.7728813777611847`*^9, {3.77288146844729*^9, 3.7728814749468365`*^9}, 
   3.772980287810445*^9, {3.7729804172174077`*^9, 3.7729804454250126`*^9}, {
   3.77298056058552*^9, 3.772980564756366*^9}, {3.7729811710123615`*^9, 
   3.772981175081481*^9}, 3.7729812593940463`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"0823fb3b-8c11-453e-b062-c80179a4b4aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["trainingnet"], "Input",
 CellChangeTimes->{{3.771534624370186*^9, 3.7715346365342045`*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"b1a38df4-5e17-4a05-92d9-ca71b3b7044c"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.771534637048904*^9, 3.7715346703883905`*^9},
 CellLabel->
  "Out[187]=",ExpressionUUID->"b30892b8-2e92-4433-815d-11edb03d4882"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data from Gaussian", "Subsubsection",
 CellChangeTimes->{{3.7715331964581585`*^9, 
  3.7715332078559933`*^9}},ExpressionUUID->"8a6ce404-e178-4d6d-9530-\
5fc4467849fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"MultinormalDistribution", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "]"}], ",", "1000"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7715196559696407`*^9, 3.771519734738217*^9}, {
  3.7715330985638695`*^9, 3.771533123898946*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"50f31a85-4653-4363-8fb2-59de99da1373"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normdata", "=", 
   RowBox[{"data", "/", 
    RowBox[{"Norm", "[", "data", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7715331329979005`*^9, 3.771533144257516*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"427b5d98-8fa7-4a60-8853-1f24efbc5f82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "@", "data"}]], "Input",
 CellChangeTimes->{{3.7715196611376104`*^9, 3.7715196649538946`*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"0275baca-da5b-44c8-b34d-582acff95349"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVl3c0lu8fx23JyAiRSFaUb1oi4/OEUooSKSMNVJRUSBQpoyEZiZItIdlk
+9gre2+P8djjeezt5/fXfc517nPuc1/X9Xm/Xy/hu1ZXzWioqKhGaamo/v/U
GeWlq5ZowLaLrsX3u6kK5mWWgU6WBG9nNQc7XAfhDvUFgSjjLBhu4L7YLNCM
B+nM3RvohlD/1pHC57FEkNH+0Ke1Rka34pcZ3mOzUEnPKXjdfBEDjoWnLJ0f
R5ZkGvVMyVb8/HPEvWFoBicfco5MnOiCay3fTjo4dGPOWCH7FH8XdnsL57x1
6sPUpTDPduyEVnKKY55EJww+uvfSJ3EGqVUmGb0bSCDaUmUmwp2CzzZOzXRm
rMOCgg7PUlknuutxvU2voSa43fO525XUjWO/qHhjOzohY2Ha4uboMhj++vf1
WzUt4XDTjyXFD1ugoRDQwKhbClIWhPyso1Ng+Grx1ovTi2DtFDFzwzgPt35V
t/vmLuA765p9pvwT+Ct9Ln6v7xx+/Rgt/tetHcRZ312sz5mDYlcFXVmWLmht
26ALsSECcUKp3bK8BnR+nFfxtCnCPN6ZyWjhFZQnzFYI18/hvtyogNaVATzS
KDjK0lWE5V3/ft16NIAM/9FLxFfOonZtOyHvxi+k0no6tmlZj2pakl+kV4fw
D99qjDT9Mn5mFb0oTN8PFvdPM4jkkHBBdNJvbXc/BG0dHBxjKgb6/crXCp+v
4YyNpteZjA0MN359zYV6E6LZL+hny3dDwOfPobOtekC9X+9L0nkqAv3F5Zbd
fnWowDrfd958HkobXOw/dSzijwiJvxK2U9gbEJySe5kECffT+qmERtAyVvy0
Cs8PZDV7snKErRtEFV5FvbcdwHMFZhcOfu8A6h7em5g8ALoeRkYTOv0wodU2
2/1gAssuiveeVx3CN0bWty/srcPr5gTOo7s7wI7v2u1azx4sO6RkkJhOAXHr
+ORomTXkK9nNkWudC1rdBlbmOiPApzc+unV/ACjiX+ku3KYqiEnayXObnQi7
aSW7P7xdwfOveA99o+tHmy2qGqEbVVD6OEqYfH4AagTns3YLU/DDsZkdz1Qo
qMGlxcBxmooQ38Xv8+hQK2yGOx/UvzOIx6gfJeTML0JD6CNvm+ZhzF+ycRlq
i8XEP56j345sYO7XonMuLP2gFOHN4HraBhbEuda9zg2jY93Gub1pCeByPPZn
+doqXmK1kmZdSkL1RsfAffpEKDkmelT+bitaDA2UDnGkYsEzptCrNXUoOD59
LOfaPJ7xnn5ka0uCaxIfXaL/tEK78hq9URcF5Wm1L/4K6oajUmrfRGOawM3w
vmdayBQI33EPpBakQGhm9b2Oo4voYGyrQ2AcxhXayVq7tAFwJnTSDutRFdRs
Hbe+dXQMhb5/+nT4xQI6qn4mB91vR+EM/0HRF8t4b+9EYBJ/M+gtXCfeP0FF
6JGS8AoPGECDA6cj9BgaoTTq8CM2n0EQHyV//kVDwTo5g5N/XlAgOcrx2uXw
VXQ3fMmZcHAeWP8GerhxDuMOadmNHdW1UJNtUuZxZwqjCsY1+YMGoW3Hzu/9
Fnm44pveUfS6Dfx2n/H2jRuCH/tNvYwd6AiPDg5ZCBhEoIQU4dTFB12Yv1Ie
MzTUByF7h+i7bY/CRnxm9po4GSlRZgd88kgoptRq0FjfCjUNRl6vzaZRzHVd
q0OmAmlm9kvojlHwdJWr9APNKXQT/G04dGMRF94FTlSObECXpzA5/t0IvFmL
iTMPnQODEWd57dFxMMk7Ro7zq4OjQc6DLCmbsCropl0xuI4nWwWDc0RT0dvm
ZLPyZBfWyRQq3JhYRlNFOpMvJSPgcEctf/kxCeT7C/mZ6RqBPXw/MfvUCFTy
6hfEi1KAqCrxTc6LruDoF5JMvyoNoUH/qeb4eAemlBfsml4hQeddW3bq62uw
04PUaclARbgy4fjXqLYHPsnX0Kgm/EXrOyK3lbz/oonZiIfx9r21ztF9Lu9U
iM80c3MJDgOo38l1/PvVQTjFqljBF5+LzC187lscM/itz12+O3kdGC5vPF/7
NgeSPbmz5XfJMGeWFnThVQmUss6+wuIRfCNSvXlQYgoJrTQmjUcGQcLsTsrj
Wy2QZcRvuXUyCAwlF2uN3OZxhS5ZzClqEuNphZ3FHxVjasV4ebXcNFhpjzz+
YLSAnwOGj3JudEH2hEyT9OFReLu3f+FY3DBYjHoNulyYQjJorZ34MQ+vhsKf
OR+vQHHWYX+SfxPS2jTeMX4zgUpmFPlzQyOQukPr2GxnF9xQVQ5r9x2CJw/V
T5lyL6A8u3JoUGIzLu5ZVNuKHoJsI5+69qPrkD/FwyE3EARmAh+flTcToUXD
qGpefg2XyMxV3ccaYLyA5hT52xCufqKi+ng2DdmWO2bsGKNwj/qPwz8yGlD0
HLvIHtVhKDTvZma8RcSX+482lOS0Y/4rR9UzliRQK+JiOUhViU0anuv03T1Q
wUWvmPCiDUKt3BiShUlgFOXpnziUDuJiZu2T+4h4J/dGTCL/MHgEeNz7MFeG
f2PdAh6y9WN2grrE/VcUfJybUUwn2g/F32IP3aXuwdWbuxeIZR1oHVB8gY2x
H/ZyVBL/e7QKu0wPvhlw7Ma13Lb3/0Q2gKde7nL+dCnajUWXDp1fQK68QffN
wTY4rJsW0lW5hLa/vbzaZlfAZ5ELuWbmUClY0z9XrBdDxe8TAlsW8eDdM74e
M8EYFXFEdkx+FVZHwz5u8Iziv1Gxfr0XZKxS0rgnYNmEAzrRcSkpZMhr9ZI5
uXcAaG5uGjFbkdH9lsZmJG0j2n6z30WXREMY6m189kZ9DPKce1KVFadgItWE
WP1zCB5fFA66o9WKdX2fdj060wrhR+LPNr6hoM73w+92uTdg6/PXjubqjXBD
ZPd3ZmcyFn00XmlNa4CRvK5ne7yn4X4WZj7racHqZb3nK+EU+CPiu8nJO4dm
Lhkf/4r0IuVpzNMy7SUE590fbfRakdajPv+dwQjOcfIf+ivWAyXZlv11ohPY
KnRx5lbsMoT8thZIqZ4FUofTi6prgVDSObt58mYCiOQyG94IJaEXHbXXJPMI
ZL0Q2SVYT4JzBMWiidYJuGN6uVVQeQCo4j6fynnQDsw3Tv1K1t8CzcVl9efj
RIh7WV80HEBXUPjqyMpPizm0cE3vKNMi4hvLCKsjxDyctox5fPY7VQHPhYa9
UythuBU0FlxFHoQiGj3jnoIh8H1t+uHxk3a0PfaEvrKnC2YCFFsmd3SAeTa1
I6c/TcEHdndO1n+ryFmx+1JEZDMmJm9JNXzogHyDokbeB2toAaF6tMO94Bom
udI2OQ9MBq8vuJCmgLCXerVSOB8ErmKIyPUFvDO4lSnE8wvI2knCHTFzIFrP
5bbXoxQvqfTRPdTrgbOLQqJJU9UQ+DjRvCw4FL4tB3wsuTMPghQ+F2J7L1wK
KGl6mD0CmQa+TGFuExiBGb0Mt75D6JDt4Pe4bvD9os9e/y8fsueCRyi/RzHw
e/MJz9MbOHOnbN+HPa349TeL8FfqJZA8HnKdUXKbIyI216tJM+hEO6hmmLqd
E2IF6Yz0vRDK/VDSXWkW2JWdk4jKJJSXf5nmWDSKNZYb1/eeTwJfTTjz4jx1
AYfO8cvepCp8mWrXalIfDeWJ74v+2g2BYeR1y4+OtAS1yodvuUI3UHAwYf50
/gSMfWS17hwYQgOPpHWNuHq4syLnEVY3gPSmgps0e+dgR4bTcpTE9j4fN126
JVIBcw9k2kt31oFg7Jx/6mcKHqj2UCpp7sVdP6QzznmOIfUhXQfOd/1A4bnA
WhxKW+DTqW8jGfoTM55qnQj6ugjsOnHHLcpWcLSKhjVDfQMPSTwjmR1cwLdq
cZl//UuhpcSKL2+iCA+cHHx+TWQYFRlUjosND8HJy5OEVfNutKZ1q/tYMQ3p
uu2Uw3MTkJM/qHYxKBd4e6+h6WwLvP/4aeWsTAHc1BMmOrGSUe2KmJm0IgUC
So6NJzEuQ421dMk9hzL8yvB3SjCxHqd2SIqzj41Dsf5hD8uUZeDN6buzp60R
z41+K9uIG4fTHzUT5QZ60G92aTIkqh0MJgR0P+aY4m7X0ftMQ/PAzfUsLEuP
BCoNGS6aYc149AKbhh8LCX6K/mL5llmFyi1QovC7DA6OX71H86ANtKNFab0v
LeCVoS4x7Y4JzP45euDh0BoSlLaYDl1rhc8HuC5at/QD2NmevZXRAEHFZklf
6tcxYzDO9/HSJvZdkoOSrEyU/Dd/lCN6AUPOGJ5/aDkHsk+Y/U9uUHDH+KP9
iYoLkGa2FTZq1w/GOkfCm2604TkR2e+3/6xg/WMa0tXYZqg8BtNyxbQF2l8z
m6mYFtCOVcHAdo0EO/o+/Bcm1YOmzK3pjbpdqG/gRDNyqA82JffeH5FOA7+l
ae7Vj0v4cpfjmxvstISKBqHc9/NbmCXx+bSc6BRcd35End03AAYFefn3O8fR
I02m2E6lG5h0pKZPh5VCmFTESf1fy5hHv1NNn3EWh62Tx92Ctvc7aEqvvTUB
FhcDYxejWjBkXsz3ukIIhn2UrOV7PAtXtScz64VW8DnHM2cm1UFUaHh44U5d
P7yrG0/UC/iJb+7xcZfcnUcaz2lxtqV5uC5uV1MW3o6V8g4OEVONOKa6vDGw
SoZJl1bysEUqpp8pi3u5nW+nz/95ZbxnCDzIHwxe5HUhaWRNmJhKgetjAsfa
XJvQb/SURMWlLPQRnLZkWiVCpQHHNPvXfhAjvSw4p9SASsNc6/txFe/lMfvJ
lFaD4+/jpXk+E4CeHT2l/u2we5/GyxvHRjFWQWNLjdyERfGv/rUZloPRzZ6U
T59nMfWa1ozkoxHg/qfUOmXShtREhoCDh9dht6ey488fgygrdq8yoXMLVlRu
yLZ/G8Yc3TyWtNBaXBJu1pk170HHlQCJIq1l9C/pt6R3XwTToitZH3eGYxVt
otqa4hKe0mxJliSuYp6S62XlU5s4yeU7uDwxCi0XEpuVaorQoHiqKsdgHKzZ
DXp4RSfhyJRjSK1eC2q4/Lg6M76dx7kpFtYGHfhWz3RPGeMWTP2yGW8RrsdT
A9p2y45DuHODe6zkWyM+oudYFTtLBrJY6OgnsRU41fcal7oH4VMGnUGGagpM
vejXSFUdh00ZObvUp6Nw/Lhd7fvjjSjUcfA0FesQTkzVGJ13q0HqBwcVGGxG
Ma88di5vRzVGSsVY34iiAF+XyQPai0QI2ZqKhdVFyGvjlVtf3UR90tzcwb3D
qOQf9u2NwCRStniOS8i1oDzZi8fzJBlvZf/WNqJugA69O5c2EncQpPk5hg1V
0rH6r9Pf1e3c7fyXdSz75wQ+Oyv4tyiYljBCDdIFCm0QePfZmrPLMEDAvJ9H
azXs12tm+RxMRKGZKMetfU2gneNtU7BvCrUahrQuxYxCwn/GavejqAuEvFgs
NS5X4spegQZe7UpMbE2odawdBoHPxy9qE0cgkSrqZ8x4MqzqG22YniHjeCi3
+6FSMjhsrfe0uFMXlEUS8op5yiDy7c/O8rkuMDpsOftwvz8+Vtlp93ytFX7U
WyUzOw6DyNuB7FX9eGD/K+NT87gbnpxS0nwg1A8CRjdrglqagIXX1X5XRTPM
vL/u6yA7CO76NZV9d+cg2mGfrDJpCD3PaP0oV9+Av4fCqp19Z8HZ4ZKDlesc
KMrWpLiLRODuROaxn1OVaON5tAUb2vDKqtVE9+thtFIcjqrj2vZptfqyKudu
+MwTYdL4sQwCy6yvfg+ZRoueK7I3tCjIYTmc+2nPACa/PxKSydaBu1pc2/od
qrHjFB2Hc+0cTh0mFWZZkDHeteKHUsA4yIQFzURFk1Dol85JXY1lwKgqIcv8
EEgTxeM1M0v4yE9MgfVXM86duWVJN16NH9f9VGptxuHXIT6Oz9s+PtTFZ1uq
2Q95N9QiMz0iQTCLeoI2k5qQYHT5443gQVgh3d4xuDIM5y2dNqhFFnE1+rAV
dm8Cb2tj+MVQZ3Ba3pEO3PZwk3f4YFFjC/wwHI3c924Ncjk+DJ4UmoISUbqE
7x718P5R5pX+zDa8qSpWcrx0HJRuJvll/dtC2dqV7tyrq4gK368cSCsFL0NJ
p12GTTjku0uMa5OC8Yk+raS8AXy7/+idPpd50HSyLFpapieMmt4LMB9oxsjq
yEGUXgCe9k5VK+E6bOLjUpXds47TxvZFrm0TwB9x+j+Zj8M4nqUuvN+TirCk
L3yB1ikf7skw2B5gW4XS6ilfeuNmjFlUKDkr3g81Pofy6Zv+wTcpxUKdqQ7M
fXtmbaJvECXUS6QCR+oxl9Hz2OV/46g1zyz7VIcMIgKJnkYyc1CuHphgeWIa
ZLjETfoJXdjloeKvNkqGCzKSXzxdR/FJqGg8bWIpDBgupq/Fj+O5nY8uP/jV
jgzOVi12rVVgN/5SynowGA/t8bWmDV/CiTR/+XXBFTD89urfrkft2CS+69Uw
iYxZPpFvlCuaUMrmfmXUnxAMdYukcchIxtGNjjqLZCJKTwf/TmSZwSPtp6Vd
aVYhrt7sbSZlFnzz3f2qRKa2+YmFLUdrEuzNTlyPv9OHM/9lOK8F1WPI/Sfd
2YFr0Cm7l6THswX7thp9bApWgGq8QOzPNl98YFjs0L9ER2B4qmRkL0FHcIjV
eJCyLweOf7VVqOfYPqddme4HCufAlsTU+/WNN55ePuAn/4CCQeaSTPLutbBh
rFm425cCpKZ7p2kVevGd7EyUr8Q8vM2jWWzd9iT2vB957bOr21yww+DHuwBI
Ht0ncH98Cvb85NGZqK0E73lp62yDOaj6bazK71YHgTsStVNIm7h58tTnlyfb
wC5OLrxDfw2i7cqmGPmWoHaK0aS3rgjkozlzw+kmMMziP8pGAgWXj1CFph1t
gx3rNz2WC1fRwfELs8qLNdRoVhLcH7YC/odWmei23xfNeKjdnt8PX4ZPmNLp
tcJBAdor6lI0BInXI9fPDg1hptRe0m5XCtz9uHnnwtlp9BnVYYBeMuiefZWU
fKgHJTiIGzl3SaBIGb4s6TCEtCCpYnSfjLoC9KNi9KW4P/eO1jOhElz6LT1B
2PbdIXp6hYr/5iHpgsYUh3QqSMhGxrHF9IDr2d2kispCEHAPJLw+PQuyNUZ3
1d6sg5ps3oOsyHywvurBEhDcgG8jrgXHMc4gzuQbTJqt4zDTSY+WxE04tdw3
cjRhEXQOHtesShjDDrnSFE+tNZDgZy6jiR3EBpKS0BWPMZT7elBI/sYUbmz5
eigbtsC/5d7IoG0e9cl8M2alSUGRp81/FEt6UGpAsc1UqgS+yC2m8Nq0AM3+
vKzL+YNgU8xYdpKbjHaPLx07ErqM//gnesY6aQjStbwnhM4Pwhh1kWVC+Qzy
t56jIrkuwPwNFcMY0X6k++/PIRHlUXRXstR0DR8HL/+1T3OKlWAx9aj85vcm
3P/b4PcB3TkcyirSOrVrHGnF/iXvpSpElWe5D9vkFtEzNbqP6yEFuH6IaxJb
KFDiO9/Nwrrtda++PFiTIYN7+wd+p4YNWNN+r683GAWNKkuBkVf7oSSdyFhM
SQFm0ZO2G6+nUPf+VA6bXxdOhnVVDavMoMurnA+nS2dQTf5wtGzCAoQ1PPpA
7bSAS6y3p8WSVoCdrKur49KI36njhEqD6zHAIVJ/yK0DdOlynXcNdMKAmpxi
DN8W3nobaOY334QOrfZd//TK8P4RLa/uv7EgKfTMehxnQd3mo/YURwG40/yK
HJsZRI3ypvAqaIE+vDafFbuEtI4JQsu8g1jlIuGvQ7/day27T3kMj0KWy0mj
osgVFDNKTfrnMAeWnReVBOiHUSLjYbQufx8Y0jKpJ52nYPehssUPj+dgv+yE
3aHCDWDbpUiwph+FXo/zpiqH6qGzqCzL8lwjShTPT/uaNyG79yHZeI4FLBY5
G5d3tQrvrv2w7L49BKPuGhnF4f3AZ/LEj+fnOHKqtOn3JS7DGw7Pc9Yuw+hD
Edxnf4mCFjpd5WdmxtFFZSnmCdUsPPD3+sFuOwGdL29mGYgtwOc7TsVraz2g
Pgp7StlpC+Q+x7rZRC7jqevl7T+ja+BvR8t/Dke6UCv91fm+hR5kqTLS0rdd
Ac79Tyym3s9js/dFx52GI7AeWxpJte27Aevu3nRls/BVO/T6+PkBiMz9VNAl
OYJm3I5H9uIC/mu2HE/c2vagLaKPZncLvpb5epP9Xyc+seyqZU8cg8E8o3Dh
F2GwuOD3fCtnFZau4Y97zs3YQk3FMT/agBf9L2Xctp5D2qu+P+Qe9KEyIfcW
45sUiGWNO2nk3AeHed2TgjRWsOGmRePZcxQ4Kt/rwfl4EsOK7efb1VpwH9MD
w5iBcmAYeP/omdI84ENXYU6zfliPWNd3ZexFAbWk1Pb2ISgsjBYIkd8EC/s/
ecYRo0isr0yrElkGpwX+H79+jaDASc4/Me+oCzJDLgsGnJxFKy2qN4b2FDRr
4lOtFKuCwfml88Sibiwdz1xpjVvGHrqW6xz7yTigvp+u5X4x9HwQ8ml7Pwi+
yUeVOoJXoNa9csfNW/1IkF0dJZD7seTATp1BhV5wd1vLn5xpxp3jfNbvTqRA
g33kq3M7iiDz4FOv0yNd+KFVfsx+uh9DguposLEVBu4cSL+UOoJuOS8vR+Y1
42k96wi6/fbQYexINP8xgDNM93hVH9AW3D1WSvo3SMFK2WAvafIyZNYdL/OV
pYCY+ZtkQ551NDzMfc2OOwOIsr08qRnjcAEZAsInq9C1oe1snvdvOCqlvkYI
oSM4T3h9XN6cgkDSlpl92CreeXzakWbXHJJaZXI2boYDVFV2Fwy24bVpqTqT
4VFcVJmd+MFGhtrfisHCnEOok1spXas4A8Euc3PhJ+bwArWV6I7uJbBQ6YoK
UBmFNqmbkrFGm1jY6zb29goZHH99qT33YgU+BeitqM7OAYuUJ+2EVTO+xV1O
RJkJlA9k491fNo/Rz7RDoqVaQE9s9Y6zzhoO1CaExf3qgrp+Nct5mWm8v4hF
ulKFGLarKenlUD3q61kH6p2iK1Dlzrl+VqEIG3+HCWgmEWFxzVKhWSUfPwsd
MkjLWcPdsdRXr5Rse4d46O5DDF1oe8qE8+XVT9v94NeYf3gOP6iveNYptmCP
+Dfe931NwPhqtLc/uAXOj+4NenB5ARRpNe4xE+fh85/PPeSnndjcmicW072M
b/bkxt9+MAS3bzOc4O3aAtXDl0WPzQyB3ufZ7gajQhBdRNeTlAVkDbHS4TYf
hut0bXKGRVX4nSv5ALPjAuiyjEldUa/DSOP7miXrk5jKM03lKE9V8Eu173Jc
einYeiWWvP5CQYHfDBX3bCj4ZrFMWelZG/Bl+t2IkG4BkmEWn8P8IASoq/mf
lWuEuhkvkRLbLFw73vPOJ2QdFk5fuh5JGkT+qh3EohoKfGAqavG/soyG7gEv
/XLG0PiwtV85PRFIj7UPxxR1ICEmjMAQMAAZvlHtgoFFcIj3+d6MxXZ46/Gr
/dlsCebKlvyNNx+Ax7VHHMVYGvDRlqO6Y3Qz/HXgD/ZI78IfVHdFXAq2+4TD
J0L7zjzec/Tm2C3Th75MbBaXjs4C/7FZcTebRdD/MNRW9YSRcF7pKT8dfQ0a
HtExaLSbBY333CLDT4dxL9sFakfSJBSkUN68ia3A1I0DS+qqU2jLUfTi5ngN
7JCMT1VP6oShDL1yOhjBaxOC7b9vbfNx7jFx86BueNAnZ/7qRAlont1R5dvb
i6PRYo0Gk7PQPhre/Im6CvP76v1cdtAVEN9y19T3hYJuDBUNa8kERJtP1lQf
X0DNB7gRVLoEQleKJCyX6QimNy+8Olo5jPNb4WyJqhtI537uV8uyCzTAfx4R
xgug30v9AJhbQKiDKpJwYgAFx+m+be0chM3/tIxStH7jn9nefPnrFKyqzCjS
vt8LQXUX5GJPrWLvVCOLz+Pt78KPr+mxJVi4L+5V6YFRNIuo3uJnoiG0Zb/y
qvzSi/lca7njEhkgIfghqmJyCiLU39K8KxnCPxJH454UruN8xvjZjIJpcLer
FtflW4Px2aTDPjd6gd95VI5hfyeEvLNPbpruhh1yITKvLlMXMFVYG5yzKoZ0
8RzO3IZ2dEzhMlTi7sKvBm1vZ1+vwAyLJFl93yq+TJT0pbzNB7/jmQmkj13Y
9MAs2+L3KHKdPPJqMHUV7BeDNuqgGY/V2ZTbTZGgXyFpjzT9EPZ8/CugQDWN
r4IXLvc6DyHpnZvOhhcRg3YSLNwOtqPBBXE/qW3Oz5yRnKPoZGCni/KusIF2
8FsTETRLp6CtBVf0C6UODGe9JyFXS0KeNN2eY8zF8FV2k1mDuxF9XzBPPmOk
wBfPMbFlnxX0LnpDEyg3jxp/GeV3NY5CaQ+lynplCR6tMtWUPakB+k+ShoOC
AzB2eLDqAksHBJNsP8nHdsGvl6orraXNsFdGShw1ByBOVygkuY+E5vd6VSm3
+7EyWIY222cef0h23jFQncMii8OvR8+VQqKjnC/ZtRxcd9icGT4QA/0VeQeY
h1Zxgi/xtD79JnwIObulyToAloHvkup6moFRX1DGsnsFEizf+OeGEPEr142Q
x+IpMBRw/YTg5XHU/LVn16muFrh5zVzqc/UWVrIpmrbINgLrSdqoyp1t8Jy8
aLmiPAn+E6GWJZ6leNReQSLMmaZAJKW/cI19AS6uS1m9LR7GKpaFFiLjKGyU
XSmzOjsJyrZCTOqlbXBLwmJpipOCfCWbbIeH+2DHLf1kx+42bBuq9EsiUBGE
97nZl74Jw+7VTc/Pql2449GF0gCqZZALeUv+fW4Qba8z3XgNG+hk/pZ88DcZ
Swx3q/LTbIK68VHjM9seVzY+n+VfVw7J9wLxoXcKTA740NUwrkCZNPWy1DQF
4+g/dHBULcOuiEMlcwXTaO/9rIV1jAgEQiHHQ7NJTNr/78Pv0xT46Wztom65
fY+fkdUPfB7CweeTMfTU8/iSz3j8ZM8w3HpvE/4tawKSeKcXa+bbge50RGzU
eju+CBPh2tNPgcrvnxluxpKx+Xvt4nGzanyQym7MrzaNN1HQ7lrTNMQZ3d/q
M+zDq36bpsSwTvD4Gvn9fRxDASn42X79XDKi3qwu//bcW1fINU6bDkIgQ7HF
L+Uk2DVbmXggjrpA+6cYm6kgGegkxfPdvtVjsuebHVL6y1DKXbqYzkIGztwV
897mMZwzvXb70ctc/KJq08XbR4KuECfqeu1B9OHWbrfR7MclPXOJn95EzHks
3Km8twV+DhvkrTyqxNshE0dXRyk43Hz8ouAnMsZqaZ7yie8H0QA+inZhGux8
rkBJm+pChyNPXgzfb4Lrqwfdy2dngWV37efFjEKc36Hdn76DquD3d677J4IH
wIWmST9vxzx2SzFG3otpwoc/Xm4efjAPM3FmMg7TA1j4/rk+OXUAek6rvUpd
asb8wNc/bh1vgzHJVX8vKW8srVHq9r+2zStpCsufvRrgAmewZ3rTAFxU1nVn
Fx8Ez+gv1d/ECyEgQ+ioN009HHMNPdIhSMJpW/suropgcKErzH3xbxz2tHHS
EeT/gEhxe8ld51ro+7mQWNxVhT+bFds2ZqkLEr/tqOF51InH+jRSVK8T8XRM
xnVVoCUsTHV8K1kZgswKMzPrT/Mo4PCu6bRJPR67NNaXbFiLN6vlppn/kCG6
7L74vNogNOusCmHmCAxO8kiawDLa97/ru6lOS3iULe50PT4Jb/nSupwyr0Fa
Yu5atcskan34kPNzfwKIn7x6t+VnL4pfPmB+q52Mesmh73lFqAj/OcdIq0WT
ULLyvMhZOSI831srTZatwslSpo/VxWnw6lzzk1b6VhSiq//tGrcIhNk9o28X
OiHKmo/8RHwGYtbZ2LtmJrBNkt9ei64fmO9+4laJ64fOnAHhquFFjBqbNWOT
2timtJ+d/IzdGLqo497eFAnZuUY7LNxJwNlcnsDdNI57uXvfXrfvANk1k81T
0jP4aKpQUfHxEO47H/lnjLoSlJX2mjkJNmFBy1ev0to+XLMf/cykP4T8dycZ
uAOGcdewkKj702Vo5z9T9Or+BsZeTalFm3HwOJDFmUfVgGHkwZ3wtBMcFzqN
uzMa8dDwrYEsiwpc3XFh4oX4dm4d2U1IdO8A4epT+tW2/ehFpKMTc2yDyeYj
ZF4BEnwhiMeNb82A+y17mjDjOKAXUyTxO/SA3OPnv32vzeHv2+Wlje0kuPJN
cpnLl6rAS+zZRYWvrbD8MH1sPXwUDz8PNGOmHcHPYf18rwLJIDdk7Md5vR2O
MDCFTl9tRr8PEzFj27JztdBdZlytC+4yyrHI7yTB4YvuU3+JsXjseHBsehIt
gY/ddE7gAhGHY6mJ6zqzuP8Ho5DRJgV1Vd/+FyVdAT2PuanlmstQh67JIVGm
EUTcpAwGUj7ivclYZt7wXuR/9Oj4bPgEJvzNXjh5Zgzrs60mbBfasP8mw40e
zxqw9b9q2ByxCMuskim+mkQ43vnC9nHWND7xZ+BPGpzHAqaqX5Em3mja7Q4s
WiNwPd7UhWXfAuRWrai/eN2KHdHfpw/Y5YJZjvaJRq0FeBomNp1zqA9EQqS/
H/OjwFshj33q+zpRjjHiedcT6oL1Ey79bnPteKi2rnigdhgsEhdOfj9JxCER
Hp9i2g7EzplrlN5ZnOVhuyG7xlAQdaJLMmkyAtJP/pb0Ud3mLUqSe/h2niUd
PjGVtNsfWK50NmUe7MWdbgW9gjvHwHDYjEtOsQfb7otvTD+bw/rPQqZSKeX4
kyx/ZX1iFFXqBeQOso2jajGtx8FZEjwXFMzi2TOKnrv83P68KUc133rbu7IV
WHyJWnjUIQz8VQgCrGzjQPvVvegsYQDCZeeT8y3mMLK0Nvnu5RjsHSFJ/WAZ
gP7HjBym6pVgFHHxnpXxAgoKvNQN5ySis7e4k/XSDGpSP74x2j+JJsZnA1pP
OeNS+EWuIy3NEGX7xPm1xyJa0t5RiT5HQ1DBqcYz6nQEfme+kROG/1CONEP9
qqkJUne//+s9lwIPp3/U8OmQUOJve1NFSQKGJu3azUiZBxMmmpjVynKo++Sy
xnOagoSmW+d9TBdBm/bG+BnXBRwnj9x1Vp8D/acpM0GKo2BwuaP4UsEyXKlO
IQ7eLgCdEdb4SMIi0D9P7GwxGQKpqoyZGzcpYGJ25k6uVSOcMbEj8IY2QHaF
4tZAWwOqKI/dexFTic3jn8ikHITqv8/uub1gIIQd8CcFqQ7DZGXSPmHpNEhX
zo2A4PptjqHqnynrRLZWKSpS3RRWBlVeHLIphQvlF/4qGMxh/JOcGdncHAzo
99S49HsVZ74JCTfQDmKb0mernUILaM/HL8w8MYs7JLlskvUX4KgZ8/BhShNG
lvWc8ygggWRV2h8bnhXwzjU0/mreBYfkI8Q+m2XiAaOwvlVWMszV8RqYc/TD
7jqDo6QOIrLmCTF1XhuFRP5b+gNb5eh76FfiC8VB0GERfmd7epu/n06d5BVK
AzwnfsdPmYwp1oKiV+1n0SvJ0b+0pAQEqy4eOlK+AlWpAa1fW8dA/vPoCsQv
YWxIrZEqXQ9oaFUdWXagIhy7FDIQ+2YcrON7rtgwxYOZKH8/5cIYfn7OQXPm
RBOWfzt90NQ0DJd1rTQVTDJQNuGXZest6gLjh1eps6Xm8ebGs6WF5jb8QQq2
3sE1hc/7t8zpVVdhj5d1/BKBjqD57sqJyDdtEDJ+1r6Bcw7vNtT7v/H9i9pn
2OajaPpQ1UMzl+cMDcHL7NVL4fh88A1hrFKhXsThYvVDDlsDoMB0rbfeuQpz
XL9S9vWRMaeZQTDt5iooRo5tBDY046+7R1y5k8bxYR4+4rWfwYeh7n84kxvx
/qOIYy3vurFuqryUen8Yhqjn/Kcd34jubU/3ctS1w3HRnda8fW2oUVWdoXJ0
ATHfyZRasgZFzZvevFfeghMPHY74fRyDp/8J3/S3rwB7hlCTgw4UeN1HWJyQ
H0bJmHLvBWsymozWRr3mmMeyzmdwQS0STeLnMSjeH2tUI/LVrCagxjHq3JvU
Obx4TKNIIr4ZctRFzBjrZzBcml08QYWMCyq/KzdSSlGUb5Q42EtEp9TQuN6d
EaBUEkutNEQC7wA3R+LMMFYe8T8jN5SPzDRBe0LFh/Bps+U5ocp/cEigNPPQ
5wWYjDOfys6eBeNnTjfNCENwY+D8r8HmIZAU2MPKyz+BDRKGd0eS+2GI73DI
1sACEo04LpHdBoBGbXP+wuo259F4RKYyt8N6Nuep7qlGaLvl+cLjYB3O/znJ
kaeXB6KfvmYKVDUiY77sakTPIKazGQ8d5BjCvqb09zLri+h0PuYuD1sGjvlf
5eJdJuFKj2VvmFgwUlS3GFSfzsPVxffR777PIvWWo7thYDkmHZYyoWmZg5mF
sCRtmW2Ov/nkwLT2OA6CeeXxbU8/lLlwoDp0AE4lXW1RKBqGuPPfqT3sKViy
2ySm4940lByOSZn6M4ZX1lN9Ym0GUO9A7BOu4mXozviMoar1mJjnbaJ5iAjU
HO+aOwu3eZb2qq/DQRLoXNNmOjtHROWILlOb2Bk8F5U3pstDxtu3ZZ9a004j
g/nSf5LPe/H0v4RFeD6KL80upBQkURH2CuuRBPwS8OJhyaLwP5P4r1v3ZN1g
JzTb7X3Fz5eNx8rXC2PpGtHm21ctx2t26OTkHsD+38C2T1u7gkojnnviMVr1
px951o7vYH25CrttD5AVqZpR5I+iZ0TsIAhRHTVS1SShar/LfoHbRKQ1NXlM
yJ3HuF6IbwkZh2pJcQWqgVksvTbAuqxGRu7kyMvE1nh08Y0KaRcfRMXFA/nr
ivNwWFvGrXWWDO8M9EYjd3SCnnh1zsXqZoh4EZzwUHQcuNMOfy/Wp8BC3VDW
F+k+tAykX7OIGQW+UKP2R8HtoGQa7T9alAIm0vqfAoRnUd1QaWX/lTr8yfDY
dHJlDieC+BVypRvAJZhUbfp0Cnz37s068vQHoOpcqaF/G2ZNmxnvKv8Lp9TY
Q7MvtgOnp485q/08fgS1b8JHllHHebyGP34QFLn3h3Mqj+CzCV3T4l1NWPgv
X9yYdZv/W1vZftZ3QpcXzzT37TZ8JFo/cPneNF6/JimuNzYMLMYt1qOKtAVM
gmqMpnbfEFqdBC23CrZ59QSy3sxD4dB9QYSiJax8uP5zTmYcnm+8NV6anMM/
C6/Tsr82YA6B53Lzag7ePGxRdoBpAIjmyx6X0+bwoIISUaetESiF/z3osRlG
7tOL98OiV/BEqfLSHVyG05SWTW3VZjCirKQ5cK+iVWuuyEbJMtjduH7BpXsK
7+uaC76/PII0dNG3Pm57ssrpwz3y7xfwS8l+gRMm81jkFfHF5jMRhXgeiCbL
jWA0l23ssQNLSMX1qHNEZAi3iowKqUqLcfPKNdu4kipYX44QoXHrAy8bw0Ie
tzl0uGjafEt0HXaTDx229VyF+JPfpY2iO5CwPirVaTmFIoo/juqxjmF1xIPr
rl7UBZStX2fzEsfhyAkjq0jWEZgp+PTwyDUi3N8SE/OUWMDnWar6xaNk6D5T
KEbD0Y+BK6FUF4rL8UvwqMpviX/gvM8y5/euaXzw7NASZaUDP1bcl/rMVQZL
9fNaDhELEL0vbLfwwwh4VmjkI/soFw0ZXdqLuobwksiL9CUTEt6SserYl9CM
33+mS9/makRd39P9c5Pd8P6uryGyFaPmeCBEK/YC0zRX5fvHw9itxjl+9cII
aLte3XIZbEDv365bPy/3YCIv3dw5PzJKDnU7DauTsVMsNO6x5DJw73knzrzV
BZfpy3lie0eQgfRfat02z7FR88zxbs4gr9Y9b33VBky7mZ1CJdCEx0lMSR1N
DAVP9o8dGGpewAV1jc3sxEbMItSc+WezATZ3xSdHDjbgS2OWhRihClCgzHob
jBLx3TmKtPzeQWj/svi85fUyKKm5mbZzktE/wSrP8nI32uW7tN0oGwH3Sg6K
6Y55SP8jsp/3Whueo1YwJ+0lo7iyYHa0eDseOx9X02aYBwdfRBh935yFJ7uI
nREllRhT9OB14J9Z1OpyCPqW1AKd62fe6Ggg8FpWcOzUWEND2zJmkZtJUBNw
zk/gwhuYqqQ3vfRmftu7Ws0OOfRD4Z4Ek83t//Q3Sts9nUmC9egKrq8FI2i4
cXss9joFJttPpD2VnkTmwPMcD393Yf+djtp0o3/Aq0uxKAoKxmF+lmfGr1rw
ukOqxnv+NXD7o6l2bp6WsH5gm2YDh4Dx2+u0wop5uEcKesvIMIqNI1qrdPfI
EOgtEM50dQn5hMOJjDkUMJO+IiHuMIUy7884z9KPw9js7rdtOkTszk8sSk9v
gfZbQyms+xAk+a9bqoaSwCr97oU7OvSEb0ys1gdIg/A9uGSRtnIU1p/xjd4e
HEaFPeOPliWn8WEBx8jJhhZYex0nsP50GtLP7ZD9QiTC4lFGuatetITz9e9r
uMlRyC5OPp5DXwG0brt9R24OArtNiPl65yK+pGl45vxzEzd4/SoI+jQFdBwM
VyPe1WGolaEM7bNVrG4Jvpp7aBR0TX7n9XkMw8yd52Nx39thh9yDs6m6lXhW
61q67psFcHL7nrS3qQiPnk/4mGVAxt3V02F5dgsQOPKseCt9Et6oC3UKJ5Kh
79y9myG5bfCLX/fuw+oi1I7MMD4o0QfKj/MXfJiHQFm9zPQyVzdUhxw45e+9
DEeeX6ngpF1HEmfBcw+FHnSTEaxrHF4Cb7r7oo1tTThQMvPq2PYcH7DnfaZi
s4LHi9RVdI4M4znFn3WvIygw6GthEjDcgAcLvF5EfyWDTt6afQx9DJoawKW0
n0WgMZSGbVSz+HfqalCy7gr+63mge/LPPB4X+nb3xEsKGL1+rjX6owrN+ma6
uqcqsSFZwinoaycG3DdNSBFHeDpcY1mj3ADikY93/fTZ5tq9TgsXnfrB72VD
3d6tGbx+oOYdpDASjC24njtrN+C4o8lLta52UP4QdfnI2RYYnDie9VS9COUt
RjRag2gIb6nlRN+e7USr0pFEq595wM4HPnYOS2h0iS1KSW8DZj86necK2sSu
rZO+Uo+7QTNFp8n1UDLQZ75k2xE0D690Z5okexvwCV9uc2ztKI6UtYWEKM+j
fAYjF4F9Fvs0fv2V7J8FN2Frpt6WPsxN4G5bZ91e518Oas2bBU3nXuvTO7fQ
w/aM7u/uAei+slmao7yJkWyhs7W6vSgZ/HGd580CXrFJ62//bxaUddd9Vmuo
Ct5NXiF6cq7ClbuuaR9YfqOytexazbEJ4Kjmvv3lzj/0YDkZZzXsDUP2mety
TxfwsMVfJ5uMFnAiitnJ0I3gWH7iiPi/Vpy4z9qkWbYISS/qv1tFNqJqEcfF
P3QFWD5vbnX59zRQOZz9JHajHzb4ug9/Od6NDm2SdumkCSTekMuNPT+N4Ya3
Ri6mDkA1PtmxwrkOmUcNV72zN6DX5nl8MHcPOivGf1x/1AGeMl+0DFkq4Otz
IYWJzzSEX6n/7QzyIAM/15HPn1xGUSbqVrCKDQWdTf1bM69komdG9Iv3aeno
9/XKZOH0NCbXz+v/CgqHjy/sLuhc6QbgNqVT9hnf9pT6P+M8DfD+CKfWsdEZ
eJl4ZUQ+iIh1XyKi7lWUQPlbj6ZhtlncEmy/RowKQP/s08fUdakKvG7zpmgU
9uOYtz3r160pFLjIw588+wosztJ0Skf3g7lu4OIfzjF8cEr5wRXWCfQ8Hr05
82QWCAeVh04sbPefVWzF7pRO0DCWZfKyHwPfF0XqY5+ikIb9zn7zkQXsvF0z
sPWpD060hlcY/ZmDv9rCnOdnKrA2x94I/qaB5/Tt+OPp+bC/z0TCprUBL1XR
3/F3aEOV7joG8zlGwpDb8MD32VI0sVurmRX6hspfXx/Oq2xEO/0HRxiSU4FO
e88NMz5qAoF9HytP1QKqhr3cc3dxASUz/MvoPFowLe+/0IvbOazLsNPoXuUy
wmNwfym2CnORT6KvZDAWXOHN7Rj8NAu39sfcUS6YxeS18BsDHS2YXTZvrkoi
43Aa5U2RUikW7InjGLIbhjP8l4OdStvhfvj7O3oCC0BefMK0y2UMudPufDU9
14HqI6aRT2VXcL+h7i32kGYI1TUN+lUzDxhbP230YwBesRN+Pe1vx1pp7zC/
40QYuOyysWxIwo/7l8gPtucxN8xbc7GxD3raFg9p/utDvrE1/1HiCOQYGzvt
aimDbC72TJ64dSxpveWmQiGB28qzwx9MO5BdN67wHP0m9A2EVxm4DOGXJ+oP
J+NGcObzxddiqn0Y9NbuqG9yPkS1qNop+lIRXl4rjGgpbwReledsCq0b+DQ/
9T/jhFk8Qvpp0pTUD8dyuFHHNR1JbLcPsy12glWsfRM3fTb8UtlqDo4lw+tg
31Dty23Ask9J10d9DGpYQv9eOV2Eoabhc6T0QAxmJiWGqVaDNE9X8H+v6tE2
sej5RlA0Jjw605sdNwGTohq74OYS2DyZUjsh3IHNv4MOyLyfwp0/JtiqAgdx
L114ZFdxNzgbPMisKW0E0+GVG+edm6BVZsw91HQMHL1HnDYC5oDYTpwVCeiC
l7IjahdGpuCiWHrndeNuYLasm/TMrAWG/tXUWw+7YG/TCsff8C3gzN+UOcnR
CdUfebOXOrrRoN6cZdfXdQje42ZH57EM+m6RltIzFOB8/tFPWGMS/FpMNK/+
mQLZetP/TlgNQgadyllHl17oUtImMG97mr/tz7YfsURwtQpkUU5rwHfvmppR
ch48p5ZyyHJj8Ef76S4fMlVBU4yG7HpCAzBR7z7bk98IP+qD2I3aO0Bi0KIn
WXsMxt6Ou/CYrMH+YFvvGHIuBPbU6CTwF8DrM3Rpf7w6QcK0LFBTpRE6FDwE
z2eVQghRe1PtJAU6LJVjrryPh33HrL78Zl2Aax5PXaKrBmGn68Qch2kKaEb/
JSoc3MR0ZvY6HaoZuClGfE3KH8QXB0Wov8fMIdPYPkyyGgKWyGuFHz9tAHXZ
Fcvqknm8meeB8Y8mIZD92H8Ffkt49Kwi5SB9CTLsvAB2e0vQqtnNxLJjE/YX
9PSWvJpEq7RL65ceknFk/ewSq/0wXFYgqs7VLCKtxrFbpnwjyCFfV8+d1Apa
L/x3HCirAw7kznN7MQu2JoxUU+uV4NPIOi7zYQhQNuDviZF+yHK63kDQKMUv
nae8/ExH8UdiuEn/Why8oPzWfZD1DDrFmQlW205fK+rloyNfhMvffy+yRsxB
TYRok8+tMfz8M1yGW6MDUP/t4bpvI9Bj++LfrbYI8L8dbyj2Jg6SqosUdGpn
oXD8bsN75kV48uIGI3vhKrCc4TuWTIxG0bKbOxmi5/FpWUGTWxwZ2Ajru87/
a4V7IXOmgj0kNOmlbnQRacTW6V9zTacnYGqKLBb/7y3oa/45OZMchb6+Llnp
E62QK9P37cmbEsDydJbdvsPb+fRLSeHaMq6E7n+ZH9mCbJcqjJ9bh8CPXutz
7jspuPeUvFGVAhnvqv9+QG5pRUH/M5/Y80bhyMsrZTTEFbzsxJvKUdqLCSSx
oj3F05Byg0607CFtQbXG9eqC0na83/YuhYE9G2PVP9Suh1TDRcKwCumrNdaJ
TPhZfB/G+zVSjgnSi3j8ez9sCVATrgVr5umcr4Ij4cmjU2+HsTDpibkG3wxc
fT16P9yiCWLSvgX/HZzGpD3OTvfDU8HFLPT2p71ErD26eaj6YzPSSvK/81tr
gHyvcG6J/U0oOHRIybVxOw/shDMuXSBBf/V77y7ic5Q89m+hOrIayAYPOn3C
Z/ARaaPkvnU5pqnqcvPYdCJb7os+N8MSUGlzdc3cPwV3wb5WmtyIKgVl9e1i
KUgW47AcPL+GLHwPNwe7uoDqdDbTWlsnls9mfBDe7qPOYcmzqcdTQU67S1QP
mjGqT0FZ7G8LWPLKZ9P8SsNl0wsX3ZL78L10tPn3A9MY+ONK47mpLLyvfkLA
aIkE19hTlIZTJ8Bzn/y0olEd9JWYdJX7UxeoBt47Jb8xiWyPc5V+zjbBkqNr
H3Jt4VH/O2Q64XF8z3777peL23m4i4v6fDtVQeJhrL16dQn6P4zXGPtlwXUO
C+nZ7mFc5NdYH3ToBCGpu92Z2/xP9mrpSFwKww23Ohd/yQao03PpvTQ8hy92
6lX79WfBH0WmBcqjFpRxCOT1d52FaDbnnLk9ORBjFEkUuLWFazdPVV+tnsJo
guGLO7KL6Dx7aPrptscf4BeP4oqdxuUWFWK7OwPBwLJhQst/HJYIffReQ+t4
b8wiRN5sAF50mAq50c5AS8zbqzFZcfBnIqmYR2ceRL498le3rwPenbcvW9gX
4xl7azWJtUGQeG7Rp3RjBOqZJ/8wuOZjpmu6XqxoPIy9HjHf+DuI/rdpGKoD
x+Cx3XiTc08ynDPlvZXblQmcLnq+/7w7gQstqyCKjEJvx7X2FWzCO6LPA75t
LpBj9mcsNEcwtngYc6y6AERHNoSlR1qgtU4tyPQfBYonLJfPmVKAyYGXzjKm
A9pk/Z9+YOzDLXd59nPqTXiz4opIL2cG7vCr5DNqn8HJgML9cWzL8CSQMzjE
kKrgT9LY6f3XBrBx4VOyFfcKXPrDz3wy4R/a+P17JP2bmsBilwjHpGgKnkzu
muMlVoNEm9P9k94zSMNz5XGAJwUFpI8LW2/24rDVg4RobeqC/wGcYY27
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.8726622466373266`, 
   3.085932347031172}, {-2.9645093041658526`, 2.993852666109462}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7715196656999626`*^9, {3.77151970940615*^9, 3.7715197380083036`*^9}, 
   3.771533147521261*^9, 3.7715332193392777`*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"8b8543a6-116e-4426-9440-10985ea3f38d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "@", "normdata"}]], "Input",
 CellChangeTimes->{{3.7715331491848707`*^9, 3.7715331522769747`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"b00d21c9-f5ac-4028-bbcc-2836ba9122e6"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
OVYDaH+j4sble3ybEplw3mZsz+IUFdes66zpJO6bfzvX9tvjVMz/+6l6YIoJ
lHElvqBRKmYqtkX3ijHgd4X9vx2DVDy5X3uZO4QJ/mHU6dFeKu69T+HT7GXC
iOrNobPPqOjDP7DpegITzJdfPTVtp+KkZbn3lCADHj1aauRCKg4nPF795gET
DuXsLG9rpKJY2J8LDZZMuGlmcjahjoqF4eyPcmsZILElNv3ATSqqKns21tgx
4PTopagv14j6/URt10YwYO21p56lxVQMizhm1xLPgPiA7xYuBVRUsrpxZEiI
CbNKIjpbTlFROOl1QyZxPvc/Osq9NCqWlQpu8LdlQX9roGR2OrHfOahkd2aA
YVr+Bh0SFTc8Y0hIE3rRcrx1ZTGOivNvFravcmPBPoHJ2dsRVPz8UZtL/hoL
rg7yjwYFEe+PqXw9Q+ivcPGh5zt9qHh648HfRceZkOPldu+tKxX/iU9svRbP
BLbd2TfO2VORGvB3H8cwEyK+1xWaWRL11re/P3WKCR8b32Rxn6SixtpBCVo0
A+xT1sQ9NKBiZzFF4Y0BC7r1FH0Ttag4LvAq2jieBVq81jYH1ai4/5KNo4IF
C+r7kvVnD1CxnOPUYGMpE3YVlB0s20PcL32hySeOAeddXsi4ylFxYqzT3Pgq
C/h3LmzaKkVFJ4nnZ8kEvqgzkqv7RKg4dIVl097MhPk6o+/ZQlRspPCeEyb0
MCAu4p0OP9HPB6JBFGL9KJx/8W8dFY22XXbZLkLgm7Md69mp+Eu5+xttnAHt
XV+qgv9R8D4ofLXrYMLhU5svyv6moBaL5WdD6E2lHdDHvlJQ+bK972ZFJkhK
+CYWfKag/LrxRaEhFpyaYAaYf6CgSu39lqkABqyrbLLnGaFg9Kua+s5aFiRE
vDd81E/BqS1dh9cWseDrYZ7DSS8oKFlRJzJynAEebAfkVDop2P48ZHcsMqH/
saPw14cUVHJJinkXzAJDehpneQsF+z99sfBtY0GLRdUv1wYKsk+F7/h+lglK
2wbGt9ZSUOzFDPfxRhZcG1t52VdBweuiFpcTR5mwpUzuYc5VCv463PBqhphn
WpBZne5FCk78kDAueMuAlf3xl5fOUnA2/kz2A6JfEX9LmHdYFDQ7o1zh+JoB
E/efpYTkUHCc1DoXEMcEh4yfwXJpFHy0pff3tSAG9BiLOb9LpqB3IfoJibNA
W1DfuDCWghL3IjifKTChfihY3SKcggHYdE5biwW7Lp9V4A2kIONSxGcnIg9d
8Lm/rd2LgrXHZhoGCH7esOczV7ILBf97WI6bCD5I/blxQcWOgiffcyilxjDg
T/ORT1/NKZj+o/l+HqE/AWSPgfITFBxLuk79V8SAtwa0x276FHR98jBI1ILA
9/r6+m2aFCIvqPbiPhY8fjVy9eVh4v6SUf004QeOFHGepu2nYIrD8fWXGxlQ
5baXqqdIwT8qSam9NiyQkLMNX95JwYONIyLSt1lwepbk1iBBwRPJL1zcepjA
VX/dNHQbMQ/9Q02+aUxITOiDXYIUZBW2dv59z4I5rcU97/koyLlSNa9I5HHP
dTLbi9ZSMDbzg+Z+wn8PdJ/gs1xFwZDmNysywkwwyo/6x7tIxtBMF92BUCa0
Olycbv9Jxi6j45EBJSxQlnoylDxLxqmvJK8Ggh+vffr6VPUTGYWSOy7FfmDB
1uotTXPvyGjy92GAMoEfWpRW+fU3ZOQ2rSk14mABm7r/Wff/yGhfHT734RML
ItlPpYv0kFH+zN4fZwm/N9lxN+pVBxkNbNW/qxN5xpEx7klvI2O0WmjHg+tE
v634LPXvkXE6b4JuS/gnbVEVnZV6MgqbfZGwUGTBnffOyo3VZExJOE96KM8E
+esZkmHXyQhbZszjXjLgYkjNBvkrZFyxXD3ZqMOEjSqvV96fJ6PmYIdwmg0T
0v6t+lp0hoxbHBwy/hD68qdNftSSScbTZ6zTt3xhQGCWxXO+bDLO19cFpRxi
wVuTxHuPqUT9QwNjnJvzwGLztRspSWR0/JensJOY9yfDzwsPxZAxuEU8bvAV
C9Su/M76FkpGrfaKlPFIFlT5icdV+JNxYkDyqeIfAt/7jvl6eJKxYHsup1AF
C/J/h9qIOpNxzCaI4205C7haCvT/syHj4pE0j4FVeZBEbTuYa0bcT9RxHp+v
TPhmOC1jcJyM47bFp71oLPDcICjIpkdG8tKdv0BjwmC/+uomDTIODGleW0X0
//gFr+9hh8i44XxU3VrCT6NH7jt5ZTLm375a2ETktf3yDS8+KJDxuPlb9YVp
JpTOvcXzO8i4/summy5viX43rKu2Eiejk7C8sPAPBtCTlC6u30r8f8iu5N9N
JqzStac/ESDjL3l9/1kVFkRxUxNJvGRc+qLRXnmUBZ9e3Ag4zEn065qKiT7h
Fx3OvrL/vkLCUkHx8qOEvvQ4LRneWCAhvyTP1xVvFujI7Dzs+YOEtOND0RxX
mNAwdVJO7AsJK7yGinuXmKBQGyPcP0HCy70Bpd+JPFocc4mTMUbCBxt65GzE
8kBA4+kvgyES1tvrl6vmE/1e832c7RUJ85vC1m42ZcFC57ZXTc9JyKXwrpx/
Ux4EsXQehj8h4fWKr9utCP0dswmsU3hAQr365Fd2PCyw3J5/ebyZhGqyeaPr
ifl7Mt7CvHCbhNs1I1nxiwxQuzGRYl1Fwv70m+t4w1hQHcYfwl9OQtYwl5i4
PAukDh1y7rhMwo+Lvpu7XzLhzLKrMbmIhDtOcv9bIfw8d3uW+pF8Ei5IxTzv
HGNCUk6dwo9cEm4tfRH3h7jvObM3225mknDowZGWHdFM8NqyhtuLQkJf1eA3
KSNEv0d3L4glEue7m1Cdt8CCE9esPvVHkdCBJBOQQPDh/YDkAUYICcWDAu/w
JbBgv3LZ42N+JDR9weFRT2VC2Z+e+lUeJNyn/nt2D6HP2/DP1WZHEj47ZHLO
+QELctMkT0dYk1DhSbjWO0Jf2U8YUXebkrC95Gm1AeGvogQiwj8aklDFgKFw
U5IJnwaL3C7qkLDu2Hpj+YMscCx+ZGpzlISrqZv2zRJ56oXXF9igSsJYjTnN
0hNM0N29ee/TfSQkI//xltNMaPyusZ0iT0KOrjNifMos2N3kw6cmQ8JBnslQ
P+L7iynMfz/ESGjM6Py+EscCAf2m6ZvCJJxVKygrOcaEdN73Q14bScgsurrg
+JYJf/u4O7fzkJBhQCtXL2NBcMH+poE1JLy9Uhx6aojI19hoKrmUglaHZ8vc
6Cy4foJ776m5FBwcCZJ6pJAHzNcOfBzjKbjV78Rh0WcsiPGunI4eSMEv8g+s
O0+xwOXH8tNPnSmYGljkyU7kKX2Sabl9awr+cA8SvRDNgj18JeldtSk4JTdl
9W2ZBYKFPzw1rqXgZ2YdXySRHxd36unUnEvBSY6XO2SfsuDDrTOSUrQUNFqi
hVUTefGZ5qeVUykp2HOH4v5+OxNuPT88yhGRgikbjQpNiPMU2ufci/FOwXPy
lqY/TrCANDlc+NkuBd13z3A5EnnaN3JPnINxCrbq3tr7J50FJqtINs81U7Cv
KWdYlJhv1dzeg3AgBSOSJthpKUSeFJEWrJVNwTXKb2inNFnAUR75XUokBW1E
277n7GPC9IHHL06vT0G73oaN3mx58PKBcDUnewoKL9jxmBN82HzSjx77Kxlr
aoqFZD1ZUPKmOWDqUzLy9rJvXShlQZYvr5HjcDIqh2hHk0+zIOSXk1x3TzI2
71me79qdB9aUak7Nh8lYG244/Z7Auwb/qo+1d5Lxm/iBkVyC72TPmz+UrkjG
0eJwRWmiPzy7rl7Ov5CMrPuv3a/WE/m7/lfKWlYyJkrcG84l/MuwtoFzXGoy
3gt4LPj3DZGve86pT8ckY/efL8ymfiZUOE5tcwpIxnbzd3b0SiYwP6stdDsT
9SueNRUn6o2Lpg9omicjx+1ildBdRL9Xv62v00tGmQ8Xg/oIP3qMue+0zOFk
PDmr9+/AOqLfYpTwM7uTcaH0mVCyDgu2VLw0XSeRjHW/JNNAOg+WVHbsjd+U
jCUyc/KyRN798DCab4YzGZ++GJ8zIvzlc9OOaae/SbgnoPjJBoKP60a2dvZ8
ScJ/QQIKmoJEXvEPKNd6l4TKTXWBXwJYQJm/l37rVRI+ouhst8lhgk/qeq8d
HUm4WWZfmNc9JphtdNU5ezcJ+y3EhTZFEf2+WCvJVZ2ENLanJs7STJBQWM2W
UJKEsk8uHVQi7ouz0XJ0Jj8Jjfd8uLb8iAlfdUvvOWcloU3ByxBrwj/91ztf
+CIxCR8ofzki1c6Cu86GcdqhxPPdOeXlESL/TRfa3PZIQg3Zg38bifVZsTMH
d9okYc58jjzLkAmRHBqC54yScCPb7oQOwu/a5jG+c2kkYYKHUmFBAQs0xN+9
SFBKQsaTeP5pwq/suqlc/UUmCVkRcb8tJ1nAdziV7rIlCZsCNRmiRP3z7f8F
9PIkoeLbQ6SqMRaMmMsa6awk4pYT666XEPP/+G2sXP33RNzgprdx0JgFNwM7
OWUnEnHk1wXuNvk8yFsQ+XjudSJuPNNSkHiY8NPpQQ+5nyciaX3K3W2Ef3Hb
hJcT7ydikkLx2pQtLDC6tIE0eysR6zYxe9Zw58E+RXdn17JEFOpfdA4n5m9z
8y31vsJETF9HuYVE/1b0OUR0c4n92FreprcQ+eal9UI9ORH3WMylC/9lQY9r
+YBsVCKal8SNZ7YTefXLQn2BbyKqrBfZdZ6HCRfjj5/mcUzEzAvdbk57CL+6
9kJ4kkki7uNxXXr/mMD36VnTr9qJaOn47skGYn8LSc29biqJ6L5vdVKiHQsO
V7H4Xu5KxFe+o7Gi4nkgpfZhWlcsETl6dXM3crJgXceBzjsbErG3ZemOkioL
Zi3Ty+XWEPXG7zxWdI3IC+8G0gvnE/BHp213KGce3Ave5cU7nYBHu+68vtfF
gGuL8TrJowmoyL5wppnQx5zMLsm53gTU4/PnKCX8cLTQdjb39gQ8aGNh7vOZ
BfYlIaMvGxOQ80L4Uv5jFmjufXBP72YC7ouJXP2xivBz9wSKGooT8HRGVJfw
VSKPG3rG7TqVgH9q1vl5dBL6/V+9TVF6AvYF+bC09zPhrftaFb74BDzxaRNj
YJAFj77aCqYEJSAtle95JcH/VYkV3+dcE9CVBz7eHWDCaa5/L9wtE1CqkUvY
mY/Q2zPG1a8MEjDTN+vXPMF/HtLFdH21BFy8NOHitcgEw5q5gMY9CcgnFJbw
aInwx0e1jeSlErDlvPORZQ8i/3SekjsvlIBcdzXvviH0f5XNR871XAno7nNy
a/9fwu9+UPmY8i8eh/OK9MWI/NQbmvnw29d4XKsTsoZEzOOdpdeXPT7Eo+Pi
dvrbjUwoylYg/dcfj0sCYy8cfxF6JpzkbNAZj7OGlOxVoyzwv9qt3tRCfC/H
d0p0Sx5YKUmIKNTGo+RloYPVloT/bA1bOH81HjNnn1qrZTJB/PjDgfXn4lH/
QuJMwBoWcA8K3iHlxKNphewu+2AC357ep78nx+P+iOsrrD4WDH5rCPcMj0fK
RtUjiRNEPkjmMuv3isfbV00zu/5jQBmPw95jdvH4MrLxeP99wg+eu8nXfCIe
vWaP6d2sY0DEjuVpBU2inhzV8Avr8sCxzqTzwv54fPxK6H68NuHn4XI5v2w8
WgwEBnwk+Gx31/d08rZ4NBwRmjpB9GOjna7XD754tE8WufXQlgXzH/N1vFbF
Y9tF3wOfApnwLnxScuBnHIbH/La0lSPy1sohNsNPcej81criF4GXGlr2aPOb
OHxlfoL6lJiPM1uH7+3uicOXJX9U5XayIKVUsehiWxzeGri0mULkXa/9KXEb
7sRh/l8r+TMEHx2//8KGcp3Yf7zb5QKhtweMpVR+no9Df/+Kb9Rxwh8NRQh6
M+Ow972GzSFC/1b7tH8foBLrFaNubnFiwucfm3sNY+Jw1zykLEwyoJvkW33X
Pw71cj5MzhL9bOBrpis6x2G94SmPuOssuFDIE1hsFocfzuQU6DGYkCnrZLRR
Lw6FeX8FfG9iQeDtKjnqoTgsq+7OGi1kgo0W29pfCnGo3VAnpMbGhKPdZh+9
xePQkptydsstFkg6XHk4KBCHlf+NZTkxGMDz6edlI8445M21MuR8zYJvkfqk
ewux2LrSzDtN6M/QqnPOe77EYtVSvUmnEuEXcz+rXxqLxRj1vBP2wIJSETUR
gVexaNkhdPt7BRMY5bQF6hPifcz9zVt0Cf93cHTgV3MsnhbZovvyMBOc2/be
8amKRe/N64+LuLBA14R8+vXlWIwuvXaghejvnuG+8OP5sbgiGHGXysaCTX4y
Zi2ZsfhnuWi9NqEnC7+i9u5NjEXVovYpZyIffaA84bscEosXUkqzo/oZ0MG/
dUbAIxZPfVjnuIfgw7rz/p2p1rH4xmdHsDNxf+d23Sv/bRiLj4P71ZgEHyfe
4cvwPRqLP0ruPftrT+ijjovX0L5Y/LzXZUKCzADjFzU6J2RiMVQp8jd5kgkq
TuxSrcKxKFN348YNKgtEpyzY9vHEYk3at1ea11iwJuba6OXlGMTIDb/+K2LC
1Or5e5u+x+BrM53/9gQT/pZ5rCjtYwz27Hp2xYbwB01ihXHzgzG497h/R1Qt
C4orpm38umJQJZesRP7MhGzVoypvMAZ/vgpeTyf0N/hRrqDxrRh8IoEzypVE
/jAb+95aGoNjd8sCVj0l/NCoUu++whjMLJfYfu4cC6QDqNUl9Bh0WFS5v0DM
J9+fV3RBcgz2DTotaNkx4EfqzsD0yBiMMo94wMdF4HtjrNEfH2L/TznZihos
aLv4VM7fIQZ7j70fqq4i8K0gsnb4ZAxa8fFYvWlgAasx8KOxdgwG8Wh9ESfq
j9FrfYgHY1B/dPx8cS8LXPv4S5R2xeAv6UMHXhP5Vd/FjXRFNAZnKZl1qloM
2D1T5yy0IQYDl2Q61Am+EIpbczRjdQxu41kx9SX4cpHDWmThdzQ6q8c9Kfdn
wXhe2YL/VDRaadAG3JsZ0Cm+MDA8Eo2OQlP355wYUH3T6M7J3mgUTXH7M0nk
+YLD50/ffxSNPO8oiZQkAt+Pv4QrN0ajvvmcuvRNFvhZgNnVG9HY3oyJZ0YZ
cHKMuXdzcTQeCT1oIkT4P9Wg93yZedEoxPT4mUHgRezv/pmFtGg8/IgroE2e
Aasz0joD4qIxuK0yrk+ZCTObBspHAqPxZGyBQC5RX98luQwT12i8rPTqqyLB
b/cU470eWETjLbvkOA53Flxufqaz3yAa1Zxzwjq9WJBhICZ17Ug0evT83E69
xYCwV8Fswnui8ewruStpsiywdrs/mikZjWXcT6qzJJgAsxtb/gpG47je4uXn
K0zYkeBRFLguGpknbSKhgNDHdfVxo4tReLpHbv3bOhb8PM1pa/o1CuGwxYD8
f0wYkrRVaXsfhQ+yrTnsjAj/W3Vd8EB/FGb8Tm30NCLyjtri92tPozB1v9XM
dgEWnOo40SvcEoXrRMq93s0yIM7qYnVWTRTGbdIQHiGxwPn9V/rilSj0EX43
IEfk72MhWoFBZ6PwzFWxX58HCXz/yzN6mx2Ff/Zyl3bdYIFw1ricWXIU3mxW
xjsiDPgnpLL2YVgUNr09PCg7yoSJkoyPB7yI72t/jNwi6u/a+/phqW0UWrzi
v6hAzHvtPfmSLSeicHGHrZKUKaGPhomkbIhCCYW6E0s2LCD3P3f+pxyF4i7f
rRqLCX30ED8avDMK73+4dr05igGmc6EiY1ujcGwxiR5A+BGVpLYFM74ovEX+
mhSgxgJxbsHBh2xR6Hf7Yvs6ov41Z73uHPwZicr0eY8LekyYlW44XTYZiZyf
WdM9Uwx4VbMuYuubSDxeKyodRiL08ai9WU53JPZE6HpTthL+t/PG3qUHkehn
En5rcpYJWTZLfCH1kcjTzC/9ieCniPGTM2PlkUjWvSJv/TIXbMMudZqfj8S1
VsExXMR6reVv5Y8YkXi95bxW6QYi7+ToZKhQI/HIjPy/fELP+bbke5VHR2Jn
Shg4eTHh99UJnW3+kfhL7e9XbVsi7ygdkqI5RaKI82OWMZFHHrdmsS2bRiKb
cW43ZTgXbhx/MxqiG4nBuuZbbkYzIX9wd8s71UjM/dcQd4bOhASv5CILhUjc
pn8iabcoE1y/98S1b4/EiU31H5xzWGCYImmrKhCJp5knOzkJf7CXN0LlOkck
Avu9nZZEHtla8EhQZCECl9MCht8R/1/esfkHbSYCtdelzO92JPBd59O7/DYC
M31iiyLcmNANTdWhLyNwc+YlNf/NRL7t4s59/zgC7aSTYltHmHDBzjHQsjkC
q9euZKSXMoA6UWn0uJJ4v/9ITXVDLvhGrMgduhyBAnwWFrkE35mzma2tOB2B
z3tfqr/+Q+CbXvJRJDMCSZOSF+m7mCC57edDekIEmqu1MfRCcoGzTK9kJTgC
i3Zxf99E6Onc/rOkMPcILDO0LVTxZUD//U/OH6yI83w4qXzOnQl3jY8ctTKM
wJX8fXeGPzDh2lCOyBP1CASpt5LfzudCjs/IwqF9xPnE2v9jEfMa+XPPYIV0
BBpdLHIzlSb8L5l0R1Q4AqWHGEpskkzQXN93Opc7Apm1o8Xrf+fCriLpCLbl
cCQNih6oCWLCerkos/Bv4cgzvNz5RzcX/tx+vHd8PBxt1j9X3yHGhFGtLeut
B8OxU+bBsCDxv45uv5knz8JxKF+3WbOCAZUOdzsPYzj6FtlcLE9nwqlPvNdv
1IXjbs+7F5b1CH2Mcs4QKw3HE8aVS2xEvnFnr/FiFITjF+V5ULAg/BBjle4q
ejj+droq0LaOCUqiFlIRpHB0Pe30r+g2EzZfv8r2MSIch0vKputtGcCm8nvU
2icc7fOEqbYEfibaDFo67MPxUYmae/ZuQh9NCoqOnAxHy5y0bCrh5+qHp+Ju
aoXjhjpXgS0bCX30U7fdfjAci4dWV8hKsiDtN12FKReOO3aN3NtE5FF/6ltB
dtFwLH24am+zAAMsNij9iOAPx3WbH2gEEfn38AVK70f2cFTzDZP6zckEaflX
1Ta/w7DJWvpYWgMT1jXsyH36OQzXf+iu9jxD4FsnJlBtJAyH9ZOXjoYzYPBF
h1HlizAU3D2xdzfRrxanbbvEHxHrv/LyfmdnQtlUwFpWQxhKvrqtV0T4V3pM
y0f2G2E4saO2i9OVAdFr+B9FXgzDyjcV7h3TDHBguZZMsMLwXabuUY7zBL63
15Fs08LwktTNkry3dFC4sdqlMzYM1VNem/cR97vhkNVR9cAwvDqjsyulhAl/
H5WKVLmEobHO/irjPjqMmf1ZELcIw5agCGt201xoHzUcZOmHYT3t2/MfGUyo
Dii6s/pIGP4ic1gsrc2F/D8zp6MUw3D6QCgPXYYJyWkaEZMSYcjVfYYtXYQJ
ngJMMzvBMIwb3bkuPyIXjIvf7X22NgyL+ixtxwj+3797//qji6GoHqs48Zeb
BVuaUmeqZkORl3dPXasGE9j1+zsl3ofi0xuHhC5YMOBTn+z1vP9C0WtnDVPx
LhP6XOIy1jwNRZp44qagecL/znR6Rd8LxZ/N58rnAgh8x4nqfqoOxYeX2Z81
E/eZzhksZX8lFGfcjj5/ysWAwFPI1nUmFB/xpGp1n6KDlcTGt0ezQ/Fl3jmP
KGEmqFW6t1QnEfuPnNPeWMgAiSO3iyTDQtG0+ikJifzH/YQj/pRnKJ76r2Jn
WRSBbwsbWw7bUBx35TeS78mFobFylZjjxPfjt15yajEBg/4KftYIxXPD/V4P
s+hQ/vf4D3vlULQd+HOIuY0BuRkXert2hGJNgEISvz0DIgW/VmtsDcWgVuvE
5lomOF3WzK3hDcXem4dNo32ZoLMnL1CKLRQDzkHQ2md0sI9+ki83GYIWGp16
r82YIMP0N+ftDkGVulWp3W4MmLvOxz93OwSvHDmsGP6ADg8f1jx7WRSCm78E
i30j/FPuiEVmAyUEZWX/XbEtpoPb/G/dIr8QvCF1ythXMhcUNxauSjENwW2L
Mx5cx+jApnC01V01BOtb2sdqnRnwTHcsXn97CI4JPLvqRPiLs85UVXmOEORS
/embJcUA/9idP/lmgrHJhOdkFQ8DDuQ9rfnWF4zzIQ6tJ10YsO5mYNB/TcHo
ei1n9XsdOrxq55dvuhSMva0FPpPDdLj4tm7ifEYwSunPnUuoJvzNgtUVUnAw
vpWgtQ240+HopgUXT6tgvMlWMJ5HPG9QPC96TD0YNcyfxmxh0OGNPrxWkA5G
3X+36uqQAVWu7/P5uYOxzelr12HCb8XHp5n/mAvCL1Pvpnlv0EHvtBz/wEAQ
Su/r7BY3IPJ41bNnza1BqPrzYdkC5ML4k+DMi9eCMLVPxMj1DB0a3m3Uo9CC
8Jwo069SkA7kxdurvCOC8Lxh+U92wo8ZC9m2GtoH4btNj7VlvtNAcu9ivKJW
EIr779jfGsyA6WMXVTfKBeHFbJXUg6xcaHXX+vlzfRBeyp+omvBjQHbieM3g
r0DUnLM4uss+F5zPZATdGw5E9s2ds8sXGCBXIy9/6WEg6hfwUq4S/fz59PkE
tSIQYTnZy5XgjycfQq/4sALR5L3HyK12BuQtbXI9HhuInws09qf754KXcIPo
XpdAfOr2ymLyFg2UlOxfC+gH4qb/zrn4tdBh0Wgp//fuQDTYEycVSPjlHs9L
5kObAlHKb+BjMbG+MFmHv/VvAB5Yt3Td8xwdgs9NPLv8LgCrui4YTBXnwqG6
rMy0jgD8bpMdf38TkR+7duv5VQcg17TGS4MmBgx87FllfCYA32mJcxZy5ELJ
SnjrvqQAzBIpK/80QIOorZsTBD0D8Gb7zhsmQzTQ2t+k+scoALXnScu7zzBA
0Njx5xulAGSVi8dPy9DhrfdKDW4JwJrnedu+XabDDVJJ0JUVf2QzvbHxayEN
kgv15DMm/PG61F7x10qE37z9acL/uT9WxT23mGrNBdHunCsnb/uj6+PvV7Nm
c2Fyco+rcpE/ap5nTB3PoMPdVX2imyn+GCHRUfhyPhfSRKJeL/j6446Z5iMP
iPObHdxyZsTEH5lC3fd0s3JBxuSu+QMVfxR4pTPWt4EJX32d+a+J+ePuKBO7
lVIatFFWdWWuIfYLOCp6S4AOueevZgZO++HZ96UmdALPtncM9Ez7/PAB07xH
1isXdr+YWnWgyY/Qzw13mT6Efn+mtwpf8sPAY8pSv8Np8Gy1UsJiuh+O89h0
qP9jQL7YK9W3QX44yTGjlOqZC26qMT/bLP1wMWeLrmcHHQ6abastVfPDqoPk
sMy7DFjxbwnKlvJDhY16+zdvJPJIqqt8MJcf8gbUUcp35sLFi6snzeZ8cXpO
9cKHJDqENZZeOTjgi7I66a2Zr3NBvc/QdWurL/I3J2888ZDA98yM6NJVX2zr
e3yPe4oGbziYr8dyfPE/mTe1SPBvqfj+M4/CfTH32NX6K9x0iDvcb15u54vS
H7TebshngJ5FHD9N0xd/9ndM7blFB/4g0a4QWV9U7YkhOzTmwPt0zLRY74v0
g4Ozinq5UHXJXU/1lw8+CLlVuW6GBpRmDnaRYR9MvWB1kmmbCydelbcut/mg
dpqr44nXdBCfPZ7w/roP/r1y7kcShcDj2q+qj5k+2Ngs1Ko4zIA7knk/r8f4
4GRxVOzAexpkqx2spTv74PQV9acr+3PBymowKEzPh/AfgfvfaOeCXEiCvNVu
H1QZc+1JKSDycub2yUObfFC5dcpchp4DrSUProj+9cbt+pUnIJPA4z1PV7Z3
3lj8H1d/4HAOOPWvFRt/4o1H1rWMzU4wYN9cxesnVd44v8TVfnGCwCPXyTM3
8r2RdjLN6UkgDXqkv5kzEr2xqbYvnnmWAYVHT/NHeHhj8+MSt7xWGnjZqHZZ
G3njzSNVxr+FCTyGDWUeUfLG54uf7/8m/NXqnCS97Vu8kX35RsPEdQKPVyXY
2Ve8sCqUlWKVS4OS1oetHz96Yf+XqTXUu7kQNOid8LTLC//VXfsgKUwDze9c
hypveaFb8r4oKaUc4OWt/Mks9MKafRt2L9bmwNsdprWRZC80OEUNNlvHgAr4
EWTr64VzUfnKvc50SLI7I69u4oWP/gySOW7lwrGIw5PiKl54UOBm1x49At/0
4SurxbywMdp7Mc6XDpOlKa6Tq71Qg4v/kezZXKi7LyX2bMoTNW88pH/fRYe0
ofbXVb2eeI9y+pvoJhqY/vQ9k9foieSF6g6Dlzkgup7XIrrYEyvC3jgevZwL
X2Wr+e3TPZHHMORm+Tc6NGuZdx0N8sS4jbtqLsvlAt3hV6akpSd2ms8tpobR
wC7qnB6HmicOGPErnnuRA7sZauyfJT1xZnNJ/t+xXJgvH23tWueJIWkdJe80
GdDWRk6o+eqBpRwDWa7xNMgfljl0ut8DzcxHF+3MaOD2+8nPmBYPROZW3i8j
2XBgQ0Ctw1UPlHvz0FHmCw1Wdq0PhhwPFLzSUbljlAadOrXy0uEe+OrDhoXV
6QQenSwnOe088OXITC6HdC74xcxfmQIPfDbGPBQ5mA3qrELX7p0e6PNZMcZJ
hQ5rbxwVq+PzwIRHVxL2L+TA0KOx1/k/3TEmevXfK8a5UDpKPRP3xh1pGxoN
qBdzIOzPTgunNndcsTmZ+sI6F3QFOvm1rrsj+6bMt4/bcoB/d1CXDNMd15ax
nVySo8F7vQ1Z62LcMfdRyumWmRyocrmlN+PkjskvqmomvxP4jrNmf6Hrjnff
CwrJ3MuGE6cWWm8puOPsSnFF1UMaCFeeTzgr4I5lOjWMzD4aTD+GQwkLblhy
oXP1pvhsuDP2/qfzmBuWPRjdffl3DpD/ptVqP3HD9ekBGj90c8BScFfwzio3
PLOx+kuAeDaI7+mS5853w475Zv4s0Wz4YRAy+SXBDWm19a8v+NOg1U3gaq+7
G/KpxXz2kcwGVkK9a70hsV/stG2kQw445tuKFexzQ9YXn3VCYnSQrV58nSjs
hvnTPNX/vc6GxY6LZ1yXXdGl6eYdzvocePxey0L3oyvm9jexVdJpUPBvnF+u
yxWPPOUWWXyaA56bM7t4brlixtnptZ9rabBvn0LW1wJXDGcYpypV0GC1Ubfe
S5IrGhR5UhIO5kK3Rxh7g48r9m1REp9/S4PLSYJYeNIVb3yquFaynwaBZxsS
kg8S+91+/saZlgOatfaH3EVdsUS2gbuZLRt4ni391FvtiiuXnhmRrmfBzada
HhavXLC4Y/GXTBkdLJYyhreVuGDpwU6FvPYc+Lyv2+p9iAtKR53XONmTA0xP
wZ7rR11Qsf6tj3heDuw8Z38sjMcFb5edy3Fxo8O9Z5ceHHrtjMI+gjL5+jng
sTJxhK3MGU3mlj0qlnJgUVnx9pNIZ5Ry+6rO2EiHS94RigxtZ7yvttOX834W
HCpsKrXe4IwqSx1N3gQ/jjxfEd8+6oQH07Vld2VkQcQq/YKPN5wwQ+NRd1t4
FvAcpAlUxjmhzq8jj823Z0ONb19OpIETSjVNzqsL0eDY+S0c6kJOWHHllsJ5
4vlLj3Py6g+OOLDGTeJ2Gg3SVl+b76xxREX1SQ2Zd1kgojodmpfsiHndYnKP
j9Lgvr/SlN0JR/RvKrG4uJgNthdjPCS3OeL6vSz3w+Z0WOptGf406YAuaw98
l5XJhnyONdY19Q44KSSRkWdMgyOHjXpiqA4YGNro7FKTDS8CmcfAzAH/SYhb
sLXQwPdS/wNOcQfUe3BGwFQhC/heiap1z9hj5v4QL1sC/9fWetzOb7bHtUVu
VT26dDBSu67olGmPgadkKGeJ+Xsf/LVUxtoeD6itS3Nenw2xJQclZqTtMXG3
7ccP9jQQ608ouPXNDh0K/Q57udGgnqtNIAHtMNj22YaTPjlgf3QdTZtuh0cf
NvPGE/rwPfQkB7eDHaYt2Xj+6M2Cs1dPJ/fK2aHZGx+F75eyQHFwaP7cb1vk
eivCsUWXBu08kmGuj2zxoO7xRb+BHPAHnynZPFtM2p7dbMFPB/aISo+vLrb4
iMK7PZfwN2WlP4bvKNqiHB+ZNs7MARg6bJ28aIPODZO6f62z4T8+Uo/eUxvc
fkTA7SCB93itx8f4ztrgpTVnUzXPZoJAFG/bK08bfNq/kC1XQoPGcnO188o2
eFfs3rd2cg6cHD5324PNBgXUklx7gQYT/G8VFbqtMXvA15crhwY5OjvKvhdZ
I4NC1XDrywSpmACJZj9r/PO08shKQjZ0VNQWkFWtcaeHN8NfmwYuo/MChhzW
eLvqcPmqe1nAIaBB2/DSCm9e3rnnSngOFOmlcgxeskI/0VH2qfQsUI7rTC4O
tsJtlYPTBmLZMHhzwx9vdStM2FLdY5RNg5Ax67A93Fao0VxiEb0qC4QEL0z9
GrDEpje1VmHdOXDT4INHyzVLvN+RZ8k3mgk6CbtGUiMsUTqfpJ7/OhM+V4VY
n9CyRD3jhM9cvDmQ8r6+ZxO/JZZ22Bt0j2XBjs3/jr0ZtkC9T4a/Kk5mwz1D
7baSCgssujpQnqVIA/ekTDX/WAtsUj47c0aEBgs13beV9C1wzYvPDs58WcAY
F9yzsMkCP399aPHpbjaobHEou//OHGXIHUMGx7Kh6/hlicxqc5Scv1k8oJkN
4SmTBSZJ5lizfXVk7o1s4LqluEn4uDn+nN69+GNLNlyaiKCNbjHHnL3L6b2p
WaC/rZmjdMIMdQxlzt1ZnQ3DxmwpQbfNsNxFtUuQmwZUsv6fAxQztD53Moxp
kg1b62lh/0zMcLXeAX2Z6hzAT31TD8XMUH2b5HrHNdlgLbrVM2faFJlLXfan
adkwY+IyYt5kipU67pQvARlwinrNeluGKTplZ2wsPp4Juxqme95ZmqLX9q0p
DR6Z8GJKyfC6lCl+TlVXK4vIhC71udR3Yybo7SFOPsqTCX+vJMaEJprgwfV8
Z/8j+FCfh8t/RdgEKzTSLMaJ/0WE5zvm3jqJZy+5cstuyoTW15ImYiYn8bP1
fWrRj0yY0azSujlljMIn6irHCXwfKj9yQC3dGLeE7+TOnM8AL/4nOzsljVFf
21YlkeC7U9EWW+1aTqBTBxtTsSsbRkfe8nyyPYGjbjZvLnjnAJ9e4HL0z+N4
3afLRWg5C2xv/pnjYB7H4J7Z8mJWJqRtSvtwWuE4YpvmiUizbLgVv7Ff+okR
SiV7KicHZcHKuwsdde5GuKd+nVLA40xQNJS/q7VsiLTOdiHbvCyIq7lT+aLA
EJs5hoNGvmZDmbDOJZeDhviNpBwudyQDvif35M2+OIZRjRai3cT5xScc0pIC
j+FQRPvjx3NZYGz8KYZ33TG0qb/BJ6eQDQW3I/2Lrhggu1b4MXbnbHgssspJ
Hgxw9mWV1DWubNhEpZs0DeljkxXvbBXBL5pTW7WPRetj4s/fzV3KGRBsVnpg
YKM+Si5xHI13yoTmRmVZ70o93PfwX82PuGyYFMetv47pYbiZ9pVPBH73Zxzn
TR3XxZh/A2+y/maB6+zAsgBJF1stRWtZ97Oh0srz22URXVwX/XCznUgWDN2b
+7CvQQddpQ7stBjKgnUySf1oroN/rN+r/HbJAoscrqcnZ7VxOOzqYbnUdCB/
z787kqWN9BbD2DCLTHhuJ1UVuEMbN1blbMseyoDF+1WXFu9roclhGrX/XQbI
yamdynbUwu1ZXcc/v82CSMaTtK1/NNE5ITV2r0Y6lPy2iC0/pYkhmmvpchez
4IvTmL/qXk38Zdsd4amSBSrZr5tp+YDum87ZqwtlAsv2e3FFlwaC7ZPE6bh0
2CXLk9axWgNHDgnGmuZkQeovaf+JI0ex6Ycln7JIBog9UjdZE66OX/gWvU6J
ZkF0ntUBqetqWNYnGv5YIAv43YK3ao4dwa1P/kWZ/0oD/70Zy07CR3BOW3vE
9XM6tC8Vf0g4eRg5dvjyXdXOAqeuxo6CtEM4mTxmuakpCxoLeysb7qkid+XG
04lJGWDqN5X33w8VvJOQnK6rnwUVqqtjf8irIPvLtbPSAxnAySnqtNH9IJ5/
oFfATczfxVcHtPcWHEAlS4PAS1LpsFBiLGv8Yj8+b3p8q/15FrDCvHkD1u5H
cRmwdA5LhxlI+ZapoYwcBxPMtr9Og9T15/pLo5Twu7QB36xNBrwdrrn76OY+
DDg1viaHi/AL1qe02p/sRT8TrTt9qhlw5ccjnlUqezDk74n52f8ywI75+z/1
q7tR54bojHdmFmQryl2KFVDANN9nfDU1GQCddv63Sbvws0tbSmZuFvzyzjkw
NyuLa+/NlZ89nA4717QsKzjtxM8hq+clw9PhzaXZDp9nMhhWO2XGzMwAHg2J
U1cOSyOlr1ijb20GPBgyc3pbJokzD3bUHtbKhO8xVFmRzRJYPrRxTsExA07u
8v9QuU4MlRIfhIb9zIBm9+cxOz5uxRzV9coGwoQ/ubCP98KDzSh9+IVJpHwG
pPefuiR4cRPWk/iHTz/NgIkN8wdo8Rtw05eG+kDrDLh2+nbe2ipuTKUYpgrR
0iFxbcLd395rcFXJfeNLdukQ/4fS8Qz+tY4EeYiJLqSB6T3xA5YeX1uF3o2l
DgVlgMnRCUcd0aetyn4rHvduZoLZtZtpyv+912Ab37uvtzETdvoZfmv+80tD
96FlwYGrGXBPa9QkWGcVbLf0i3jxLBMmuoVlU7LXgpWP+MDv62kgbW+2zOjl
A0mxIyqxemlQFtHub8orAGcUYhqKX6aC/mH3/sG9QmBH4wn9sS4N3qwsa7lZ
bAHPoWqnKz0ZEPK4qPJztAiUW19N+ELM23raoa3hhdshD8ZXDe1LA/Pr/tpL
oxIgZ2mmtIV4L8V7OPZBqBTc+ARlcf6pEBCytiqNXQbWnLeqGHdMB7W+/z4Y
nt4Bl1uMW4ArHdIPXt26fqcsmC3ui9uckg4vzoWb9DXIQYnXAHv57XQoXtRM
O2MoD3T745zPFTNhypn/rv0bBdBcY18/rJoOTQ9G5rYHKULqWeUO7u40WL3j
5s4Py3sgw38LX/NSGsjqHq2yOLYPGniUVltpZwIjSubpwY1K8FLCO1DqPRUO
lPGMCw8pgVeQ65GGhAw4P/h9eaFEGWY57G1LW1JBi3to63DAfkjb8/7ioGg6
XFd7cKD1wAHw+Tsqe6YgDU4GlZtcWjoA53a1bQ2IS4MfFxn+lMcHQeJTl9Fg
TRo4vIhO82SowODTJzt9XFOBjd35kr6tKmRIJj3aXJsGfvv17spJHoKit2Uj
24j6+bx293NPHQLDB3Nizz3Toe7Mpm8zdYfhSIMnu3JyKmzr+MvTk3AEFJcb
Nt9oTwNceLezVlcNlArbzLeYp8JOhadap/jU4XJFL8mS+N9zxxrHqH51uPj8
UszpvlQIzz0bY1N8FJxTdhj7bafCa0zOO+yrAenjT64+VUqD5G9elSJKAEnn
NFjbFqkwIWXcsbQAUIeNO98ReqQnX/gtxE0TPqiSV7Rk0uFvG9/KWLsmdInV
dD//mwpdDmRec3ktmL7cSopOSYPinz+3PszVgnd7ONZseUMFC7qv7IEfWnCC
rmZ8czQVduwcPnDNRhssX45r6nIS9bSaaG++pw0uuz8NLYanwQ2bhyYZEjow
8uvcf4+JeUiZU3H6k6oD6Sn4fTVxfuWsCn+/zzrQt7ZbYo1+GnBIbY8dMtaF
fP0978Is0qGxmZV2vE4XHBR6kody0iDHguPUvc16cDh7wy0pAyrATOwlxQQ9
uNbUZZ3/XxoIpM1UXnyrB9f1/I6UlFJhXMz1Lr+uPiSs+li6tCsdzt152UEq
1wf/BQcT9R9UCDAx6P/GawD5uQ+CM9pTQfxT8wf3MAMw1dypWTRMhW+kPd9e
/mcA5RUXoyeOpMGjrSXLukeOgVDG21JXVjrE1Anx3rl4DIKyvO9686WC0fGs
rbKrDeF+CY8zvwwVVj7823nOxxCeduTovFmTCr2JoQe4ugxhC0090ICHCmlC
41rx+4ygt3v0a/ZZCthU2ZhMnzaC2gdfFexFqSBv8MzRccEIMq/6D5xOoMLI
Ww3/507HwZQ38ntrRSrUxNbFaLQdB3G3kSdPWijgtXFnWvXOE7DGA76eT0gF
lYqCPImcE7DtpV0mt1AacOvwXWJ9PQHjPGeb9tMo0PKGVMluaQzWZTZVaRzp
wIz82RzRaAx/G0c05VbSQJfPt2Nc9CS0WFfH5DunwebSN/9ZkU/CrixX+8/S
VHiqYfLh8ceTIBie1sF1MxXOD7TNqRqZwLu0wAmXwFQIDlVZLq8ygZavhU/o
J9OAteY/DjqXKdxcJ9p76QYZ/r7IpbWrmUKB51wZT0QaWF44tmk5yBT41+g6
T4eRodWPvVDlkik8v2OamtJKBlmVexIhfabwZWBb8OE9aUBmjy4rW2MGn5Iu
VllNpsJU9949Yypm4OUwmhzbTQbdos+3t/iZQfqFn3tmFFOh0ueKmlmRGRiO
ZjA2jKXC2gNObVnPzWDrr+x9+0VTIYxN2LBtxQxyLjhsuWBPgaGuFz1/lcyh
8YKfCp9sGhwoyLbe72kOnZKn7noQ9V3w0h0JOGMOURODPwRM0mBeadnjaoc5
3Fv1r7xiJwXclhumhv+ag2eVR+6fOSp0doaFCSlawKqI0a+xhyggc1bhj7GL
BSiqXK1POkMFusfH5HSWBai9VbtuqEmByb3FHPjQArpt900MLKeC6T9b2vwv
C3g2niyW95cEzR0Cm/bJWcLXyoOOmZ8oIJjfVeBrbwkne0q9t92lQpJbusRl
miUIjQVwZR4hw4CiZtnrVks4Q72uNdhAAc2/C4oC3yyha+7OgdllKhQ+vnXb
SNoK9KrqtRJ2psKaU0FqVCsryPI/7Ln7BwWCXGTb7mZYQXGk2oqTGRmeKLw7
9rPJCnLFc+aePCDDvj+FPbtnrEBo8fiLhhYyZD+ytPbabg2l7jXGvL8o8IO5
fuSCqTWwhsz+5R2lgqNTh0c/xRroGtseW7JToGEXZWp9vTUY2TY6nVMj8Phb
Lcxg0hr8KylhNwRTIb7t13zKVhtorjR7+DGKBB9yq5Mbj9tAaiX7pUqZVFB3
8OP4lmQDTaNV6nutKVAqK03bVWMDR5O0BRJ3kYH/57CA+3sbYM9le8GcooDf
/TMFhYK2IBu/TbBdgwx9NFOJl/q2cMdS3fizWQrstuMu44mzhSKZn1VzURQ4
s+ORou4NW2j8ecvUm5MCK9+SbieO2MLsNYmwtFkS2LWqqtXz24EcXXKFNkmG
tuxvD75o2cGurZwHqQQ/itrcOLYz0g54HA4x/9xPgTRprx7nUjuIkerX//KP
DG+/brc+O2gHez9cCDIuJoHhvcHhHm57oF/4LJstR4K6zDyPdUftIR2OxMNV
MvBanZjSDLGH5pzhjMBHZIiS5AyLu2wPIguD6x8Q5+35gvO1L+2hcE5tt4sa
CQ41xyVPcTjA7wt/E5MnyFCSvp9D+pADaL63eaGYQYJF8y85Dv4OMPe+W0ir
jOAT8TKB0+cdQCVu6xRPZRLgtGtBV7cD1JKetvJGJINc4zYJjlWO0PW30l5u
mQSU1FelR/c7QuahLEplCwmmTXMVo70cQcAmYremNAmsxI7drjrrCGmfxm5J
7E+Gqs+r1CafOoKNHvnYXDIZtty5+0D8nyP0zx2lt5OTIZwSdcx2jxM0r+9X
EWaQ4M3JvT1MVyd49p9+sAMkg57IZ6uneU4gZvXuSv08GS5OlgyvancCpmEZ
/sunwLrbjh5H5p2gnX2VD5WaCG6kzVPhu5wBB0mNf4TJ8OzEi9AbDs7AmWue
bWCQBDu2Zs9/oDvD+fSkti5nEjA/6iSL3ncGP476VtH8ZFioXVpj9d0ZEnst
f5/QJIFFckMOXcYF2KvkI9lkkuCeUZjAY2sXWO1yrPeJUwpsFlYoWM50gW9c
DTGdtcmQ8mFcXPWuC4R4+NIXnqTA5+qLpSFfXAAm2YLpXIkgqXFz8yt+Vzgh
61n7JzcRrGW47OfkXOFV8KHKv7IUoHJ7X+DVdoXT4nJCO9QSoHGubUzOwRUe
Skva570lwXi/uIxepCuc/BLgZxpGgq0tiT5udFdQC+j9MjuZCCevvK5IKnUF
kdvlJZzLSZCQpTJbgK7QvfVX9TFiPmpCTindGXQF18t6QoeI+oat5iL7vrmC
co9+45coMmxUN26c5XaDl9R5p3IVEuhLVSxyy7jB7LaRfWpL8RCxbi3IHnWD
FK+zx2PGUqBs1oOiY+0G7Jkqa5r3JsCrV/fbXULcYEn6vCNrTzJw3RXjSsx0
g+qHnMU8W5NB43L8iXOX3aCxqXK9OMFvARkDjNvNblBo6lGwhzcZioMOvHzx
0g0Gc+tX2ptToMuCtfnLjBvsEVtvanaMDKuOzNpxcbqD8OhC8Ee3FNgjcfzC
DnF3MNJlUM3UE8CDs3xM65A7BMvkZtvvJsPZmTUyzmbu0OirLP9tYyI86nPz
ifd3h3cRl13ZtFJgobG14gzVHa5frrx4JJwEO4tFZuvOu0OSVsQ/wWES2KfF
KvXUu8MtLmduzv5kYAT8Fznd7Q7jotYxLx8S82Cm3Lj2kzu0NX2J5/mYCN9U
GYvSqzygKPDdAb1LJNi+fUZDc5sHPBdMlK/UTAHzNYYUx/0esPSs/2L8r0RI
mbrWHnvCA0jDo6eKXqbA7RfsXPleHmA7Hf5qmEWCz3dcTtQme4DmH4ejofOx
IHThHuP5WQ+INNp8RfJTEhhRt778XOMBN84ra1yWSYYYv+jNnJ0eUO2eJ9Oh
mgw3TV7aSX3wgH/R1oPeoSnw7uC+Cxr/PODtpG96rlks8InSx+yFPCGPohp0
3yAetNmnpGP2eMLbt2dqdQWTIeSTvs8pA08oXOK89tsnEa52X6modvWE5cxA
WqZ9LPTeZpt9FucJgy4r+o1fY4CjyEnpU54nrKk9tG2iMRmOkJsj19z0BD5/
jVb75Bjw8RFulGj3BBE+4UdxJilw3jhyUX2UeOap8eFMjIWO/b0advOe4Mw/
3UfvSISlrXsoURu8oOTIdENZagIos+W0s3Z5wTNSg4Ds/XhwmZhcV6XtBUdr
dOJOlcbD6S7dE50OXvDuL6i6JsTD/brLjIlIL1AYChracjsOfp1b7mPP9YKC
zIVbbQ8TQSrFYbN4mReIMR5pj4omgY1Xo53afS+olq1V1y9MBtpxoQs2r72g
TjKLotlI4FEpfCziuxesyu9M198QB1+Ee6SZPN6wbrIpYyAzGbYtK/jclPGG
whG92/5CcWAynlnRcdQbeJsKIvSFk4Ha+fHLuLU31MUZr0kg+K2mRltpVag3
9G8LcqXbJcDHM8WRYlnehL6pMzLeRIFA0r+GwyXe4KhHcYuxiQcDD7tFq7ve
EPFNLN24IBEiDO9ohL/yhnhTsnzw/QQo37uJkvvFG36pnhRskYiDEaHQ9gpO
H3jV6/pF9Xw0cP/rWvdE3AduG8+3dI3Fgcb7XSc+HPIB8c0jk7+eR0FARzpj
xcwH/AyObvxVkwiXqj70iQT4wMTd0xxJVrHw6vT/NJ13XM3v+8cpq0QSoahI
iZRR0aArEto7Wtp7nXPqtPfeg+z0McpIGZlZr0RGSfbKXmU0iGT/zs99vn/2
oNM55/1+3/d1X9fr9XwZyuhk+NOQVZ5T3qtF0+D4bU722/zJvOyg8uq0WFrg
+aOcc9yfzu9Z7bOwN5K8V6x6XtDmT5Kz5Y8eeRtNG9WPKu3r9Kfvzrnb7MUT
qElayr9pcAB9t7y/IPIHn358D61+IRtAshL9rePU4kjjeXPXb80A2qihbmp3
NZ6cL82YJ2sRQJZaBXa1L2OopCYjcoFfAFU0WBpvtY6is2tfnLBNDqBNN1ee
y1WKpk8xBj/DNgVQrV3XjWiDaFJx32qQfziAMk94yUrW8snOeCB1T3MAja+c
NvBffxxlqzk0XXgVQDzFsdfsJ8bQUam6Ec9/BdCgpRIielKx9O7baPNf4wPp
97GyVYZRcTTlaXDxxDmBNC3u6E3jHj6ZXrxyS2tlIB0Jdt2ya0IMpVQry9h4
BgrOuXVnCpPjqKYkzSk0LpBGX69TqRoTTS+inpXnrgukQx6m+47l80nSbdHz
qhrB60utWtWSFUdGRpuVGpsCKbgsXW1PfzRFz+z3e/o0kKwkpp66cTeKKiXt
qn98C6SHXn9Hrj3GpYdfD3bJSAUJzpHqJ/sU+DTsscQ8zVlBdO64yYzzXjzS
awyMtDIKose/K+Qeb+QSZ++lE8GuQeQTbrw3ZHsslRcp/czmB1Hr7j1uUmcj
6EZkikFlURDNmrn8yYkSLv12fpLasCeI5v12eXVRPJY0l+g1PW4Ioru1d9Ov
FHHJfcbGEd8fCn4WrdspcohP60Z9MRvfF0T6rwqu1OyKpKt91sXzJILpWYT1
rABtPvU/rL1loRxMovs2F4wbFEWzGsRlggyCacfatHV64jxatdvfKWtVMG3f
kUtbaiKooOBi+U5OMM2MGSWnmBtDDbypz8/lBlPB88hj0qMiqWt1klL7zmCa
pGLWZO7CJyVq9/t2Opiizk8MU2mMIitlnWrpu8HUZLtcQr4uitJHru+a0x1M
Fnd6P/fN5FDdp09zzYeH0JWAYQNyj8Lp7X3LyADFELrh2e42TTmCZM/tP5Gh
G0J3uszOH/kbRcsrR/zcbhtCLf5nO/+T5VFCnq/B2eAQ2v2i87b8Ag7t4zSm
PswIoV4PraKbhjx64qjQ9HVbCBmvnfR2e2A0jV2cMGLsiRB6k/s9q6opgkjp
oZnGjRAytV/mwxnLowixBcWm70IoYYz7MMccDm3vWXvLTySUis+obOKHRNDd
uz3j0+VCKV/9/pqxgXwSOWPu9J9WKLmqFKVmq3Jpwc595actQqnsdLfeastQ
CskZ9vy+XyhNGftHr+0+lzaHeSt9SQ6lOy/XjsAxPrXaN/iN2RxKImbVBy68
DabvelOqZ9eFUv3DM07+2ZE0Z2pc18qWUKr9kPt1+HgeeQ+/P9f3dShNWNRk
k/hfMJV0aUam/ha8vnTRgM3DCGq6XXJim0wYNe3QGt57L4w+13f9qJ8TRgs+
bnh46wCXVLabGtxbGUb+Id837coSPI9Ze1I/e4bRsZAb1w5f5VJOyJCm0fFh
9N+q9qkJW8PpjK3nCLWyMOJYWV276RpJ73TOma2oDSODFsGBeFwIKSjIFXtf
CqM8seNzdyWFk/nQmFvJz8LodsjNm+OfhFHKhzvjywfC6MOX3lupNYK/c3Oe
00mpcFqesuP2pIccenmiqPzOrHDyO5BSOKkjhGQqPjzrNQonB7V3i+8PjiSj
jJVKo9zCyeiAtYFqYgTFBFX5zYwKp89iyy4O6Q6gGmuRauPicHrdW7hgRb8f
PVzg3uW5N5x83yqofJIVrINTzsxNOh9OYYpX7G+MCCR90UmRWwT3WddXm/Ry
wwAKf8c/cbwvnDzfJfzcd4JL1/0DEwOHcSgh5Fzvl1scevdown/fxnIE9X/P
vRrBfSlqeakh8/9zWNU+bjM/GE6Tzke+lJ7NIUsDWY3gxxzS0lIaslOHQyf+
/JWK+xBApntuKs815tCK1tBbiREc8pFNWXHOhkNWMgunLN/Do+RCjUDzNRwy
064INZbzpw2DnuQ9CuLQw8Wzv+4eEkaHIvJrAqI5JOvpcWFA8Lxfeqt7vT+d
Q4efbjm2382fXjh19mSUcKgm7Zj3t0Eh9O3aBinpbRz6ctJOa5ZTCEkZGmvu
2MehZWIp20/FhdDsI332c45zKMSq0v53dAgtVdkZdbaRQ5N3ziRfMV9y3Wy9
yayNQzkfbhhCVPA8SPytf9jOoVMTFrlevR5KRcm17f6dgvd/KlP7ir8X7f3s
8vvrFw5N97+p/yw/lM75iitkDOZS5JyFa0eq+tDDBycNx47m0njXYxNPCfaJ
HjN/r+2yXNrgIDJv1I0AEsP4DI0ZXDou/cRro2wgKc6/WHVGk0u9Mv12oSVh
pFfFu2xqKLguqqtOlOX5kP3Eqe8emHPpvMvD5wbyoRSc3ybu78Ql5TMxWccX
u1Pmn8TZX325pDfOWv53QACVc2dbpvO4dK0hPp6v6U/HXz8Kl0rmkvmIMjOV
xx50c1Vu6X/5XHqzUDPswpEA6mheeER9E5dkfOVrX50KosEGb++cruRSZmT4
QPt+H5pwuKzf5DCXFi4MTggSF9Tx040mPjjLJW+V1+cKZbzIZOMnXb9mLrmN
fJnCWeJJ3uLbXb7c45JFjrSs8rhASky0TEx7xaXG4dmTlOaHU1nvr4oxvVzq
ao0df60yjA5472+o+MUlyVtSoUs++tPFe04vZ4vxyClhs5RDihM9Mxkx5LRg
HWhrWDhox+hA+n7muLLJNB75vmwarlziTpJzfVfc1xCs40qiozYYeNOsXdKB
vvo86smR7FMf60eGMo15fSt4VG73/N7b5kByyeXUpNrz6Nj8kseqUzyI+0v+
uqQnj/yuB2gdvOJGBeGtPdtCeSTx6PWgdwm+tPtlvNTsOMH7SVYYmrzOh844
zNI8lcUjZ6czXt+y3On+lQf2K9fxaK5RndmNWZ7UpZ8dde8/Hk0dl6K4ssiH
hh/U3uRTw6O1+t7bx/usoWnTXtd/Pin4fbEct5vnbEln/dr2lCYenUx5Hbvd
1J5sRyz5PfoWj1znVK/XHu9LgfE98tue8ujHh5uy4QkelNG9zVDtA4/WSWw9
+WNCIG3xNPeq/8aj7d195lLyvnT0zo/0FUMiKDtnu+eHkz7UtmJf1d0xEXR0
/xnX25k+9ObUqsveUyJo6jo7cZlLLvRXfdi7TzMjKOGqgoc8/Elmx1HxlAUR
tOdpSmnKLS+aO8579mijCGpVuTPvzjo3Ms2Wsiy3iiBNpa1Ka+XdyPMHwme5
RlDK+fAq47NulBAaVnoyIIJ0dy77U3fUitY+n3xkOT+CujwmF4uG2lGNXcud
O6kRdG15Zd/zj8Z0+VJsv1dRBIlJRjn6uHrSE13ViZ+2RNCrFwazp7f50rea
e7rJeyJoE799qu0nSxqlmOky6mgEiY//JZNx1JtU12kmbm2IIIcJdEzini3R
sJcVM1sj6KJpfmSWpCs5xZY0nBDsEyfyFKms1ZYiPhq8NH4r+Hwu1xR/zLKm
PPcu0TufBa+f4f4w5uAaqry1VdnrbwQteLhzZMp0czplbLqid2Qk/TycZfe0
1YzunhwISJoYSZHyZxYUJ7lTj9qePAnlSBq+6Mj+iE8uNPQ/h5ot8yKp6qD+
GYcBb1IcO+S6qoHg92Vstnncd6OFmXU9x00jaW6kcZvnuWVkM+AhZbwqktZP
8n85XHsN+QdLat72jqRrj4orUetBaU/P2ntyIunEnPYObX0DKrcJiepJiKQJ
/mKXZ+/WpbqLspsScyNpUVuK2vtpztS68Gr9yA2RVNBtNqHhqRi9qo5u37wz
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
26Prm5d9XWdeBEWWx0fhztZra6kEwrw+ir4/v94psghpLM+P1gX7jEm9IHge
Wd4fzTS7PEz1XjFesTxAskieMzPlTzEmsbxAWpO62XuO4P4W5gnS03CeT6u8
YP1leYPkfaRTx+pCMYR5hDTU8Zbs511FeMzyCklW/tIgCUF9NYrlGdKxyi7e
2xUlEOYdUq9HxzeJFUXgsTxEshK72WFfVwxhXiIt8jQstbQoxG2Wp0go+8EZ
vL8IQ1jeIqnTH02f6kJoszxGmrv18q5wbgkCWV4jjbwrZ71ZrxDCPEd6ebzT
ckxgIa6xvEfyHlM3ZsV/RRDmQdLNw3ZhLjIlmM3yIumez1HRvn2FWMPyJOn3
08IDy9cXQZg3Sa3mizbEXSvEBZZHSfvz3fmxE4sgzKuk84daFe0E65Eyy7Ok
xqGi4z/OKoEDy7sk43tFK84eLkYWy8Oktc0tmTs/FeM0y8uk3nkNAyKC/VSY
p0lHN9otFxWsF5NZ3ia1DF5s27S0BMI8Tkofel/+e3YJklleJ904PgPjxhTj
EMvzpJkL3To2xRVDmPdJ6WuNx34PLsJ4lgdKfxNsUtZGF0KYF0qz82TDf/0q
RhTLE6WbL/V6W72LsIfljZJZU/5Yp5giPGB5pKSgfEr+cG0JJFheKUXwddep
nSyCMM+UpiR8b34kVowwlndKTY1y2r2WJRDmoVJPdbmvTFQh2lheKikF535N
FdR/g1ieKjmFf5Pb4VYCYd4qOTX01zsK1hs/lsdKB0wqFCV6iyDMa6WYH2YP
pp8vwhWW50qLrs3fVjK1BAOz/uW9Ulec2vz5gvVrJsuDpVcJ+pzFj0uwhuXF
0jLD/q830oohzJOloZIz1iZ3FQIsb5ZGtYU3hkuWQJhHS6OqO+ziJxRhKsur
pe97B3mLGBTDluXZknLyAjnNtcUQ5t3SyaUtom9MiuDK8nDp1/yZUffOF0KY
l0uhtbaha6uKUMDydGlp8WeZudnFqGJ5uxTtVvrw+dsSCPN46Vtonn7CjULc
Z3m99GeVo4HoPsH7Y3m+1F7bs2qPYP8UY3m/5EfHE6R9BesHywMm3+7Ay3sk
SqDL8oJp3B1O+KTKYvwfS1cajtX3dhuVpBQNSKWMqaQSKt2NylCmyhBK0aRU
5tkzz8M5IhKJFGlCCMUtIkmGhCikEtGEVFJ5z//t9/G5PM85e+91r7XXunxY
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
gx4brkTC30/TCuwpf7pUPoVTnRUJjL6EkkpKT7bQbNKdiyNhPBdvwiCJroN/
H/dURcIVO9cVNZRfCTx8sy+gORKe5bYWK+UTKG3ZJz/xXSRsYz5Ouu5M4DWr
Kfpnv0ZC68+6C1xnEosx30b9TyQ87jjSLjlM+dPzqwqaJ9DAXmNRTXUhgb+e
TamaL0cDvfox+zwo/WVPfdPqOYMG24/SRnZujMKZZgV9N+bQ4NDeVycLdxOY
GEn8HlSjQfmzhet771N+ruCI/DoNGswbTTTOmhGFeQMb5jOW0ID5fLF8P3Xf
bVk6W//xChpU1twzrhYQWOf5CRSMaHCz1cepXUzd/0kPbRxMaWDhkeFFo/Du
eXHB/eIWGjwO/XBtVgaBfjN9fbrMaWAzpeLghiwSx1pZMJfa0GCK0soID4JE
CVs92ncvDQKVXdWs/1L448/UQhcauMxjeAVS+KX9rM0de4gGrrkHhr7IE2iw
Mq1ixzEaJM1bHjXwivKLXhHN0lM0yG/5UDaP8qMWV/b0NPnTAMKUxjy+S/mJ
9qXDamE0YMtb3jMjqXmZO2GKJ4M6D49LV95XEvjV9qXKDR4N/FsSicZnJIYL
s/UGJTTgsmK37t1O+Y1y/vq1MTSYyV7WFd1CYszfAzvpF2iwN+ue0zzqeYuM
jd0qk2lwqfBV93IrEm+dmX5qejoNupbfO2J+lMR1199H7r1Fg41Xud8X8Ck/
9q6ISMyhQapjqJMf9Xz7+THJ7wppoD/Vcuv1H5Q/cziRrfeABnezfl2YaxCF
J8gtZT6PqPPlGC72rqD8eZXK84KnNFDtftm5NZhE1oSBd2Oe04DWsc3pbTE1
nxseD21vpUHc03cmbeMITAi8JCN9TYODdTePkWMI1M0KnNP0ngaCQ9dOTDhC
5dXeXTpqn2jwlZ62YOY4yt9paJl4DNLg/jhWby91P9e6/jG/PkyDi5nrS1+8
J3Bf7HPngVHqvLPv/ll8l8K77rqXiQwd5BsX5ChnUX5/CjOMNpUOfR6zJN5S
EsdsdRY/mkmHdbGz2ZMofMThBhenKdPhdtXbJN/XUlS+O/n2ngV0eE+v65tO
nefVrx2YoEmHxtEIgb1WFBosuVv3Vo8OGL1bEE35yeJDks4lK+mQop25x5bK
X5aJngNnjOlwZ3SP6ylqfpqa1o8v2ECHaW+mOhZQ/tpDQUlpzDY6nFve2JBE
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
p/UaFlQfmlNKUvN/b0uNbOx6Fuz2mjcaspXCO/yKSvtmFhxLW5o2Zgul53lh
eprmLNhwQuzmdIHEA1/t15+wZsHXDbqfOR+l+ElXb+edPSwI3Hna0XQWiUGH
xrn92kftr+NYf+9WKcoktnhvOsiCjUquP0yfSvFsU2Yk7ygL5BT2H9NUpfKk
Ao+o9WbBWF1j0w9Ufrhuvj95tj/1/kd33/7v/xFrmGuyXUNZ0OXOlXSbSbHs
vnxZKp0Fhqe4qpoOVP74/q6hj8sC2pwI9jTqPn2lf//dSgkL5kouvr9STvH7
2Nmh4GgWRIxWWpjuIfBbynGZB/EsKFlhsymA8uv0V5vmTE5mQRmp0kwGkSg/
W1nHOo0Fb3f3ljYXEBhv/dX43E0WNJ6r8ir6LEFt/iPztjssKGgxL9iYIcXs
0ovOGoUsWKTcnfK5Uorw29/Lq4QFW+NWrq5KpvKr4c6w7AoW2Hd3HzoaIEXH
Uxri4WoW/PXJHdf/V4Jd6SOJGxtYMEfZw3mLkMDTb57d4rawYHBsOUMOKD1X
zcCaDhYsO+19NZbK77w99LpZ71kQ9XvV3d8vJThL6tjp8pF6XvDz8/kMApMr
9QcuD7BgIFPlbcJrCS4fN2l8308WPGhoWJt/nMR769oVV46y4H2my1qNmSRu
98/VCJ7Ihv7gMXFXplF6fktkWCLHhhPPLsyJ2SPF/T2HzCbNZIMmcz4z1orA
j+rrHHbNZcPzfYtrT1J+PXjfzKMx89nAHrbxjaLy58SYD0GvNNhQ6BHWT6Py
QVRNCX+xHhvuKm/f3kn5N7XJcfHHDdgwKtM6acVEAjM2nbqeZcQGS8c0+l0X
Kl+Gmt3/acqGU1ZZ5oHU+ZXmqD2FrWw4ltJjEj4qQZvP39o4Fmy43X5+Yjil
Fy+1qz8/tWHDhQtxNTepfHPU/fKokgO13rqtrRUrCRyMD1FwcWXDkkqfexmU
36Q9t1W/fIgNjmODbpb9JFB+mu7K3mNs+EKk7+uyIPH89jFbDE5T61F6uSPJ
SIJa9Gb7oAA2+DywnfjyK4HZhbc8MIwNq4vy1r5TJBC+sf1lmGwQ7PWr6dsh
xcfLXDk7+Ww4z/o9S4YjRYcjq2OjpWxgvDrVqHlCgu8uyaW/jGFDilzmPifK
L51qfZO/KIENOm3lGad7JfhHsfDxsRQ25b80LEOo+4+3k2zNTGfD/OwSxbUc
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.022441469474083278`, 
   0.02244146947408327}, {-0.017823427653731263`, 0.017749025951657706`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.77153315268717*^9, 3.771533222898468*^9, 
  3.7729814167642713`*^9, 3.772981546752708*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"73d27224-8d52-4fd6-8f29-0de3e791d7ce"]
}, Open  ]],

Cell["\<\
Don\[CloseCurlyQuote]t forget to freeze the parts that have to be fixed when \
training:\
\>", "Text",
 CellChangeTimes->{{3.771430933789163*^9, 
  3.77143094582791*^9}},ExpressionUUID->"63d9e6f3-0a69-42aa-917b-\
bbb70c0ffbd9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingresult", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"trainingnet", ",", " ", 
    RowBox[{"<|", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "data"}], "|>"}], ",", " ", "All", 
    ",", " ", 
    RowBox[{"LearningRateMultipliers", " ", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<Jacobian\>\"", ",", "\"\<addEpsilon\>\""}], "}"}], 
        "\[Rule]", "None"}], ",", 
       RowBox[{"\"\<MinusIdentity\>\"", "\[Rule]", "None"}]}], "}"}]}], ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<ADAM\>\"", ",", 
       RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.5"}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771247046865926*^9, 3.771247048679696*^9}, {
   3.7712470787565365`*^9, 3.771247086372901*^9}, {3.7713275492107897`*^9, 
   3.771327579317671*^9}, {3.771429596236251*^9, 3.7714296515610247`*^9}, {
   3.771429755517665*^9, 3.771429757118301*^9}, {3.771429795372838*^9, 
   3.7714298009237223`*^9}, {3.77153323819985*^9, 3.7715332564331703`*^9}, {
   3.771533299145425*^9, 3.7715333272329473`*^9}, {3.7715342460148287`*^9, 
   3.7715342479660416`*^9}, {3.771534282714764*^9, 3.7715343375244637`*^9}, {
   3.7715343963224936`*^9, 3.7715343966032934`*^9}, {3.771534507189704*^9, 
   3.7715345209021697`*^9}, {3.7715404838498774`*^9, 
   3.7715405035773726`*^9}, {3.7715405833971806`*^9, 3.7715406162776217`*^9}, 
   3.771544160965495*^9, {3.771544655443059*^9, 3.771544663664427*^9}, {
   3.772881746511156*^9, 3.77288182334968*^9}, {3.7729814795324416`*^9, 
   3.772981479866582*^9}, {3.772981568281146*^9, 3.772981586564294*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"7979b8cc-375e-4c61-b5b3-4937a8b061e9"],

Cell[BoxData[
 FrameBox[GridBox[{
    {
     ItemBox[
      FrameBox[
       StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
        StripOnInput->False,
        FontSize->12],
       FrameMargins->{{10, 5}, {-4, 2}},
       FrameStyle->None,
       StripOnInput->False],
      Alignment->{Left, Bottom},
      Background->RGBColor[0.96, 0.96, 0.96],
      Frame->{{False, False}, {True, False}},
      FrameStyle->Opacity[0.1],
      ItemSize->{Automatic, 1},
      StripOnInput->False]},
    {
     ItemBox[
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"summary\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batches:\"", "33260"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"rounds:\"", "3326"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"time:\"", "\"27s\""}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"examples/s:\"", "80188"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"data\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"training examples:\"", "629"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"processed examples:\"", "2128640"},
                "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"skipped examples:\"", "0"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"method\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"ADAM\"", "\"optimizer\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batch size\"", "64"}, 
               "RowWithSeparators"],"\"CPU\""},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"round\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                 "\"1.68\"", 1.677224911376834, AutoDelete -> True], 
                 ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            ItemBox[GridBox[{
               {"", 
                ItemBox["\<\"rounds\"\>",
                 DefaultBaseStyle->"LabeledLabel"]},
               {
                RotationBox[
                 ItemBox["\<\"loss\"\>",
                  DefaultBaseStyle->"LabeledLabel"],
                 BoxRotation->1.5708], 
                GraphicsBox[
                 {AbsoluteThickness[1.25], {
                   {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
TAcPpnz/+p9VXQq4/5L6Vd//Ay53by4=
                    "]]}, {}}, {
                   {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
                   {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], 
                    PointBox[{}]}}},
                 AspectRatio->Full,
                 Axes->None,
                 Background->GrayLevel[1],
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6},
                 Frame->True,
                 FrameStyle->GrayLevel[0.5],
                 FrameTicks->None,
                 GridLines->{{1000., 2000., 3000., 4000., 5000.}, {{-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {1., 
                    GrayLevel[0.3001]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {0.30102999566398114`, 
                    GrayLevel[0.8501]}, {0.6020599913279623, 
                    GrayLevel[0.8501]}, {0.7781512503836435, 
                    GrayLevel[0.8501]}, {0.9030899869919434, 
                    GrayLevel[0.8501]}, {1.301029995663981, 
                    GrayLevel[0.8501]}, {1.6020599913279623`, 
                    GrayLevel[0.8501]}, {1.7781512503836434`, 
                    GrayLevel[0.8501]}, {1.9030899869919433`, 
                    GrayLevel[0.8501]}}},
                 ImagePadding->1,
                 ImageSize->{302, 182.},
                 PlotRange->{{0, 3326.05}, {-0.112, 1.112}},
                 PlotRangeClipping->True,
                 PlotRangePadding->None,
                 Prolog->{{
                    InsetBox[
                    FormBox["1000", TraditionalForm], 
                    Offset[{-2, -2}, {1000., 1.112}], {1., 1.}], 
                    InsetBox[
                    FormBox["2000", TraditionalForm], 
                    Offset[{-2, -2}, {2000., 1.112}], {1., 1.}], 
                    InsetBox[
                    FormBox["3000", TraditionalForm], 
                    Offset[{-2, -2}, {3000., 1.112}], {1., 1.}], 
                    InsetBox[
                    FormBox["4000", TraditionalForm], 
                    Offset[{-2, -2}, {4000., 1.112}], {1., 1.}], 
                    InsetBox[
                    FormBox["5000", TraditionalForm], 
                    Offset[{-2, -2}, {5000., 1.112}], {1., 1.}]}, {
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    InsetBox[
                    FormBox["\"10\"", TraditionalForm], 
                    Offset[{3, 0}, {0, 1.}], {-1, -1.}]}}]}
              },
              
              BaseStyle->{
               FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                GrayLevel[0.4]},
              
              GridBoxAlignment->{
               "Columns" -> {{Center}}, "Rows" -> {{Center}}},
              GridBoxSpacings->{"Columns" -> {{0.5}}}],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"},
           {
            ItemBox["\<\"\"\>",
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          ColumnsEqual->False,
          
          GridBoxAlignment->{
           "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {False, {
               Opacity[0.15]}, False}},
          GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], 
              Offset[1.1199999999999999`], {
               Offset[1.75]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.8]}, 
              Offset[0.2]}}],
         "Grid"],
        FrameMargins->{{10, 10}, {10, 5}},
        FrameStyle->None,
        StripOnInput->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Alignment->Center,
      BaseStyle->{
       FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
        NumberMarks -> False, Deployed -> False},
      StripOnInput->False]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], 
       Offset[0.8], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Background->GrayLevel[1],
  FrameMargins->{{0, 0}, {0, 0}},
  FrameStyle->GrayLevel[0.85],
  RoundingRadius->5,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.7712470921490593`*^9, 3.7713275671155896`*^9, 3.771327632265649*^9, 
   3.771335674811412*^9, 3.771348060288856*^9, 3.771425071743907*^9, {
   3.7714296410147133`*^9, 3.7714296549848547`*^9}, 3.771429721479094*^9, 
   3.771429767157854*^9, 3.771429824590098*^9, 3.7714299197089577`*^9, 
   3.771430014333067*^9, 3.771432299869401*^9, 3.7714352089965553`*^9, 
   3.771436284363997*^9, 3.771436334294784*^9, 3.771436866441619*^9, {
   3.771524806935855*^9, 3.771524826350263*^9}, 3.7715332399226103`*^9, 
   3.7715332709125223`*^9, 3.771534249941715*^9, {3.7715342860386076`*^9, 
   3.771534340225231*^9}, 3.7715343978623934`*^9, 3.7715345099763374`*^9, 
   3.771534549087354*^9, 3.7715347239766083`*^9, 3.7715404546432447`*^9, 
   3.7715405935170727`*^9, 3.7715406551193085`*^9, 3.771544183017167*^9, 
   3.7715446810873117`*^9, 3.7728818526067142`*^9, 3.7729804596808696`*^9, 
   3.772980522386208*^9, {3.7729812759138756`*^9, 3.7729812809643717`*^9}, 
   3.772981444637742*^9, 3.7729814936985636`*^9, {3.7729815539075766`*^9, 
   3.772981596953481*^9}, 3.7729821083471184`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"b1eea28a-543e-4085-a63e-d256f96219c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "=", 
  RowBox[{"LearnDistribution", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", "\"\<RealNVP\>\"", "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7715447881643496`*^9, 3.771544842089373*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"a4820af0-53d6-44b7-a23f-1f2bad21c625"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["LearnedDistribution", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1:eJyFXHl4TkfbzxPZitJQa7WK0Iq1qnbm2GlVtEIspWqvV1RpvZZSte8iJHZV
ak2LlmpImGOpfY8QUSJCEmvzJCKLLJ8+9/nNuc593lyff+b6PTNn5t7nnnsm
qg3+6tNh7m5ubl093dz+bemfj462ZtdQv66hHgp/+C/0cyh8a3/wzf3BLyRw
Ldf4ZwrfdvU/UjjRhW9K6zqR0cCx1C+A4+h7hWvQ/ArH0/oKdyH6NOt4D4WN
lmPFJ2/BLzD4BQa/wOAXGPxa5RgZDQx+gcEvMPgFBr/A4Nc63kNjeuPYxhcw
b8EvMPgFBr/A4NdqJ5HRwOAXGPwCg19g8AsMfq3jPTRmlxzb9Mb5AuYt+AUG
v8Dg1+oHkdHA4BcY/AKDX2DwCwx+reM9NOZ3HNvskuuN8wXMW/ALDH6tfh4Z
DQx+gcEvMPgFBr/A4Nc63kNjcYVjm99xu+R643wB8xb8WuNYZDQw+AUGv8Dg
Fxj8AoNf63gPjcVNjm1xhfsdt0uuN84XMG/BLzD4BQa/wOAXGPwCg1/reA+N
7Qsc2+Imjyvc77hdcr1xvoB5a92PIqOt+1FktHU/ioy27keR0db9COM9NOs6
Phzb9gUeN3lc4X7H7ZLrjfMFzFvwCwx+gcEvMPi1jvfQ2L7OsW3f4/sCj5s8
rnC/43bJ9cb5AuYt+AUGv8Dg1zreQ2N5C8e2fZ3ve3xf4HGTxxXud9wuud44
X8C8Bb/A4Nc6zkOzrufDsS1v4fs63/f4vsDjJo8r3O+4XXK9cb6AeQt+reM9
NJZ3cmzLy3jewvd1vu/xfYHHTR5XuN9xu+R643wB8xb8sryaY1veyfMynrfw
fZ3ve3xf4HGTxxXud9wuud44X9bxZmu1Z/s5gufZPA/leRrPY/g+z/dBvk/w
OMrjDPdDbqdcj5xP3rqGd/XS0YJ/9rvG+m3fYRz7Xiuq5fPw7zgdRdCtudjz
89ZZ+//9rlqsw8fx3/n6fB2MZ/06m4evq0W61F0gqXXX6YyerTDZm1Phd1wT
3FMY8uHzWLHZXnTZy1kBXI3mUxjzgQ6sD4z1gQsK//2XJax0F9i+A+Yt6AEG
PVa+C9S6+B2Ytyk0n8KY3yq3AjUO8wHDrhjWMQ/5l1MA/0HzKYzvwAd+B+Yt
5gPGfMCgG+MwPzBvoQ9gzAfM9YZ1+HfAkAcw6MG8oAeYtxTO3DVgzMf5xDis
D4x1+TzAiL/c7vk5GP2Ix8Cg/3/jAnX+4v7B6wvoJ7+OjAZGPAcGfxxDL4gX
wKCX+xH4Ar3o53aN/QL9kB/HGG/ly/Q/fp5GP/gFtp5jnIo/jmFH0CP6gbm/
8vMsjwf8XIt+0AfM/QoYcuN2DszjA/qBsS7sg8cP0AH9cjvjcZDHG+73mK8o
P0Q/6MN8oAd8ww7QD8zlxOMoj1/QO9bneYx133HXrfuOu87thO8D6Iec0Q8+
gbEuMPInHl/xe1F+Cb1b83Mnq3OY+wDH+N6aj5txmp9L8Dv8D9+Df465nNEP
voAhfx7P+XkL84E/vq9xbI3XDo3HfZ53c3rxPegFhlyAQScw6OPxmtcRuF55
nYzHS34O5fGR1yG4XfJzHI9nvE7D/Yif63n84eckHh95HAYGveAT/PF4xuKF
rf7E4wOvP/H4wOtb3N95fYf7O68Pcf/k9Q/uf7yewv2H1xO4fVv1mC8drnHu
+t+ufk8dvx9wffdUrnDJ7bnkv6Pt5vo90bCHdIHWRd7L88Dof+H+HLHMNY+b
hnY5tTpaY7w+lsYb+k9X7T5aT3Si9Qw+8gV+RxtC9Brxx1PDOLQucRU6NH/X
glcV/xmu8VES9GA+8A2+QB++h3zwPejFeugH35wfyBHzkx2mStCJfpJjMQ39
kAPkn+canyJAF+SAfugB/ZAP+iF/8AG+jxFWdAKDfowHv8DQP8bDvkA35PgW
0aPkhH7wiX7Qif4xJA8dfEOPoAtyRj/oRz/0DLmDX8gNdKMfdKAf80OumB9y
wPfQO76HXpEvQV7Yz/Ad4gavsyC+Qb74Hr8jvsDfgSE30InxmB92AbljXmDM
h/Ggk+sJGPRhXvCLeWBv+A7joC/MD4z4C36wDvQJ+wDG/JgH/GA+xEdg0AHM
7QbrAiPeQh74HXRhfmCeZ4FO8I35gSE/zIN4D/nBX7j/8HOK9ZyWrvwH8wGD
D9gd+ClKDhgPPnidxHquc+j83GWtlzh0vu9bz0EOW14PjH28qDpKUfskMPp5
Heh/z5uv9jueZ2G8NW/LV36E9fg+bs07zThTVB2F5z38HId58Ttv0Y/xtK67
Zj2HOTT8zlv0I34j7sK+gGH31n57C/0iniMu4ztgfs6ynisdys8xHnIEhp1D
L6APfoO4Dgz98hb2wvMUfAfM80pgfA96MR70AnM6YYfWukmqaq12maq+Rzzh
dRWsg35gtn/r3D5BN/JMa15p7nvA4AvyRzzhdTrMZ7X7fFu+x/Mc0AX9AUPu
vA4F+4f+uN6BQQfGgw70gw5gfq4Btp67UlV+AH0Bgx/kC8gTgIuqo8IfQR++
A33ARdVN8T3iOMZDjsDgC99b66oODXLAeORFwIiP8GvIGxj2CYz9Bhh2zzH3
V/wO/WIeYMR//A49wd6x30IvHPN3BpAz5In4zPMIyJdjbu/4HnTB/vg5C3kE
sNWezDoM+q33qU61PvqBeV0H/dAnMPQO+4SdW+0rX+W/1nOYWVdBP843wOAH
+ga/HCNfgP8g3iPOAUPuiIvWc3g+yyuzVV4Du4E8gEEf7A/0cAx743GWx2HI
F99Dnhxb6zP5ar+APIG5HVnztFQWF1NtdlSU3XG7BB/wf/CJ+ACM9XneAv8C
/9h/wC8w+vm9APYX+DMw4gDvt+YR6bb6DOwE64Jv0AmMftgr+oGt9zcFaj+G
PfJ7UdSTgHFehr3xOpOVbofKbzC/C3b1Unk3MH83yOMh5AL98Lox+IK+OX38
XIH5+D0m1gfG+rAXYGtdxcz7IC9gyMt6Ds1W5zDQifwE6+J7+Csw7N6al7mr
+iHyVSufBZLrBRhxC/aF9TEf+ObzwY95Xcr6/sZpq1NZ39M4VR6Gfl5Xh39h
fugH46x1qBxVb8f8wIgLxn6q8gJ+jwJ64C/Ubb8XRRzA/sDzJx7feXzm8ZXX
hRD/8B0wrwPBDiEf0F/Uvg57tOb57up+FfZj1Zt5DkM93Frf9lT1FH4Pz+s+
oIPX60A35oe8MT/kxO8xrff15v7N7835fQH6kQfyelJRfgh7QT/8wpr3m/cm
sA9+Puf3wrAnyB96h754XsrrJfBLjIP9We/fC1T84vbJ771BP68rw96gV+iN
vweF/jAedmvdr9xVnRB6wH4A+wA/1jpWtq3OD3/lcRqY5ye8Lor+oup2sBes
g++Bi6oL8zoi5MDlAnuCnXP+8Tv0ba1LpbPztdN2Prfew6UqufB7e/6Ogtcp
+DkLdgsMOsEX4i/0Df8Ghn9A/4jT1ncq6bbzDDD4wvqQO79n4O95sT76sT6v
m1ntJ5/ly+Z9J/QCe4HeeB0S8oG88R3kiu+sebT5Ls3690VOFR+s91L2dzZY
D/EF9gX+ef7BW3wP/nmdiO9rPP5az2/5Nvuwvp/1VPbA7314HRP2YZWbU1jr
XuY5HvyDziNX/jwxqZH5fmnIiW03S+d42t4bLYgoX9p3hZuS45wBD7M+PeKm
8q7YMjWCDo0vVPcJkUszRzVv/VxO8DvXfkFp8/0Q5PDt4827X5uaI7f3HBcQ
quXZ3vv4Bpdvvn1phpL7D5/0qyFvZSi/7Ls5a2zOBqf8pcqxucn5+bb3OoFL
ZzVcvOOeHNEkfX61qDTbex1Hr4WJvzZOVfT679vTouWLg7JhXr9OlcvmqXWL
LXqytXuFNIXvFv954fkNZv1/XPKCjOgZnrb763m7C9OmXtgjhi+rt3WETJL8
fYqxnsqXG2zxHl6vwV1xr29aWMOR5n31z82rtPzN94nt7w+6puz21/omqnz2
9HGf2KXF0kSj7wZlT/wsz/aeP/LYyvc2j3ksrvi955VV7pztPUjsL4tXz5n7
RNG/Kyes9xsiU6TFJt4cOStN7c/go3G/Yd32lMxU+97tlPRNtctnKv4OkP7V
+jWPdv6z8s08Uapzx/oR/S7Z3mvIN8KvJ+ww6zhxQ7tUOjjWfG/+dKVv0w43
zfg4a97zjZWTzPfmS0bVGvxiskML+vnB+olZL6T3/MH+47906FcLkhMqJ2TK
ak8u1HpxxqH3HPRPsex3n8rteR2WD45x6Oe/a7Yi6vEt6fOo9Z1x3zj0vM2t
3H9v5qkvHH00fN7BPOl0q73kfN/HsuHTf6YG+mTK8EtH5i796pZcHrAtQJbJ
lB8emuFV7+kLeYDkKzf+ePdSft0HotyF7Ptf7XoiJ7fbO6jskjz56ECfwFOe
v8vPJ/vXqvWuN/Qv34lIkBPaxgrHb1vPhwelijNv1lnxldse2WVlQJ12oRki
/aP+Fy7FmW1Q/W513q++V15reGb39IVu2tUvJ55dst9svx1aaVX3t4vp7/cP
mtRgWKHUk33yWvm761dba+Epb7npF3Pubwz864rYsSbGMae0m55ZOabCqfAk
senalIa/DiiQaUu+/PtZlpd++Kq2YuOAHFn3/eb1Vm3JEg2plSW3DOhbYkK2
DGw6Y9P6NU45tX/miu09n8uLTRrse3ApXXpv++JEi+tXRKOOAVV3jk6XtX+p
czvBL0lcaO/ccis4TS6IKFnvxslk1ZYKd4ttdeCwrPrzeW1peIqsN6zi84ev
nBUh61PebBVxT9Zu/2lGm3VnRZvRC/0frb8nTy79pZlXRL5s0nPc8EkTr8hp
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                  FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                   ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                   Identity, DisplayFunction -> Identity, 
                   Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                   AxesLabel -> {None, None}, 
                   FrameLabel -> {{None, None}, {None, None}}, 
                   DisplayFunction -> Identity, AspectRatio -> 1, 
                   AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                   Frame -> True, FrameLabel -> {{None, None}, {None, None}}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                   Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                   PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> True,
                    PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1:eJyFXHl4TkfbzxPZitJQa7WK0Iq1qnbm2GlVtEIspWqvV1RpvZZSte8iJHZV
ak2LlmpImGOpfY8QUSJCEmvzJCKLLJ8+9/nNuc593lyff+b6PTNn5t7nnnsm
qg3+6tNh7m5ubl093dz+bemfj462ZtdQv66hHgp/+C/0cyh8a3/wzf3BLyRw
Ldf4ZwrfdvU/UjjRhW9K6zqR0cCx1C+A4+h7hWvQ/ArH0/oKdyH6NOt4D4WN
lmPFJ2/BLzD4BQa/wOAXGPxa5RgZDQx+gcEvMPgFBr/A4Nc63kNjeuPYxhcw
b8EvMPgFBr/A4NdqJ5HRwOAXGPwCg19g8AsMfq3jPTRmlxzb9Mb5AuYt+AUG
v8Dg1+oHkdHA4BcY/AKDX2DwCwx+reM9NOZ3HNvskuuN8wXMW/ALDH6tfh4Z
DQx+gcEvMPgFBr/A4Nc63kNjcYVjm99xu+R643wB8xb8WuNYZDQw+AUGv8Dg
Fxj8AoNf63gPjcVNjm1xhfsdt0uuN84XMG/BLzD4BQa/wOAXGPwCg1/reA+N
7Qsc2+Imjyvc77hdcr1xvoB5a92PIqOt+1FktHU/ioy27keR0db9COM9NOs6
Phzb9gUeN3lc4X7H7ZLrjfMFzFvwCwx+gcEvMPi1jvfQ2L7OsW3f4/sCj5s8
rnC/43bJ9cb5AuYt+AUGv8Dg1zreQ2N5C8e2fZ3ve3xf4HGTxxXud9wuud44
X8C8Bb/A4Nc6zkOzrufDsS1v4fs63/f4vsDjJo8r3O+4XXK9cb6AeQt+reM9
NJZ3cmzLy3jewvd1vu/xfYHHTR5XuN9xu+R643wB8xb8sryaY1veyfMynrfw
fZ3ve3xf4HGTxxXud9wuud44X9bxZmu1Z/s5gufZPA/leRrPY/g+z/dBvk/w
OMrjDPdDbqdcj5xP3rqGd/XS0YJ/9rvG+m3fYRz7Xiuq5fPw7zgdRdCtudjz
89ZZ+//9rlqsw8fx3/n6fB2MZ/06m4evq0W61F0gqXXX6YyerTDZm1Phd1wT
3FMY8uHzWLHZXnTZy1kBXI3mUxjzgQ6sD4z1gQsK//2XJax0F9i+A+Yt6AEG
PVa+C9S6+B2Ytyk0n8KY3yq3AjUO8wHDrhjWMQ/5l1MA/0HzKYzvwAd+B+Yt
5gPGfMCgG+MwPzBvoQ9gzAfM9YZ1+HfAkAcw6MG8oAeYtxTO3DVgzMf5xDis
D4x1+TzAiL/c7vk5GP2Ix8Cg/3/jAnX+4v7B6wvoJ7+OjAZGPAcGfxxDL4gX
wKCX+xH4Ar3o53aN/QL9kB/HGG/ly/Q/fp5GP/gFtp5jnIo/jmFH0CP6gbm/
8vMsjwf8XIt+0AfM/QoYcuN2DszjA/qBsS7sg8cP0AH9cjvjcZDHG+73mK8o
P0Q/6MN8oAd8ww7QD8zlxOMoj1/QO9bneYx133HXrfuOu87thO8D6Iec0Q8+
gbEuMPInHl/xe1F+Cb1b83Mnq3OY+wDH+N6aj5txmp9L8Dv8D9+Df465nNEP
voAhfx7P+XkL84E/vq9xbI3XDo3HfZ53c3rxPegFhlyAQScw6OPxmtcRuF55
nYzHS34O5fGR1yG4XfJzHI9nvE7D/Yif63n84eckHh95HAYGveAT/PF4xuKF
rf7E4wOvP/H4wOtb3N95fYf7O68Pcf/k9Q/uf7yewv2H1xO4fVv1mC8drnHu
+t+ufk8dvx9wffdUrnDJ7bnkv6Pt5vo90bCHdIHWRd7L88Dof+H+HLHMNY+b
hnY5tTpaY7w+lsYb+k9X7T5aT3Si9Qw+8gV+RxtC9Brxx1PDOLQucRU6NH/X
glcV/xmu8VES9GA+8A2+QB++h3zwPejFeugH35wfyBHzkx2mStCJfpJjMQ39
kAPkn+canyJAF+SAfugB/ZAP+iF/8AG+jxFWdAKDfowHv8DQP8bDvkA35PgW
0aPkhH7wiX7Qif4xJA8dfEOPoAtyRj/oRz/0DLmDX8gNdKMfdKAf80OumB9y
wPfQO76HXpEvQV7Yz/Ad4gavsyC+Qb74Hr8jvsDfgSE30InxmB92AbljXmDM
h/Ggk+sJGPRhXvCLeWBv+A7joC/MD4z4C36wDvQJ+wDG/JgH/GA+xEdg0AHM
7QbrAiPeQh74HXRhfmCeZ4FO8I35gSE/zIN4D/nBX7j/8HOK9ZyWrvwH8wGD
D9gd+ClKDhgPPnidxHquc+j83GWtlzh0vu9bz0EOW14PjH28qDpKUfskMPp5
Heh/z5uv9jueZ2G8NW/LV36E9fg+bs07zThTVB2F5z38HId58Ttv0Y/xtK67
Zj2HOTT8zlv0I34j7sK+gGH31n57C/0iniMu4ztgfs6ynisdys8xHnIEhp1D
L6APfoO4Dgz98hb2wvMUfAfM80pgfA96MR70AnM6YYfWukmqaq12maq+Rzzh
dRWsg35gtn/r3D5BN/JMa15p7nvA4AvyRzzhdTrMZ7X7fFu+x/Mc0AX9AUPu
vA4F+4f+uN6BQQfGgw70gw5gfq4Btp67UlV+AH0Bgx/kC8gTgIuqo8IfQR++
A33ARdVN8T3iOMZDjsDgC99b66oODXLAeORFwIiP8GvIGxj2CYz9Bhh2zzH3
V/wO/WIeYMR//A49wd6x30IvHPN3BpAz5In4zPMIyJdjbu/4HnTB/vg5C3kE
sNWezDoM+q33qU61PvqBeV0H/dAnMPQO+4SdW+0rX+W/1nOYWVdBP843wOAH
+ga/HCNfgP8g3iPOAUPuiIvWc3g+yyuzVV4Du4E8gEEf7A/0cAx743GWx2HI
F99Dnhxb6zP5ar+APIG5HVnztFQWF1NtdlSU3XG7BB/wf/CJ+ACM9XneAv8C
/9h/wC8w+vm9APYX+DMw4gDvt+YR6bb6DOwE64Jv0AmMftgr+oGt9zcFaj+G
PfJ7UdSTgHFehr3xOpOVbofKbzC/C3b1Unk3MH83yOMh5AL98Lox+IK+OX38
XIH5+D0m1gfG+rAXYGtdxcz7IC9gyMt6Ds1W5zDQifwE6+J7+Csw7N6al7mr
+iHyVSufBZLrBRhxC/aF9TEf+ObzwY95Xcr6/sZpq1NZ39M4VR6Gfl5Xh39h
fugH46x1qBxVb8f8wIgLxn6q8gJ+jwJ64C/Ubb8XRRzA/sDzJx7feXzm8ZXX
hRD/8B0wrwPBDiEf0F/Uvg57tOb57up+FfZj1Zt5DkM93Frf9lT1FH4Pz+s+
oIPX60A35oe8MT/kxO8xrff15v7N7835fQH6kQfyelJRfgh7QT/8wpr3m/cm
sA9+Puf3wrAnyB96h754XsrrJfBLjIP9We/fC1T84vbJ771BP68rw96gV+iN
vweF/jAedmvdr9xVnRB6wH4A+wA/1jpWtq3OD3/lcRqY5ye8Lor+oup2sBes
g++Bi6oL8zoi5MDlAnuCnXP+8Tv0ba1LpbPztdN2Prfew6UqufB7e/6Ogtcp
+DkLdgsMOsEX4i/0Df8Ghn9A/4jT1ncq6bbzDDD4wvqQO79n4O95sT76sT6v
m1ntJ5/ly+Z9J/QCe4HeeB0S8oG88R3kiu+sebT5Ls3690VOFR+s91L2dzZY
D/EF9gX+ef7BW3wP/nmdiO9rPP5az2/5Nvuwvp/1VPbA7314HRP2YZWbU1jr
XuY5HvyDziNX/jwxqZH5fmnIiW03S+d42t4bLYgoX9p3hZuS45wBD7M+PeKm
8q7YMjWCDo0vVPcJkUszRzVv/VxO8DvXfkFp8/0Q5PDt4827X5uaI7f3HBcQ
quXZ3vv4Bpdvvn1phpL7D5/0qyFvZSi/7Ls5a2zOBqf8pcqxucn5+bb3OoFL
ZzVcvOOeHNEkfX61qDTbex1Hr4WJvzZOVfT679vTouWLg7JhXr9OlcvmqXWL
LXqytXuFNIXvFv954fkNZv1/XPKCjOgZnrb763m7C9OmXtgjhi+rt3WETJL8
fYqxnsqXG2zxHl6vwV1xr29aWMOR5n31z82rtPzN94nt7w+6puz21/omqnz2
9HGf2KXF0kSj7wZlT/wsz/aeP/LYyvc2j3ksrvi955VV7pztPUjsL4tXz5n7
RNG/Kyes9xsiU6TFJt4cOStN7c/go3G/Yd32lMxU+97tlPRNtctnKv4OkP7V
+jWPdv6z8s08Uapzx/oR/S7Z3mvIN8KvJ+ww6zhxQ7tUOjjWfG/+dKVv0w43
zfg4a97zjZWTzPfmS0bVGvxiskML+vnB+olZL6T3/MH+47906FcLkhMqJ2TK
ak8u1HpxxqH3HPRPsex3n8rteR2WD45x6Oe/a7Yi6vEt6fOo9Z1x3zj0vM2t
3H9v5qkvHH00fN7BPOl0q73kfN/HsuHTf6YG+mTK8EtH5i796pZcHrAtQJbJ
lB8emuFV7+kLeYDkKzf+ePdSft0HotyF7Ptf7XoiJ7fbO6jskjz56ECfwFOe
v8vPJ/vXqvWuN/Qv34lIkBPaxgrHb1vPhwelijNv1lnxldse2WVlQJ12oRki
/aP+Fy7FmW1Q/W513q++V15reGb39IVu2tUvJ55dst9svx1aaVX3t4vp7/cP
mtRgWKHUk33yWvm761dba+Epb7npF3Pubwz864rYsSbGMae0m55ZOabCqfAk
senalIa/DiiQaUu+/PtZlpd++Kq2YuOAHFn3/eb1Vm3JEg2plSW3DOhbYkK2
DGw6Y9P6NU45tX/miu09n8uLTRrse3ApXXpv++JEi+tXRKOOAVV3jk6XtX+p
czvBL0lcaO/ccis4TS6IKFnvxslk1ZYKd4ttdeCwrPrzeW1peIqsN6zi84ev
nBUh61PebBVxT9Zu/2lGm3VnRZvRC/0frb8nTy79pZlXRL5s0nPc8EkTr8hp
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                  FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                   ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                   Identity, DisplayFunction -> Identity, 
                   Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                   AxesLabel -> {None, None}, 
                   FrameLabel -> {{None, None}, {None, None}}, 
                   DisplayFunction -> Identity, AspectRatio -> 1, 
                   AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                   Frame -> True, FrameLabel -> {{None, None}, {None, None}}, 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                   Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                   PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> True,
                    PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[LearnedDistribution, 1365760, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           LearnedDistribution, 
            7991510226916621506349272593511063030532925579179502561056, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LearnedDistribution[\[Ellipsis]]"& )],
  False,
  BoxID -> 7991510226916621506349272593511063030532925579179502561056,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.77154485705823*^9, 3.771544929812026*^9},
 CellLabel->
  "Out[157]=",ExpressionUUID->"ea81b3db-03a7-4497-be68-dca30cd27ca3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomVariate", "[", 
   RowBox[{"ld", ",", "100"}], "]"}], "//", "ListPlot"}]], "Input",
 CellChangeTimes->{{3.7715449388237753`*^9, 
  3.771544971564458*^9}},ExpressionUUID->"e8b63814-61ac-4f0f-9dd0-\
95770e98bdf0"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.527190958203103, 
   2.1792836365461445`}, {-3.2390386037476153`, 3.499046006878318}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.771544952492618*^9, 3.7715449617579546`*^9}},
 CellLabel->
  "Out[159]=",ExpressionUUID->"e0c696e6-0098-4ea9-b389-7de806c58496"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["To do", "Section",
 CellChangeTimes->{{3.7715458826652436`*^9, 
  3.771545883385559*^9}},ExpressionUUID->"7b035ac0-689c-4df8-acd4-\
8f627bfb233d"],

Cell[CellGroupData[{

Cell["\<\
Train network with LearnDistribution with method realNVP on MNIST\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.771545263902272*^9, 3.7715452771901417`*^9}, {3.7715458656319013`*^9, 
  3.7715458713357563`*^9}},ExpressionUUID->"cd1b41ab-eda9-42da-aac6-\
26a113e44c18"],

Cell["Extract Sampler and ProbabilityNet", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715459658294754`*^9}},ExpressionUUID->"66105fd6-9462-4fd8-8e23-\
d81c09a0ee41"],

Cell["Use ProbabilityNet as a feature extractor", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.77154600557452*^9}},ExpressionUUID->"c6bc0779-c7f3-4c48-bfa3-\
f0cdeaaca3ef"],

Cell["Feature vector from data should have a normal distribution", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.771546019440454*^9}},ExpressionUUID->"2289084f-7c83-479a-af96-\
dedb881e9daa"],

Cell["\<\
Give data that is not original distribution so you should have something \
different so you can learn this distribution using LearnDistribution - but \
not with RealNVP\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715460589103346`*^9}},ExpressionUUID->"f1456225-6cde-4d92-ab28-\
cf43d74d8155"],

Cell["Idea is to learn a simple distribution", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.771546069053322*^9}},ExpressionUUID->"61973021-92b7-48c7-bc9c-\
116e8dc39b31"],

Cell["\<\
Get new data \[Rule] pass it through probability net \[Rule] this gives \
features \[Rule] then learn distribution on these features \[Rule]If you want \
to sample, just sample on feature space and pass it through Sampler net\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715461624311404`*^9}},ExpressionUUID->"e6e00c02-fbd2-4e45-8906-\
13379f34499e"],

Cell["\<\
For example, train on digits 0 to 8, then give ProbabilityNet digit 9. Then \
you LearnDistribution of these features\
\>", "Item",
 CellChangeTimes->{{3.7715451450892353`*^9, 3.7715451636378374`*^9}, {
  3.7715452696908073`*^9, 3.771545273259976*^9}, {3.7715458867068615`*^9, 
  3.7715458921080785`*^9}, {3.771545943287504*^9, 
  3.7715462202755013`*^9}},ExpressionUUID->"42f2e06e-1af6-439c-b90c-\
5f07658053a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transfer Learning", "Subsubsection",
 CellChangeTimes->{{3.771546260506615*^9, 
  3.771546266978289*^9}},ExpressionUUID->"583c0676-a2ca-4b8d-9b39-\
25a02a72f6f6"],

Cell[CellGroupData[{

Cell["Suppose you have a network that is trained on a lot of data.", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 
  3.7715463036100373`*^9}},ExpressionUUID->"d36d8751-1c1a-4663-b027-\
febafaded811"],

Cell["\<\
Take a network, trained on big dataset, as a feature extractor of the new \
data you want to learn from.\
\>", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 
  3.7715463566604214`*^9}},ExpressionUUID->"067b1bb1-60d3-4421-9567-\
5ce528287d14"],

Cell["Then you learn the classifier in the feature space.", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 
  3.771546377098166*^9}},ExpressionUUID->"b293b62a-5805-46e4-b778-\
7582c435649f"],

Cell["Extract Z_out from coupling_2", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.77154742459601*^9, 
  3.771547424598006*^9}},ExpressionUUID->"9341c339-8754-4bb2-87f0-\
07fa4f254039"],

Cell["high level features are in Z_out", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.7715474255223885`*^9, 
  3.771547455284732*^9}},ExpressionUUID->"0d3b85a2-0408-4ccd-846a-\
0bdcb78fef09"],

Cell["\<\
Z_out is a vector of size 728 with MNIST. Ask amir if important features are \
at the end or the beginning.\
\>", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.7715474255223885`*^9, 3.7715474812211885`*^9}, {
  3.771547511365837*^9, 
  3.771547511369824*^9}},ExpressionUUID->"3a73fe75-5d24-48d1-8055-\
218ade225902"],

Cell["Recreate a vector of size 728 and pass it through Sampler", "Item",
 CellChangeTimes->{{3.7715462693726716`*^9, 3.771546326813012*^9}, {
  3.771546367711315*^9, 3.7715463846495686`*^9}, {3.771547270009223*^9, 
  3.7715472974463043`*^9}, {3.7715474255223885`*^9, 3.7715474812211885`*^9}, {
  3.7715475118124733`*^9, 
  3.771547522444431*^9}},ExpressionUUID->"5a1d1919-c4ae-4f4c-8183-\
1c0d2fec176f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "\[LeftDoubleBracket]", 
  RowBox[{"1", ",", "\"\<Model\>\""}], "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.7715458386246595`*^9, 3.771545838814453*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"24107cca-933b-4b22-a908-ef3700f170db"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Sampler\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = True), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"X_out\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["8", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 3}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = False), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = 4}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwB2IQDQFKBzqel/18deuwzacTp2JsnyseeMFrbrr40Ar7
RcsivCtOKR5wXb8m+NbhXfb8M1ee3rBS8UDPnpmiZycftbdYsPfusxbFA5af
pk/wOHbOXm7PlEapGMUDITUZZ9fXXLE/+EZvu7e+4oE36UpSnWK37BWNeuqq
/ikc+HzXRjxC4oG9Xc+a68tOKhxQsDFvnZT62F7id/+hCxMUDtT5MVz//OmZ
vc/EIyef5CsciJocKmp/84X97sBFy2t9FQ5cbgn1CWl7ZZ9moxkzW1PhwDMl
hhrjX6/tvQIjn9uyKByYnBu65I7JW/srCqmTTu2SP3AzJfSov9k7+47PmczK
WfIH9nIw3O/5985+k9RBxVYx+QOWkaEfJ/e+tw+alvX2w365A0FhoX9SHr+3
nzUTBGQPQMLqg/2LyXYvJ9sh+JZ9jy36HsvA+V0dIIDg32jSBSIEX6P2knrt
JWk4v6IcBBD8E4UyxwtlEHyJnINiOQel4HyIeyTh/Jdg9yD4FmD3SMD5nWD3
IPg3we6RQHOPOJp7EPzjYPcg+OJg94ihuUf0ACOUX3XEpyrDSfTAik0OLw7c
eG9fGyBT++CTyIG5p5gWMie/t19gy7GIcbXIgXvublon5r2zf9ot8PJ0lsiB
XC3uFr6et/Y+1qZB9kYiB7yKAtdd03pjf8W77G40o8iBEnnJlQrVr+zr9l7u
UrwhfOCNYVLJm5oX9p4TfKMmbBM+sGmljoCVwTN7syOPvVfMET5wpK2ihnPq
Y/u0WbV2PMzCBxoML7/5nNhhv+XP/zvqZUIHJmUyJLBYP9wv/zpL/fdXwQNK
foGdvgs+7F+auk+2rUnwwOqlkirzrn/f75Xza/8JacEDSdaRDCXO//bz/Jfj
O3xQ4MAido7+5x8ZD7yW1eEoLRE4sEpg/r7wGJYDz08orrtnLHDg5I6PfVyJ
bAcg+UvgwH8wYD8AAFnWfDQ=
                    "]], 
                    LineBox[CompressedData["
1:eJxdlHlM0mEYx4EIBVoikkdaQLPQSrLDjcp8S8RSE+yw2bpI0nWbZeXs1C6P
MtOw7DQxtWVrXWss5+8pljaj2jTSbNlhgzI7tMJAhOJn8dt+373vnn2254/P
nufdK0xOW5hCo1AoMX+vsw5mDOSadli62nXhY/vmBKqNQpC3u9e/Wq9FaavC
1rU2CiF+XkJKHE+POiTtTxs0QnjwKD1m/vBWlHYgNFGVJYRpxd+Wqm+9RYFI
YquNE0KB/+9MZb4R2Tf06DQ+Qkjd35x9hP0FWZnLa+d2CEClRDMO+feiAL/M
O6cvCiBx896aDIYZKctkb0qXCYC1vopdHG1FwaOLql/IBFD08JxEmNWP1MFb
DbEhApC6JaVl59mQ5t7ntT88BTBmUtv1mxkDqKLGois38UE8a5T19kw7ijTF
Zusu8yF1skie22FH46Y+ZipW8qGJbb46cYUDyY9mrZB68mGZPs+r4q4DaXuT
dpfXjwa/be8PfvziQGfKnBkF1MFBzf5YEvGpJILg6YWdksLOABfn5zpDcFtO
yN9DcNCeZtGeZn8XZ+50huBH6QGN6QEE+268773x/kgXD/r4ufgT7kOwBPfx
dXEe7kPwS9zHl+TjQ/IhuBH3IdgH9/Em+Ywg+YwgzYdH8uGRfHgkHy+SjxfJ
x4vkwyX5eLrYdugUjxnpCdzEsuJn3Q6Us2SuMbmHA5GLU2IjbjmQmH1leHU1
B4oHVKL5ixzIpqk7ZljDAdoCdbBFb0ffBTmqr0EcOCm3JMgEdsSl/+B3mjwg
ynz8fGj8AMovlI2rL/AA73lLPe4tsiH5u/6Xm2Z5gFtUYtWHqf1odTdiSaUs
qLs2hLdZpcMmy7iiEowJu1oOa+O0BuxbdN4FcxgTEuLZSRdfvMVO91Ru2VTl
DmNL28yNDUZsvCzlfB/HHcKjJmj517qx6jlNgertbqC/mq1oierBOKYWRvRz
BoxcG7pYLP6JrQnLkbJCGMBqvdRVzu3DNBMN7e/2DYWzvw3cCb0WTI+HDk/w
asNSu9//euZPB6U8IwiKHJh19Ykp3zOGwLDw12f43lQ46FxPGw36KxXWSgUN
6Iq7xiMyGvzvy2oQr3TUUYG9rUJKPUyHLnz/VBDjD38o4O1NFEh2tm9gQG2o
aAZPSYGaCzcKWpEb/PuA/lV3+ANTXtRd
                    "]], 
                    
                    LineBox[{{-9., 
                    5.51091059616309*^-16}, {-8., -0.9999999999999996}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFKBzqel/18deuwzVXjso+/nise2PfdRCfnwGEb
nSC2eXlnFQ/8TPdKUV582IYtegNr9AbFAzYW2xcKNB+2SfIr0TgwQfFAU0b1
E+OEwzb2YA2KB87/mKbTa3XYZsEXz/lfPBUPKL7krJIROmzTtDz682ElxQOV
llfOPHx2yOaZSzsTz0+FA9dfflW5u+OQzdkzIKBwwOpXXhNfxyEbsPb5CgcW
7Jr86FboIRuZ44VApHCAvXqH03LlQzauLiCgcCDP+u6i4o8HbXIOigGRwoEr
vxmZHfYftNGovaRee0n+gNUetWSe3oM2FeUgIH9gYY334RtRB21OgIyTkT/A
blugvFTjoI042AC5A3l/pzQXfjtgM2smCMge2JXHs8cz+IDN2sypQvwOsgem
r1u5inl2zn6/p3b3ql7KHFi4EcTv2V/JM+3PnakyB6xL/vMbiS/Yr3N/Vq6p
q8yBxE0g+TX7c2J9DVu+Sx/InxxyVypy236T9rXuJ9dIH8gCqz+wvyNm9waW
VOkDW96sPLfu2dH96XfLcswUpA9MBOs/s/8C54OquHtSB5iS/wdKSF3a3/x8
WcCmHKkD+9onfr1lcnP/vtnPmbiZpQ5IurRd9D9/f3+D2qKJGQslD3CdeVe0
+8uj/cfar/055S554PpBb8kVB5/un7i/xcXom8SBYuZbt3P9Xux/cnZNxrw1
EgfuTZi5i2f2q/17Nvll8mdLHJDM6trasvzNfpm8LLdWQ4kDKv1rzlwtfrcf
kn4kDvz9DwLv9wMA6+EtaA==
                    "]], 
                    
                    LineBox[{{-9., -0.9999999999999994}, {-8., \
-0.9999999999999996}}], 
                    
                    LineBox[{{-8., -0.9999999999999996}, {-7., \
-0.9999999999999996}}], 
                    LineBox[CompressedData["
1:eJxdlF1Ik1EYx993y73OSJ2bOt3mnIJOYsOKygpSsou8MGO7qlRS9KIhlhpq
ySAkSSuCmh+1hfYhQrvJ1o1lsUcknJKSIjHBvvDKZbVyLp0fa++ZPoPz5xkv
P/7nPfudM5im8pKhWsAwTFHowz/DSYcgCQcL97peX5tSgytzb8PKIw4Ki192
ezvVcNNaqfuew4Fqv7GnwqiGvKoB/eiACGoLWoYnxWqYv+5vtElFcKw5R3hw
KA0avQaR6XIUtM6V1faUp4Hg1fC8/t0uOFEl3/RtqOCGKzewuCYEs/zsi2KL
ClZzHeW2LCHs86vbnmhUcGEpP6awUAAPMjos41+VoLXZjw6Os9D07GTJulUJ
H3o9S6ZyFiabDUOHjEo49S+Y3sCy0PXUMdUSrQRbv+eTy8HAbHr1/Yk3CpgY
sMfW1DPQvnxRmGlSwPRmvqu0gAFH6oimLUkBjud2oU3JgKHb9NPrTIUauwey
OAasD/mkwFb4gpyLluOhSYGNbc67uxAaOfYd7Xzk2/cZdM616tytukivNc9k
m2eSkZub+ER4rE4Zmggn14wkhQY57JNI+SSizxHiI6N8ZJSPjPKRUj5SykdK
+SRQPhJkD/GRUD7x2N8iPvHo4yY+kf5MoL8k0B+H7P3FJxaZbJcXYT3ZYA/y
AZLdyNPZ/AFj0KeeP86YGHuphI8YfQajzocmmvLhkH8THxHlI6J8oigfIfIM
8RGgD7neMRb7BOLDUj4M8mNfUZ+vKOjcWf/lM59NZLJd3QZyKdlg3bnzfvj3
WkP+6H7/o+/wKq73jWZUf1v0Y8/xXz+44tz+owCut3Yy7rYPe/+dsrdbV5ex
nyXn+4tMlnf+QT5XcfqKFrzILHlE+D/mWunS
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwB2IQDQEKB/6DAfuBxxOn7qw6J3/A9M6VHq5kjgPOvhun
fZgif6Aide4luWscB2SNgqcnBssfODE78qJNJOeBPIfq3Wc55Q8o1XN2przh
PGBdoclsukPuQBf/2p9T+7kONN2MzZseJ3fgj4+L8kUn7gNOKRJ/v/yRPVBt
fp5VjI3nQK1E5HrfybIH2M77Lky5yXPA8Jt860JF2QPzhA983bOH98AMpc7J
J+/LHLicEnrU34zvQPliF//fs2QOGCeKCk9dyHfgbEXQDrNgmQM7OBju9/zj
OzB10aZz1RwyB5KiRTXNffkPXFFInXRql/QBk8jQj5N7+Q90fM5kVs6SPqDD
dMB88X7+A5ukDiq2ikkf8AkL/ZPymP9A0LSstx/2Sx2YFCpqf/MH/4FZM0FA
8sA/cPjwH3g52Q6IJA/8gfIt+h4DkQRcvrMDBCSg4cl/4GaT7o0mXYS8Ru0l
9dpL4nB+RTkIIPjHC2WACMEXzzkoBkRwPsQ9omjuEYW7xxLsHhE094iguUcE
zT3CaO4RRnOPMJp7hNDcIwjnr8+cKsTvIHhgAjT8/J7a3at6KXDAGxq+lTzT
/tyZKnBADxr+Ovdn5Zq6CsDj59quWUkc7/nh8ZfJF90/KZL/wHZo/ArsLEvk
PMV3wAga/2d2vb2R48B34Co0fcDSDYyGpSsYXQNNdzD6HzRdwmhYuoXRytB0
DaNh6R5GV0LzBYw2h+YbGA3JXwgaAPyx0hs=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKB/6DAfuBFelvHn09Lw/nRyzhsbk7C8Hn2ZbA
vS1B/gBEH8eBQ3NeBDQoIuTrwBrk4Hz7l5PtXk5G8Jn9tz9rd0Xwz3bysUp8
koXzZ80EAQT/BUi7HYJv2ffYou+xDJzf1QECMnD33GjSBSKEvEbtJfXaS9Jw
fkU5CCD4JwpljhfKIPgSOQfFcg5KoblHEs4He8cOwbcAu0cCzu8Eu0cC7p6b
YPdIoLlHHM09CP5xsHsQfHGwe8Tg/DQwQPCNyj7+es6L4P/d4CFZsUsUzgfr
zhGFu6dxefTnw0oIedtk8fX190Tg/C+e84EIwQcrT0Xww2YIy3IZIPgQcxF8
AAz1bJM=
                    "]], 
                    
                    LineBox[{{-8., -2.9999999999999996`}, {-7., \
-0.9999999999999996}}], 
                    
                    LineBox[{{-7., -0.9999999999999996}, {-6., \
-0.9999999999999997}}], 
                    
                    LineBox[{{-6., -0.9999999999999997}, {-5., \
-2.9999999999999996`}}], 
                    
                    LineBox[{{-5., -2.9999999999999996`}, {-4., \
-2.9999999999999996`}}], 
                    LineBox[{{-4., -2.9999999999999996`}, {-3., -3.}}], 
                    LineBox[{{-3., -3.}, {-2., -3.}}], 
                    LineBox[{{-2., -3.}, {-1.0000000000000002`, -2.}}], 
                    
                    LineBox[{{-1.0000000000000002`, -2.}, \
{-1.2246467991473532`*^-16, -2.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.72971736766897, 
                    0.9912702866520184}, {-0.25, 0}, 
                    Offset[8], {0.08454973009165201, 0.010475656017578605`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.133333333333333, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777803`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-8.4, -0.5999999999999995}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-7.500723193132872, \
-0.0017459426695959539`}, {-0.25, 0}, 
                    Offset[8], {0.3763313915120339, -0.0034918853391928497`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-8.4, -0.9999999999999996}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-7.4, -0.9999999999999996}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.133333333333333, \
-1.9999999999999996`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777626`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.222222222222222, \
-3.999999999999999}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -1.3322676295501878`*^-15}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.355555555555556, \
-2.9999999999999996`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-7.417705098312484, \
-1.8354101966249683`}, {-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.4, -0.9999999999999996}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-5.417705098312485, \
-2.164589803375031}, {-0.25, 0}, 
                    Offset[8], {1., -2.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-4.4, -2.9999999999999996`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, -3.}, {-0.25, 
                    0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4000000000000004`, -3.}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4000000000000001`, \
-2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.4000000000000002, -2.}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9., 5.51091059616309*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-4., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-4., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -3.}], 
                    Offset[{12, 12}, {-2., -3.}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-2., -3.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -0.9999999999999996}], 
                    Offset[{12, 12}, {-8., -0.9999999999999996}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-8., -0.9999999999999996}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -0.9999999999999997}], 
                    Offset[{12, 12}, {-6., -0.9999999999999997}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-6., -0.9999999999999997}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9., -0.9999999999999994}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -0.9999999999999996}], 
                    Offset[{12, 12}, {-7., -0.9999999999999996}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-7., -0.9999999999999996}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., -2.9999999999999996`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1.0000000000000002`, -2.}], 
                    Offset[{12, 12}, {-1.0000000000000002`, -2.}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-1.0000000000000002`, -2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., -3.}], 
                    Offset[{12, 12}, {-3., -3.}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-3., -3.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-5., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-5., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.2246467991473532`*^-16, -2.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"X_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["X_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"checker_b\"", 
                    Offset[{0, -7}, {-9., 5.51091059616309*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_BBcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_BBcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-4., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Bcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Bcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-2., -3.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_BBcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_BBcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-8., -0.9999999999999996}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Bcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Bcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-6., -0.9999999999999997}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-9., -0.9999999999999994}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_WWcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_WWcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-7., -0.9999999999999996}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"checker_w\"", 
                    Offset[{0, -7}, {-8., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Wcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Wcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-1.0000000000000002`, -2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_WWcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_WWcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-3., -3.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Wcore_net\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Wcore_net", "Tooltip"]& ], 
                    Offset[{0, -15}, {-5., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"X_out\"", 
                    Offset[{0, -7}, {-1.2246467991473532`*^-16, -2.}], {
                    0, 1.}, Automatic, {1, 0}]}, StripOnInput -> False, 
                    FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-0.6762753888102504, 
                    5.4582645225831214`}, {-7.72971736766897, 
                    0.9912702866520184}], {0., -0.17}, Automatic, {
                    0.9924117313787494, 0.12295916160186371`}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.133333333333333, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-8.4, -0.5999999999999995}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0.051030934720855216`, 
                    5.4997632534229615`}, {-7.500723193132872, \
-0.0017459426695959539`}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.00927835176742822}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{6.106226635438361*^-16, 
                    5.5}, {-8.4, -0.9999999999999996}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.4, -0.9999999999999996}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 
                    5.5}, {-6.133333333333333, -1.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{4.121702978920908*^-14, 
                    5.5}, {-6.222222222222222, -3.999999999999999}], {
                    0., -0.17}, Automatic, {1., -7.494005416219833*^-15}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 
                    5.5}, {-6.355555555555556, -2.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-4.919349550499537, 
                    2.4596747752497685`}, {-7.417705098312484, \
-1.8354101966249683`}], {0., -0.17}, Automatic, {0.4472135954999579, 
                    0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{6.106226635438361*^-16, 
                    5.5}, {-6.4, -0.9999999999999996}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251565`*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{4.919349550499537, 
                    2.4596747752497685`}, {-5.417705098312485, \
-2.164589803375031}], {0., -0.17}, Automatic, {
                    0.4472135954999579, -0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-4.4, -2.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-3.4, -3.}], {
                    0., -0.17}, Automatic, {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-2.4000000000000004`, -3.}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.8890872965260117`, 
                    3.889087296526011}, {-1.4000000000000001`, \
-2.4000000000000004`}], {0., -0.17}, Automatic, {0.7071067811865475, 
                    0.7071067811865476}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-0.4000000000000002, -2.}], {
                    0., -0.17}, Automatic, {1., 0.}]}, StripOnInput -> False, 
                    FontSize -> 8, FontWeight -> "Thin", FontColor -> 
                    GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-9., 
                    5.51091059616309*^-16}, {-4., -2.9999999999999996`}, \
{-2., -3.}, {-8., -0.9999999999999996}, {-6., -0.9999999999999997}, {-9., \
-0.9999999999999994}, {-7., -0.9999999999999996}, {-8., \
-2.9999999999999996`}, {-1.0000000000000002`, -2.}, {-3., -3.}, {-5., \
-2.9999999999999996`}, {-1.2246467991473532`*^-16, -2.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 8, 24, 8, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{35.49999999999998, 28.}, {28., 18.}}, 
                    ImageSize -> {558.5, 376.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Bcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_WWcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Wcore_net"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "X_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_2net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["X_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"]
                     -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"X_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {504., {238.5, 244.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 1}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
           BaselinePosition -> Baseline]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Processor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"Center\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{
          RowBox[{
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]], "\[Rule]", 
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]]}]}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Mean\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"0.010197662057621874`", ",", 
                    RowBox[{"-", "0.0036822889054108597`"}]}], "}"}], 
                 Short[#, 5]& ]}]}, {
              RowBox[{"\"Version\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"12.`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"ID\"", "\[Rule]", 
                TagBox["7140486291497146618", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Panel[
          Grid[{{"f1", "NumericalVector"}}]] -> Panel[
          Grid[{{"f1", "NumericalVector"}}]], 
        Column[{
         "Invertibility" -> Short["Perfect", 5], "Missing" -> 
          Short["Allowed", 5], "Mean" -> 
          Short[{0.010197662057621874`, -0.0036822889054108597`}, 5], 
          "Version" -> Short[{12., 0}, 5], "ID" -> 
          Short[7140486291497146618, 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"PostProcessor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"FirstValues\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{""}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Info\"", "\[Rule]", 
                TagBox[
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Type\"", "\[Rule]", "\"NumericalVector\""}], 
                    ",", 
                    RowBox[{"\"Weight\"", "\[Rule]", "1"}]}], 
                   "\[RightAssociation]"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Key\"", "\[Rule]", 
                TagBox["\"f1\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Null, 
        Column[{"Info" -> Short[
            Association["Type" -> "NumericalVector", "Weight" -> 1], 5], 
          "Key" -> Short["f1", 5], "Invertibility" -> Short["Perfect", 5], 
          "Missing" -> Short["Allowed", 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"ProbabilityNet\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = True), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["2", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["12", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 3}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"], 
                    ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                   ButtonFunction :> (Typeset`open = False), Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB7r+WbeVuJywuWJc9vHXc9UD+/l+7fiqecJG
J4htXt5Z1QN/6vg/ruE5YcMevYE1eoPqAXv/Gr1Zb47bJPmVaByYoHqgud6h
cO/J4zb2YA2qBy7xx+wUW3LcZsEXz/lfPFUPqDCcZ1tWfdymaXn058NKqgdq
AmZGZgcct3nu0s7E81PlwC2G3RvTlI7bnD0DAioHbAVN+Gd8PGZzfYtXJ/sC
lQOBO1auYp6dY7+8SD5/b4nKAa4tIH6PvS2bd907L5UDV0r+8xuJL7Cfln92
2ywllQO/NoHk19hvXbdM4tBv5QO7J4fclYrcZj/r8LXFKdeUD0wAqz9g77Iu
NqJpk/KBW29Wnlv37Kj95jxrM+kJyge2g/WfsX/OUmCrn698QDT5f6CE1CX7
A8XBGpFmygcutE/8esvkpv39s8WNrYzKB7Rd2i76n79vby980WPLBaUDwmfe
Fe3+8sj+kXN23dPFSgfuH/SWXHHwqf2JeCclyWqlA9XMt27n+r2w/5QWZuIf
pnTg2YSZu3hmv7KPi1y+pd1U6YBCVtfWluVv7PnMTRcfklA6oNW/5szV4nf2
kPhSOgCJuw/2ADwP1Xg=
                    "]], 
                    
                    LineBox[{{-11., 1.0000000000000007`}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB5jB9Af7K8ZlH389V4XzdYLY5uWdRfDZozew
Rm9QPcAC5Sf5lWgcmICQh2hA8Bd88Zz/xRPBb1oe/fmwEoL/3KWdieenCpx/
9gwIIPhg7fMRfNnjhTLHCxF8VxcQUIG7J+egGBAh5KfYvZxs91IZzt+zGwQQ
/CcWfY8t+hB8nm0J3NsSEHxjMEDwJXdX/P3MpnyACcqvj1jCY3NXCS6fyA0y
AME/cHntz8SJSnD18zZ2X7fPR/B/LfEHIgT/Cki5EYKvfaaTj1UCwYfEF4IP
AHfyieI=
                    "]], 
                    
                    LineBox[{{-11., 2.000000000000001}, {-10., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-10., 2.0000000000000004`}, {-9., 
                    1.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEqBxghDIerxmUffz1XhvN1gtjm5Z1F8NmiN7BG
b0DwE/1KNA5MQPDtwRoQ/PlfPIEIwW9cHv35sBKC/8ylnYnnpxKcfwYMEPzP
IO3zEXyZ44VAhOC7uoAAgp9zUAyIEPwpdi8n271UhPP37AYBBP+JRd9jiz4E
n2dbAve2BATfGAwQfMndFX8/syH4dRFLeGzuKiDCgxtkAIJ/8PLan4kTEfx5
G7uv2+cj+L+W+AMRgn8FpNwIwdc+08nHKoHgQygEHwDHvW9M
                    "]], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    4.898587196589413*^-16}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-8., 1.0000000000000004`}, {-7., 
                    1.0000000000000004`}}], 
                    LineBox[{{-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-6., 1.0000000000000004`}, {-5., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKBxghDIcV6W8efT0vD+dHLOGxuTsLwefZlsC9
LQHBPzTnRUCDIoJfB9YgB+fbv5xs93Iygs/sv/1ZuyuCf7aTj1XikyycP2sm
CCD4L0Da7RB8y77HFn2PZeD8rg4QQPBvNOkCEYKvUXtJvfaSNJxfUQ4CCP6J
QpnjhTIIvkTOQbGcg1Jo7pGE88HesUPwLcDukYDzO8HuQfBvgt0jgeYecTT3
IPjHwe5B8MXB7hGD89PAAME3Kvv46zkvgv93g4dkxS5ROB+sOwfBb1we/fmw
EoJvmyy+vv6eCJz/xXM+ECH4YOWpCH7YDGFZLgMEH0Ih+AA8RpPo
                    "]], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.417705098312485`,
                     1.1645898033750317`}, {-0.25, 0}, 
                    Offset[8], {1., 1.9999999999999998`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.883693638516403, 
                    0.14840512691569577`}, {-0.25, 0}, 
                    Offset[8], {0.07008586743419798, 0.04539450940950679}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    1.6000000000000005`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.777777777777779, 
                    1.0000000000000007`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.399999999999999, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.777777777777779, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    0.40000000000000047`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.6000000000000003`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.355555555555556, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 6.735557395310443*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-10., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-10., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 1.0000000000000004`}], 
                    Offset[{12, 12}, {-9., 1.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-9., 1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 1.0000000000000007`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 2.000000000000001}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-8., 
                    2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Total_loss_jac\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_loss_jac", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., 4.898587196589413*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Z_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Z_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAQAOCgDo6ujm7Ourg6qZCpxQdoMS0uFdqi+Ea+ZY2gECSNuZ/U
HFwhSXP3tYWSRX5JipEQopnqS5LdtnWd3dOZHhyr5lxW6nSoWlWqepOP9eRc
51LnRGehHp3gC8lV6OX6JFdNEcjHaGTxmabYfbYxIcg+myV2n2seGCSfyxC7
z2fdI9A+n96x+yD39QTKB+lJ/GeDfZh+//Bh9iCMIB/lWw3pA/ag7Pf2cfxv
Ee/fy8d5bgLW+ukLce4E1HT6Ap2JIbV7fSFtgB5W3xA2Wy9LPwm4dzCj0V86
1rAhsbnfXTsz16u0+56j1Cc8kzXeHtZ4AmoXS+8=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-8., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"square\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "2"], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["square", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[#^2& , {4, 3}], "Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 1.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-7., 1.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_z\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_z", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1jELgkAYxvGjGhpbG9uaa2ltqsBJ6QMondJioFL0jfqWdSe8ISTm6XN3
7x/eIIfjJ+ldq+QWphMhRDlXH2H82BdF/IwW6ss5L69ZLi+nvJKZLHbJVF1c
qlmrmalJ5estcAXAteq0jwawnFUfwAn3USCjNR810mndRw10OvNRhk7nPp2B
0YuP6uH06qM6nCx8VIuTlU/X9B0Pd9Q51CxAjLZtN1Ft1ANaF10APCtt9L1n
ps6f34SZs/WZYWTsfKYZOHu9cx6dRnuCB6fxngX+//6vwXuqI+PoPd+yEXYm
cfdRHyA4+ew=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-6., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_half\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_half", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[(-0.5) #& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-5., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8JIZlILN1Ki38O97D8ypoZf0QDZ4QcLM7Sw
ozYg2X10chcMEO0+OrsLBohy3wC5DQTwum8A3QUDWN03CNwFAxjuG0RuAwG4
+waZu2DAZ5C6CxxeoDJ/sLkLBGBugrlvoN0DA1jikirtA0oBnjQ24O4jkP4H
zH1E5ku6u4/E8oKu7iOjLKOL+ygoY2nqPiqU/TRxHxXrJKq7j8r1Jc3cRyXj
Brx8JgCo7j4A/6j8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-5., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"gaussian_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.8378770664093453`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["gaussian_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.8378770664093453` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-4., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-5., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_jacobian", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8LUMAsNUOQ+mLsGo/vo4DYQINl9RLjLh4q4
kVi1Hu5l/5ExDnXUBkSZSae4xAbwum8A3QUDWN03CNwFAxjuG0RuAwG4+waZ
u2DAZ5C6CxxeoHJisLkLBGBugrlvoN0DA1jikhZlKskATxobcPcRSP8D5j4i
8yXd3UdieUFX95FRltHFfRSUsTR1HxXKfpq4j4p1EtXdR+X6kmbuo5JxA14+
EwBUdx8ArTj8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"density_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.3862943611198906`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["density_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.3862943611198906` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1TELgkAYxvGjGhpbG9uaa2ltquAmpQ+gdErLBRpF36hvWXfBKwVipz7e
vX94BR3kJ+rdIr1E2UgIUU7NIUru26JIHvHMnBx1ec61Oh30VeWq2KRjc3Fu
ZmlmYiZTz5cdgUmC7lNFPpAT7rMBjYP4KIBzUB/Vw+nFZ+to9OajWjq9+yhH
ZzCfzcEY1Ec1OFn4qBonKx9Fvv3uhtwrKYkYa1uv4o/RDui+6CR4P0dXPTNT
5887YWis/WYYORu/aQbOv/9cYKPzmhDI2XrN8uzsvKZ6cvZa8z0YIXsSd993
b4jF/F4=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_prob\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_prob", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAUBeCgDo6ujm7Ourg6qZCpxQdoMS0uEdqi+Ea+pSbFK0WxtM3J
z4Hb0g6Xj5DmdpFeomzEGCun6hIlt21RJPd4ph6OsjznUpwOshK5KDbpWL2c
q1qqmjB4OKpRJh5PVK9GjH3aRYUAfWWwr+kKzefARenlc+iidPJ5cFFafR5d
lL++AGw6P75AXJSPLzAXhQfqqtdrv7vasHHT0i5d61Vc3xE9GXhWvtcL9n9g
kpY95tXXYe9783X8Lp37ep4XznwDzzHrPsPz1ZoP9P9qxQecSXAfeB5Z8QHb
BTE/WgL3vQAWOfns
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perpixel\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["perpixel", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[0.5 #& , {4, 3}], "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total_Loss\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"checker_b\"", 
                    Offset[{0, -7}, {-11., 6.735557395310443*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_1\"", 
                    Offset[{0, -15}, {-10., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_2\"", 
                    Offset[{0, -15}, {-9., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"checker_w\"", 
                    Offset[{0, -7}, {-11., 1.0000000000000007`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-11., 2.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"Total_los..\"", "\"Total_loss_jac\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Total_loss_jac", "Tooltip"]& ], 
                    Offset[{0, -13}, {-8., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Z_out\"", 
                    Offset[{0, -7}, {-8., 4.898587196589413*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"square\"", 
                    Offset[{0, -13}, {-8., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_z\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_z", "Tooltip"]& ], 
                    Offset[{0, -13}, {-7., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_half\"", 
                    Offset[{0, -13}, {-6., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"gaussian_..\"", "\"gaussian_coef\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "gaussian_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"plus\"", 
                    Offset[{0, -13}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_jacobian\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_jacobian", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox["\"density_c..\"", "\"density_coef\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "density_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_prob\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"perpixel\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Total_Loss\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-4.919349550499537, 
                    2.459674775249769}, {-10.417705098312485`, 
                    1.1645898033750317`}], {0., -0.17}, Automatic, {
                    0.447213595499958, 0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-2.989963099218088, 
                    4.616288624567811}, {-9.883693638516403, 
                    0.14840512691569577`}], {0., -0.17}, Automatic, {
                    0.8393252044668746, 0.5436296544032887}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-10.4, 
                    1.6000000000000005`}], {0., -0.17}, Automatic, {
                    0.7071067811865476, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-9.777777777777779, 
                    1.0000000000000007`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-10.4, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {
                    1., -4.440892098500626*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-8.777777777777779, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-8.4, 
                    0.40000000000000047`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-8.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-8.4, 
                    1.6000000000000003`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-6.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-5.4, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-4.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-6.355555555555556, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-4.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}, {-9., 1.0000000000000004`}, {-11., 
                    1.0000000000000007`}, {-11., 2.000000000000001}, {-8., 
                    2.0000000000000004`}, {-8., 4.898587196589413*^-16}, {-8.,
                     1.0000000000000004`}, {-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}, {-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-5., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 8, 8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{35.49999999999998, 38.49999999999999}, {
                    28., 18.}}, ImageSize -> {679., 156.00000000000003`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_1"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_2"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total_loss_jac"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"], 
                    NeuralNetworks`NetPath["Nodes", "square"], 
                    NeuralNetworks`NetPath["Nodes", "summation_z"], 
                    NeuralNetworks`NetPath["Nodes", "minus_half"], 
                    NeuralNetworks`NetPath["Nodes", "gaussian_coef"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Nodes", "summation_jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "density_coef"], 
                    NeuralNetworks`NetPath["Nodes", "minus_prob"], 
                    NeuralNetworks`NetPath["Nodes", "perpixel"], 
                    NeuralNetworks`NetPath["Outputs", "Total_Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Total_Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "Z_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_z" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_half" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "gaussian_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "Total_loss_jac" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_jacobian" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "density_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_prob" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "perpixel" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Total_Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Z_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {320., {31.25, 37.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               BaselinePosition -> {1, 1}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {
                   Offset[0.], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.]}, "Rows" -> {
                   Offset[0.], {
                    Offset[0.4]}, 
                   Offset[0.]}}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
           BaselinePosition -> Baseline]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Method\"\>", "\[Rule]", "\<\"RealNVP\"\>"}], ",", 
   RowBox[{"\<\"Options\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"MaxTrainingRounds", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "500"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"ActivationFunction\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "Ramp"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkDepth\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "2"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"CouplingLayersNumber\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "2"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkType\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"FullyConnected\"\>"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.771545840112155*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"26e129fa-bd42-4c91-be96-36720b5f4b93"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "\[LeftDoubleBracket]", 
  RowBox[{"1", ",", "\"\<Model\>\"", ",", "\"\<ProbabilityNet\>\""}], 
  "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.771544976939814*^9, 3.7715449787357483`*^9}, {
  3.7715450290083275`*^9, 3.771545078370634*^9}, {3.77154522214507*^9, 
  3.7715452476903877`*^9}},ExpressionUUID->"5e28a254-006a-45d8-b4b6-\
1766d637525a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["12", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {18., {0., 18.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 3}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB7r+WbeVuJywuWJc9vHXc9UD+/l+7fiqecJG
J4htXt5Z1QN/6vg/ruE5YcMevYE1eoPqAXv/Gr1Zb47bJPmVaByYoHqgud6h
cO/J4zb2YA2qBy7xx+wUW3LcZsEXz/lfPFUPqDCcZ1tWfdymaXn058NKqgdq
AmZGZgcct3nu0s7E81PlwC2G3RvTlI7bnD0DAioHbAVN+Gd8PGZzfYtXJ/sC
lQOBO1auYp6dY7+8SD5/b4nKAa4tIH6PvS2bd907L5UDV0r+8xuJL7Cfln92
2ywllQO/NoHk19hvXbdM4tBv5QO7J4fclYrcZj/r8LXFKdeUD0wAqz9g77Iu
NqJpk/KBW29Wnlv37Kj95jxrM+kJyge2g/WfsX/OUmCrn698QDT5f6CE1CX7
A8XBGpFmygcutE/8esvkpv39s8WNrYzKB7Rd2i76n79vby980WPLBaUDwmfe
Fe3+8sj+kXN23dPFSgfuH/SWXHHwqf2JeCclyWqlA9XMt27n+r2w/5QWZuIf
pnTg2YSZu3hmv7KPi1y+pd1U6YBCVtfWluVv7PnMTRcfklA6oNW/5szV4nf2
kPhSOgCJuw/2ADwP1Xg=
                    "]], 
                    
                    LineBox[{{-11., 1.0000000000000007`}, {-10., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFqB5jB9Af7K8ZlH389V4XzdYLY5uWdRfDZozew
Rm9QPcAC5Sf5lWgcmICQh2hA8Bd88Zz/xRPBb1oe/fmwEoL/3KWdieenCpx/
9gwIIPhg7fMRfNnjhTLHCxF8VxcQUIG7J+egGBAh5KfYvZxs91IZzt+zGwQQ
/CcWfY8t+hB8nm0J3NsSEHxjMEDwJXdX/P3MpnyACcqvj1jCY3NXCS6fyA0y
AME/cHntz8SJSnD18zZ2X7fPR/B/LfEHIgT/Cki5EYKvfaaTj1UCwYfEF4IP
AHfyieI=
                    "]], 
                    
                    LineBox[{{-11., 2.000000000000001}, {-10., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-10., 2.0000000000000004`}, {-9., 
                    1.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEqBxghDIerxmUffz1XhvN1gtjm5Z1F8NmiN7BG
b0DwE/1KNA5MQPDtwRoQ/PlfPIEIwW9cHv35sBKC/8ylnYnnpxKcfwYMEPzP
IO3zEXyZ44VAhOC7uoAAgp9zUAyIEPwpdi8n271UhPP37AYBBP+JRd9jiz4E
n2dbAve2BATfGAwQfMndFX8/syH4dRFLeGzuKiDCgxtkAIJ/8PLan4kTEfx5
G7uv2+cj+L+W+AMRgn8FpNwIwdc+08nHKoHgQygEHwDHvW9M
                    "]], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    4.898587196589413*^-16}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-9., 1.0000000000000004`}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-8., 1.0000000000000004`}, {-7., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-6., 1.0000000000000004`}, {-5., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKBxghDIcV6W8efT0vD+dHLOGxuTsLwefZlsC9
LQHBPzTnRUCDIoJfB9YgB+fbv5xs93Iygs/sv/1ZuyuCf7aTj1XikyycP2sm
CCD4L0Da7RB8y77HFn2PZeD8rg4QQPBvNOkCEYKvUXtJvfaSNJxfUQ4CCP6J
QpnjhTIIvkTOQbGcg1Jo7pGE88HesUPwLcDukYDzO8HuQfBvgt0jgeYecTT3
IPjHwe5B8MXB7hGD89PAAME3Kvv46zkvgv93g4dkxS5ROB+sOwfBb1we/fmw
EoJvmyy+vv6eCJz/xXM+ECH4YOWpCH7YDGFZLgMEH0Ih+AA8RpPo
                    "]], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.417705098312485`,
                     1.1645898033750317`}, {-0.25, 0}, 
                    Offset[8], {1., 1.9999999999999998`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.883693638516403, 
                    0.14840512691569577`}, {-0.25, 0}, 
                    Offset[8], {0.07008586743419798, 0.04539450940950679}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    1.6000000000000005`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.777777777777779, 
                    1.0000000000000007`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.399999999999999, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.777777777777779, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    0.40000000000000047`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    1.6000000000000003`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.4, 
                    1.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.355555555555556, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 6.735557395310443*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-10., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-10., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 1.0000000000000004`}], 
                    Offset[{12, 12}, {-9., 1.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-9., 1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 1.0000000000000007`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 2.000000000000001}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-8., 
                    2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Total_loss_jac\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_loss_jac", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., 4.898587196589413*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Z_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Z_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAQAOCgDo6ujm7Ourg6qZCpxQdoMS0uFdqi+Ea+ZY2gECSNuZ/U
HFwhSXP3tYWSRX5JipEQopnqS5LdtnWd3dOZHhyr5lxW6nSoWlWqepOP9eRc
51LnRGehHp3gC8lV6OX6JFdNEcjHaGTxmabYfbYxIcg+myV2n2seGCSfyxC7
z2fdI9A+n96x+yD39QTKB+lJ/GeDfZh+//Bh9iCMIB/lWw3pA/ag7Pf2cfxv
Ee/fy8d5bgLW+ukLce4E1HT6Ap2JIbV7fSFtgB5W3xA2Wy9LPwm4dzCj0V86
1rAhsbnfXTsz16u0+56j1Cc8kzXeHtZ4AmoXS+8=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-8., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"square\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "2"], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["square", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[#^2& , {4, 3}], "Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 1.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-7., 1.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_z\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_z", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 1.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 1.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1jELgkAYxvGjGhpbG9uaa2ltqsBJ6QMondJioFL0jfqWdSe8ISTm6XN3
7x/eIIfjJ+ldq+QWphMhRDlXH2H82BdF/IwW6ss5L69ZLi+nvJKZLHbJVF1c
qlmrmalJ5estcAXAteq0jwawnFUfwAn3USCjNR810mndRw10OvNRhk7nPp2B
0YuP6uH06qM6nCx8VIuTlU/X9B0Pd9Q51CxAjLZtN1Ft1ANaF10APCtt9L1n
ps6f34SZs/WZYWTsfKYZOHu9cx6dRnuCB6fxngX+//6vwXuqI+PoPd+yEXYm
cfdRHyA4+ew=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-6., 
                    1.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_half\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_half", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[(-0.5) #& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-5., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8JIZlILN1Ki38O97D8ypoZf0QDZ4QcLM7Sw
ozYg2X10chcMEO0+OrsLBohy3wC5DQTwum8A3QUDWN03CNwFAxjuG0RuAwG4
+waZu2DAZ5C6CxxeoDJ/sLkLBGBugrlvoN0DA1jikirtA0oBnjQ24O4jkP4H
zH1E5ku6u4/E8oKu7iOjLKOL+ygoY2nqPiqU/TRxHxXrJKq7j8r1Jc3cRyXj
Brx8JgCo7j4A/6j8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-5., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"gaussian_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.8378770664093453`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["gaussian_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.8378770664093453` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-4., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-5., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_jacobian", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGoakpa74D8LUMAsNUOQ+mLsGo/vo4DYQINl9RLjLh4q4
kVi1Hu5l/5ExDnXUBkSZSae4xAbwum8A3QUDWN03CNwFAxjuG0RuAwG4+waZ
u2DAZ5C6CxxeoHJisLkLBGBugrlvoN0DA1jikhZlKskATxobcPcRSP8D5j4i
8yXd3UdieUFX95FRltHFfRSUsTR1HxXKfpq4j4p1EtXdR+X6kmbuo5JxA14+
EwBUdx8ArTj8Jg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"density_coef\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.3862943611198906`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["density_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.3862943611198906` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1TELgkAYxvGjGhpbG9uaa2ltquAmpQ+gdErLBRpF36hvWXfBKwVipz7e
vX94BR3kJ+rdIr1E2UgIUU7NIUru26JIHvHMnBx1ec61Oh30VeWq2KRjc3Fu
ZmlmYiZTz5cdgUmC7lNFPpAT7rMBjYP4KIBzUB/Vw+nFZ+to9OajWjq9+yhH
ZzCfzcEY1Ec1OFn4qBonKx9Fvv3uhtwrKYkYa1uv4o/RDui+6CR4P0dXPTNT
5887YWis/WYYORu/aQbOv/9cYKPzmhDI2XrN8uzsvKZ6cvZa8z0YIXsSd993
b4jF/F4=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-2., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_prob\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_prob", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN1r0KwjAUBeCgDo6ujm7Ourg6qZCpxQdoMS0uEdqi+Ea+pSbFK0WxtM3J
z4Hb0g6Xj5DmdpFeomzEGCun6hIlt21RJPd4ph6OsjznUpwOshK5KDbpWL2c
q1qqmjB4OKpRJh5PVK9GjH3aRYUAfWWwr+kKzefARenlc+iidPJ5cFFafR5d
lL++AGw6P75AXJSPLzAXhQfqqtdrv7vasHHT0i5d61Vc3xE9GXhWvtcL9n9g
kpY95tXXYe9783X8Lp37ep4XznwDzzHrPsPz1ZoP9P9qxQecSXAfeB5Z8QHb
BTE/WgL3vQAWOfns
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perpixel\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["perpixel", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[0.5 #& , {4, 3}], "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total_Loss\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"checker_b\"", 
                    Offset[{0, -7}, {-11., 6.735557395310443*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_1\"", 
                    Offset[{0, -15}, {-10., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"coupling_2\"", 
                    Offset[{0, -15}, {-9., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"checker_w\"", 
                    Offset[{0, -7}, {-11., 1.0000000000000007`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-11., 2.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"Total_los..\"", "\"Total_loss_jac\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Total_loss_jac", "Tooltip"]& ], 
                    Offset[{0, -13}, {-8., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Z_out\"", 
                    Offset[{0, -7}, {-8., 4.898587196589413*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"square\"", 
                    Offset[{0, -13}, {-8., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_z\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_z", "Tooltip"]& ], 
                    Offset[{0, -13}, {-7., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_half\"", 
                    Offset[{0, -13}, {-6., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"gaussian_..\"", "\"gaussian_coef\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "gaussian_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"plus\"", 
                    Offset[{0, -13}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_jacobian\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_jacobian", "Tooltip"]& ], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"density_c..\"", "\"density_coef\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "density_coef", "Tooltip"]& ], 
                    Offset[{0, -13}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"minus_prob\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"perpixel\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Total_Loss\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-4.919349550499537, 
                    2.459674775249769}, {-10.417705098312485`, 
                    1.1645898033750317`}], {0., -0.17}, Automatic, {
                    0.447213595499958, 0.8944271909999159}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-2.989963099218088, 
                    4.616288624567811}, {-9.883693638516403, 
                    0.14840512691569577`}], {0., -0.17}, Automatic, {
                    0.8393252044668746, 0.5436296544032887}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-10.4, 
                    1.6000000000000005`}], {0., -0.17}, Automatic, {
                    0.7071067811865476, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-9.777777777777779, 
                    1.0000000000000007`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-10.4, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {
                    1., -4.440892098500626*^-16}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-8.777777777777779, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-8.4, 
                    0.40000000000000047`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-8.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-8.4, 
                    1.6000000000000003`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    Offset[{0., 5.5}, {-7.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-6.4, 1.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-5.4, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-4.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{0., 5.5}, {-6.355555555555556, 
                    2.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-4.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-11., 6.735557395310443*^-16}, {-10., 
                    2.0000000000000004`}, {-9., 1.0000000000000004`}, {-11., 
                    1.0000000000000007`}, {-11., 2.000000000000001}, {-8., 
                    2.0000000000000004`}, {-8., 4.898587196589413*^-16}, {-8.,
                     1.0000000000000004`}, {-7., 1.0000000000000004`}, {-6., 
                    1.0000000000000004`}, {-5., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-5., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 8, 8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{35.49999999999998, 38.49999999999999}, {
                    28., 18.}}, ImageSize -> {679., 156.00000000000003`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_1"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_2"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total_loss_jac"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"], 
                    NeuralNetworks`NetPath["Nodes", "square"], 
                    NeuralNetworks`NetPath["Nodes", "summation_z"], 
                    NeuralNetworks`NetPath["Nodes", "minus_half"], 
                    NeuralNetworks`NetPath["Nodes", "gaussian_coef"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Nodes", "summation_jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "density_coef"], 
                    NeuralNetworks`NetPath["Nodes", "minus_prob"], 
                    NeuralNetworks`NetPath["Nodes", "perpixel"], 
                    NeuralNetworks`NetPath["Outputs", "Total_Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Total_Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "Z_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Loss" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Y_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "thread_0" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation_z" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "minus_half" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "gaussian_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "Total_loss_jac" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation_jacobian" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "plus" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "density_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "minus_prob" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "perpixel" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Total_Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Z_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {590., {228., 236.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771544981248519*^9, {3.77154505445596*^9, 3.7715450829234514`*^9}, 
   3.771545228125179*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"e4e26e27-987d-4f6e-8aad-6e749cf11a28"]
}, Open  ]],

Cell["Extract the trained net", "Text",
 CellChangeTimes->{{3.771430950386219*^9, 
  3.771430956077353*^9}},ExpressionUUID->"8eb64868-d6bc-4616-b77b-\
18041b0e7f98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingresult", "[", "\"\<TrainedNet\>\"", "]"}]], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"855264ec-008d-46f3-9db5-7001ed9a52ce"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., -0.9999999999999999}, {-1., \
-0.9999999999999999}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4000000000000004`, \
-0.5999999999999998}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.9999999999999998}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4, -0.5999999999999999}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.4000000000000001, -1.}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999999, -1.1102230246251565`*^-16}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Jacobian", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[6], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -0.9999999999999999}], 
                    Offset[{12, 12}, {-2., -0.9999999999999999}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-2., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DetLog\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DetLog", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[4], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[CenterDot]\"", StripOnInput -> False, FontSize -> 
                    14], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DotLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Norm", Bold], 
                    Style[
                    HoldForm[
                    DotLayer["Inputs" -> {2, 2}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., -0.9999999999999999}], 
                    Offset[{10, 10}, {-1., -0.9999999999999999}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-1., -0.9999999999999999}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TotalLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total", Bold], 
                    Style[
                    HoldForm[
                    TotalLayer["Inputs" -> {"Real", "Real"}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.123233995736766*^-17, -1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"Jacobian\"", 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"DetLog\"", 
                    Offset[{0, -15}, {-2., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Norm\"", 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"Total\"", 
                    Offset[{0, -13}, {-1., -0.9999999999999999}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    Offset[{0, -7}, {-6.123233995736766*^-17, -1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, \
-0.5999999999999998}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-1.4, -0.9999999999999998}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{6.106226635438362*^-16, 
                    5.5}, {-0.4000000000000001, -1.}], {0., -0.17}, 
                    Automatic, {1., -1.1102230246251568`*^-16}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    
                    1.8369701987210297`*^-16}, {-2., -0.9999999999999999}, \
{-2., 1.2246467991473532`*^-16}, {-1., -0.9999999999999999}, \
{-6.123233995736766*^-17, -1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28.99999999999999, 18.}}, 
                    ImageSize -> {276., 102.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "DetLog"], 
                    NeuralNetworks`NetPath["Nodes", "Norm"], 
                    NeuralNetworks`NetPath["Nodes", "Total"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Jacobian" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "z" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "addEpsilon" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "ConstantArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]], "Parameters" -> 
                    Association["Dimensions" -> {2, 2}, 
                    "$ArrayDimensions" -> {2, 2}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "MapFunction" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> Association[
                    "1" -> Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 2, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Function" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association[
                    "Type" -> "NetMapThread", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "Level" -> 
                    NeuralNetworks`ValidatedParameter[
                    Association["1" -> 1]], "$InputNames" -> {"1", "2"}, 
                    "$OutputNames" -> {"Output"}, "$MappedShape" -> {2}, 
                    "$MappedDepth" -> {1, 0}], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "divideByEps" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 10000., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "addEpsilon", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MapFunction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "z"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Function", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divideByEps", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"]}], "DetLog" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 2}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> {2, 2}, "$ArrayDimensions" -> {2, 2}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "4" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[2], 
                    "Level" -> 1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]]],
                     "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Dot", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "1"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"2"}, "$StateNames" -> {"1"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 2], 
                    "Inputs" -> Association[
                    "2" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2, 2}, NeuralNetworks`RealT]], 
                    "States" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 2, "$Shape" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "$OutputLength" -> 3], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2, 2}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    Association[]]], "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[2]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[3]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{3, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Times, 0.3333333333333333, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2, 2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "Norm" -> 
                    Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "Total" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {224., {14.25, 20.25}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771429831834114*^9, 3.771430017595457*^9, 
  3.771436868265766*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"aeea9422-6078-4997-b8e2-66190a26b8b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainednet", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"trainingresult", "[", "\"\<TrainedNet\>\"", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Jacobian\>\"", ",", " ", "\"\<Function\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771429768405982*^9, 3.7714298490043173`*^9}, 
   3.771429902591749*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"268acc48-7cd7-4976-90c5-46f4a585f5d8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771429849377016*^9, 3.771430019600152*^9, 
  3.771432304450892*^9, 3.771435239348475*^9, 3.771436288593025*^9, 
  3.7714363367663403`*^9, 3.771436869571622*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"ea96bad9-ddec-492e-b8ab-1c702912b7ae"]
}, Open  ]],

Cell["\<\
This is a shit to be fixed by Jerome (because of shared arrays)\
\>", "Text",
 CellChangeTimes->{{3.771431030030855*^9, 
  3.7714310443655252`*^9}},ExpressionUUID->"3007f3f6-8942-4229-8d5f-\
b7cb0d2fce72"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainednet", "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "0"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714303525571632`*^9, 3.771430354734576*^9}, {
  3.7714368838046227`*^9, 3.771436884840713*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"6e728e37-97ca-47ba-990a-830f40f54bef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.822607040405273`", ",", "8.583434104919434`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771430355155713*^9, 3.771435241297594*^9, 3.771436290239683*^9, 
   3.771436338806939*^9, {3.7714368722923326`*^9, 3.771436885730176*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"5495cdb7-58c1-4303-9cd6-e15c69d67e7d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sampling with the training Net", "Section",
 CellChangeTimes->{{3.7712451383572793`*^9, 3.7712451391634197`*^9}, {
  3.7714262606440077`*^9, 3.771426262610865*^9}, {3.771429492091707*^9, 
  3.771429505384417*^9}},ExpressionUUID->"c5435377-85e9-4273-b242-\
9db3377b8aec"],

Cell["\<\
Here we invert the network to be able to sample the input, given an output \
generated from a multidimensional Normal distribution:\
\>", "Text",
 CellChangeTimes->{{3.77143105093583*^9, 
  3.7714310951866903`*^9}},ExpressionUUID->"a467321e-7eed-40ec-a6e5-\
b0d1b11c7c86"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"invertResidualNetwork", "[", 
    RowBox[{"net_", ",", " ", "iter_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"functions", ",", " ", "invcores"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"functions", " ", "=", " ", 
       RowBox[{"NetExtract", "[", 
        RowBox[{"net", ",", " ", 
         RowBox[{"{", 
          RowBox[{"All", ",", " ", "1"}], "}"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"Extract", " ", "residual", " ", "blocks"}], " ", "*)"}], "\n",
       "\t", 
      RowBox[{"invcores", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"NetGraph", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", " ", 
             RowBox[{"ThreadingLayer", "[", "Subtract", "]"}]}], "}"}], ",", 
           "\n", "\t\t", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<state\>\"", "]"}], " ", "\[Rule]", 
              " ", "1"}], ",", " ", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<y\>\"", "]"}], " ", "\[Rule]", " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "1"}], "]"}]}], ",", " ", 
             RowBox[{"1", " ", "\[Rule]", " ", 
              RowBox[{"NetPort", "[", 
               RowBox[{"2", ",", " ", "2"}], "]"}]}]}], "}"}]}], "\n", "\t", 
          "]"}], " ", "&"}], " ", "/@", " ", "functions"}]}], ";", " ", 
      RowBox[{"(*", " ", "*)"}], "\n", "\t", 
      RowBox[{"invcores", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"NetFoldOperator", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", "\"\<state\>\""}], 
            "}"}]}], "]"}], " ", "&"}], " ", "/@", " ", "invcores"}]}], ";", 
      "\n", "\t", 
      RowBox[{"invcores", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"NetChain", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ReplicateLayer", "[", "iter", "]"}], ",", " ", "#", ",", 
            " ", 
            RowBox[{"SequenceLastLayer", "[", "]"}]}], "}"}], "]"}], " ", 
         "&"}], " ", "/@", " ", "invcores"}]}], ";", "\n", "\t", 
      RowBox[{"NetJoin", " ", "@@", " ", 
       RowBox[{"Reverse", "[", "invcores", "]"}]}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{3.771245142981569*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"0724b9b1-9dfb-411d-af88-cbc7c47e37bd"],

Cell["Test the function:", "Text",
 CellChangeTimes->{{3.771437124689724*^9, 
  3.77143712718913*^9}},ExpressionUUID->"58cfe75f-8ca9-4be0-9510-\
b968cf64ba5a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"forward", ",", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"out", "=", 
  RowBox[{"forward", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"inverse", "[", "out", "]"}]}], "Input",
 CellChangeTimes->{{3.771436996477579*^9, 3.771437070990171*^9}, {
  3.771437101113844*^9, 3.7714371149460707`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"07716a7a-5d62-4bc2-84ee-ee116573d77d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]]],
                    NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771437052138648*^9, {3.771437093017075*^9, 3.771437115633716*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"fa404b7c-c2a4-4e28-a8da-6b017300997f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.679888904094696`", ",", "0.6743523478507996`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771437052138648*^9, {3.771437093017075*^9, 3.7714371156452417`*^9}},
 CellLabel->"Out[62]=",ExpressionUUID->"9b0ff0e4-7411-4d4e-88d7-a206f948a823"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9735456705093384`", ",", "2.066356658935547`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771437052138648*^9, {3.771437093017075*^9, 3.7714371156468277`*^9}},
 CellLabel->"Out[63]=",ExpressionUUID->"a84b1d36-9f02-439f-b04c-baf36daf75f1"]
}, Open  ]],

Cell["\<\
Upsy. It seems that the inverse is not working on the trained net (lost \
property?)\
\>", "Text",
 CellChangeTimes->{{3.77143713062323*^9, 
  3.77143714393159*^9}},ExpressionUUID->"c0fc05a0-aa31-42bd-8803-\
0307b1ac3efa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"trainednet", ",", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"out", "=", 
  RowBox[{"trainednet", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"inverse", "[", "out", "]"}]}], "Input",
 CellChangeTimes->{3.771437108399467*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"4373a674-e022-4a54-a260-c029c08b2bf7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771437116974663*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"31aa2fd9-a862-4733-ba03-f175d2c01f91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.9873785972595215`", ",", "2.8497238159179688`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7714371169837227`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"b1e7c933-c550-41e5-8287-141bf52fa825"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.16837787628173828`"}], ",", "5.836698055267334`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7714371170190277`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"624053af-7a87-4caa-a980-6f8456cd86d4"]
}, Open  ]],

Cell["", "Text",ExpressionUUID->"44d0bebb-f65a-429d-b6e8-196fca572d5e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"inverse", "=", 
  RowBox[{"invertResidualNetwork", "[", 
   RowBox[{"trainednet", ",", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"randomoutput", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomVariate", "[", 
     RowBox[{"NormalDistribution", "[", "]"}], "]"}], ",", "2"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"randominput", "=", " ", 
  RowBox[{"inverse", "[", "randomoutput", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"trainednet", "[", "randominput", "]"}]}], "Input",
 CellChangeTimes->{{3.7714297278025417`*^9, 3.771429727943944*^9}, {
  3.771430066427925*^9, 3.77143008575733*^9}, {3.771430129222603*^9, 
  3.771430129532975*^9}, {3.771431064348339*^9, 3.7714310705937*^9}, {
  3.77143609822513*^9, 3.771436101229795*^9}, {3.7714363598510933`*^9, 
  3.771436375857225*^9}, {3.7714364744836683`*^9, 3.771436481765485*^9}, {
  3.771436988948409*^9, 3.771437012477241*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"c0bb06c4-55c4-4618-b56d-e2b9eaae2380"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["3/1/1/Weights"], 
                    "Biases" -> NetSharedArray["3/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["2/1/1/Weights"], 
                    "Biases" -> NetSharedArray["2/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[5], 
                    "Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "state" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray["1/1/1/Weights"], 
                    "Biases" -> NetSharedArray["1/1/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "y"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "state"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "state"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"y"}, "$StateNames" -> {"state"}, 
                    "$OutputNames" -> {"Output"}, "$SequenceLength" -> 5], 
                    "Inputs" -> 
                    Association[
                    "y" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "state" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "y"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "state"], {
                    5, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "5", "States", "state"], {
                    8, "state"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "state"]], 
                    "SharedArrays" -> 
                    Association[
                    "1/1/1/Biases" -> NeuralNetworks`Private`DummyArray[{2}], 
                    "1/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "2/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "2/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}], "3/1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{2}], "3/1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{2, 2}]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetFoldOperator", HoldForm], "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.7714371219307537`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"bd897466-3287-430f-8395-eddd8e06be08"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.29943449454658994`", ",", "0.2987623277226067`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.7714371219394827`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"9f004a49-3891-4d66-aa3a-38d8a094ffa6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "124663.7734375`"}], ",", 
   RowBox[{"-", "9.340823`*^6"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.771437121941175*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"943f1439-6ab0-430f-98b2-f7f8dec5312a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "124666.7734375`"}], ",", "1.3377821`*^7"}], "}"}]], "Output",
 CellChangeTimes->{{3.77143007247899*^9, 3.771430086404963*^9}, 
   3.771430130252913*^9, {3.771431066925507*^9, 3.771431070972974*^9}, {
   3.771436090052025*^9, 3.77143610182092*^9}, {3.771436344324538*^9, 
   3.771436376313943*^9}, {3.771436475377493*^9, 3.771436482262125*^9}, 
   3.771436895729803*^9, 3.771437121942955*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"bce96e8c-7c21-4df5-bc4f-8069f121658a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"randomoutput", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomVariate", "[", 
     RowBox[{"NormalDistribution", "[", "]"}], "]"}], ",", "2"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"randominput", "=", " ", 
  RowBox[{
  "trainedsampler", "[", "randomoutput", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"trainednet", "[", "randominput", "]"}]}], "Input",
 CellChangeTimes->{{3.771436104664315*^9, 3.771436135946664*^9}, {
  3.7714361766716337`*^9, 3.771436243230813*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"a46355aa-901e-49cd-8888-60b52269d133"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.6102607893990936`", ",", "0.05062347980250522`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.771436136339469*^9, {3.771436178276185*^9, 3.771436243443613*^9}, {
   3.771436346417479*^9, 3.771436361692191*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"2ce8d821-4e50-466f-99d2-170fb6bd7d2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "35333.38671875`"}], ",", 
   RowBox[{"-", "0.47920942306518555`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.771436136339469*^9, {3.771436178276185*^9, 3.771436243443613*^9}, {
   3.771436346417479*^9, 3.7714363616945667`*^9}},
 CellLabel->"Out[16]=",ExpressionUUID->"933ce6fa-7722-4135-a558-54e87b12452e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.56605225`*^6", ",", "2.746656`*^6"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771436136339469*^9, {3.771436178276185*^9, 3.771436243443613*^9}, {
   3.771436346417479*^9, 3.771436361695958*^9}},
 CellLabel->"Out[17]=",ExpressionUUID->"0a69904d-1310-444c-93a3-14db5971f397"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{947, 988},
WindowMargins->{{-6, Automatic}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 212, 4, 83, "Section",ExpressionUUID->"2224c134-276d-45c7-94ea-4dd0ffa2d06b"],
Cell[795, 28, 285, 7, 43, "Text",ExpressionUUID->"5f016171-0170-4547-bb4e-08190d5bca0a"],
Cell[1083, 37, 15701, 328, 1192, "Code",ExpressionUUID->"b89cb8ce-0460-46d6-a1db-4f84ef9dfa2e"],
Cell[CellGroupData[{
Cell[16809, 369, 481, 12, 35, "Input",ExpressionUUID->"1e6de7ad-254a-4c3c-b7ed-94684a4edc51"],
Cell[17293, 383, 219, 4, 40, "Output",ExpressionUUID->"28c390e9-7244-49fe-a09d-32072e4abd39"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17549, 392, 397, 9, 35, "Input",ExpressionUUID->"969c71a2-1489-4a2a-b824-02a14debfb28"],
Cell[17949, 403, 56695, 1120, 459, "Output",ExpressionUUID->"0a657c81-1754-4d08-9f3b-2b424ed9d930"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74681, 1528, 252, 5, 35, "Input",ExpressionUUID->"ba3de970-fe5b-4e10-9e53-662275b91808"],
Cell[74936, 1535, 49422, 981, 227, "Output",ExpressionUUID->"f13ba7f1-fddc-4be9-a758-fdda973e5f14"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124395, 2521, 404, 12, 35, "Input",ExpressionUUID->"5488646e-fe41-43ac-b774-50552bdd346f"],
Cell[124802, 2535, 664, 21, 75, "Output",ExpressionUUID->"ec2d9c06-dd53-4048-8226-bae14440f7b6"]
}, Open  ]],
Cell[125481, 2559, 395, 12, 35, "Input",ExpressionUUID->"fbda823d-a94d-4242-a5af-84131dbc3598"],
Cell[CellGroupData[{
Cell[125901, 2575, 899, 26, 51, "Input",ExpressionUUID->"e4113b3d-248b-4b3c-88e8-1ac9092771c6"],
Cell[126803, 2603, 247, 3, 40, "Output",ExpressionUUID->"2c117cfc-f977-441b-bce2-7121c9319c29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127087, 2611, 285, 9, 51, "Input",ExpressionUUID->"637aa149-3c29-4812-9898-d1ed67c18af7"],
Cell[127375, 2622, 171, 3, 40, "Output",ExpressionUUID->"a2409a9b-f8a0-470f-a72b-fc45c266ca98"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127583, 2630, 741, 18, 51, "Input",ExpressionUUID->"1a93ad55-46ff-40d3-9766-c3bf3a716e09"],
Cell[128327, 2650, 531, 12, 40, "Output",ExpressionUUID->"106b1944-b5d4-4b9f-bf5a-0448425776ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128895, 2667, 203, 3, 35, "Input",ExpressionUUID->"c117c3cf-5581-460c-825d-2185c918843f"],
Cell[129101, 2672, 181, 2, 40, "Output",ExpressionUUID->"50830322-53b6-4b23-a1d1-40c8f145c730"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129319, 2679, 847, 13, 35, "Input",ExpressionUUID->"dd330ed3-30c2-4003-bb6e-17da2349f726"],
Cell[130169, 2694, 783, 11, 40, "Output",ExpressionUUID->"c3bd4b0d-5efb-4fe2-8b2d-0f01e8bc829a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130989, 2710, 257, 5, 35, "Input",ExpressionUUID->"c8155642-08b5-42cb-b949-93af967b40a6"],
Cell[131249, 2717, 193, 3, 40, "Output",ExpressionUUID->"01d5f802-64ef-4fbe-a2dd-c8c3d7ede0a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131479, 2725, 259, 6, 35, "Input",ExpressionUUID->"109ae3f3-b3ad-45f9-a271-a6093f97fa87"],
Cell[131741, 2733, 519, 11, 29, "Message",ExpressionUUID->"057af982-3423-4fb4-8ce8-874268d333ed"],
Cell[132263, 2746, 517, 11, 29, "Message",ExpressionUUID->"9b9ebf56-612e-4a8a-896b-fbbcb0e66fb8"],
Cell[132783, 2759, 391, 9, 29, "Message",ExpressionUUID->"1e7f44bc-563d-4c3d-8cb1-b6584110dbff"],
Cell[133177, 2770, 159, 3, 40, "Output",ExpressionUUID->"0d3a1358-95a7-4653-9d10-c3597e489996"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133373, 2778, 1141, 18, 35, "Input",ExpressionUUID->"602ff970-bf97-4122-b240-20a2a49dc300"],
Cell[134517, 2798, 1159, 16, 40, "Output",ExpressionUUID->"d4a75e1c-d9a8-41f7-af80-d751eeac6120"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135713, 2819, 260, 5, 35, "Input",ExpressionUUID->"5ad9e61e-10d1-4537-ac3a-7366932982c1"],
Cell[135976, 2826, 237, 4, 40, "Output",ExpressionUUID->"8500b35b-d9f5-4570-9a3a-6a0fc4421478"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136250, 2835, 722, 21, 52, "Input",ExpressionUUID->"678a5b66-2f5d-4ea2-8a3f-44e6a08ed40f"],
Cell[136975, 2858, 287, 5, 40, "Output",ExpressionUUID->"b3f8ed35-36b6-4b2e-bd80-5e0dd6828a31"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137299, 2868, 362, 8, 35, "Input",ExpressionUUID->"bb873a91-5a8c-4efb-bedc-5f642af228fd"],
Cell[137664, 2878, 238, 4, 40, "Output",ExpressionUUID->"ab425a53-6137-4b5b-9264-25050773293c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137951, 2888, 162, 3, 86, "Chapter",ExpressionUUID->"3fe8ba72-de32-4b05-b8b2-e018a3b50e26"],
Cell[CellGroupData[{
Cell[138138, 2895, 904, 19, 35, "Input",ExpressionUUID->"f4f1d128-44cf-4919-b0e4-8bb4ea5347b6"],
Cell[139045, 2916, 366, 5, 40, "Output",ExpressionUUID->"1ac35751-8d4c-449c-97ea-6fe733af53c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139448, 2926, 626, 16, 35, "Input",ExpressionUUID->"4beb1873-01a1-47b3-ac18-9c7842874ee4"],
Cell[140077, 2944, 313, 5, 40, "Output",ExpressionUUID->"b35e2c0e-38cc-4a4c-a007-2466aec67130"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140427, 2954, 581, 17, 35, "Input",ExpressionUUID->"eb36c990-2ef7-42dd-a64a-fed1ee8642f4"],
Cell[141011, 2973, 264, 4, 40, "Output",ExpressionUUID->"d77669ff-b092-4929-919e-33d5063093b4"]
}, Open  ]],
Cell[141290, 2980, 164, 3, 43, "Text",ExpressionUUID->"465678c8-6857-459a-9ce0-27d9fde14f46"],
Cell[141457, 2985, 692, 17, 64, "Code",ExpressionUUID->"f819476e-d330-4fcb-a6ba-517319077e02"],
Cell[CellGroupData[{
Cell[142174, 3006, 662, 15, 55, "Input",ExpressionUUID->"2afa95b1-6ca8-417e-a0be-82a553516c50",
 InitializationCell->True],
Cell[142839, 3023, 47196, 916, 461, "Output",ExpressionUUID->"5a21c03c-fb0e-4144-8a28-a20b6c9c7ddf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190072, 3944, 330, 7, 35, "Input",ExpressionUUID->"3de59a66-f0e3-456a-a71e-6c457307fac7"],
Cell[190405, 3953, 177, 2, 40, "Output",ExpressionUUID->"0b63a532-2daf-4e9a-afed-c594936f5483"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190619, 3960, 569, 11, 35, "Input",ExpressionUUID->"4a79ba22-401e-4713-99ca-7015bde8fc37"],
Cell[191191, 3973, 38520, 797, 279, "Echo",ExpressionUUID->"85c128e3-7dd7-4656-b734-cfb883c0d6e7"],
Cell[229714, 4772, 52378, 1030, 458, "Output",ExpressionUUID->"782e43b8-7cc5-43b4-9f9e-da5cb44c2ee8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282129, 5807, 198, 4, 35, "Input",ExpressionUUID->"8fd1c732-00c9-4093-99a3-6b4f909569d2"],
Cell[282330, 5813, 88254, 1691, 248, "Output",ExpressionUUID->"4e05b8f7-e020-46c9-b2f3-77c6c49b1fbc"]
}, Open  ]],
Cell[370599, 7507, 165, 3, 43, "Text",ExpressionUUID->"1d34827a-9f75-40ee-b8a9-89112a67fb5e"],
Cell[CellGroupData[{
Cell[370789, 7514, 4920, 95, 318, "Code",ExpressionUUID->"e361d64b-737b-4c72-9d05-da08db7f0af4"],
Cell[375712, 7611, 105644, 1950, 226, "Output",ExpressionUUID->"0823fb3b-8c11-453e-b062-c80179a4b4aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481393, 9566, 188, 3, 35, "Input",ExpressionUUID->"b1a38df4-5e17-4a05-92d9-ca71b3b7044c"],
Cell[481584, 9571, 183, 3, 40, "Output",ExpressionUUID->"b30892b8-2e92-4433-815d-11edb03d4882"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481804, 9579, 173, 3, 56, "Subsubsection",ExpressionUUID->"8a6ce404-e178-4d6d-9530-5fc4467849fd"],
Cell[481980, 9584, 658, 18, 35, "Input",ExpressionUUID->"50f31a85-4653-4363-8fb2-59de99da1373"],
Cell[482641, 9604, 284, 6, 35, "Input",ExpressionUUID->"427b5d98-8fa7-4a60-8853-1f24efbc5f82"],
Cell[CellGroupData[{
Cell[482950, 9614, 212, 4, 35, "Input",ExpressionUUID->"0275baca-da5b-44c8-b34d-582acff95349"],
Cell[483165, 9620, 22523, 386, 300, "Output",ExpressionUUID->"8b8543a6-116e-4426-9440-10985ea3f38d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[505725, 10011, 212, 3, 35, "Input",ExpressionUUID->"b00d21c9-f5ac-4028-bbcc-2836ba9122e6"],
Cell[505940, 10016, 100208, 1662, 300, "Output",ExpressionUUID->"73d27224-8d52-4fd6-8f29-0de3e791d7ce"]
}, Open  ]],
Cell[606163, 11681, 237, 6, 43, "Text",ExpressionUUID->"63d9e6f3-0a69-42aa-917b-bbb70c0ffbd9"],
Cell[CellGroupData[{
Cell[606425, 11691, 1759, 33, 84, "Input",ExpressionUUID->"7979b8cc-375e-4c61-b5b3-4937a8b061e9"],
Cell[608187, 11726, 15233, 320, 504, "Output",ExpressionUUID->"b1eea28a-543e-4085-a63e-d256f96219c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[623457, 12051, 348, 8, 35, "Input",ExpressionUUID->"a4820af0-53d6-44b7-a23f-1f2bad21c625"],
Cell[623808, 12061, 77238, 1374, 127, "Output",ExpressionUUID->"ea81b3db-03a7-4497-be68-dca30cd27ca3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[701083, 13440, 252, 6, 35, "Input",ExpressionUUID->"e8b63814-61ac-4f0f-9dd0-95770e98bdf0"],
Cell[701338, 13448, 3777, 78, 300, "Output",ExpressionUUID->"e0c696e6-0098-4ea9-b389-7de806c58496"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[705164, 13532, 152, 3, 83, "Section",ExpressionUUID->"7b035ac0-689c-4df8-acd4-8f627bfb233d"],
Cell[CellGroupData[{
Cell[705341, 13539, 320, 6, 39, "Item",ExpressionUUID->"cd1b41ab-eda9-42da-aac6-26a113e44c18"],
Cell[705664, 13547, 332, 5, 39, "Item",ExpressionUUID->"66105fd6-9462-4fd8-8e23-d81c09a0ee41"],
Cell[705999, 13554, 336, 5, 39, "Item",ExpressionUUID->"c6bc0779-c7f3-4c48-bfa3-f0cdeaaca3ef"],
Cell[706338, 13561, 354, 5, 39, "Item",ExpressionUUID->"2289084f-7c83-479a-af96-dedb881e9daa"],
Cell[706695, 13568, 474, 9, 65, "Item",ExpressionUUID->"f1456225-6cde-4d92-ab28-cf43d74d8155"],
Cell[707172, 13579, 334, 5, 39, "Item",ExpressionUUID->"61973021-92b7-48c7-bc9c-116e8dc39b31"],
Cell[707509, 13586, 531, 9, 65, "Item",ExpressionUUID->"e6e00c02-fbd2-4e45-8906-13379f34499e"],
Cell[708043, 13597, 423, 8, 39, "Item",ExpressionUUID->"42f2e06e-1af6-439c-b90c-5f07658053a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[708503, 13610, 168, 3, 56, "Subsubsection",ExpressionUUID->"583c0676-a2ca-4b8d-9b39-25a02a72f6f6"],
Cell[CellGroupData[{
Cell[708696, 13617, 206, 3, 39, "Item",ExpressionUUID->"d36d8751-1c1a-4663-b027-febafaded811"],
Cell[708905, 13622, 258, 6, 39, "Item",ExpressionUUID->"067b1bb1-60d3-4421-9567-5ce528287d14"],
Cell[709166, 13630, 244, 4, 39, "Item",ExpressionUUID->"b293b62a-5805-46e4-b778-7582c435649f"],
Cell[709413, 13636, 320, 5, 39, "Item",ExpressionUUID->"9341c339-8754-4bb2-87f0-07fa4f254039"],
Cell[709736, 13643, 326, 5, 39, "Item",ExpressionUUID->"0d3b85a2-0408-4ccd-846a-0bdcb78fef09"],
Cell[710065, 13650, 460, 9, 39, "Item",ExpressionUUID->"3a73fe75-5d24-48d1-8055-218ade225902"],
Cell[710528, 13661, 404, 6, 39, "Item",ExpressionUUID->"5a1d1919-c4ae-4f4c-8183-1c0d2fec176f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[710969, 13672, 280, 5, 35, "Input",ExpressionUUID->"24107cca-933b-4b22-a908-ef3700f170db"],
Cell[711252, 13679, 504760, 9196, 304, "Output",ExpressionUUID->"26e129fa-bd42-4c91-be96-36720b5f4b93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1216049, 22880, 389, 7, 35, "Input",ExpressionUUID->"5e28a254-006a-45d8-b4b6-1766d637525a"],
Cell[1216441, 22889, 251937, 4567, 689, "Output",ExpressionUUID->"e4e26e27-987d-4f6e-8aad-6e749cf11a28"]
}, Open  ]],
Cell[1468393, 27459, 165, 3, 43, "Text",ExpressionUUID->"8eb64868-d6bc-4616-b77b-18041b0e7f98"],
Cell[CellGroupData[{
Cell[1468583, 27466, 163, 2, 35, "Input",ExpressionUUID->"855264ec-008d-46f3-9db5-7001ed9a52ce"],
Cell[1468749, 27470, 100854, 1832, 105, "Output",ExpressionUUID->"aeea9422-6078-4997-b8e2-66190a26b8b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1569640, 29307, 447, 10, 35, "Input",ExpressionUUID->"268acc48-7cd7-4976-90c5-46f4a585f5d8"],
Cell[1570090, 29319, 45898, 883, 105, "Output",ExpressionUUID->"ea96bad9-ddec-492e-b8ab-1c702912b7ae"]
}, Open  ]],
Cell[1616003, 30205, 215, 5, 43, "Text",ExpressionUUID->"3007f3f6-8942-4229-8d5f-b7cb0d2fce72"],
Cell[CellGroupData[{
Cell[1616243, 30214, 308, 6, 35, "Input",ExpressionUUID->"6e728e37-97ca-47ba-990a-830f40f54bef"],
Cell[1616554, 30222, 349, 6, 40, "Output",ExpressionUUID->"5495cdb7-58c1-4303-9cd6-e15c69d67e7d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1616964, 30235, 276, 4, 82, "Section",ExpressionUUID->"c5435377-85e9-4273-b242-9db3377b8aec"],
Cell[1617243, 30241, 282, 6, 71, "Text",ExpressionUUID->"a467321e-7eed-40ec-a6e5-b0d1b11c7c86"],
Cell[1617528, 30249, 2605, 64, 297, "Code",ExpressionUUID->"0724b9b1-9dfb-411d-af88-cbc7c47e37bd"],
Cell[1620136, 30315, 159, 3, 43, "Text",ExpressionUUID->"58cfe75f-8ca9-4be0-9510-b968cf64ba5a"],
Cell[CellGroupData[{
Cell[1620320, 30322, 529, 11, 85, "Input",ExpressionUUID->"07716a7a-5d62-4bc2-84ee-ee116573d77d"],
Cell[1620852, 30335, 60746, 1171, 105, "Output",ExpressionUUID->"fa404b7c-c2a4-4e28-a8da-6b017300997f"],
Cell[1681601, 31508, 280, 5, 40, "Output",ExpressionUUID->"9b0ff0e4-7411-4d4e-88d7-a206f948a823"],
Cell[1681884, 31515, 280, 5, 40, "Output",ExpressionUUID->"a84b1d36-9f02-439f-b04c-baf36daf75f1"]
}, Open  ]],
Cell[1682179, 31523, 232, 6, 43, "Text",ExpressionUUID->"c0fc05a0-aa31-42bd-8803-0307b1ac3efa"],
Cell[CellGroupData[{
Cell[1682436, 31533, 460, 10, 85, "Input",ExpressionUUID->"4373a674-e022-4a54-a260-c029c08b2bf7"],
Cell[1682899, 31545, 61454, 1182, 105, "Output",ExpressionUUID->"31aa2fd9-a862-4733-ba03-f175d2c01f91"],
Cell[1744356, 32729, 235, 5, 40, "Output",ExpressionUUID->"b1e7c933-c550-41e5-8287-141bf52fa825"],
Cell[1744594, 32736, 254, 6, 40, "Output",ExpressionUUID->"624053af-7a87-4caa-a980-6f8456cd86d4"]
}, Open  ]],
Cell[1744863, 32745, 71, 0, 43, "Text",ExpressionUUID->"44d0bebb-f65a-429d-b6e8-196fca572d5e"],
Cell[CellGroupData[{
Cell[1744959, 32749, 1012, 19, 109, "Input",ExpressionUUID->"c0bb06c4-55c4-4618-b56d-e2b9eaae2380"],
Cell[1745974, 32770, 61744, 1186, 105, "Output",ExpressionUUID->"bd897466-3287-430f-8395-eddd8e06be08"],
Cell[1807721, 33958, 524, 9, 40, "Output",ExpressionUUID->"9f004a49-3891-4d66-aa3a-38d8a094ffa6"],
Cell[1808248, 33969, 545, 10, 45, "Output",ExpressionUUID->"943f1439-6ab0-430f-98b2-f7f8dec5312a"],
Cell[1808796, 33981, 527, 9, 45, "Output",ExpressionUUID->"bce96e8c-7c21-4df5-bc4f-8069f121658a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1809360, 33995, 597, 13, 85, "Input",ExpressionUUID->"a46355aa-901e-49cd-8888-60b52269d133"],
Cell[1809960, 34010, 333, 7, 40, "Output",ExpressionUUID->"2ce8d821-4e50-466f-99d2-170fb6bd7d2b"],
Cell[1810296, 34019, 366, 8, 40, "Output",ExpressionUUID->"933ce6fa-7722-4135-a558-54e87b12452e"],
Cell[1810665, 34029, 317, 6, 45, "Output",ExpressionUUID->"0a69904d-1310-444c-93a3-14db5971f397"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

